/*! For license information please see videosdk.js.LICENSE.txt */
!(function (e, t) {
  if ("object" == typeof exports && "object" == typeof module)
    module.exports = t();
  else if ("function" == typeof define && define.amd) define([], t);
  else {
    var r = t();
    for (var a in r) ("object" == typeof exports ? exports : e)[a] = r[a];
  }
})(self, () =>
  (() => {
    var e = {
        5414: (e) => {
          self,
            (e.exports = (() => {
              var e = {
                  43: function (e, t, r) {
                    var a, n;
                    !(function () {
                      "use strict";
                      (a = function () {
                        var e = function () {},
                          t = "undefined",
                          r =
                            typeof window !== t &&
                            typeof window.navigator !== t &&
                            /Trident\/|MSIE /.test(window.navigator.userAgent),
                          a = ["trace", "debug", "info", "warn", "error"];
                        function n(e, t) {
                          var r = e[t];
                          if ("function" == typeof r.bind) return r.bind(e);
                          try {
                            return Function.prototype.bind.call(r, e);
                          } catch (t) {
                            return function () {
                              return Function.prototype.apply.apply(r, [
                                e,
                                arguments,
                              ]);
                            };
                          }
                        }
                        function s() {
                          console.log &&
                            (console.log.apply
                              ? console.log.apply(console, arguments)
                              : Function.prototype.apply.apply(console.log, [
                                  console,
                                  arguments,
                                ])),
                            console.trace && console.trace();
                        }
                        function i(t, r) {
                          for (var n = 0; n < a.length; n++) {
                            var s = a[n];
                            this[s] = n < t ? e : this.methodFactory(s, t, r);
                          }
                          this.log = this.debug;
                        }
                        function o(e, r, a) {
                          return function () {
                            typeof console !== t &&
                              (i.call(this, r, a),
                              this[e].apply(this, arguments));
                          };
                        }
                        function c(a, i, c) {
                          return (
                            (function (a) {
                              return (
                                "debug" === a && (a = "log"),
                                typeof console !== t &&
                                  ("trace" === a && r
                                    ? s
                                    : void 0 !== console[a]
                                    ? n(console, a)
                                    : void 0 !== console.log
                                    ? n(console, "log")
                                    : e)
                              );
                            })(a) || o.apply(this, arguments)
                          );
                        }
                        function d(e, r, n) {
                          var s,
                            o = this,
                            d = "loglevel";
                          function l() {
                            var e;
                            if (typeof window !== t && d) {
                              try {
                                e = window.localStorage[d];
                              } catch (e) {}
                              if (typeof e === t)
                                try {
                                  var r = window.document.cookie,
                                    a = r.indexOf(encodeURIComponent(d) + "=");
                                  -1 !== a &&
                                    (e = /^([^;]+)/.exec(r.slice(a))[1]);
                                } catch (e) {}
                              return void 0 === o.levels[e] && (e = void 0), e;
                            }
                          }
                          "string" == typeof e
                            ? (d += ":" + e)
                            : "symbol" == typeof e && (d = void 0),
                            (o.name = e),
                            (o.levels = {
                              TRACE: 0,
                              DEBUG: 1,
                              INFO: 2,
                              WARN: 3,
                              ERROR: 4,
                              SILENT: 5,
                            }),
                            (o.methodFactory = n || c),
                            (o.getLevel = function () {
                              return s;
                            }),
                            (o.setLevel = function (r, n) {
                              if (
                                ("string" == typeof r &&
                                  void 0 !== o.levels[r.toUpperCase()] &&
                                  (r = o.levels[r.toUpperCase()]),
                                !(
                                  "number" == typeof r &&
                                  r >= 0 &&
                                  r <= o.levels.SILENT
                                ))
                              )
                                throw (
                                  "log.setLevel() called with invalid level: " +
                                  r
                                );
                              if (
                                ((s = r),
                                !1 !== n &&
                                  (function (e) {
                                    var r = (a[e] || "silent").toUpperCase();
                                    if (typeof window !== t && d) {
                                      try {
                                        return void (window.localStorage[d] =
                                          r);
                                      } catch (e) {}
                                      try {
                                        window.document.cookie =
                                          encodeURIComponent(d) + "=" + r + ";";
                                      } catch (e) {}
                                    }
                                  })(r),
                                i.call(o, r, e),
                                typeof console === t && r < o.levels.SILENT)
                              )
                                return "No console available for logging";
                            }),
                            (o.setDefaultLevel = function (e) {
                              l() || o.setLevel(e, !1);
                            }),
                            (o.enableAll = function (e) {
                              o.setLevel(o.levels.TRACE, e);
                            }),
                            (o.disableAll = function (e) {
                              o.setLevel(o.levels.SILENT, e);
                            });
                          var p = l();
                          null == p && (p = null == r ? "WARN" : r),
                            o.setLevel(p, !1);
                        }
                        var l = new d(),
                          p = {};
                        l.getLogger = function (e) {
                          if (
                            ("symbol" != typeof e && "string" != typeof e) ||
                            "" === e
                          )
                            throw new TypeError(
                              "You must supply a name when creating a logger."
                            );
                          var t = p[e];
                          return (
                            t ||
                              (t = p[e] =
                                new d(e, l.getLevel(), l.methodFactory)),
                            t
                          );
                        };
                        var u = typeof window !== t ? window.log : void 0;
                        return (
                          (l.noConflict = function () {
                            return (
                              typeof window !== t &&
                                window.log === l &&
                                (window.log = u),
                              l
                            );
                          }),
                          (l.getLoggers = function () {
                            return p;
                          }),
                          (l.default = l),
                          l
                        );
                      }),
                        void 0 === (n = a.call(t, r, t, e)) || (e.exports = n);
                    })();
                  },
                },
                t = {};
              function r(a) {
                var n = t[a];
                if (void 0 !== n) return n.exports;
                var s = (t[a] = { exports: {} });
                return e[a].call(s.exports, s, s.exports, r), s.exports;
              }
              (r.d = (e, t) => {
                for (var a in t)
                  r.o(t, a) &&
                    !r.o(e, a) &&
                    Object.defineProperty(e, a, { enumerable: !0, get: t[a] });
              }),
                (r.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
                (r.r = (e) => {
                  "undefined" != typeof Symbol &&
                    Symbol.toStringTag &&
                    Object.defineProperty(e, Symbol.toStringTag, {
                      value: "Module",
                    }),
                    Object.defineProperty(e, "__esModule", { value: !0 });
                });
              var a = {};
              return (
                (() => {
                  "use strict";
                  r.r(a), r.d(a, { VideoSDKMetrics: () => fe });
                  const e = "inbound",
                    t = "outbound",
                    n = {
                      codec_id_in: "",
                      codec_in: {
                        mime_type: null,
                        clock_rate: null,
                        sdp_fmtp_line: null,
                      },
                      delta_jitter_ms_in: 0,
                      delta_rtt_ms_out: null,
                      percent_packets_lost_in: 0,
                      delta_packets_in: 0,
                      delta_packets_lost_in: 0,
                      total_packets_in: 0,
                      total_packets_lost_in: 0,
                      total_KBytes_in: 0,
                      delta_KBytes_in: 0,
                      delta_kbs_in: 0,
                      timestamp_in: null,
                      ssrc: "",
                      total_concealment_events: 0,
                      delta_concealment_events: 0,
                      total_inserted_samples_for_decelaration: 0,
                      delta_inserted_samples_for_decelaration: 0,
                      total_removed_samples_for_accelaration: 0,
                      delta_removed_samples_for_accelaration: 0,
                      direction: e,
                    },
                    s = {
                      codec_id_out: "",
                      codec_out: {
                        mime_type: null,
                        clock_rate: null,
                        sdp_fmtp_line: null,
                      },
                      delta_jitter_ms_out: 0,
                      delta_rtt_ms_out: null,
                      percent_packets_lost_out: 0,
                      delta_packets_out: 0,
                      delta_packets_lost_out: 0,
                      total_packets_out: 0,
                      total_packets_lost_out: 0,
                      total_KBytes_out: 0,
                      delta_KBytes_out: 0,
                      delta_kbs_out: 0,
                      timestamp_out: null,
                      ssrc: "",
                      direction: t,
                    },
                    i = {
                      codec_id_in: "",
                      size_in: { width: null, height: null, framerate: null },
                      codec_in: { mime_type: null, clock_rate: null },
                      delta_jitter_ms_in: 0,
                      percent_packets_lost_in: 0,
                      delta_packets_in: 0,
                      delta_packets_lost_in: 0,
                      total_packets_in: 0,
                      total_packets_lost_in: 0,
                      total_KBytes_in: 0,
                      delta_KBytes_in: 0,
                      delta_kbs_in: 0,
                      ssrc: "",
                      direction: e,
                    },
                    o = {
                      codec_id_out: "",
                      size_out: { width: null, height: null, framerate: null },
                      codec_out: { mime_type: null, clock_rate: null },
                      delta_jitter_ms_out: 0,
                      delta_rtt_ms_out: null,
                      percent_packets_lost_out: 0,
                      delta_packets_out: 0,
                      delta_packets_lost_out: 0,
                      total_packets_out: 0,
                      total_packets_lost_out: 0,
                      total_KBytes_out: 0,
                      delta_KBytes_out: 0,
                      delta_kbs_out: 0,
                      limitation_out: {
                        reason: null,
                        durations: null,
                        resolutionChanges: 0,
                      },
                      timestamp_out: null,
                      ssrc: "",
                      direction: t,
                    },
                    c = "inbound-rtp",
                    d = "bytesReceived",
                    l = "bytesSent",
                    p = "clockRate",
                    u = "codecId",
                    h = "currentRoundTripTime",
                    m = "roundTripTime",
                    f = "fractionLost",
                    g = "frameHeight",
                    _ = "frameWidth",
                    v = "qualityLimitationReason",
                    b = "qualityLimitationDurations",
                    y = "qualityLimitationResolutionChanges",
                    w = "id",
                    S = "jitter",
                    R = "kind",
                    E = "mimeType",
                    k = "packetsLost",
                    T = "packetsReceived",
                    C = "packetsSent",
                    P = "responsesReceived",
                    O = "ssrc",
                    D = "selected",
                    x = "timestamp",
                    I = "totalRoundTripTime",
                    M = "roundTripTimeMeasurements",
                    A = "type",
                    L = "framesDecoded",
                    N = "framesEncoded",
                    j = "totalDecodeTime",
                    B = "totalEncodeTime",
                    F = "pliCount",
                    U = "nackCount",
                    W = "trackId",
                    q = "trackIdentifier",
                    H = "mediaSourceId",
                    V = "audio",
                    G = "video",
                    z = {
                      0: "ETHERNET",
                      2: "CELLULAR_5G",
                      3: "WIFI",
                      5: "CELLULAR_4G",
                      10: "CELLULAR",
                    },
                    $ = "audio",
                    K = "video",
                    J = "network",
                    Q = "data";
                  var Y = r(43);
                  const X = () => `${new Date().toISOString()} | metrics`,
                    Z = (e, t, r) => `${e} | ${t} | ${r}`;
                  Y.setDefaultLevel(Y.levels.TRACE);
                  const ee = (e, t, r) => {
                      r ? Y.debug(Z(X(), e, t), r) : Y.debug(Z(X(), e, t));
                    },
                    te = (e, t) => {
                      Y.warn(Z(X(), e, t));
                    },
                    re = (e, t) => {
                      Y.error(Z(X(), e, t));
                    },
                    ae = "extractor   ",
                    ne = (t, r, a) => {
                      if (!r) return null;
                      const c = {};
                      let d = r[V][t];
                      d || (d = a === e ? { ...n } : { ...s }), (c[V] = d);
                      let l = r[G][t];
                      return (
                        l || (l = a === e ? { ...i } : { ...o }), (c[G] = l), c
                      );
                    },
                    se = (e, t, r, a) => {
                      let n = !1;
                      const s = a[t].total_rtt_ms_out,
                        i = a[t].total_rtt_measure_out,
                        o = r ? r[t].total_rtt_ms_out : 0,
                        c = r ? r[t].total_rtt_measure_out : 0,
                        d = { rtt: null, totalRTT: s, totalRTTMeasurements: i };
                      if (e[x] === a[t].timestamp_out) return d;
                      if (!Object.prototype.hasOwnProperty.call(e, m)) return d;
                      if (
                        Object.prototype.hasOwnProperty.call(e, M) &&
                        ((n = !0), 0 === Number(e[M]) || Number(e[M]) - c === i)
                      )
                        return d;
                      const l = Number(1e3) * Number(e[m]);
                      let p = s + l,
                        u = i + 1;
                      return (
                        n &&
                          ((p = Number(1e3) * Number(e[I]) - o),
                          (u = Number(e[M]) - c)),
                        { rtt: l, totalRTT: p, totalRTTMeasurements: u }
                      );
                    },
                    ie = (e, t, r) =>
                      e[x] === r[t].timestamp_out
                        ? null
                        : Object.prototype.hasOwnProperty.call(e, S)
                        ? Number(1e3) * (Number(e[S]) || 0)
                        : null,
                    oe = (e, t, r, a) => {
                      if (
                        !Object.prototype.hasOwnProperty.call(e, C) ||
                        !Object.prototype.hasOwnProperty.call(e, l)
                      )
                        return {
                          packetsSent: r[t].total_packets_out,
                          packetsLost: r[t].total_packets_lost_out,
                          bytesSent: r[t].total_KBytes_out,
                        };
                      const n =
                          Number(e[C]) || 0 - (a ? a[t].total_packets_out : 0),
                        s = n - r[t].total_packets_out,
                        i =
                          Number(e[l]) / 1024 - (a ? a[t].total_KBytes_out : 0),
                        o = i - r[t].total_KBytes_out,
                        c = e[x] || Date.now(),
                        d = a ? a.timestamp : null;
                      let p = r.timestamp;
                      !p && d && (p = d);
                      const u = p ? c - p : 0;
                      return {
                        packetsSent: n,
                        deltaPacketsSent: s,
                        KBytesSent: i,
                        deltaKBytesSent: o,
                        kbsSent: u > 0 ? ((0.008 * o * 1024) / u) * 1e3 : 0,
                      };
                    },
                    ce = (e, t, r, a) => {
                      let n = r[t].total_packets_lost_out,
                        s = 0,
                        i = 0;
                      return (
                        Object.prototype.hasOwnProperty.call(e, k) &&
                          ((n =
                            Number(e[k]) ||
                            0 - (a ? a[t].total_packets_lost_out : 0)),
                          (s = n - r[t].total_packets_lost_out)),
                        Object.prototype.hasOwnProperty.call(e, f) &&
                          (i = Number(100 * e[f])),
                        { packetsLost: n, deltaPacketsLost: s, fractionLost: i }
                      );
                    },
                    de = (e, t, r, a) => {
                      if (
                        !Object.prototype.hasOwnProperty.call(e, T) ||
                        !Object.prototype.hasOwnProperty.call(e, k) ||
                        !Object.prototype.hasOwnProperty.call(e, d)
                      )
                        return {
                          percent_packets_lost: r[t].percent_packets_lost_in,
                          packetsReceived: r[t].total_packets_in,
                          packetsLost: r[t].total_packets_lost_in,
                          bytesReceived: r[t].total_KBytes_in,
                        };
                      const n =
                          (Number(e[T]) || 0) - (a ? a[t].total_packets_in : 0),
                        s =
                          (Number(e[k]) || 0) -
                          (a ? a[t].total_packets_lost_in : 0),
                        i = s - r[t].total_packets_lost_in,
                        o = n - r[t].total_packets_in,
                        c =
                          n !== r[t].total_packets_in ? (100 * i) / (i + o) : 0,
                        l =
                          Number(e[d]) / 1024 - (a ? a[t].total_KBytes_in : 0),
                        p = l - r[t].total_KBytes_in,
                        u = e[x] || Date.now(),
                        h = a ? a.timestamp : null;
                      let m = r.timestamp;
                      !m && h && (m = h);
                      const f = m ? u - m : 0;
                      return {
                        percentPacketsLost: c,
                        packetsReceived: n,
                        deltaPacketsReceived: o,
                        packetsLost: s,
                        deltaPacketsLost: i,
                        KBytesReceived: l,
                        deltaKBytesReceived: p,
                        kbsReceived: f > 0 ? ((0.008 * p * 1024) / f) * 1e3 : 0,
                      };
                    },
                    le = (e) =>
                      "relay" !== e.candidateType ? "" : e.relayProtocol || "",
                    pe = (e) =>
                      Object.prototype.hasOwnProperty.call(e, g) &&
                      Object.prototype.hasOwnProperty.call(e, _)
                        ? {
                            width: e[_] || null,
                            height: e[g] || null,
                            framerate: e.framesPerSecond,
                          }
                        : { width: null, height: null, framerate: null };
                  class ue {
                    constructor(e, t) {
                      (this._callbacks = { onStatsCollected: null }),
                        (this._id = `collector-${t}`),
                        (this._moduleName = this._id),
                        (this._probeId = t),
                        (this._config = e),
                        (this._state = "idle"),
                        (this._statsReports = []);
                    }
                    registerCallback(e, t, r) {
                      e in this._callbacks
                        ? ((this._callbacks[e] = { callback: t, context: r }),
                          ee(this._moduleName, `registered callback '${e}'`))
                        : re(
                            this._moduleName,
                            `can't register callback for '${e}' - not found`
                          );
                    }
                    unregisterCallback(e) {
                      e in this._callbacks
                        ? ((this._callbacks[e] = null),
                          delete this._callbacks[e],
                          ee(this._moduleName, `unregistered callback '${e}'`))
                        : re(
                            this._moduleName,
                            `can't unregister callback for '${e}' - not found`
                          );
                    }
                    analyze(r, a) {
                      const m = ((e) => {
                        const t = {
                          name: "",
                          meetingId: "",
                          peerId: "",
                          timestamp: null,
                          count: 0,
                          audio: {},
                          video: {},
                          network: { infrastructure: 3 },
                          data: {
                            delta_kbs_bandwidth_in: 0,
                            delta_kbs_bandwidth_out: 0,
                            delta_rtt_connectivity_ms: null,
                            total_rtt_connectivity_ms: 0,
                          },
                        };
                        if (e) {
                          const t = {
                            ...e,
                            audio: {},
                            video: {},
                            data: { ...e.data },
                            network: { ...e.network },
                          };
                          return (
                            Object.keys(e.audio).forEach((r) => {
                              t.audio[r] = { ...e.audio[r] };
                            }),
                            Object.keys(e.video).forEach((r) => {
                              t.video[r] = { ...e.video[r] };
                            }),
                            t
                          );
                        }
                        return {
                          ...t,
                          audio: {},
                          video: {},
                          data: { ...t.data },
                          network: { ...t.network },
                        };
                      })(a);
                      (m.name = this._config.name),
                        (m.meetingId = this._config.meetingId),
                        (m.peerId = this._config.peerId),
                        (m.count = a ? a.count + 1 : 1);
                      let f = null;
                      return (
                        r.forEach((r) => {
                          !f && r.timestamp && (f = r.timestamp),
                            ((r, a, n, s) => {
                              if (!r) return [];
                              switch (r[A]) {
                                case "candidate-pair":
                                  let i = !1;
                                  if (
                                    (r.nominated &&
                                      "succeeded" === r.state &&
                                      ((i = !0),
                                      ee(
                                        ae,
                                        `analyze() - got stats ${r[A]} for ${n}`,
                                        r
                                      ),
                                      D in r && !r[D] && (i = !1)),
                                    i)
                                  ) {
                                    r.localCandidateId, r.remoteCandidateId;
                                    const e = ((e, t, r) => {
                                        const a =
                                            (e[d] || 0) / 1024 -
                                            (r ? r.data.total_KBytes_in : 0),
                                          n =
                                            (e[l] || 0) / 1024 -
                                            (r ? r.data.total_KBytes_out : 0),
                                          s = e[x] || Date.now(),
                                          i = a - t.data.total_KBytes_in,
                                          o = n - t.data.total_KBytes_out,
                                          c = r ? r.timestamp : null;
                                        let p = t.timestamp;
                                        !p && c && (p = c);
                                        const u = p ? s - p : 0;
                                        return {
                                          total_KBytes_received: a,
                                          total_KBytes_sent: n,
                                          delta_KBytes_received: i,
                                          delta_KBytes_sent: o,
                                          kbs_speed_received:
                                            u > 0
                                              ? ((0.008 * i * 1024) / u) * 1e3
                                              : 0,
                                          kbs_speed_sent:
                                            u > 0
                                              ? ((0.008 * o * 1024) / u) * 1e3
                                              : 0,
                                        };
                                      })(r, a, s),
                                      t =
                                        (((e) => {
                                          e.availableIncomingBitrate,
                                            e.availableOutgoingBitrate;
                                        })(r),
                                        ((e, t, r, a) => {
                                          if (
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              h
                                            )
                                          )
                                            return {
                                              rtt: null,
                                              totalRTT:
                                                a[t].total_rtt_connectivity_ms,
                                              totalRTTMeasurements:
                                                a[t]
                                                  .total_rtt_connectivity_measure,
                                            };
                                          const n = Number(1e3) * Number(e[h]);
                                          let s =
                                              a[t].total_rtt_connectivity_ms +
                                              n,
                                            i =
                                              a[t]
                                                .total_rtt_connectivity_measure +
                                              1;
                                          return (
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              I
                                            ) &&
                                              (s =
                                                Number(1e3) * Number(e[I]) -
                                                (r
                                                  ? r[t]
                                                      .total_rtt_connectivity_ms
                                                  : 0)),
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              P
                                            ) &&
                                              (i =
                                                Number(e[P]) -
                                                (r
                                                  ? r[t]
                                                      .total_rtt_connectivity_measure
                                                  : 0)),
                                            {
                                              rtt: n,
                                              totalRTT: s,
                                              totalRTTMeasurements: i,
                                            }
                                          );
                                        })(r, "data", s, a));
                                    return [
                                      {
                                        type: Q,
                                        value: {
                                          total_KBytes_in:
                                            e.total_KBytes_received,
                                        },
                                      },
                                      {
                                        type: Q,
                                        value: {
                                          total_KBytes_out: e.total_KBytes_sent,
                                        },
                                      },
                                      {
                                        type: Q,
                                        value: {
                                          delta_KBytes_in:
                                            e.delta_KBytes_received,
                                        },
                                      },
                                      {
                                        type: Q,
                                        value: {
                                          delta_KBytes_out: e.delta_KBytes_sent,
                                        },
                                      },
                                      {
                                        type: Q,
                                        value: {
                                          delta_kbs_in: e.kbs_speed_received,
                                        },
                                      },
                                      {
                                        type: Q,
                                        value: {
                                          delta_kbs_out: e.kbs_speed_sent,
                                        },
                                      },
                                      {
                                        type: Q,
                                        value: {
                                          delta_rtt_connectivity_ms: t.rtt,
                                        },
                                      },
                                    ];
                                  }
                                  break;
                                case "local-candidate":
                                  if (r[w] === a.network.local_candidate_id)
                                    return [
                                      {
                                        type: J,
                                        value: {
                                          infrastructure: r.networkType,
                                        },
                                      },
                                      {
                                        type: J,
                                        value: {
                                          local_candidate_protocol:
                                            r.protocol || "",
                                        },
                                      },
                                      {
                                        type: J,
                                        value: {
                                          local_candidate_relay_protocol: le(r),
                                        },
                                      },
                                    ];
                                  break;
                                case c: {
                                  ee(
                                    ae,
                                    `analyze() - got stats ${r[A]} for ${n}`,
                                    r
                                  );
                                  const t = r[O],
                                    i = ne(t, a, e);
                                  i && (i.timestamp = a.timestamp);
                                  const o = ne(t, s, e);
                                  if (
                                    (o && (o.timestamp = s.timestamp),
                                    r[R] === V)
                                  ) {
                                    const e = de(r, V, i, o),
                                      a = ie(r, V, i),
                                      n = r[u] || "",
                                      s = ((e, t, r) => {
                                        const a =
                                            Number(e.concealmentEvents) || 0,
                                          n =
                                            a -
                                            (r[t].total_concealment_events ||
                                              0),
                                          s =
                                            Number(
                                              e.insertedSamplesForDeceleration
                                            ) || 0,
                                          i =
                                            s -
                                            (r[t]
                                              .total_inserted_samples_for_decelaration ||
                                              0),
                                          o =
                                            Number(
                                              e.removedSamplesForAcceleration
                                            ) || 0;
                                        return {
                                          totalConcealmentEvents: a,
                                          deltaConcealmentEvents: n,
                                          totalInsertedSamplesForDecelaration:
                                            s,
                                          deltaInsertedSamplesForDecelaration:
                                            i,
                                          totalRemovedSamplesForAccelaration: o,
                                          deltaRemovedSampleForAccelaration:
                                            o -
                                            (r[t]
                                              .total_removed_samples_for_accelaration ||
                                              0),
                                        };
                                      })(r, V, i);
                                    return [
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: { codec_id_in: n },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          total_packets_in: e.packetsReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          delta_packets_in:
                                            e.deltaPacketsReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          total_packets_lost_in: e.packetsLost,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          delta_packets_lost_in:
                                            e.deltaPacketsLost,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          percent_packets_lost_in:
                                            e.percentPacketsLost,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          total_KBytes_in: e.KBytesReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          delta_KBytes_in:
                                            e.deltaKBytesReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: { delta_kbs_in: e.kbsReceived },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: { delta_jitter_ms_in: a },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          total_concealment_events:
                                            s.totalConcealmentEvents,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          delta_concealment_events:
                                            s.deltaConcealmentEvents,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          total_inserted_samples_for_decelaration:
                                            s.totalInsertedSamplesForDecelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          delta_inserted_samples_for_decelaration:
                                            s.deltaInsertedSamplesForDecelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          total_removed_samples_for_accelaration:
                                            s.totalRemovedSamplesForAccelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: {
                                          delta_removed_samples_for_accelaration:
                                            s.deltaRemovedSampleForAccelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: { track_in: r[W] },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: { track_id_in: r[q] },
                                      },
                                      {
                                        ssrc: t,
                                        type: $,
                                        value: { media_source_id: r[H] },
                                      },
                                    ];
                                  }
                                  if (r[R] === G) {
                                    ((e, t) => {
                                      if (
                                        !Object.prototype.hasOwnProperty.call(
                                          e,
                                          L
                                        ) ||
                                        !Object.prototype.hasOwnProperty.call(
                                          e,
                                          j
                                        )
                                      )
                                        return {
                                          delta_ms_decode_frame:
                                            t[G].delta_ms_decode_frame_in,
                                          frames_decoded:
                                            t[G].total_frames_decoded_in,
                                          total_decode_time:
                                            t[G].total_time_decoded_in,
                                        };
                                      e[L],
                                        e[j],
                                        t[G].total_time_decoded_in,
                                        t[G].total_frames_decoded_in;
                                    })(r, i);
                                    const e = de(r, G, i, o),
                                      a = ie(r, G, i),
                                      n =
                                        (r.decoderImplementation, r[u] || null),
                                      s = pe(r);
                                    return (
                                      ((e, t, r) => {
                                        if (
                                          !Object.prototype.hasOwnProperty.call(
                                            e,
                                            F
                                          ) ||
                                          !Object.prototype.hasOwnProperty.call(
                                            e,
                                            U
                                          )
                                        )
                                          return {
                                            pliCount: t.total_pli_sent_in,
                                            nackCount: t.total_nack_sent_in,
                                            deltaPliCount: 0,
                                            deltaNackCount: 0,
                                          };
                                        e[F],
                                          r && r[G].total_pli_sent_in,
                                          e[U],
                                          r && r[G].total_nack_sent_in,
                                          t[G].total_pli_sent_in,
                                          t[G].total_nack_sent_in;
                                      })(r, i, o),
                                      [
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: { codec_id_in: n },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: {
                                            total_packets_in: e.packetsReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: {
                                            delta_packets_in:
                                              e.deltaPacketsReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: {
                                            total_packets_lost_in:
                                              e.packetsLost,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: {
                                            delta_packets_lost_in:
                                              e.deltaPacketsLost,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: {
                                            percent_packets_lost_in:
                                              e.percentPacketsLost,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: {
                                            total_KBytes_in: e.KBytesReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: {
                                            delta_KBytes_in:
                                              e.deltaKBytesReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: {
                                            delta_kbs_in: e.kbsReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: { delta_jitter_ms_in: a },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: { size_in: s },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: { track_in: r[W] },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: { track_id_in: r[q] },
                                        },
                                        {
                                          ssrc: t,
                                          type: K,
                                          value: { media_source_id: r[H] },
                                        },
                                      ]
                                    );
                                  }
                                  break;
                                }
                                case "outbound-rtp": {
                                  ee(
                                    ae,
                                    `analyze() - got stats ${r[A]} for ${n}`,
                                    r
                                  );
                                  const e = r[O],
                                    i = ne(e, a, t);
                                  i && (i.timestamp = a.timestamp);
                                  const o = ne(e, s, t);
                                  if (
                                    (o && (o.timestamp = s.timestamp),
                                    r[R] === V)
                                  ) {
                                    const t = r[u] || null,
                                      a = oe(r, V, i, o);
                                    return [
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { codec_id_out: t },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: {
                                          total_packets_out: a.packetsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: {
                                          delta_packets_out: a.deltaPacketsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: {
                                          total_KBytes_out: a.KBytesSent,
                                        },
                                      },
                                      {
                                        type: $,
                                        value: {
                                          delta_KBytes_out: a.deltaKBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { delta_kbs_out: a.kbsSent },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { track_out: r[W] },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { track_id_out: r[q] },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { media_source_id: r[H] },
                                      },
                                    ];
                                  }
                                  if (r[R] === G) {
                                    r.encoderImplementation;
                                    const t = r[u] || null,
                                      a =
                                        (((e, t) => {
                                          if (
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              N
                                            ) ||
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              B
                                            )
                                          )
                                            return {
                                              delta_ms_encode_frame:
                                                t[G].delta_ms_encode_frame_out,
                                              frames_encoded:
                                                t[G].total_frames_encoded_out,
                                              total_encode_time:
                                                t[G].total_time_encoded_out,
                                            };
                                          e[N],
                                            e[B],
                                            t[G].total_time_encoded_out,
                                            t[G].total_frames_encoded_out;
                                        })(r, i),
                                        pe(r)),
                                      n = ((e) => {
                                        const t =
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              v
                                            )
                                              ? e[v]
                                              : null,
                                          r =
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              y
                                            )
                                              ? e[y]
                                              : null,
                                          a =
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              b
                                            )
                                              ? e[b]
                                              : null;
                                        return (
                                          a &&
                                            Object.keys(a).forEach((e) => {
                                              a[e] > 1e3 &&
                                                (a[e] = Number(a[e] / 1e3));
                                            }),
                                          {
                                            reason: t,
                                            durations: a,
                                            resolutionChanges: r,
                                          }
                                        );
                                      })(r),
                                      s =
                                        (((e, t, r) => {
                                          if (
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              F
                                            ) ||
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              U
                                            )
                                          )
                                            return {
                                              pliCount:
                                                t.total_pli_received_out,
                                              nackCount:
                                                t.total_nack_received_out,
                                              deltaPliCount: 0,
                                              deltaNackCount: 0,
                                            };
                                          e[F],
                                            r && r[G].total_pli_received_out,
                                            e[U],
                                            r && r[G].total_nack_received_out,
                                            t[G].total_pli_received_out,
                                            t[G].total_nack_received_out;
                                        })(r, i, o),
                                        oe(r, G, i, o));
                                    return [
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { codec_id_out: t },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: {
                                          total_packets_out: s.packetsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: {
                                          delta_packets_out: s.deltaPacketsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: {
                                          total_KBytes_out: s.KBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: {
                                          delta_KBytes_out: s.deltaKBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { delta_kbs_out: s.kbsSent },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { size_out: a },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { limitation_out: n },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { track_out: r[W] },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { track_id_out: r[q] },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { media_source_id: r[H] },
                                      },
                                    ];
                                  }
                                  break;
                                }
                                case "media-source": {
                                  ee(
                                    ae,
                                    `analyze() - got stats ${r[A]} for ${n}`,
                                    r
                                  );
                                  const e = [];
                                  return (
                                    Object.keys(a[V]).forEach((t) => {
                                      const n = a[V][t];
                                      if (n.media_source_id === r[w]) {
                                        var s = r[q];
                                        e.push({
                                          ssrc: n.ssrc,
                                          type: $,
                                          value: { track_id_out: s },
                                        });
                                      }
                                    }),
                                    Object.keys(a[G]).forEach((t) => {
                                      const n = a[G][t];
                                      if (n.media_source_id === r[w]) {
                                        var s = r[q];
                                        e.push({
                                          ssrc: n.ssrc,
                                          type: K,
                                          value: { track_id_out: s },
                                        });
                                      }
                                    }),
                                    e
                                  );
                                }
                                case "track": {
                                  ee(
                                    ae,
                                    `analyze() - got stats ${r[A]} for ${n}`,
                                    r
                                  );
                                  const e = [];
                                  return (
                                    Object.keys(a[V]).forEach((t) => {
                                      const s = a[V][t];
                                      if (
                                        s.track_in === r[w] ||
                                        s.track_out === r[w]
                                      ) {
                                        ee(
                                          ae,
                                          `analyze() - got stats ${r[A]} for ${n}`,
                                          r
                                        );
                                        var i = r[q];
                                        r[w] === s.track_in
                                          ? e.push({
                                              ssrc: s.ssrc,
                                              type: $,
                                              value: { track_id_in: i },
                                            })
                                          : e.push({
                                              ssrc: s.ssrc,
                                              type: $,
                                              value: { track_id_out: i },
                                            });
                                      }
                                    }),
                                    Object.keys(a[G]).forEach((t) => {
                                      const s = a[G][t];
                                      if (
                                        s.track_in === r[w] ||
                                        s.track_out === r[w]
                                      ) {
                                        ee(
                                          ae,
                                          `analyze() - got stats ${r[A]} for ${n}`,
                                          r
                                        );
                                        var i = r[q];
                                        r[w] === s.track_in
                                          ? e.push({
                                              ssrc: s.ssrc,
                                              type: K,
                                              value: { track_id_in: i },
                                            })
                                          : e.push({
                                              ssrc: s.ssrc,
                                              type: K,
                                              value: { track_id_out: i },
                                            });
                                      }
                                    }),
                                    e
                                  );
                                }
                                case "codec":
                                  const o = [];
                                  return (
                                    Object.keys(a[V]).forEach((e) => {
                                      const t = a[V][e];
                                      if (
                                        t.codec_id_in === r[w] ||
                                        t.codec_id_out === r[w]
                                      ) {
                                        ee(
                                          ae,
                                          `analyze() - got stats ${r[A]} for ${n}`,
                                          r
                                        );
                                        const e = ((e) => ({
                                          channels: e.channels || null,
                                          clock_rate: e[p] || null,
                                          mime_type: e[E] || null,
                                          sdp_fmtp_line: e.sdpFmtpLine || null,
                                        }))(r);
                                        r[w] === t.codec_id_in
                                          ? o.push({
                                              ssrc: t.ssrc,
                                              type: $,
                                              value: { codec_in: e },
                                            })
                                          : o.push({
                                              ssrc: t.ssrc,
                                              type: $,
                                              value: { codec_out: e },
                                            });
                                      }
                                    }),
                                    Object.keys(a[G]).forEach((e) => {
                                      const t = a[G][e];
                                      if (
                                        t.codec_id_in === r[w] ||
                                        t.codec_id_out === r[w]
                                      ) {
                                        ee(
                                          ae,
                                          `analyze() - got stats ${r[A]} for ${n}`,
                                          r
                                        );
                                        const e = ((e) => ({
                                          clock_rate: e[p] || null,
                                          mime_type: e[E] || null,
                                        }))(r);
                                        r[w] === t.codec_id_in
                                          ? o.push({
                                              ssrc: t.ssrc,
                                              type: K,
                                              value: { codec_in: e },
                                            })
                                          : o.push({
                                              ssrc: t.ssrc,
                                              type: K,
                                              value: { codec_out: e },
                                            });
                                      }
                                    }),
                                    o
                                  );
                                case "remote-inbound-rtp": {
                                  ee(
                                    ae,
                                    `analyze() - got stats ${r[A]} for ${n}`,
                                    r
                                  );
                                  const e = r[O],
                                    i = ne(e, a, t),
                                    o = ne(e, s, t);
                                  if (r[R] === V) {
                                    const t = se(r, V, o, i),
                                      a = ie(r, V, i),
                                      n = ce(r, V, i, o);
                                    return [
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { delta_rtt_ms_out: t.rtt },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { delta_jitter_ms_out: a },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { timestamp_out: r[x] },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: {
                                          total_packets_lost_out: n.packetsLost,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: {
                                          delta_packets_lost_out:
                                            n.deltaPacketsLost,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: {
                                          percent_packets_lost_out:
                                            n.fractionLost,
                                        },
                                      },
                                    ];
                                  }
                                  if (r[R] === G) {
                                    const t = se(r, G, o, i),
                                      a = ie(r, G, i),
                                      n = ce(r, G, i, o);
                                    return [
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { delta_rtt_ms_out: t.rtt },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { delta_jitter_ms_out: a },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: { timestamp_out: r[x] },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: {
                                          total_packets_lost_out: n.packetsLost,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: K,
                                        value: {
                                          delta_packets_lost_out:
                                            n.deltaPacketsLost,
                                        },
                                      },
                                    ];
                                  }
                                  break;
                                }
                                case "remote-outbound-rtp": {
                                  ee(
                                    ae,
                                    `analyze() - got stats ${r[A]} for ${n}`,
                                    r
                                  );
                                  const e = r[O],
                                    i = ne(e, a, t),
                                    o = ne(e, s, t);
                                  if (r[R] === V) {
                                    const t = se(r, V, o, i);
                                    return [
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { delta_rtt_ms_in: t.rtt },
                                      },
                                      {
                                        ssrc: e,
                                        type: $,
                                        value: { timestamp_in: r[x] },
                                      },
                                    ];
                                  }
                                  break;
                                }
                              }
                              return [];
                            })(r, m, m.name, null).forEach((e) => {
                              if (e.value && e.type)
                                if (e.ssrc) {
                                  let d = m[e.type][e.ssrc];
                                  d ||
                                    ((t = e.type),
                                    (a = r.type),
                                    (d =
                                      t === V
                                        ? a === c
                                          ? { ...n }
                                          : { ...s }
                                        : a === c
                                        ? { ...i }
                                        : { ...o }),
                                    (d.ssrc = e.ssrc),
                                    (m[e.type][e.ssrc] = d)),
                                    Object.keys(e.value).forEach((t) => {
                                      void 0 !== e.value[t] &&
                                        (d[t] = e.value[t]);
                                    });
                                } else
                                  Object.keys(e.value).forEach((t) => {
                                    void 0 !== e.value[t] &&
                                      (m[e.type][t] = e.value[t]);
                                  });
                              var t, a;
                            });
                        }),
                        (m.timestamp = f),
                        m
                      );
                    }
                    async collectStats() {
                      try {
                        const e =
                            await this._config.monitoringObject.getStats(),
                          t = this.analyze(
                            e,
                            this._statsReports.slice().pop() || null
                          );
                        return (
                          this._statsReports.push(t),
                          this.fireOnStatsCollected(t),
                          e
                        );
                      } catch (e) {
                        return re(this._moduleName, `got error ${e}`), null;
                      }
                    }
                    fireOnStatsCollected(r) {
                      if (this._callbacks.onStatsCollected) {
                        const a = {};
                        (a.meetingId = r.meetingId),
                          (a.peerId = r.peerId),
                          (a.name = r.name),
                          (a.audio = []),
                          (a.video = []),
                          Object.values(r.audio).forEach((n) => {
                            const s = {};
                            if (
                              ((s.network = z[r.network.infrastructure]),
                              (s.timestamp = r.timestamp),
                              n.direction == e)
                            ) {
                              (s.codec = n.codec_in.mime_type),
                                (s.jitter = n.delta_jitter_ms_in),
                                (s.bitrate = n.delta_kbs_in),
                                (s.packetsLost = n.delta_packets_lost_in),
                                (s.rtt = r.data.delta_rtt_connectivity_ms || 0),
                                (s.totalPackets = n.delta_packets_in),
                                (s.concealmentEvents =
                                  n.delta_concealment_events),
                                (s.removedSampleForAccelaration =
                                  n.delta_removed_samples_for_accelaration),
                                (s.insertedSamplesForDecelaration =
                                  n.delta_inserted_samples_for_decelaration);
                              const e = JSON.stringify(n.track_id_in).replace(
                                /[{}"]/g,
                                ""
                              );
                              s.trackId = e;
                            } else
                              n.direction == t &&
                                ((s.codec = n.codec_out.mime_type),
                                (s.jitter = n.delta_jitter_ms_out),
                                (s.bitrate = n.delta_kbs_out),
                                (s.packetsLost = n.delta_packets_lost_out),
                                (s.rtt = r.data.delta_rtt_connectivity_ms || 0),
                                (s.totalPackets = n.delta_packets_out),
                                (s.trackId = n.track_id_out));
                            a.audio.push(s);
                          }),
                          Object.values(r.video).forEach((n) => {
                            const s = {};
                            if (
                              ((s.network = z[r.network.infrastructure]),
                              (s.timestamp = r.timestamp),
                              n.direction == e)
                            ) {
                              (s.codec = n.codec_in.mime_type),
                                (s.jitter = n.delta_jitter_ms_in),
                                (s.bitrate = n.delta_kbs_in),
                                (s.packetsLost = n.delta_packets_lost_in),
                                (s.rtt = r.data.delta_rtt_connectivity_ms || 0),
                                (s.totalPackets = n.delta_packets_in),
                                (s.size = n.size_in);
                              const e = JSON.stringify(n.track_id_in).replace(
                                /[{}"]/g,
                                ""
                              );
                              s.trackId = e;
                            } else
                              n.direction == t &&
                                ((s.codec = n.codec_out.mime_type),
                                (s.jitter = n.delta_jitter_ms_out),
                                (s.bitrate = n.delta_kbs_out),
                                (s.packetsLost = n.delta_packets_lost_out),
                                (s.rtt = r.data.delta_rtt_connectivity_ms || 0),
                                (s.totalPackets = n.delta_packets_out),
                                (s.limitation = n.limitation_out),
                                (s.size = n.size_out),
                                (s.trackId = n.track_id_out));
                            a.video.push(s);
                          }),
                          this._callbacks.onStatsCollected.callback(a);
                      }
                    }
                  }
                  class he {
                    constructor(e) {
                      (this._id =
                        e.name && e.name.substr(0, 12).padEnd(12, " ")),
                        (this._moduleName = this._id),
                        (this._config = e),
                        (this._collector = new ue(this._config, this._id));
                    }
                    get id() {
                      return this._id;
                    }
                    start() {
                      this._collectorIntervalId
                        ? te("Probe already started.")
                        : (ee(this._moduleName, "Probe Started"),
                          (this._collectorIntervalId = setInterval(() => {
                            ee(this._moduleName, "Collector collecting stats"),
                              this._collector.collectStats();
                          }, this._config.refreshEvery)));
                    }
                    stop() {
                      this._collectorIntervalId
                        ? (clearInterval(this._collectorIntervalId),
                          ee(this._moduleName, "Probe Stopped"))
                        : te("Probe not running, Please start first.");
                    }
                    set onStatsCollected(e) {
                      e
                        ? this._collector.registerCallback(
                            "onStatsCollected",
                            e
                          )
                        : this._collector.unregisterCallback(
                            "onStatsCollected"
                          );
                    }
                  }
                  const me = {
                    refreshEvery: 2e3,
                    startAfter: 0,
                    stopAfter: -1,
                    verbose: !1,
                    peerId: "peerId",
                    meetingId: "meetingId",
                    name: "name",
                  };
                  class fe {
                    constructor(e) {
                      var t;
                      (this._config = { defaultConfig: me, ...e }),
                        (this._probes = []),
                        (t = this._config.verbose || !1),
                        Y.setLevel(t ? Y.levels.TRACE : Y.levels.INFO),
                        ee("VideoSDKMetrics", "VideoSDKMetrics initialized");
                    }
                    get probes() {
                      return this._probes;
                    }
                    addNewProbe(e, t) {
                      if (!e) throw new Error("undefined monitoring object");
                      const r = { monitoringObject: e, ...t, ...this._config },
                        a = new he(r);
                      return this._probes.push(a), a;
                    }
                    removeExistingProbe(e) {
                      if (!e) throw new Error("undefined probe");
                      e.stop(),
                        (this._probes = this._probes.filter(
                          (t) => e.id !== t.id
                        ));
                    }
                    getProbe(e) {
                      for (let t of this.probes) if (t.id == e) return t;
                    }
                    startAllProbes() {
                      this._probes.forEach((e, t) => {
                        e.start();
                      });
                    }
                    stopAllProbes() {
                      this._probes.forEach((e) => e.stop());
                    }
                  }
                })(),
                a
              );
            })());
        },
        8274: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Logger = void 0);
          const a = r(7833),
            n = "awaitqueue";
          t.Logger = class {
            constructor(e) {
              e
                ? ((this._debug = (0, a.default)(`${n}:${e}`)),
                  (this._warn = (0, a.default)(`${n}:WARN:${e}`)),
                  (this._error = (0, a.default)(`${n}:ERROR:${e}`)))
                : ((this._debug = (0, a.default)(n)),
                  (this._warn = (0, a.default)(`${n}:WARN`)),
                  (this._error = (0, a.default)(`${n}:ERROR`))),
                (this._debug.log = console.info.bind(console)),
                (this._warn.log = console.warn.bind(console)),
                (this._error.log = console.error.bind(console));
            }
            get debug() {
              return this._debug;
            }
            get warn() {
              return this._warn;
            }
            get error() {
              return this._error;
            }
          };
        },
        8876: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.AwaitQueue =
              t.AwaitQueueRemovedTaskError =
              t.AwaitQueueStoppedError =
                void 0);
          const a = new (r(8274).Logger)();
          class n extends Error {
            constructor(e) {
              super(e ?? "AwaitQueue stopped"),
                (this.name = "AwaitQueueStoppedError"),
                "function" == typeof Error.captureStackTrace &&
                  Error.captureStackTrace(this, n);
            }
          }
          t.AwaitQueueStoppedError = n;
          class s extends Error {
            constructor(e) {
              super(e ?? "AwaitQueue task removed"),
                (this.name = "AwaitQueueRemovedTaskError"),
                "function" == typeof Error.captureStackTrace &&
                  Error.captureStackTrace(this, s);
            }
          }
          t.AwaitQueueRemovedTaskError = s;
          t.AwaitQueue = class {
            constructor() {
              (this.pendingTasks = new Map()),
                (this.nextTaskId = 0),
                (this.stopping = !1);
            }
            get size() {
              return this.pendingTasks.size;
            }
            async push(e, t) {
              if (
                ((t = t ?? e.name),
                a.debug(`push() [name:${t}]`),
                "function" != typeof e)
              )
                throw new TypeError("given task is not a function");
              if (t)
                try {
                  Object.defineProperty(e, "name", { value: t });
                } catch (e) {}
              return new Promise((r, n) => {
                const s = {
                  id: this.nextTaskId++,
                  task: e,
                  name: t,
                  enqueuedAt: Date.now(),
                  executedAt: void 0,
                  completed: !1,
                  resolve: (e) => {
                    if (s.completed) return;
                    (s.completed = !0),
                      this.pendingTasks.delete(s.id),
                      a.debug(`resolving task [name:${s.name}]`),
                      r(e);
                    const [t] = this.pendingTasks.values();
                    t && !t.executedAt && this.execute(t);
                  },
                  reject: (e) => {
                    if (
                      !s.completed &&
                      ((s.completed = !0),
                      this.pendingTasks.delete(s.id),
                      a.debug(`rejecting task [name:${s.name}]: %s`, String(e)),
                      n(e),
                      !this.stopping)
                    ) {
                      const [e] = this.pendingTasks.values();
                      e && !e.executedAt && this.execute(e);
                    }
                  },
                };
                this.pendingTasks.set(s.id, s),
                  1 === this.pendingTasks.size && this.execute(s);
              });
            }
            stop() {
              a.debug("stop()"), (this.stopping = !0);
              for (const e of this.pendingTasks.values())
                a.debug(`stop() | stopping task [name:${e.name}]`),
                  e.reject(new n());
              this.stopping = !1;
            }
            remove(e) {
              a.debug(`remove() [taskIdx:${e}]`);
              const t = Array.from(this.pendingTasks.values())[e];
              t
                ? t.reject(new s())
                : a.debug(`stop() | no task with given idx [taskIdx:${e}]`);
            }
            dump() {
              const e = Date.now();
              let t = 0;
              return Array.from(this.pendingTasks.values()).map((r) => ({
                idx: t++,
                task: r.task,
                name: r.name,
                enqueuedTime: r.executedAt
                  ? r.executedAt - r.enqueuedAt
                  : e - r.enqueuedAt,
                executionTime: r.executedAt ? e - r.executedAt : 0,
              }));
            }
            async execute(e) {
              if ((a.debug(`execute() [name:${e.name}]`), e.executedAt))
                throw new Error("task already being executed");
              e.executedAt = Date.now();
              try {
                const t = await e.task();
                e.resolve(t);
              } catch (t) {
                e.reject(t);
              }
            }
          };
        },
        9027: (e, t, r) => {
          "use strict";
          r.d(t, { $: () => a });
          var a = {
            networkPriorities: {
              audio: "high",
              dominatingVideo: "high",
              otherVideos: "medium",
              screenShare: "medium",
            },
            aspectRatios: {
              fourThree: { label: "fourThree", value: 1.333 },
              oneSixNine: { label: "oneSixNine", value: 1.777 },
            },
            audioProfiles: {
              speech_low_quality: {
                sampleRate: 16e3,
                bitRate: 24,
                sampleSize: 16,
                stereo: !1,
                dtx: !0,
                fec: !0,
                maxPlaybackRate: 16e3,
                packetTime: 20,
                autoGainControl: !0,
                echoCancellation: !0,
                noiseSuppression: !0,
                channelCount: 1,
              },
              speech_standard: {
                sampleRate: 32e3,
                bitRate: 24,
                sampleSize: 24,
                stereo: !1,
                dtx: !0,
                fec: !0,
                maxPlaybackRate: 32e3,
                packetTime: 30,
                autoGainControl: !0,
                echoCancellation: !0,
                noiseSuppression: !0,
                channelCount: 1,
              },
              music_standard: {
                sampleRate: 48e3,
                bitRate: 40,
                sampleSize: 32,
                stereo: !1,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 40,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 1,
              },
              standard_stereo: {
                sampleRate: 48e3,
                sampleSize: 32,
                bitRate: 64,
                stereo: !0,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 40,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 2,
              },
              high_quality: {
                sampleRate: 48e3,
                sampleSize: 32,
                bitRate: 128,
                stereo: !1,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 60,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 1,
              },
              high_quality_stereo: {
                sampleRate: 48e3,
                sampleSize: 32,
                bitRate: 192,
                stereo: !0,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 60,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 2,
              },
            },
            videoProfiles: {
              h90p_w160p: {
                width: 160,
                height: 90,
                bitRate: 6e4,
                frameRate: 15,
                aspectRatio: "oneSixNine",
              },
              h180p_w320p: {
                width: 320,
                height: 180,
                bitRate: 12e4,
                frameRate: 15,
                aspectRatio: "oneSixNine",
              },
              h216p_w384p: {
                width: 384,
                height: 216,
                bitRate: 18e4,
                frameRate: 15,
                aspectRatio: "oneSixNine",
              },
              h360p_w640p: {
                width: 640,
                height: 360,
                bitRate: 3e5,
                frameRate: 20,
                aspectRatio: "oneSixNine",
              },
              h540p_w960p: {
                width: 960,
                height: 540,
                bitRate: 6e5,
                frameRate: 25,
                aspectRatio: "oneSixNine",
              },
              h720p_w1280p: {
                width: 1280,
                height: 720,
                bitRate: 2e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h1080p_w1920p: {
                width: 1920,
                height: 1080,
                bitRate: 3e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h1440p_w2560p: {
                width: 2560,
                height: 1440,
                bitRate: 5e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h2160p_w3840p: {
                width: 3840,
                height: 2160,
                bitRate: 8e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h120p_w160p: {
                width: 160,
                height: 120,
                bitRate: 8e4,
                frameRate: 15,
                aspectRatio: "fourThree",
              },
              h180p_w240p: {
                width: 240,
                height: 180,
                bitRate: 1e5,
                frameRate: 15,
                aspectRatio: "fourThree",
              },
              h240p_w320p: {
                width: 320,
                height: 240,
                bitRate: 15e4,
                frameRate: 15,
                aspectRatio: "fourThree",
              },
              h360p_w480p: {
                width: 480,
                height: 360,
                bitRate: 225e3,
                frameRate: 20,
                aspectRatio: "fourThree",
              },
              h480p_w640p: {
                width: 640,
                height: 480,
                bitRate: 3e5,
                frameRate: 25,
                aspectRatio: "fourThree",
              },
              h540p_w720p: {
                width: 720,
                height: 540,
                bitRate: 45e4,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
              h720p_w960p: {
                width: 960,
                height: 720,
                bitRate: 15e5,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
              h1080p_w1440p: {
                width: 1440,
                height: 1080,
                bitRate: 25e5,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
              h1440p_w1920p: {
                width: 1920,
                height: 1440,
                bitRate: 35e5,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
            },
            screenShareProfiles: {
              h360p_30fps: {
                width: 640,
                height: 360,
                bitRate: 2e5,
                frameRate: 30,
              },
              h720p_5fps: {
                width: 1280,
                height: 720,
                bitRate: 4e5,
                frameRate: 5,
              },
              h720p_15fps: {
                width: 1280,
                height: 720,
                bitRate: 1e6,
                frameRate: 15,
              },
              h1080p_15fps: {
                width: 1920,
                height: 1080,
                bitRate: 15e5,
                frameRate: 15,
              },
              h1080p_30fps: {
                width: 1920,
                height: 1080,
                bitRate: 1e6,
                frameRate: 30,
              },
            },
            simulcastProfiles: {
              3840: [
                { scaleResolutionDownBy: 12, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 6, maxBitRate: 5e5 },
                { scaleResolutionDownBy: 1, maxBitRate: 1e7 },
              ],
              1920: [
                { scaleResolutionDownBy: 6, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 3, maxBitRate: 5e5 },
                { scaleResolutionDownBy: 1, maxBitRate: 35e5 },
              ],
              1280: [
                { scaleResolutionDownBy: 4, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 2, maxBitRate: 5e5 },
                { scaleResolutionDownBy: 1, maxBitRate: 12e5 },
              ],
              640: [
                { scaleResolutionDownBy: 2, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 1, maxBitRate: 5e5 },
              ],
              320: [{ scaleResolutionDownBy: 1, maxBitRate: 15e4 }],
            },
            requestTimeout: 2e4,
            requestRetries: 3,
            transportOptions: { tcp: !0 },
            videoKSVCEncodings: [{ scalabilityMode: "S3T3_KEY" }],
            videoSVCEncodings: [{ scalabilityMode: "S3T3", dtx: !0 }],
          };
        },
        7080: (e, t, r) => {
          "use strict";
          r.d(t, { q: () => n, s: () => a });
          var a = {
              INVALID_API_KEY: 4001,
              INVALID_TOKEN: 4002,
              INVALID_MEETING_ID: 4003,
              INVALID_PARTICIPANT_ID: 4004,
              DUPLICATE_PARTICIPANT: 4005,
              ACCOUNT_DEACTIVATED: 4006,
              ACCOUNT_DISCONTINUED: 4007,
              INVALID_PERMISSIONS: 4008,
              MAX_PARTCIPANT_REACHED: 4009,
              MAX_SPEAKER_REACHED: 4010,
              START_RECORDING_FAILED: 4011,
              STOP_RECORDING_FAILED: 4012,
              START_LIVESTREAM_FAILED: 4013,
              STOP_LIVESTREAM_FAILED: 4014,
              INVALID_LIVESTREAM_CONFIG: 4015,
              START_HLS_FAILED: 4016,
              STOP_HLS_FAILED: 4017,
              START_TRANSCRIPTION_FAILED: 4031,
              STOP_TRANSCRIPTION_FAILED: 4032,
              RECORDING_FAILED: 5001,
              LIVESTREAM_FAILED: 5002,
              HLS_FAILED: 5003,
              TRANSCRIPTION_FAILED: 5007,
              ERROR_GET_VIDEO_MEDIA: 3011,
              ERROR_GET_AUDIO_MEDIA: 3012,
              ERROR_GET_DISPLAY_MEDIA: 3013,
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: 3014,
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: 3015,
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: 3016,
              ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED: 3017,
              ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED: 3018,
              ERROR_CAMERA_PERMISSION_DENIED_BY_OS: 3019,
              ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS: 3020,
              ERROR_CAMERA_NOT_FOUND: 3021,
              ERROR_MICROPHONE_NOT_FOUND: 3022,
              ERROR_CAMERA_IN_USE: 3023,
              ERROR_MICROPHONE_IN_USE: 3024,
              ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE: 3025,
              ERROR_VIDEO_SOURCE_INITIATION_FAILED: 3026,
              ERROR_WEBCAM_TRACK_ENDED: 3027,
              ERROR_MICROPHONE_TRACK_ENDED: 3028,
              ERROR_INVALID_CUSTOM_VIDEO_TRACK: 3029,
              ERROR_INVALID_CUSTOM_AUDIO_TRACK: 3030,
              ERROR_CUSTOM_VIDEO_TRACK_ENDED: 3031,
              ERROR_CUSTOM_AUDIO_TRACK_ENDED: 3032,
              ERROR_CAMERA_ACCESS_UNAVAILABLE: 3033,
              ERROR_MICROPHONE_ACCESS_UNAVAILABLE: 3034,
              ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED: 3035,
              ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED: 3036,
              ERROR_RN_CAMERA_NOT_FOUND: 3037,
              ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED: 3038,
              ERROR_RN_MIC_NOT_FOUND: 3039,
              ERROR_RN_CAMERA_ACCESS_UNAVAILABLE: 3040,
              ERROR_RN_MIC_ACCESS_UNAVAILABLE: 3041,
              ERROR_RN_CAMERA_TRACK_ENDED: 3042,
              ERROR_RN_MIC_TRACK_ENDED: 3043,
            },
            n = {
              ERROR_GET_VIDEO_MEDIA: {
                code: 3011,
                message: "Your browser/Device does not support Video.",
              },
              ERROR_GET_AUDIO_MEDIA: {
                code: 3012,
                message: "Your browser/Device does not support Audio.",
              },
              ERROR_GET_DISPLAY_MEDIA: {
                code: 3013,
                message: "Your browser/Device does not support Screen Sharing.",
              },
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: {
                code: 3014,
                message: "Video capture permission denied.",
              },
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: {
                code: 3015,
                message: "Audio capture permission denied.",
              },
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: {
                code: 3016,
                message: "Screen sharing permission denied.",
              },
              ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED: {
                code: 3017,
                message:
                  "Oops! It seems like camera access was denied or dismissed. To proceed, kindly grant access through your browser settings.",
              },
              ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED: {
                code: 3018,
                message:
                  "Oops! It seems like microphone access was denied or dismissed. To proceed, kindly grant access through your browser settings.",
              },
              ERROR_CAMERA_PERMISSION_DENIED_BY_OS: {
                code: 3019,
                message:
                  "Camera permission denied by OS system settings. Please check the system settings and grant permission for this browser.",
              },
              ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS: {
                code: 3020,
                message:
                  "Microphone permission denied by OS system settings. Please check the system settings and grant permission for this browser.",
              },
              ERROR_CAMERA_NOT_FOUND: {
                code: 3021,
                message:
                  "Please ensure your camera is connected and turned on, and that the camera driver is installed and up-to-date.",
              },
              ERROR_MICROPHONE_NOT_FOUND: {
                code: 3022,
                message:
                  "Please ensure your microphone is connected and turned on.",
              },
              ERROR_CAMERA_IN_USE: {
                code: 3023,
                message:
                  "The camera is being used by another application. Please close any programs utilizing the camera, such as video conferencing tools, screen recording software, or other browsers. Restart your browser and attempt again.",
              },
              ERROR_MICROPHONE_IN_USE: {
                code: 3024,
                message:
                  "The microphone is being used by another application. Please close any programs utilizing the microphone, such as video conferencing tools, screen recording software, or other browsers. Restart your browser and attempt again.",
              },
              ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE: {
                code: 3025,
                message:
                  "It seems like there's an issue with camera permission or video autoplay, you can check out this link for details: http://tinyurl.com/autoplay-issue",
              },
              ERROR_VIDEO_SOURCE_INITIATION_FAILED: {
                code: 3026,
                message:
                  "Unable to initiate video source. Please verify browser settings for video permissions.",
              },
              ERROR_WEBCAM_TRACK_ENDED: {
                code: 3027,
                message:
                  "Webcam track has ended or the webcam is disconnected. Please ensure your webcam is properly connected and try restarting it.",
              },
              ERROR_MICROPHONE_TRACK_ENDED: {
                code: 3028,
                message:
                  "Microphone track has ended or the microphone is disconnected. Please check your microphone connection and try again.",
              },
              ERROR_INVALID_CUSTOM_VIDEO_TRACK: {
                code: 3029,
                message:
                  "The provided custom video track is invalid; reverting to the default video track. Please ensure that the video track meets the required specifications.",
              },
              ERROR_INVALID_CUSTOM_AUDIO_TRACK: {
                code: 3030,
                message:
                  "The provided custom audio track is invalid; reverting to the default audio track. Please ensure that the audio track meets the required specifications.",
              },
              ERROR_CUSTOM_VIDEO_TRACK_ENDED: {
                code: 3031,
                message:
                  "The provided custom video track is in an ended state. Please verify the video track's status, and try again.",
              },
              ERROR_CUSTOM_AUDIO_TRACK_ENDED: {
                code: 3032,
                message:
                  "The provided custom audio track is in an ended state. Please verify the audio track's status, and try again.",
              },
              ERROR_CAMERA_ACCESS_UNAVAILABLE: {
                code: 3033,
                message:
                  "Camera access unavailable: Please ensure your device is compatible and that you're on a secure website (https://).",
              },
              ERROR_MICROPHONE_ACCESS_UNAVAILABLE: {
                code: 3034,
                message:
                  "Microphone access unavailable: Please ensure your device is compatible and that you're on a secure website (https://).",
              },
              ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED: {
                code: 3035,
                message:
                  "Oops! Something went wrong. The room was in a connecting state, and during that time, an action encountered an issue. Please try again after joining a meeting.",
              },
              ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED: {
                code: 3036,
                message:
                  "Oops! It seems like camera access was denied or dismissed. To proceed, kindly grant access through your App settings.",
              },
              ERROR_RN_CAMERA_NOT_FOUND: {
                code: 3037,
                message: "Please ensure your camera is connected and turned on",
              },
              ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED: {
                code: 3038,
                message:
                  "Oops! It seems like mic access was denied or dismissed. To proceed, kindly grant access through your App settings.",
              },
              ERROR_RN_MIC_NOT_FOUND: {
                code: 3039,
                message: "Please ensure your mic is connected and turned on",
              },
              ERROR_RN_CAMERA_ACCESS_UNAVAILABLE: {
                code: 3040,
                message:
                  "Camera access unavailable: Please ensure your device is compatible.",
              },
              ERROR_RN_MIC_ACCESS_UNAVAILABLE: {
                code: 3041,
                message:
                  "Microphone access unavailable: Please ensure your device is compatible.",
              },
              ERROR_RN_CAMERA_TRACK_ENDED: {
                code: 3042,
                message:
                  "Camera track has ended. Please make sure your camera is turned on or try restarting it.",
              },
              ERROR_RN_MIC_TRACK_ENDED: {
                code: 3043,
                message:
                  "Microphone track has ended or the microphone is disconnected. Please check your microphone connection and try again.",
              },
            };
        },
        5071: (e, t, r) => {
          "use strict";
          r.d(t, { V: () => a });
          var a = {
            HLS_STARTING: "HLS_STARTING",
            HLS_STARTED: "HLS_STARTED",
            HLS_PLAYABLE: "HLS_PLAYABLE",
            HLS_STOPPING: "HLS_STOPPING",
            HLS_STOPPED: "HLS_STOPPED",
          };
        },
        2107: (e, t, r) => {
          "use strict";
          r.d(t, { n: () => a });
          var a = { CONFERENCE: "CONFERENCE", VIEWER: "VIEWER" };
        },
        2487: (e, t, r) => {
          "use strict";
          r.r(t), r.d(t, { default: () => Xe });
          var a = r(296),
            n = r(2284),
            s = r(467),
            i = r(3029),
            o = r(2901),
            c = r(4467),
            d = r(4756),
            l = r.n(d),
            p = r(9566),
            u = r(76),
            h = r(7833),
            m = r.n(h),
            f = "mediasoup-demo",
            g = (function () {
              return (0, o.A)(
                function e(t) {
                  (0, i.A)(this, e),
                    t
                      ? ((this._debug = m()("".concat(f, ":").concat(t))),
                        (this._warn = m()("".concat(f, ":WARN:").concat(t))),
                        (this._error = m()("".concat(f, ":ERROR:").concat(t))))
                      : ((this._debug = m()(f)),
                        (this._warn = m()("".concat(f, ":WARN"))),
                        (this._error = m()("".concat(f, ":ERROR")))),
                    m().disable(),
                    (this._debug.log = console.info.bind(console)),
                    (this._warn.log = console.warn.bind(console)),
                    (this._error.log = console.error.bind(console));
                },
                [
                  {
                    key: "debug",
                    get: function () {
                      return this._debug;
                    },
                  },
                  {
                    key: "warn",
                    get: function () {
                      return this._warn;
                    },
                  },
                  {
                    key: "error",
                    get: function () {
                      return this._error;
                    },
                  },
                ]
              );
            })(),
            _ = r(1396),
            v = _.enc.Latin1.parse(
              "6gf9Oz5Y(6fOWPP@3XPv0Mwp51yfJ0HiZW^0*!9NdUuZ*VdKmRC@f))&^!Iriw)q"
            ),
            b = _.enc.Latin1.parse("BHrabik^$W^y*HL@A*$4YKj(");
          function y(e) {
            return w.apply(this, arguments);
          }
          function w() {
            return (w = (0, s.A)(
              l().mark(function e(t) {
                var r, a, n, s, i, o, c, d, p, u, h, m, f;
                return l().wrap(function (e) {
                  for (;;)
                    switch ((e.prev = e.next)) {
                      case 0:
                        return (
                          (r = t.roomId),
                          (a = t.secret),
                          (n = t.signalingBaseUrl),
                          (s = "call-api.videosdk.live"),
                          (i = []),
                          (o = null),
                          (c = {}),
                          (d = {}),
                          (p = {}),
                          (u = null),
                          (e.next = 10),
                          fetch(
                            "https://".concat(
                              n,
                              "/infra/v1/meetings/init-config"
                            ),
                            {
                              method: "POST",
                              headers: {
                                Authorization: a,
                                "Content-Type": "application/json",
                              },
                              body: JSON.stringify({ roomId: r }),
                            }
                          )
                            .then(function (e) {
                              return e.json();
                            })
                            .catch(function (e) {
                              return {};
                            })
                        );
                      case 10:
                        return (
                          (h = e.sent),
                          (m = h.data) &&
                            ((s = m.baseUrl),
                            (f = m.observability),
                            (i = S(m.iceServers)),
                            (o = f.jwt),
                            (c = f.traces),
                            (d = f.logs),
                            (p = f.metaData),
                            (u = m.signalingUrl)),
                          e.abrupt("return", {
                            baseUrl: s,
                            iceServers: i,
                            observabilityJwt: o,
                            traces: c,
                            logs: d,
                            metaData: p,
                            signalingUrl: u,
                          })
                        );
                      case 14:
                      case "end":
                        return e.stop();
                    }
                }, e);
              })
            )).apply(this, arguments);
          }
          function S(e) {
            try {
              var t = _.AES.decrypt(e, v, {
                iv: b,
                mode: _.mode.CBC,
                padding: _.pad.ZeroPadding,
              }).toString(_.enc.Utf8);
              return JSON.parse(t);
            } catch (e) {
              return [];
            }
          }
          var R = r(2215),
            E = r.n(R),
            k = "mediasoup-demo.user",
            T = "mediasoup-demo.devices";
          function C(e) {
            var t = e.displayName;
            E().set(k, { displayName: t });
          }
          function P() {
            return E().getJSON(T);
          }
          var O = r(2211),
            D = r.n(O),
            x = function (e) {
              return { type: "SET_ROOM_STATE", payload: { state: e } };
            },
            I = function (e) {
              return {
                type: "SET_ROOM_ACTIVE_SPEAKER",
                payload: { peerId: e },
              };
            },
            M = function (e) {
              return { type: "SET_ROOM_STATS_PEER_ID", payload: { peerId: e } };
            },
            A = function (e) {
              return {
                type: "SET_MEDIA_CAPABILITIES",
                payload: {
                  canSendMic: e.canSendMic,
                  canSendWebcam: e.canSendWebcam,
                },
              };
            },
            L = function (e) {
              return { type: "SET_DISPLAY_NAME", payload: { displayName: e } };
            },
            N = function (e) {
              return { type: "SET_AUDIO_ONLY_STATE", payload: { enabled: e } };
            },
            j = function (e) {
              return {
                type: "SET_AUDIO_ONLY_IN_PROGRESS",
                payload: { flag: e },
              };
            },
            B = function (e) {
              return { type: "SET_AUDIO_MUTED_STATE", payload: { enabled: e } };
            },
            F = function (e) {
              return {
                type: "SET_RESTART_ICE_IN_PROGRESS",
                payload: { flag: e },
              };
            },
            U = function (e) {
              return { type: "ADD_PRODUCER", payload: { producer: e } };
            },
            W = function (e) {
              return { type: "REMOVE_PRODUCER", payload: { producerId: e } };
            },
            q = function (e, t) {
              return {
                type: "SET_PRODUCER_TRACK",
                payload: { producerId: e, track: t },
              };
            },
            H = function (e, t) {
              return {
                type: "SET_PRODUCER_SCORE",
                payload: { producerId: e, score: t },
              };
            },
            V = function (e) {
              return {
                type: "ADD_DATA_PRODUCER",
                payload: { dataProducer: e },
              };
            },
            G = function (e) {
              return { type: "SET_WEBCAM_IN_PROGRESS", payload: { flag: e } };
            },
            z = function (e) {
              return { type: "SET_SHARE_IN_PROGRESS", payload: { flag: e } };
            },
            $ = function (e) {
              return { type: "ADD_PEER", payload: { peer: e } };
            },
            K = function (e) {
              return { type: "REMOVE_PEER", payload: { peerId: e } };
            },
            J = function (e, t) {
              return {
                type: "SET_PEER_DISPLAY_NAME",
                payload: { displayName: e, peerId: t },
              };
            },
            Q = function (e, t) {
              return {
                type: "ADD_CONSUMER",
                payload: { consumer: e, peerId: t },
              };
            },
            Y = function (e, t) {
              return {
                type: "REMOVE_CONSUMER",
                payload: { consumerId: e, peerId: t },
              };
            },
            X = function (e, t) {
              return {
                type: "SET_CONSUMER_PAUSED",
                payload: { consumerId: e, originator: t },
              };
            },
            Z = function (e, t) {
              return {
                type: "SET_CONSUMER_RESUMED",
                payload: { consumerId: e, originator: t },
              };
            },
            ee = function (e, t, r) {
              return {
                type: "SET_CONSUMER_CURRENT_LAYERS",
                payload: { consumerId: e, spatialLayer: t, temporalLayer: r },
              };
            },
            te = function (e, t, r) {
              return {
                type: "SET_CONSUMER_PREFERRED_LAYERS",
                payload: { consumerId: e, spatialLayer: t, temporalLayer: r },
              };
            },
            re = function (e, t) {
              return {
                type: "SET_CONSUMER_PRIORITY",
                payload: { consumerId: e, priority: t },
              };
            },
            ae = function (e, t) {
              return {
                type: "SET_CONSUMER_SCORE",
                payload: { consumerId: e, score: t },
              };
            },
            ne = function (e, t) {
              return {
                type: "ADD_DATA_CONSUMER",
                payload: { dataConsumer: e, peerId: t },
              };
            },
            se = function (e, t) {
              return {
                type: "REMOVE_DATA_CONSUMER",
                payload: { dataConsumerId: e, peerId: t },
              };
            },
            ie = function (e) {
              var t = e.type,
                r = void 0 === t ? "info" : t,
                a = e.text,
                n = e.title,
                s = e.timeout;
              if (!s)
                switch (r) {
                  case "info":
                    s = 3e3;
                    break;
                  case "error":
                    s = 5e3;
                }
              var i = {
                id: D()({ length: 6 }).toLowerCase(),
                type: r,
                title: n,
                text: a,
                timeout: s,
              };
              return function (e) {
                e(
                  (function (e) {
                    return {
                      type: "ADD_NOTIFICATION",
                      payload: { notification: e },
                    };
                  })(i)
                ),
                  setTimeout(function () {
                    e({
                      type: "REMOVE_NOTIFICATION",
                      payload: { notificationId: i.id },
                    });
                  }, s);
              };
            },
            oe = r(7007),
            ce = r(9027);
          function de(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var a = Object.getOwnPropertySymbols(e);
              t &&
                (a = a.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, a);
            }
            return r;
          }
          var le = {},
            pe = {},
            ue = {};
          for (var he in ce.$.videoProfiles)
            "oneSixNine" == ce.$.videoProfiles[he].aspectRatio &&
              ((le[he] = ce.$.videoProfiles[he]),
              (le[he].encoding = {
                maxBitrate: le[he].bitRate,
                maxFramerate: le[he].frameRate,
              })),
              "fourThree" == ce.$.videoProfiles[he].aspectRatio &&
                ((pe[he] = ce.$.videoProfiles[he]),
                (pe[he].encoding = {
                  maxBitrate: pe[he].bitRate,
                  maxFramerate: pe[he].frameRate,
                }));
          for (var he in ce.$.screenShareProfiles)
            (ue[he] = ce.$.screenShareProfiles[he]),
              (ue[he].encoding = {
                maxBitrate: ue[he].bitRate,
                maxFramerate: ue[he].frameRate,
              });
          var me = Object.values(le),
            fe = Object.values(pe),
            ge = Object.values(ue),
            _e = [le.h180p_w320p, le.h360p_w640p],
            ve = [pe.h180p_w240p, pe.h360p_w480p],
            be = function (e) {
              return [{ scaleResolutionDownBy: 2, fps: 3 }].map(function (t) {
                var r;
                return {
                  width: Math.floor(e.width / t.scaleResolutionDownBy),
                  height: Math.floor(e.height / t.scaleResolutionDownBy),
                  encodings: {
                    maxBitrate: Math.max(
                      15e4,
                      Math.floor(
                        e.encoding.maxBitrate /
                          (Math.pow(t.scaleResolutionDownBy, 2) *
                            ((null !== (r = e.encoding.maxFramerate) &&
                            void 0 !== r
                              ? r
                              : 30) /
                              t.fps))
                      )
                    ),
                    maxFramerate: t.fps,
                  },
                };
              });
            },
            ye = ["q", "h", "f"];
          function we(e, t, r, n, s) {
            var i = n && n.videoEncoding;
            e && (i = n && n.screenShareEncoding);
            var o = null == n ? void 0 : n.simulcast;
            if (
              (i ||
                (i = (function (e, t, r) {
                  for (
                    var a = (function (e, t, r) {
                        if (e) return ge;
                        var a = t > r ? t / r : r / t;
                        if (Math.abs(a - 16 / 9) < Math.abs(a - 4 / 3))
                          return me;
                        return fe;
                      })(e, t, r),
                      n = a[0].encoding,
                      s = Math.max(t, r),
                      i = 0;
                    i < a.length;
                    i += 1
                  ) {
                    var o = a[i];
                    if (((n = o.encoding), o.width >= s)) break;
                  }
                  return n;
                })(e, t, r)),
              !o)
            )
              return [i];
            var c,
              d = {
                width: t,
                height: r,
                encoding: {
                  maxBitrate: i.maxBitrate,
                  maxFramerate: i.maxFramerate,
                },
              },
              l = [],
              p = (l = Se(e, d))[0];
            if (l.length > 1) {
              var u = l;
              c = (0, a.A)(u, 2)[1];
            }
            var h = Math.max(t, r);
            return Re(
              t,
              r,
              h >= 960 && c ? [p, c, d] : h >= 480 ? [p, d] : [d],
              s
            );
          }
          function Se(e, t) {
            if (e) be(t);
            var r = t.width,
              a = t.height,
              n = r > a ? r / a : a / r;
            return Math.abs(n - 16 / 9) < Math.abs(n - 4 / 3) ? _e : ve;
          }
          function Re(e, t, r, a) {
            var n = [];
            return (
              r.forEach(function (r, s) {
                if (!(s >= ye.length)) {
                  var i = a ? null : { maxFramerate: r.encoding.maxFramerate },
                    o = Math.min(e, t),
                    d = (function (e) {
                      for (var t = 1; t < arguments.length; t++) {
                        var r = null != arguments[t] ? arguments[t] : {};
                        t % 2
                          ? de(Object(r), !0).forEach(function (t) {
                              (0, c.A)(e, t, r[t]);
                            })
                          : Object.getOwnPropertyDescriptors
                          ? Object.defineProperties(
                              e,
                              Object.getOwnPropertyDescriptors(r)
                            )
                          : de(Object(r)).forEach(function (t) {
                              Object.defineProperty(
                                e,
                                t,
                                Object.getOwnPropertyDescriptor(r, t)
                              );
                            });
                      }
                      return e;
                    })(
                      {
                        rid: ye[s],
                        scaleResolutionDownBy: o / Math.min(r.width, r.height),
                        maxBitrate: r.encoding.maxBitrate,
                      },
                      i
                    );
                  n.push(d);
                }
              }),
              n
            );
          }
          function Ee(e, t, r) {
            if (!e) return {};
            var a = e.id,
              n =
                (e.preferredSpatialLayer, e.preferredTemporalLayer, e.appData),
              s = n.width,
              i = n.height,
              o = n.encodings;
            try {
              var c = (function (e) {
                var t = [];
                if (e && 0 != e.length) {
                  if (1 === e.length) {
                    for (var r = 0; r < 3; r++) t.push(Math.pow(2, 3 - r - 1));
                    return t;
                  }
                  var a = !1;
                  return (
                    e.forEach(function (e) {
                      void 0 !== e.scaleResolutionDownBy
                        ? ((a = !0),
                          t.push(Math.max(1, e.scaleResolutionDownBy)))
                        : t.push(1);
                    }),
                    a ||
                      e.forEach(function (r, a) {
                        t[a] = Math.pow(2, e.length - a - 1);
                      }),
                    t
                  );
                }
              })(o);
              if (!c) return {};
              for (
                var d = Math.min(
                    Math.max(ce.$.adaptiveScalingFactor || 0.75, 0.5),
                    1
                  ),
                  l = 0,
                  p = 0;
                p < c.length;
                p++
              ) {
                var u = (d * s) / c[p],
                  h = (d * i) / c[p];
                if (!(t >= u && r >= h)) break;
                l = p;
              }
              var m = (e.temporalLayers ? e.temporalLayers : 3) - 1;
              if (0 === l && m > 0) {
                var f = s / c[0],
                  g = i / c[0];
                t < 0.5 * f && r < 0.5 * g && (m -= 1),
                  m > 0 && t < 0.25 * f && r < 0.25 * g && (m -= 1);
              }
              return {
                consumerId: a,
                newPreferredSpatialLayer: l,
                newPreferredTemporalLayer: m,
              };
            } catch (e) {
              return {};
            }
          }
          var ke = r(7080),
            Te = r(5414),
            Ce = r(2107),
            Pe = r(5071),
            Oe = r(5458),
            De = Array(32);
          function xe() {
            for (var e = 0; e < 16; e++)
              (De[e] = Math.floor(16 * Math.random()) + 48),
                De[e] >= 58 && (De[e] += 39);
            return String.fromCharCode.apply(null, De.slice(0, 16));
          }
          function Ie() {
            var e = (1e6 * new Date().getTime()).toString().padEnd(19, "0");
            return Number(e);
          }
          function Me(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var a = Object.getOwnPropertySymbols(e);
              t &&
                (a = a.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, a);
            }
            return r;
          }
          function Ae(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? Me(Object(r), !0).forEach(function (t) {
                    (0, c.A)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : Me(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var Le = (function () {
            return (0, o.A)(
              function e(t) {
                var r = this,
                  a = t.roomId,
                  n = t.peerId,
                  s = t.sdkName,
                  o = t.observabilityJwt,
                  c = t.metaData,
                  d = t.traces;
                (0, i.A)(this, e),
                  (this._traceId = (function () {
                    for (var e = 0; e < 32; e++)
                      (De[e] = Math.floor(16 * Math.random()) + 48),
                        De[e] >= 58 && (De[e] += 39);
                    return String.fromCharCode.apply(null, De.slice(0, 32));
                  })()),
                  (this._rootSpanId = xe()),
                  (this._observabilityJwt = o),
                  (this._tracesEnabled = d.enabled);
                var l = (function (e) {
                  for (
                    var t = "0123456789abcdefghijklmnopqrstuvwxyz",
                      r = "",
                      a = e;
                    a > 0;
                    a--
                  )
                    r += t[Math.floor(36 * Math.random())];
                  return r;
                })(8);
                (this._spans = []),
                  (this._traceJSON = {
                    resourceSpans: [
                      {
                        resource: {
                          attributes: [
                            {
                              key: "service.name",
                              value: { stringValue: "videosdk-otel" },
                            },
                            {
                              key: "telemetry.sdk.language",
                              value: { stringValue: "webjs" },
                            },
                            {
                              key: "telemetry.sdk.name",
                              value: { stringValue: "opentelemetry" },
                            },
                            {
                              key: "telemetry.sdk.version",
                              value: { stringValue: "1.14.0" },
                            },
                            {
                              key: "sdk-version",
                              value: { stringValue: "0.0.1" },
                            },
                          ],
                          droppedAttributesCount: 0,
                        },
                        scopeSpans: [{ scope: { name: l }, spans: [] }],
                      },
                    ],
                  }),
                  this._tracesEnabled &&
                    (this.addRootSpan(a, n, s, c),
                    setInterval(function () {
                      r.processQueue();
                    }, 4e3));
              },
              [
                {
                  key: "addRootSpan",
                  value: function (e, t, r, a) {
                    var n = {
                      traceId: this._traceId,
                      spanId: this._rootSpanId,
                      name: "room_"
                        .concat(e, "_peer_")
                        .concat(t, "_sdk_")
                        .concat(r),
                      kind: 1,
                      startTimeUnixNano: Ie(),
                      endTimeUnixNano: Ie(),
                      attributes: [
                        { key: "roomId", value: { stringValue: e } },
                        { key: "peerId", value: { stringValue: t } },
                        { key: "sdkName", value: { stringValue: r } },
                        { key: "userId", value: { stringValue: a.userId } },
                        { key: "email", value: { stringValue: a.email } },
                      ],
                      droppedAttributesCount: 0,
                      events: [],
                      droppedEventsCount: 0,
                      status: { code: 0 },
                      links: [],
                      droppedLinksCount: 0,
                    };
                    this._spans.push(n);
                  },
                },
                {
                  key: "addSpanToTrace",
                  value: function (e) {
                    this._spans.push(e);
                  },
                },
                {
                  key: "trace",
                  value: function (e) {
                    var t = e.spanName,
                      r = e.attributes,
                      n = void 0 === r ? {} : r,
                      s = e.span,
                      i = void 0 === s ? void 0 : s;
                    if (this._tracesEnabled) {
                      var o = xe(),
                        c = Ie(),
                        d = {
                          traceId: this._traceId,
                          spanId: o,
                          parentSpanId: i || this._rootSpanId,
                          name: t,
                          kind: 1,
                          startTimeUnixNano: c,
                          droppedAttributesCount: 0,
                          events: [],
                          droppedEventsCount: 0,
                          links: [],
                          droppedLinksCount: 0,
                        };
                      return (
                        Object.keys(n).length > 0 &&
                          (d.attributes = Object.entries(n).map(function (e) {
                            var t = (0, a.A)(e, 2);
                            return { key: t[0], value: { stringValue: t[1] } };
                          })),
                        this.addSpanToTrace(d),
                        o
                      );
                    }
                  },
                },
                {
                  key: "traceAutoComplete",
                  value: function (e) {
                    var t = e.spanName,
                      r = e.attributes,
                      n = void 0 === r ? {} : r,
                      s = e.status,
                      i = void 0 === s ? 1 : s,
                      o = e.span,
                      c = void 0 === o ? void 0 : o,
                      d = e.message,
                      l = void 0 === d ? "SUCCESS" : d;
                    if (this._tracesEnabled) {
                      var p = xe(),
                        u = Ie(),
                        h = Ie(),
                        m = {
                          traceId: this._traceId,
                          spanId: p,
                          parentSpanId: c || this._rootSpanId,
                          name: t,
                          kind: 1,
                          startTimeUnixNano: u,
                          endTimeUnixNano: h,
                          droppedAttributesCount: 0,
                          events: [],
                          droppedEventsCount: 0,
                          links: [],
                          droppedLinksCount: 0,
                          status: { code: i, message: l },
                        };
                      Object.keys(n).length > 0 &&
                        (m.attributes = Object.entries(n).map(function (e) {
                          var t = (0, a.A)(e, 2);
                          return { key: t[0], value: { stringValue: t[1] } };
                        })),
                        this.addSpanToTrace(m);
                    }
                  },
                },
                {
                  key: "completeSpan",
                  value: function (e) {
                    var t = e.span,
                      r = e.status,
                      n = e.message,
                      s = e.attributes,
                      i = void 0 === s ? {} : s;
                    if (this._tracesEnabled) {
                      var o = Ie();
                      this._spans = this._spans.map(function (e) {
                        if (e.spanId !== t) return e;
                        var s = Object.entries(i).map(function (e) {
                          var t = (0, a.A)(e, 2);
                          return { key: t[0], value: { stringValue: t[1] } };
                        });
                        return (
                          (e.attributes = e.attributes
                            ? [].concat((0, Oe.A)(e.attributes), (0, Oe.A)(s))
                            : s),
                          Ae(
                            Ae({}, e),
                            {},
                            {
                              status: { code: r, message: n },
                              endTimeUnixNano: o,
                            }
                          )
                        );
                      });
                    }
                  },
                },
                {
                  key: "processQueue",
                  value: function () {
                    var e = this;
                    if (this._spans.length > 0) {
                      (this._traceJSON.resourceSpans[0].scopeSpans[0].spans =
                        this._spans),
                        (this._spans = []);
                      var t = {
                        method: "POST",
                        headers: {
                          Authorization: this._observabilityJwt,
                          "Content-Type": "application/json",
                        },
                        body: JSON.stringify(this._traceJSON),
                      };
                      fetch("https://api.videosdk.live/otel/v1/traces", t)
                        .then(
                          (function () {
                            var t = (0, s.A)(
                              l().mark(function t(r) {
                                return l().wrap(function (t) {
                                  for (;;)
                                    switch ((t.prev = t.next)) {
                                      case 0:
                                        return (
                                          (e._traceJSON.resourceSpans[0].scopeSpans[0].spans =
                                            []),
                                          (t.next = 3),
                                          r.text()
                                        );
                                      case 3:
                                        return t.abrupt("return", t.sent);
                                      case 4:
                                      case "end":
                                        return t.stop();
                                    }
                                }, t);
                              })
                            );
                            return function (e) {
                              return t.apply(this, arguments);
                            };
                          })()
                        )
                        .then(function (e) {})
                        .catch(function (t) {
                          (e._spans =
                            e._traceJSON.resourceSpans[0].scopeSpans[0].spans),
                            console.error(
                              "There was a problem with the POST request:",
                              t
                            );
                        });
                    }
                  },
                },
              ]
            );
          })();
          function Ne(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var a = Object.getOwnPropertySymbols(e);
              t &&
                (a = a.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, a);
            }
            return r;
          }
          function je(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? Ne(Object(r), !0).forEach(function (t) {
                    (0, c.A)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : Ne(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var Be = (function () {
              return (0, o.A)(
                function e(t) {
                  var r = t.roomId,
                    a = t.peerId,
                    n = t.logs,
                    s = t.observabilityJwt,
                    o = t.deviceInfo,
                    c = t.sessionId,
                    d = t.debugMode;
                  (0, i.A)(this, e);
                  var l = o.browserUserAgent,
                    p = o.deviceUserAgent,
                    u = o.platform;
                  (this._peerId = a),
                    (this._roomId = r),
                    (this._logs = n),
                    (this._observabilityJwt = s),
                    (this._deviceInfo = o),
                    (this._sessionId = c),
                    (this._debugMode = d),
                    (this.browserOrDeviceInfo = l
                      ? {
                          browserName: l.browser.name,
                          browserVersion: l.browser.version,
                          osName: l.os.name,
                          osVersion: l.os.version,
                          platform: u,
                        }
                      : p
                      ? je({ platform: u }, p)
                      : null);
                },
                [
                  {
                    key: "pushLogs",
                    value:
                      ((e = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n, s, i, o, c, d;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((r = t.logType),
                                      (a = t.logText),
                                      (n = t.attributes),
                                      (s = t.dashboardLog),
                                      (i = void 0 !== s && s),
                                      (o = this._logs),
                                      (c = o.enabled),
                                      (d = o.endPoint),
                                      !c)
                                    ) {
                                      e.next = 8;
                                      break;
                                    }
                                    return (
                                      (e.next = 5),
                                      fetch(d, {
                                        method: "POST",
                                        headers: {
                                          Authorization: this._observabilityJwt,
                                          "Content-Type": "application/json",
                                        },
                                        body: JSON.stringify({
                                          logType: r,
                                          logText: a,
                                          attributes: je(
                                            je({}, n),
                                            {},
                                            {
                                              roomId: this._roomId,
                                              peerId: this._peerId,
                                              SDK: "".concat(
                                                this._deviceInfo.sdkType,
                                                "-sdk"
                                              ),
                                              SDK_VERSION:
                                                this._deviceInfo.sdkVersion,
                                              sessionId: this._sessionId,
                                            },
                                            this.browserOrDeviceInfo
                                          ),
                                          debugMode: this._debugMode,
                                          dashboardLog: i,
                                        }),
                                      })
                                        .then(function (e) {
                                          return e.json();
                                        })
                                        .catch(function (e) {
                                          return console.log("error", e), {};
                                        })
                                    );
                                  case 5:
                                    return e.abrupt("return", e.sent);
                                  case 8:
                                    return e.abrupt("return", null);
                                  case 9:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (t) {
                        return e.apply(this, arguments);
                      }),
                  },
                ]
              );
              var e;
            })(),
            Fe = r(4973);
          function Ue(e, t) {
            var r =
              ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
              e["@@iterator"];
            if (!r) {
              if (
                Array.isArray(e) ||
                (r = (function (e, t) {
                  if (e) {
                    if ("string" == typeof e) return We(e, t);
                    var r = {}.toString.call(e).slice(8, -1);
                    return (
                      "Object" === r &&
                        e.constructor &&
                        (r = e.constructor.name),
                      "Map" === r || "Set" === r
                        ? Array.from(e)
                        : "Arguments" === r ||
                          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                        ? We(e, t)
                        : void 0
                    );
                  }
                })(e)) ||
                (t && e && "number" == typeof e.length)
              ) {
                r && (e = r);
                var a = 0,
                  n = function () {};
                return {
                  s: n,
                  n: function () {
                    return a >= e.length
                      ? { done: !0 }
                      : { done: !1, value: e[a++] };
                  },
                  e: function (e) {
                    throw e;
                  },
                  f: n,
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            var s,
              i = !0,
              o = !1;
            return {
              s: function () {
                r = r.call(e);
              },
              n: function () {
                var e = r.next();
                return (i = e.done), e;
              },
              e: function (e) {
                (o = !0), (s = e);
              },
              f: function () {
                try {
                  i || null == r.return || r.return();
                } finally {
                  if (o) throw s;
                }
              },
            };
          }
          function We(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, a = Array(t); r < t; r++) a[r] = e[r];
            return a;
          }
          function qe(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var a = Object.getOwnPropertySymbols(e);
              t &&
                (a = a.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, a);
            }
            return r;
          }
          function He(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? qe(Object(r), !0).forEach(function (t) {
                    (0, c.A)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : qe(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var Ve,
            Ge = {
              sd: {
                low: { s: 0, t: 2 },
                med: { s: 0, t: 2 },
                high: { s: 1, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 },
              },
              hd: {
                low: { s: 0, t: 2 },
                med: { s: 1, t: 2 },
                high: { s: 2, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 },
              },
            },
            ze = {
              qvga: { width: { ideal: 320 }, height: { ideal: 240 } },
              vga: { width: { ideal: 640 }, height: { ideal: 480 } },
              sd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 },
              },
              hd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 },
              },
            },
            $e = {
              sd: [
                { scaleResolutionDownBy: 6 },
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 },
              ],
              hd: [
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 },
                { scaleResolutionDownBy: 1 },
              ],
            },
            Ke = [{ scalabilityMode: "S3T3_KEY" }],
            Je = [{ dtx: !0, maxFramerate: 30 }],
            Qe = [{ scalabilityMode: "S3T3", dtx: !0 }],
            Ye = new g("RoomClient"),
            Xe = (function () {
              return (0, o.A)(
                function e(t) {
                  var r,
                    a,
                    n = t.roomId,
                    s = t.peerId,
                    o = t.secret,
                    d = t.displayName,
                    l = t.device,
                    p = t.handlerName,
                    u = t.useSimulcast,
                    h = t.useSharingSimulcast,
                    m = t.forceTcp,
                    f = t.mode,
                    g = t.forceH264,
                    _ = t.forceVP9,
                    v = t.svc,
                    b = t.datachannel,
                    y = t.externalVideo,
                    w = t.micEnabled,
                    S = t.webcamEnabled,
                    R = t.maxResolution,
                    E = t.useSpartialLayerAnalytics,
                    k = t._deviceInfo,
                    T = t.customCameraVideoTrack,
                    C = t.customMicrophoneAudioTrack,
                    P = t.autoConsume,
                    O = t.preferredProtocol,
                    D = t.signalingBaseUrl,
                    x = t.metaData,
                    I = t.defaultCameraIndex,
                    M = t.debugMode;
                  (0, i.A)(this, e),
                    (0, c.A)(this, "delay", function (e) {
                      return new Promise(function (t) {
                        return setTimeout(t, e);
                      });
                    }),
                    Ye.debug(
                      'constructor() [roomId:"%s", peerId:"%s", displayName:"%s", device:%s]',
                      n,
                      s,
                      d,
                      l.flag
                    ),
                    (this.useSpartialLayerAnalytics = E || !1),
                    (this._deviceInfo = k),
                    (this._eventEmitter = new oe.EventEmitter()),
                    (this._closed = !1),
                    (this._displayName = d),
                    (this._device = l),
                    (this._forceTcp = m),
                    (this._preferredProtocol = O),
                    f == Ce.n.CONFERENCE
                      ? ((r = !0), (a = !0))
                      : ((r = !1), (a = !1)),
                    (this._mode = f),
                    (this._produce = r),
                    (this._consume = a),
                    (this._useDataChannel = b),
                    (this._forceH264 = Boolean(g)),
                    (this._forceVP9 = Boolean(_)),
                    (this._micEnabled = Boolean(w)),
                    (this._webcamEnabled = Boolean(S)),
                    (this._externalVideo = null),
                    (this._externalVideoStream = null),
                    (this._nextDataChannelTestNumber = 0),
                    y &&
                      ((this._externalVideo = document.createElement("video")),
                      (this._externalVideo.controls = !0),
                      (this._externalVideo.loop = !0),
                      this._externalVideo.setAttribute("playsinline", ""),
                      (this._externalVideo.src = y),
                      this._externalVideo.play().catch(function (e) {
                        return Ye.warn("externalVideo.play() failed:%o", e);
                      })),
                    (this._handlerName = p),
                    (this._useSimulcast = u),
                    (this._useSharingSimulcast = h),
                    (this._protooUrl = ""),
                    (this._secret = o),
                    (this._peerId = s),
                    (this._roomId = n),
                    (this._baseUrl = ""),
                    (this._protoo = null),
                    (this._mediasoupDevice = null),
                    (this._sendTransport = null),
                    (this._recvTransport = null),
                    (this._micProducer = null),
                    (this._webcamProducer = null),
                    (this._shareProducer = null),
                    (this._shareAudioProducer = null),
                    (this._chatDataProducer = null),
                    (this._botDataProducer = null),
                    (this._consumers = new Map()),
                    (this._dataConsumers = new Map()),
                    (this._mics = new Map()),
                    (this._mic = { device: null }),
                    (this._webcams = new Map()),
                    (this._webcam = { device: null, resolution: R || "hd" }),
                    (this._pinnedParticipants = new Map()),
                    v &&
                      ((Ke[0].scalabilityMode = "".concat(v, "_KEY")),
                      (Qe[0].scalabilityMode = v)),
                    (this.customCameraVideoTrack = T),
                    (this.customMicrophoneAudioTrack = C),
                    (this._autoConsume = P),
                    (this._iceServers = []),
                    (this._metrics = new Te.VideoSDKMetrics({
                      refreshEvery: 1e3,
                      startAfter: 1e3,
                      verbose: !1,
                    })),
                    (this._stats = {}),
                    (this._latestStats = {}),
                    (this._isWebsocketAlive = !1),
                    (this._pingWebsocketInterval = null),
                    (this._pingInternetInterval = null),
                    (this._pingWebsocketFailedCounter = 0),
                    (this._pongInternetCounter = 0),
                    (this._transportState = ""),
                    (this._openTelemetry = null),
                    (this._videosdkLogs = null),
                    (this._signalingBaseUrl = D || "api.videosdk.live"),
                    (this._metaData = x),
                    (this._defaultCameraIndex = I),
                    (this._debugMode = Boolean(M));
                },
                [
                  {
                    key: "on",
                    value: function (e, t) {
                      this._eventEmitter.on(e, t);
                    },
                  },
                  {
                    key: "close",
                    value: function (e) {
                      var t,
                        r,
                        a,
                        n,
                        s,
                        i = e.sendLeft,
                        o = void 0 === i || i;
                      o &&
                        (this._eventEmitter.emit("MEETING_STATE_CHANGED", {
                          state: "CLOSING",
                        }),
                        null === (s = this._openTelemetry) ||
                          void 0 === s ||
                          s.traceAutoComplete({
                            spanName: "Meeting is in CLOSING State",
                            status: 1,
                          }));
                      if (!this._closed) {
                        (this._closed = !0),
                          this._pingWebsocketInterval &&
                            clearInterval(this._pingWebsocketInterval),
                          (this._pingWebsocketInterval = null),
                          this._pingInternetInterval &&
                            clearInterval(this._pingInternetInterval),
                          (this._pingInternetInterval = null),
                          this._protoo.close(),
                          this._metrics.running &&
                            this._metrics.stopAllProbes(),
                          Ye.debug("close()");
                        var c =
                          null === (t = this._openTelemetry) || void 0 === t
                            ? void 0
                            : t.trace({ spanName: "Closing Trasnport" });
                        this._sendTransport && this._sendTransport.close(),
                          this._recvTransport && this._recvTransport.close(),
                          null === (r = this._openTelemetry) ||
                            void 0 === r ||
                            r.completeSpan({
                              span: c,
                              status: 1,
                              message: "Closed Trasnport",
                            }),
                          Ve.dispatch(x("closed")),
                          o &&
                            this._eventEmitter.emit("MEETING_STATE_CHANGED", {
                              state: "CLOSED",
                            }),
                          null === (a = this._openTelemetry) ||
                            void 0 === a ||
                            a.traceAutoComplete({
                              spanName: "Meeting is in CLOSED State",
                              status: 1,
                            }),
                          o && this._eventEmitter.emit("MEETING_LEFT"),
                          null === (n = this._openTelemetry) ||
                            void 0 === n ||
                            n.traceAutoComplete({
                              spanName: "Emitted MEETING_LEFT Event",
                              status: 1,
                            });
                      }
                    },
                  },
                  {
                    key: "join",
                    value:
                      ((ir = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r,
                            a,
                            n,
                            i,
                            o,
                            d,
                            h,
                            m,
                            f,
                            g,
                            _ = this;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2),
                                      y({
                                        roomId: this._roomId,
                                        secret: this._secret,
                                        signalingBaseUrl:
                                          this._signalingBaseUrl,
                                      })
                                    );
                                  case 2:
                                    (a = e.sent),
                                      (n = a.baseUrl),
                                      (i = a.iceServers),
                                      (o = a.logs),
                                      (d = a.observabilityJwt),
                                      (h = a.traces),
                                      (m = a.metaData),
                                      (f = a.signalingUrl),
                                      (this._baseUrl = n),
                                      (this._protooUrl = ""
                                        .concat(
                                          f || "wss://".concat(this._baseUrl),
                                          "/?roomId="
                                        )
                                        .concat(this._roomId, "&peerId=")
                                        .concat(this._peerId, "&secret=")
                                        .concat(this._secret, "&mode=")
                                        .concat(this._mode)),
                                      (this._iceServers = i),
                                      (this._tracesEnabled = h.enabled),
                                      (this._openTelemetry = new Le(
                                        (0, c.A)(
                                          {
                                            roomId: this._roomId,
                                            peerId: this._peerId,
                                            sdkName: "".concat(
                                              this._deviceInfo.sdkType,
                                              "-sdk"
                                            ),
                                            traces: h,
                                            logs: o,
                                            observabilityJwt: d,
                                            metaData: m,
                                          },
                                          "traces",
                                          h
                                        )
                                      )),
                                      (this._joinSpan =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "Join() Calling",
                                              attributes: {
                                                DeviceInfo: JSON.stringify(
                                                  this._deviceInfo
                                                ),
                                                mode: this._mode,
                                                displayName: this._displayName,
                                                multiStream: this._useSimulcast,
                                                micEnabled: this._micEnabled,
                                                webcamEnabled:
                                                  this._webcamEnabled,
                                                CustomVideoTrack:
                                                  !!this.customCameraVideoTrack,
                                                CustomMicTrack:
                                                  !!this
                                                    .customMicrophoneAudioTrack,
                                                signalingUrl:
                                                  f ||
                                                  "signalingUrl not specify",
                                              },
                                            })),
                                      (g = new p.TJ(this._protooUrl)),
                                      (this._protoo = new p.xM(g)),
                                      this._eventEmitter.emit(
                                        "MEETING_STATE_CHANGED",
                                        { state: "CONNECTING" }
                                      ),
                                      Ve.dispatch(x("connecting")),
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName:
                                            "Meeting is in CONNECTING State",
                                          span: this._joinSpan,
                                          status: 1,
                                        }),
                                      this._protoo.on("open", function () {
                                        var e;
                                        (_._isWebsocketAlive = !0),
                                          (_._closed = !1),
                                          _.startPingPong(),
                                          _._eventEmitter.emit(
                                            "MEETING_STATE_CHANGED",
                                            { state: "CONNECTED" }
                                          ),
                                          null === (e = _._openTelemetry) ||
                                            void 0 === e ||
                                            e.traceAutoComplete({
                                              spanName:
                                                "Meeting is in CONNECTED State",
                                              span: _._joinSpan,
                                              status: 1,
                                            }),
                                          _.requestEntry();
                                      }),
                                      this._protoo.on("failed", function () {
                                        var e;
                                        _._eventEmitter.emit(
                                          "MEETING_STATE_CHANGED",
                                          { state: "FAILED" }
                                        ),
                                          null === (e = _._openTelemetry) ||
                                            void 0 === e ||
                                            e.traceAutoComplete({
                                              spanName:
                                                "Meeting is in FAILED State",
                                              span: _._joinSpan,
                                              status: 2,
                                            }),
                                          Ve.dispatch(
                                            ie({
                                              type: "error",
                                              text: "WebSocket connection failed",
                                            })
                                          );
                                      }),
                                      this._protoo.on(
                                        "disconnected",
                                        function () {
                                          var e;
                                          _._eventEmitter.emit(
                                            "MEETING_STATE_CHANGED",
                                            { state: "DISCONNECTED" }
                                          ),
                                            null === (e = _._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  "Meeting is in DISCONNECTED State",
                                                span: _._joinSpan,
                                                status: 1,
                                              }),
                                            Ve.dispatch(
                                              ie({
                                                type: "error",
                                                text: "WebSocket disconnected",
                                              })
                                            ),
                                            _._sendTransport &&
                                              (_._sendTransport.close(),
                                              (_._sendTransport = null)),
                                            _._recvTransport &&
                                              (_._recvTransport.close(),
                                              (_._recvTransport = null)),
                                            Ve.dispatch(x("closed"));
                                        }
                                      ),
                                      this._protoo.on("close", function () {
                                        _._closed || _.close({ sendLeft: !0 });
                                      }),
                                      this._protoo.on(
                                        "request",
                                        (function () {
                                          var e = (0, s.A)(
                                            l().mark(function e(t, r, a) {
                                              var n,
                                                s,
                                                i,
                                                o,
                                                c,
                                                d,
                                                p,
                                                h,
                                                m,
                                                f,
                                                g,
                                                v,
                                                b,
                                                y,
                                                w,
                                                S,
                                                R,
                                                E,
                                                k,
                                                T,
                                                C,
                                                P,
                                                O,
                                                D,
                                                x,
                                                I,
                                                M,
                                                A,
                                                L,
                                                N,
                                                j,
                                                B,
                                                F,
                                                U,
                                                W,
                                                q,
                                                H,
                                                V,
                                                G,
                                                z,
                                                $,
                                                K,
                                                J,
                                                X,
                                                Z,
                                                ee,
                                                te,
                                                re,
                                                ae,
                                                se,
                                                oe,
                                                ce,
                                                de,
                                                le,
                                                pe,
                                                ue,
                                                he,
                                                me,
                                                fe,
                                                ge,
                                                _e,
                                                ve;
                                              return l().wrap(
                                                function (e) {
                                                  for (;;)
                                                    switch ((e.prev = e.next)) {
                                                      case 0:
                                                        Ye.debug(
                                                          'proto "request" event [method:%s, data:%o]',
                                                          t.method,
                                                          t.data
                                                        ),
                                                          (e.t0 = t.method),
                                                          (e.next =
                                                            "close" === e.t0
                                                              ? 4
                                                              : "newConsumer" ===
                                                                e.t0
                                                              ? 7
                                                              : "newDataConsumer" ===
                                                                e.t0
                                                              ? 45
                                                              : "enableMic" ===
                                                                e.t0
                                                              ? 72
                                                              : "disableMic" ===
                                                                e.t0
                                                              ? 74
                                                              : "enableWebcam" ===
                                                                e.t0
                                                              ? 88
                                                              : "disableWebcam" ===
                                                                e.t0
                                                              ? 90
                                                              : "pinStateChanged" ===
                                                                e.t0
                                                              ? 104
                                                              : "switchRoom" ===
                                                                e.t0
                                                              ? 124
                                                              : "statsData" ===
                                                                e.t0
                                                              ? 127
                                                              : 130);
                                                        break;
                                                      case 4:
                                                        return (
                                                          r(),
                                                          _.close({
                                                            sendLeft: !0,
                                                          }),
                                                          e.abrupt("break", 130)
                                                        );
                                                      case 7:
                                                        if (
                                                          ((i =
                                                            null ===
                                                              (n =
                                                                _._openTelemetry) ||
                                                            void 0 === n
                                                              ? void 0
                                                              : n.trace({
                                                                  spanName:
                                                                    "Protoo REQ: newConsumer",
                                                                  attributes: {
                                                                    request:
                                                                      JSON.stringify(
                                                                        t
                                                                      ),
                                                                  },
                                                                })),
                                                          _._consume)
                                                        ) {
                                                          e.next = 12;
                                                          break;
                                                        }
                                                        return (
                                                          a(
                                                            403,
                                                            "I do not want to consume"
                                                          ),
                                                          null ===
                                                            (o =
                                                              _._openTelemetry) ||
                                                            void 0 === o ||
                                                            o.completeSpan({
                                                              span: i,
                                                              status: 2,
                                                              message:
                                                                "I do not want to consume",
                                                            }),
                                                          e.abrupt("break", 130)
                                                        );
                                                      case 12:
                                                        return (
                                                          (c = t.data),
                                                          (d = c.peerId),
                                                          (p = c.producerId),
                                                          (h = c.id),
                                                          (m = c.kind),
                                                          (f = c.rtpParameters),
                                                          (g = c.type),
                                                          (v = c.appData),
                                                          (b =
                                                            c.producerPaused),
                                                          (y =
                                                            null ===
                                                              (s =
                                                                _._openTelemetry) ||
                                                            void 0 === s
                                                              ? void 0
                                                              : s.trace({
                                                                  spanName:
                                                                    "Creating Consumer",
                                                                  span: i,
                                                                })),
                                                          (e.prev = 14),
                                                          (e.next = 17),
                                                          _._recvTransport.consume(
                                                            {
                                                              id: h,
                                                              producerId: p,
                                                              kind: m,
                                                              rtpParameters: f,
                                                              appData: He(
                                                                He({}, v),
                                                                {},
                                                                { peerId: d }
                                                              ),
                                                            }
                                                          )
                                                        );
                                                      case 17:
                                                        (k = e.sent),
                                                          (T =
                                                            u.parseScalabilityMode(
                                                              k.rtpParameters
                                                                .encodings[0]
                                                                .scalabilityMode
                                                            )),
                                                          (C = T.spatialLayers),
                                                          (P =
                                                            T.temporalLayers),
                                                          (k.spatialLayers = C),
                                                          (k.temporalLayers =
                                                            P),
                                                          (k.currentSpatialLayers =
                                                            C - 1),
                                                          (k.currentTemporalLayers =
                                                            P - 1),
                                                          _._consumers.set(
                                                            k.id,
                                                            k
                                                          ),
                                                          k.on(
                                                            "transportclose",
                                                            function () {
                                                              _._consumers.delete(
                                                                k.id
                                                              );
                                                              var e = Y(
                                                                k.id,
                                                                d
                                                              );
                                                              Ve.dispatch(e),
                                                                _._eventEmitter.emit(
                                                                  e.type,
                                                                  e.payload
                                                                );
                                                            }
                                                          ),
                                                          null ===
                                                            (w =
                                                              _._openTelemetry) ||
                                                            void 0 === w ||
                                                            w.completeSpan({
                                                              span: y,
                                                              status: 1,
                                                              message:
                                                                "Consumer Created",
                                                            }),
                                                          (y =
                                                            null ===
                                                              (S =
                                                                _._openTelemetry) ||
                                                            void 0 === S
                                                              ? void 0
                                                              : S.trace({
                                                                  spanName:
                                                                    "Sending Stream Enabled Event",
                                                                  span: i,
                                                                })),
                                                          (O = Q(
                                                            {
                                                              id: k.id,
                                                              type: g,
                                                              locallyPaused: !1,
                                                              remotelyPaused: b,
                                                              rtpParameters:
                                                                k.rtpParameters,
                                                              spatialLayers: C,
                                                              temporalLayers: P,
                                                              currentSpatialLayer:
                                                                C - 1,
                                                              currentTemporalLayer:
                                                                P - 1,
                                                              preferredSpatialLayer:
                                                                C - 1,
                                                              preferredTemporalLayer:
                                                                P - 1,
                                                              priority: 1,
                                                              codec:
                                                                k.rtpParameters.codecs[0].mimeType.split(
                                                                  "/"
                                                                )[1],
                                                              track: k.track,
                                                              appData: v,
                                                              instance: k,
                                                            },
                                                            d
                                                          )),
                                                          Ve.dispatch(O),
                                                          _._eventEmitter.emit(
                                                            O.type,
                                                            O.payload
                                                          ),
                                                          r(),
                                                          "video" === k.kind &&
                                                            Ve.getState().me
                                                              .audioOnly &&
                                                            _._pauseConsumer(k),
                                                          null ===
                                                            (R =
                                                              _._openTelemetry) ||
                                                            void 0 === R ||
                                                            R.completeSpan({
                                                              span: y,
                                                              status: 1,
                                                              message:
                                                                "Event Send Successfully",
                                                            }),
                                                          null ===
                                                            (E =
                                                              _._openTelemetry) ||
                                                            void 0 === E ||
                                                            E.completeSpan({
                                                              span: i,
                                                              status: 1,
                                                              message:
                                                                "New Consumer Created Successfully",
                                                              attributes: {
                                                                "consumer.consumerId":
                                                                  k.id,
                                                              },
                                                            }),
                                                          "video" == k.kind &&
                                                            k.appData.share &&
                                                            (null ===
                                                              (D =
                                                                _._openTelemetry) ||
                                                              void 0 === D ||
                                                              D.traceAutoComplete(
                                                                {
                                                                  spanName:
                                                                    "Presenter Changed",
                                                                  span: i,
                                                                  attributes: {
                                                                    "peer.id":
                                                                      d,
                                                                  },
                                                                }
                                                              )),
                                                          (e.next = 44);
                                                        break;
                                                      case 37:
                                                        throw (
                                                          ((e.prev = 37),
                                                          (e.t1 = e.catch(14)),
                                                          null ===
                                                            (x =
                                                              _._openTelemetry) ||
                                                            void 0 === x ||
                                                            x.completeSpan({
                                                              span: y,
                                                              status: 2,
                                                              message:
                                                                "Error creating a Consumer: ".concat(
                                                                  e.t1
                                                                ),
                                                            }),
                                                          null ===
                                                            (I =
                                                              _._openTelemetry) ||
                                                            void 0 === I ||
                                                            I.completeSpan({
                                                              span: i,
                                                              status: 2,
                                                              message:
                                                                "Error creating a Consumer: ".concat(
                                                                  e.t1
                                                                ),
                                                            }),
                                                          Ve.dispatch(
                                                            ie({
                                                              type: "error",
                                                              text: "Error creating a Consumer: ".concat(
                                                                e.t1
                                                              ),
                                                            })
                                                          ),
                                                          null ===
                                                            (M =
                                                              _._videosdkLogs) ||
                                                            void 0 === M ||
                                                            M.pushLogs({
                                                              logText:
                                                                "Error creating a Consumer",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.t1.message,
                                                              },
                                                            }),
                                                          e.t1)
                                                        );
                                                      case 44:
                                                        return e.abrupt(
                                                          "break",
                                                          130
                                                        );
                                                      case 45:
                                                        if (_._consume) {
                                                          e.next = 48;
                                                          break;
                                                        }
                                                        return (
                                                          a(
                                                            403,
                                                            "I do not want to data consume"
                                                          ),
                                                          e.abrupt("break", 130)
                                                        );
                                                      case 48:
                                                        if (_._useDataChannel) {
                                                          e.next = 51;
                                                          break;
                                                        }
                                                        return (
                                                          a(
                                                            403,
                                                            "I do not want DataChannels"
                                                          ),
                                                          e.abrupt("break", 130)
                                                        );
                                                      case 51:
                                                        return (
                                                          (A = t.data),
                                                          (L = A.peerId),
                                                          (N =
                                                            A.dataProducerId),
                                                          (j = A.id),
                                                          (B =
                                                            A.sctpStreamParameters),
                                                          (F = A.label),
                                                          (U = A.protocol),
                                                          (W = A.appData),
                                                          (e.prev = 52),
                                                          (e.next = 55),
                                                          _._recvTransport.consumeData(
                                                            {
                                                              id: j,
                                                              dataProducerId: N,
                                                              sctpStreamParameters:
                                                                B,
                                                              label: F,
                                                              protocol: U,
                                                              appData: He(
                                                                He({}, W),
                                                                {},
                                                                { peerId: L }
                                                              ),
                                                            }
                                                          )
                                                        );
                                                      case 55:
                                                        (q = e.sent),
                                                          _._dataConsumers.set(
                                                            q.id,
                                                            q
                                                          ),
                                                          q.on(
                                                            "transportclose",
                                                            function () {
                                                              _._dataConsumers.delete(
                                                                q.id
                                                              );
                                                            }
                                                          ),
                                                          q.on(
                                                            "open",
                                                            function () {
                                                              Ye.debug(
                                                                'DataConsumer "open" event'
                                                              );
                                                            }
                                                          ),
                                                          q.on(
                                                            "close",
                                                            function () {
                                                              Ye.warn(
                                                                'DataConsumer "close" event'
                                                              ),
                                                                _._dataConsumers.delete(
                                                                  q.id
                                                                ),
                                                                Ve.dispatch(
                                                                  ie({
                                                                    type: "error",
                                                                    text: "DataConsumer closed",
                                                                  })
                                                                );
                                                            }
                                                          ),
                                                          q.on(
                                                            "error",
                                                            function (e) {
                                                              Ye.error(
                                                                'DataConsumer "error" event:%o',
                                                                e
                                                              ),
                                                                Ve.dispatch(
                                                                  ie({
                                                                    type: "error",
                                                                    text: "DataConsumer error: ".concat(
                                                                      e
                                                                    ),
                                                                  })
                                                                );
                                                            }
                                                          ),
                                                          q.on(
                                                            "message",
                                                            function (e) {
                                                              if (
                                                                (Ye.debug(
                                                                  'DataConsumer "message" event [streamId:%d]',
                                                                  q
                                                                    .sctpStreamParameters
                                                                    .streamId
                                                                ),
                                                                (window.DC_MESSAGE =
                                                                  e),
                                                                e instanceof
                                                                  ArrayBuffer)
                                                              ) {
                                                                var t =
                                                                  new DataView(
                                                                    e
                                                                  ).getUint32();
                                                                return t ==
                                                                  Math.pow(
                                                                    2,
                                                                    32
                                                                  ) -
                                                                    1
                                                                  ? (Ye.warn(
                                                                      "dataChannelTest finished!"
                                                                    ),
                                                                    void (_._nextDataChannelTestNumber = 0))
                                                                  : (t >
                                                                      _._nextDataChannelTestNumber &&
                                                                      Ye.warn(
                                                                        "dataChannelTest: %s packets missing",
                                                                        t -
                                                                          _._nextDataChannelTestNumber
                                                                      ),
                                                                    void (_._nextDataChannelTestNumber =
                                                                      t + 1));
                                                              }
                                                              if (
                                                                "string" ==
                                                                typeof e
                                                              )
                                                                switch (
                                                                  q.label
                                                                ) {
                                                                  case "chat":
                                                                    var r =
                                                                        Ve.getState()
                                                                          .peers,
                                                                      a =
                                                                        Object.keys(
                                                                          r
                                                                        )
                                                                          .map(
                                                                            function (
                                                                              e
                                                                            ) {
                                                                              return r[
                                                                                e
                                                                              ];
                                                                            }
                                                                          )
                                                                          .find(
                                                                            function (
                                                                              e
                                                                            ) {
                                                                              return e.dataConsumers.includes(
                                                                                q.id
                                                                              );
                                                                            }
                                                                          );
                                                                    if (!a) {
                                                                      Ye.warn(
                                                                        'DataConsumer "message" from unknown peer'
                                                                      );
                                                                      break;
                                                                    }
                                                                    Ve.dispatch(
                                                                      ie({
                                                                        title:
                                                                          "".concat(
                                                                            a.displayName,
                                                                            " says:"
                                                                          ),
                                                                        text: e,
                                                                        timeout: 5e3,
                                                                      })
                                                                    ),
                                                                      _._eventEmitter.emit(
                                                                        "CHAT_MESSAGE",
                                                                        {
                                                                          text: e,
                                                                          senderId:
                                                                            a.id,
                                                                          timestamp:
                                                                            new Date().getTime(),
                                                                        }
                                                                      );
                                                                    break;
                                                                  case "bot":
                                                                    Ve.dispatch(
                                                                      ie({
                                                                        title:
                                                                          "Message from Bot:",
                                                                        text: e,
                                                                        timeout: 5e3,
                                                                      })
                                                                    );
                                                                }
                                                              else
                                                                Ye.warn(
                                                                  'ignoring DataConsumer "message" (not a string)'
                                                                );
                                                            }
                                                          ),
                                                          (window.DC = q),
                                                          Ve.dispatch(
                                                            ne(
                                                              {
                                                                id: q.id,
                                                                sctpStreamParameters:
                                                                  q.sctpStreamParameters,
                                                                label: q.label,
                                                                protocol:
                                                                  q.protocol,
                                                              },
                                                              L
                                                            )
                                                          ),
                                                          r(),
                                                          (e.next = 71);
                                                        break;
                                                      case 67:
                                                        (e.prev = 67),
                                                          (e.t2 = e.catch(52)),
                                                          Ye.error(
                                                            '"newDataConsumer" request failed:%o',
                                                            e.t2
                                                          ),
                                                          Ve.dispatch(
                                                            ie({
                                                              type: "error",
                                                              text: "Error creating a DataConsumer: ".concat(
                                                                e.t2
                                                              ),
                                                            })
                                                          );
                                                      case 71:
                                                        return e.abrupt(
                                                          "break",
                                                          130
                                                        );
                                                      case 72:
                                                        try {
                                                          (V = t.data.peerId),
                                                            null ===
                                                              (H =
                                                                _._openTelemetry) ||
                                                              void 0 === H ||
                                                              H.traceAutoComplete(
                                                                {
                                                                  spanName:
                                                                    "Emitting MIC_REQUESTED & Protoo REQ: enableMic for ".concat(
                                                                      V
                                                                    ),
                                                                  status: 1,
                                                                }
                                                              ),
                                                            _._eventEmitter.emit(
                                                              "MIC_REQUESTED",
                                                              { peerId: V }
                                                            ),
                                                            r();
                                                        } catch (e) {
                                                          Ye.error(
                                                            '"enableMic" request failed:%o',
                                                            e
                                                          ),
                                                            null ===
                                                              (G =
                                                                _._videosdkLogs) ||
                                                              void 0 === G ||
                                                              G.pushLogs({
                                                                logText:
                                                                  "Error enableMic request failed",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.message,
                                                                },
                                                              }),
                                                            _._emitError({
                                                              code: 3027,
                                                              message:
                                                                e.message,
                                                            });
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          130
                                                        );
                                                      case 74:
                                                        return (
                                                          (e.prev = 74),
                                                          (z =
                                                            null ===
                                                              ($ =
                                                                _._openTelemetry) ||
                                                            void 0 === $
                                                              ? void 0
                                                              : $.trace({
                                                                  spanName:
                                                                    "Protoo REQ: disableMic",
                                                                })),
                                                          (e.next = 78),
                                                          _.disableMic(!1, z)
                                                        );
                                                      case 78:
                                                        null ===
                                                          (K =
                                                            _._openTelemetry) ||
                                                          void 0 === K ||
                                                          K.completeSpan({
                                                            span: z,
                                                            status: 1,
                                                            message:
                                                              "Request Completed",
                                                          }),
                                                          r(),
                                                          (e.next = 87);
                                                        break;
                                                      case 82:
                                                        (e.prev = 82),
                                                          (e.t3 = e.catch(74)),
                                                          null ===
                                                            (J =
                                                              _._openTelemetry) ||
                                                            void 0 === J ||
                                                            J.completeSpan({
                                                              span: z,
                                                              status: 2,
                                                              message:
                                                                "disableMic request failed ".concat(
                                                                  e.t3
                                                                ),
                                                            }),
                                                          null ===
                                                            (X =
                                                              _._videosdkLogs) ||
                                                            void 0 === X ||
                                                            X.pushLogs({
                                                              logText:
                                                                "Error disableMic request failed",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.t3.message,
                                                              },
                                                            }),
                                                          _._emitError({
                                                            code: 3028,
                                                            message:
                                                              e.t3.message,
                                                          });
                                                      case 87:
                                                        return e.abrupt(
                                                          "break",
                                                          130
                                                        );
                                                      case 88:
                                                        try {
                                                          (ee = t.data.peerId),
                                                            null ===
                                                              (Z =
                                                                _._openTelemetry) ||
                                                              void 0 === Z ||
                                                              Z.traceAutoComplete(
                                                                {
                                                                  spanName:
                                                                    "Emitting WEBCAM_REQUESTED & Protoo REQ: enableWebcam for ".concat(
                                                                      ee
                                                                    ),
                                                                  status: 1,
                                                                }
                                                              ),
                                                            _._eventEmitter.emit(
                                                              "WEBCAM_REQUESTED",
                                                              { peerId: ee }
                                                            ),
                                                            r();
                                                        } catch (e) {
                                                          Ye.error(
                                                            '"enableWebcam" request failed:%o',
                                                            e
                                                          ),
                                                            null ===
                                                              (te =
                                                                _._videosdkLogs) ||
                                                              void 0 === te ||
                                                              te.pushLogs({
                                                                logText:
                                                                  "Error enableWebcam request failed",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.message,
                                                                },
                                                              }),
                                                            _._emitError({
                                                              code: 3029,
                                                              message:
                                                                e.message,
                                                            });
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          130
                                                        );
                                                      case 90:
                                                        return (
                                                          (e.prev = 90),
                                                          (re =
                                                            null ===
                                                              (ae =
                                                                _._openTelemetry) ||
                                                            void 0 === ae
                                                              ? void 0
                                                              : ae.trace({
                                                                  spanName:
                                                                    "Protoo REQ: disableWebcam",
                                                                })),
                                                          (e.next = 94),
                                                          _.disableWebcam(re)
                                                        );
                                                      case 94:
                                                        null ===
                                                          (se =
                                                            _._openTelemetry) ||
                                                          void 0 === se ||
                                                          se.completeSpan({
                                                            span: re,
                                                            status: 1,
                                                            message:
                                                              "Request Completed",
                                                          }),
                                                          r(),
                                                          (e.next = 103);
                                                        break;
                                                      case 98:
                                                        (e.prev = 98),
                                                          (e.t4 = e.catch(90)),
                                                          null ===
                                                            (oe =
                                                              _._openTelemetry) ||
                                                            void 0 === oe ||
                                                            oe.completeSpan({
                                                              span: re,
                                                              status: 2,
                                                              message:
                                                                "disableWebcam request failed ".concat(
                                                                  e.t4
                                                                ),
                                                            }),
                                                          null ===
                                                            (ce =
                                                              _._videosdkLogs) ||
                                                            void 0 === ce ||
                                                            ce.pushLogs({
                                                              logText:
                                                                "Error disableWebcam request failed",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.t4.message,
                                                              },
                                                            }),
                                                          _._emitError({
                                                            code: 3030,
                                                            message:
                                                              e.t4.message,
                                                          });
                                                      case 103:
                                                        return e.abrupt(
                                                          "break",
                                                          130
                                                        );
                                                      case 104:
                                                        (e.prev = 104),
                                                          (ue = t.data),
                                                          (he = ue.peerId),
                                                          (me = ue.state),
                                                          (fe = ue.pinnedBy),
                                                          (de =
                                                            null ===
                                                              (le =
                                                                _._openTelemetry) ||
                                                            void 0 === le
                                                              ? void 0
                                                              : le.trace({
                                                                  spanName:
                                                                    "Protoo REQ: pinStateChanged",
                                                                  attributes: {
                                                                    requestData:
                                                                      JSON.stringify(
                                                                        {
                                                                          peerId:
                                                                            he,
                                                                          state:
                                                                            me,
                                                                          pinnedBy:
                                                                            fe,
                                                                        }
                                                                      ),
                                                                  },
                                                                })),
                                                          _._pinnedParticipants.has(
                                                            he
                                                          ) ||
                                                            _._pinnedParticipants.set(
                                                              he,
                                                              {
                                                                cam: !1,
                                                                share: !1,
                                                              }
                                                            ),
                                                          (ge =
                                                            _._pinnedParticipants.get(
                                                              he
                                                            )),
                                                          null != me.cam &&
                                                            (ge.cam = me.cam),
                                                          null != me.share &&
                                                            (ge.share =
                                                              me.share),
                                                          _._pinnedParticipants.set(
                                                            he,
                                                            ge
                                                          ),
                                                          _._eventEmitter.emit(
                                                            "PIN_STATE_CHANGED",
                                                            {
                                                              peerId: he,
                                                              state: me,
                                                              pinnedBy: fe,
                                                            }
                                                          ),
                                                          0 == ge.share &&
                                                            0 == ge.cam &&
                                                            _._pinnedParticipants.delete(
                                                              he
                                                            ),
                                                          null ===
                                                            (pe =
                                                              _._openTelemetry) ||
                                                            void 0 === pe ||
                                                            pe.completeSpan({
                                                              span: de,
                                                              status: 1,
                                                              message:
                                                                "Request Completed",
                                                              attributes: {
                                                                _pinnedParticipants:
                                                                  JSON.stringify(
                                                                    _._pinnedParticipants
                                                                  ),
                                                              },
                                                            }),
                                                          r(),
                                                          (e.next = 123);
                                                        break;
                                                      case 118:
                                                        throw (
                                                          ((e.prev = 118),
                                                          (e.t5 = e.catch(104)),
                                                          null ===
                                                            (_e =
                                                              _._openTelemetry) ||
                                                            void 0 === _e ||
                                                            _e.completeSpan({
                                                              span: de,
                                                              status: 2,
                                                              message:
                                                                "pinStateChanged request failed",
                                                            }),
                                                          null ===
                                                            (ve =
                                                              _._videosdkLogs) ||
                                                            void 0 === ve ||
                                                            ve.pushLogs({
                                                              logText:
                                                                "Error pinStateChanged request failed",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.t5.message,
                                                              },
                                                            }),
                                                          e.t5)
                                                        );
                                                      case 123:
                                                        return e.abrupt(
                                                          "break",
                                                          130
                                                        );
                                                      case 124:
                                                        return (
                                                          _._eventEmitter.emit(
                                                            "SWITCH_ROOM",
                                                            t.data
                                                          ),
                                                          r(),
                                                          e.abrupt("break", 130)
                                                        );
                                                      case 127:
                                                        return (
                                                          r({
                                                            peerId: _._peerId,
                                                            statsData: _._stats,
                                                          }),
                                                          (_._stats = {}),
                                                          e.abrupt("break", 130)
                                                        );
                                                      case 130:
                                                      case "end":
                                                        return e.stop();
                                                    }
                                                },
                                                e,
                                                null,
                                                [
                                                  [14, 37],
                                                  [52, 67],
                                                  [74, 82],
                                                  [90, 98],
                                                  [104, 118],
                                                ]
                                              );
                                            })
                                          );
                                          return function (t, r, a) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._protoo.on(
                                        "notification",
                                        (function () {
                                          var e = (0, s.A)(
                                            l().mark(function e(t) {
                                              var r,
                                                a,
                                                n,
                                                s,
                                                i,
                                                c,
                                                p,
                                                u,
                                                h,
                                                m,
                                                f,
                                                g,
                                                v,
                                                b,
                                                y,
                                                w,
                                                S,
                                                R,
                                                E,
                                                k,
                                                T,
                                                C,
                                                P,
                                                O,
                                                D,
                                                x,
                                                M,
                                                A,
                                                L,
                                                N,
                                                j,
                                                B,
                                                F,
                                                U,
                                                W,
                                                q,
                                                V,
                                                G,
                                                z,
                                                Q,
                                                te,
                                                re,
                                                ne,
                                                oe,
                                                ce,
                                                de,
                                                le,
                                                pe,
                                                ue,
                                                he,
                                                me,
                                                fe,
                                                ge,
                                                _e,
                                                ve,
                                                be,
                                                ye,
                                                we,
                                                Se,
                                                Re,
                                                Ee,
                                                ke,
                                                Te,
                                                Ce,
                                                Oe,
                                                De,
                                                xe,
                                                Ie,
                                                Me,
                                                Ae,
                                                Le,
                                                Ne,
                                                je,
                                                Fe,
                                                Ue,
                                                We,
                                                qe,
                                                Ge,
                                                ze,
                                                $e,
                                                Ke,
                                                Je,
                                                Qe,
                                                Xe;
                                              return l().wrap(function (e) {
                                                for (;;)
                                                  switch ((e.prev = e.next)) {
                                                    case 0:
                                                      Ye.debug(
                                                        'proto "notification" event [method:%s, data:%o]',
                                                        t.method,
                                                        t.data
                                                      ),
                                                        (e.t0 = t.method),
                                                        (e.next =
                                                          "error" === e.t0
                                                            ? 4
                                                            : "participantMediaStateChanged" ===
                                                              e.t0
                                                            ? 9
                                                            : "producerScore" ===
                                                              e.t0
                                                            ? 10
                                                            : "entryRequested" ===
                                                              e.t0
                                                            ? 13
                                                            : "entryResponded" ===
                                                              e.t0
                                                            ? 17
                                                            : "newPeer" === e.t0
                                                            ? 23
                                                            : "peerClosed" ===
                                                              e.t0
                                                            ? 30
                                                            : "peerDisplayNameChanged" ===
                                                              e.t0
                                                            ? 36
                                                            : "downlinkBwe" ===
                                                              e.t0
                                                            ? 40
                                                            : "consumerClosed" ===
                                                              e.t0
                                                            ? 42
                                                            : "consumerPaused" ===
                                                              e.t0
                                                            ? 54
                                                            : "consumerResumed" ===
                                                              e.t0
                                                            ? 61
                                                            : "consumerLayersChanged" ===
                                                              e.t0
                                                            ? 68
                                                            : "consumerScore" ===
                                                              e.t0
                                                            ? 79
                                                            : "dataConsumerClosed" ===
                                                              e.t0
                                                            ? 82
                                                            : "activeSpeaker" ===
                                                              e.t0
                                                            ? 91
                                                            : "transcriptionStateChanged" ===
                                                              e.t0
                                                            ? 96
                                                            : "transcriptionText" ===
                                                              e.t0
                                                            ? 99
                                                            : "recordingStateChanged" ===
                                                              e.t0
                                                            ? 101
                                                            : "recordingStarted" ===
                                                              e.t0
                                                            ? 104
                                                            : "recordingStopped" ===
                                                              e.t0
                                                            ? 106
                                                            : "livestreamStateChanged" ===
                                                              e.t0
                                                            ? 108
                                                            : "livestreamStarted" ===
                                                              e.t0
                                                            ? 111
                                                            : "livestreamStopped" ===
                                                              e.t0
                                                            ? 113
                                                            : "hlsStateChanged" ===
                                                              e.t0
                                                            ? 115
                                                            : "hlsPlayableStateChanged" ===
                                                              e.t0
                                                            ? 118
                                                            : "hlsStarted" ===
                                                              e.t0
                                                            ? 120
                                                            : "hlsStopped" ===
                                                              e.t0
                                                            ? 123
                                                            : "whiteboardStarted" ===
                                                              e.t0
                                                            ? 125
                                                            : "whiteboardStopped" ===
                                                              e.t0
                                                            ? 128
                                                            : "addCharacter" ===
                                                              e.t0
                                                            ? 130
                                                            : "removeCharacter" ===
                                                              e.t0
                                                            ? 136
                                                            : "characterStateChanged" ===
                                                              e.t0
                                                            ? 142
                                                            : "characterMessage" ===
                                                              e.t0
                                                            ? 145
                                                            : "videoStatusChanged" ===
                                                              e.t0
                                                            ? 147
                                                            : "videoSeeked" ===
                                                              e.t0
                                                            ? 149
                                                            : "connectionOpen" ===
                                                              e.t0
                                                            ? 152
                                                            : "connectionClose" ===
                                                              e.t0
                                                            ? 154
                                                            : "connectionChatMessage" ===
                                                              e.t0
                                                            ? 156
                                                            : "connectionParticipantJoined" ===
                                                              e.t0
                                                            ? 158
                                                            : "connectionParticipantLeft" ===
                                                              e.t0
                                                            ? 160
                                                            : "pubsubMessage" ===
                                                              e.t0
                                                            ? 162
                                                            : "peerModeChanged" ===
                                                              e.t0
                                                            ? 164
                                                            : "restartIce" ===
                                                              e.t0
                                                            ? 167
                                                            : 171);
                                                      break;
                                                    case 4:
                                                      return (
                                                        (n = t.data),
                                                        _._eventEmitter.emit(
                                                          "ERROR",
                                                          n
                                                        ),
                                                        null ===
                                                          (r =
                                                            _._videosdkLogs) ||
                                                          void 0 === r ||
                                                          r.pushLogs({
                                                            logText:
                                                              "Error in Meeting Session",
                                                            logType: "ERROR",
                                                            attributes: {
                                                              error: n.message,
                                                            },
                                                          }),
                                                        null ===
                                                          (a =
                                                            _._openTelemetry) ||
                                                          void 0 === a ||
                                                          a.traceAutoComplete({
                                                            spanName:
                                                              "Emitted `ERROR` Event",
                                                            attributes: {
                                                              error: n.message,
                                                            },
                                                            status: 2,
                                                          }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 9:
                                                      try {
                                                        (s = t.data),
                                                          (i = s.peerId),
                                                          (c = s.kind),
                                                          (p = s.newState),
                                                          _._eventEmitter.emit(
                                                            "PARTICIPANT_MEDIA_STATE_CHANGED",
                                                            {
                                                              peerId: i,
                                                              kind: c,
                                                              newState: p,
                                                            }
                                                          ),
                                                          "video" == c &&
                                                            (null ===
                                                              (u =
                                                                _._openTelemetry) ||
                                                              void 0 === u ||
                                                              u.traceAutoComplete(
                                                                {
                                                                  spanName: ""
                                                                    .concat(
                                                                      i,
                                                                      " has "
                                                                    )
                                                                    .concat(
                                                                      p
                                                                        ? "enable"
                                                                        : "disable",
                                                                      " "
                                                                    )
                                                                    .concat(c),
                                                                  status: 1,
                                                                }
                                                              ));
                                                      } catch (e) {
                                                        Ye.error(
                                                          '"newProducer" request failed:%o',
                                                          e
                                                        ),
                                                          null ===
                                                            (h =
                                                              _._videosdkLogs) ||
                                                            void 0 === h ||
                                                            h.pushLogs({
                                                              logText:
                                                                "Error newProducer request failed",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.message,
                                                              },
                                                            });
                                                      }
                                                    case 10:
                                                      return (
                                                        (m = t.data),
                                                        (f = m.producerId),
                                                        (g = m.score),
                                                        Ve.dispatch(H(f, g)),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 13:
                                                      return (
                                                        (b = t.data),
                                                        (y = b.id),
                                                        (w = b.name),
                                                        (S =
                                                          null ===
                                                            (v =
                                                              _._openTelemetry) ||
                                                          void 0 === v
                                                            ? void 0
                                                            : v.trace({
                                                                spanName:
                                                                  "Protoo Noti: entryRequested",
                                                                span: _._joinSpan,
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    {
                                                                      id: y,
                                                                      name: w,
                                                                    }
                                                                  ),
                                                                },
                                                              })),
                                                        y !== _._peerId
                                                          ? (_._eventEmitter.emit(
                                                              "ENTRY_REQUESTED",
                                                              { id: y, name: w }
                                                            ),
                                                            null ===
                                                              (R =
                                                                _._openTelemetry) ||
                                                              void 0 === R ||
                                                              R.completeSpan({
                                                                span: S,
                                                                status: 1,
                                                                message:
                                                                  "EntryResponded Recieved",
                                                              }))
                                                          : null ===
                                                              (E =
                                                                _._openTelemetry) ||
                                                            void 0 === E ||
                                                            E.completeSpan({
                                                              span: S,
                                                              status: 2,
                                                              message:
                                                                "Entry Request Failed",
                                                            }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 17:
                                                      return (
                                                        (T = t.data),
                                                        (C = T.id),
                                                        (P = T.decision),
                                                        (O = T.sessionId),
                                                        (_._videosdkLogs =
                                                          new Be({
                                                            roomId: _._roomId,
                                                            peerId: _._peerId,
                                                            logs: o,
                                                            observabilityJwt: d,
                                                            deviceInfo:
                                                              _._deviceInfo,
                                                            sessionId: O,
                                                            debugMode:
                                                              _._debugMode,
                                                          })),
                                                        _._eventEmitter.emit(
                                                          "ENTRY_RESPONDED",
                                                          { id: C, decision: P }
                                                        ),
                                                        (D =
                                                          null ===
                                                            (k =
                                                              _._openTelemetry) ||
                                                          void 0 === k
                                                            ? void 0
                                                            : k.trace({
                                                                spanName:
                                                                  "Protoo Noti: entryResponded",
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    {
                                                                      id: C,
                                                                      decision:
                                                                        P,
                                                                    }
                                                                  ),
                                                                  sessionId: O,
                                                                },
                                                                span: _._joinSpan,
                                                              })),
                                                        C === _._peerId &&
                                                        "allowed" === P
                                                          ? (_.joinRoom(),
                                                            null ===
                                                              (x =
                                                                _._openTelemetry) ||
                                                              void 0 === x ||
                                                              x.completeSpan({
                                                                span: D,
                                                                status: 1,
                                                                message:
                                                                  "EntryResponded Recieved",
                                                              }))
                                                          : null ===
                                                              (M =
                                                                _._openTelemetry) ||
                                                            void 0 === M ||
                                                            M.completeSpan({
                                                              span: _._joinSpan,
                                                              status: 2,
                                                              message:
                                                                "Join Request Denied",
                                                            }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 23:
                                                      (A = t.data),
                                                        (L = $(
                                                          He(
                                                            He({}, A),
                                                            {},
                                                            {
                                                              consumers: [],
                                                              dataConsumers: [],
                                                            }
                                                          )
                                                        )),
                                                        Ve.dispatch(L),
                                                        _._eventEmitter.emit(
                                                          L.type,
                                                          L.payload
                                                        ),
                                                        Ve.dispatch(
                                                          ie({
                                                            text: "".concat(
                                                              A.displayName,
                                                              " has joined the room"
                                                            ),
                                                          })
                                                        );
                                                      try {
                                                        null ===
                                                          (N =
                                                            _._openTelemetry) ||
                                                          void 0 === N ||
                                                          N.traceAutoComplete({
                                                            spanName:
                                                              "Protoo Noti: newPeer ".concat(
                                                                A.displayName
                                                              ),
                                                            attributes: {
                                                              peerData:
                                                                JSON.stringify(
                                                                  A
                                                                ),
                                                            },
                                                          });
                                                      } catch (e) {
                                                        null ===
                                                          (j =
                                                            _._videosdkLogs) ||
                                                          void 0 === j ||
                                                          j.pushLogs({
                                                            logText:
                                                              "Error Protoo Noti: newPeer",
                                                            logType: "ERROR",
                                                            attributes: {
                                                              error: e.message,
                                                            },
                                                          }),
                                                          console.error(e);
                                                      }
                                                      return e.abrupt(
                                                        "break",
                                                        172
                                                      );
                                                    case 30:
                                                      return (
                                                        (F = t.data.peerId),
                                                        (U = K(F)),
                                                        Ve.dispatch(U),
                                                        _._eventEmitter.emit(
                                                          U.type,
                                                          U.payload
                                                        ),
                                                        null ===
                                                          (B =
                                                            _._openTelemetry) ||
                                                          void 0 === B ||
                                                          B.traceAutoComplete({
                                                            spanName:
                                                              "Protoo Noti: peerClosed for ".concat(
                                                                F
                                                              ),
                                                          }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 36:
                                                      return (
                                                        (W = t.data),
                                                        (q = W.peerId),
                                                        (V = W.displayName),
                                                        (G = W.oldDisplayName),
                                                        Ve.dispatch(J(V, q)),
                                                        Ve.dispatch(
                                                          ie({
                                                            text: ""
                                                              .concat(
                                                                G,
                                                                " is now "
                                                              )
                                                              .concat(V),
                                                          })
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 40:
                                                      return (
                                                        Ye.debug(
                                                          "'downlinkBwe' event:%o",
                                                          t.data
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 42:
                                                      if (
                                                        ((Q =
                                                          t.data.consumerId),
                                                        (te =
                                                          _._consumers.get(Q)))
                                                      ) {
                                                        e.next = 46;
                                                        break;
                                                      }
                                                      return e.abrupt(
                                                        "break",
                                                        172
                                                      );
                                                    case 46:
                                                      return (
                                                        te.close(),
                                                        _._consumers.delete(Q),
                                                        (re =
                                                          te.appData.peerId),
                                                        (ne = Y(Q, re)),
                                                        Ve.dispatch(ne),
                                                        _._eventEmitter.emit(
                                                          ne.type,
                                                          ne.payload
                                                        ),
                                                        null ===
                                                          (z =
                                                            _._openTelemetry) ||
                                                          void 0 === z ||
                                                          z.traceAutoComplete({
                                                            spanName:
                                                              "Protoo Noti: consumerClosed for id ".concat(
                                                                Q
                                                              ),
                                                            attributes: {
                                                              consumerData:
                                                                JSON.stringify(
                                                                  te
                                                                ),
                                                            },
                                                          }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 54:
                                                      if (
                                                        ((oe =
                                                          t.data.consumerId),
                                                        (ce =
                                                          _._consumers.get(oe)))
                                                      ) {
                                                        e.next = 58;
                                                        break;
                                                      }
                                                      return e.abrupt(
                                                        "break",
                                                        172
                                                      );
                                                    case 58:
                                                      return (
                                                        ce.pause(),
                                                        Ve.dispatch(
                                                          X(oe, "remote")
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 61:
                                                      if (
                                                        ((de =
                                                          t.data.consumerId),
                                                        (le =
                                                          _._consumers.get(de)))
                                                      ) {
                                                        e.next = 65;
                                                        break;
                                                      }
                                                      return e.abrupt(
                                                        "break",
                                                        172
                                                      );
                                                    case 65:
                                                      return (
                                                        le.resume(),
                                                        Ve.dispatch(
                                                          Z(de, "remote")
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 68:
                                                      if (
                                                        ((ue = t.data),
                                                        (he = ue.consumerId),
                                                        (me = ue.spatialLayer),
                                                        (fe = ue.temporalLayer),
                                                        ((ge =
                                                          _._consumers.get(
                                                            he
                                                          )).currentSpatialLayer =
                                                          me),
                                                        (ge.currentTemporalLayer =
                                                          fe),
                                                        ge)
                                                      ) {
                                                        e.next = 74;
                                                        break;
                                                      }
                                                      return e.abrupt(
                                                        "break",
                                                        172
                                                      );
                                                    case 74:
                                                      return (
                                                        (null ===
                                                          (pe = ge.appData) ||
                                                        void 0 === pe ||
                                                        null ===
                                                          (pe = pe.encodings) ||
                                                        void 0 === pe
                                                          ? void 0
                                                          : pe.length) > 1
                                                          ? (_._eventEmitter.emit(
                                                              "VIDEO_QUALITY_CHANGED",
                                                              {
                                                                peerId:
                                                                  ge.appData
                                                                    .peerId,
                                                                prevQuality:
                                                                  ge.spatialLayers -
                                                                    1 -
                                                                    ge.currentSpatialLayer ==
                                                                  0
                                                                    ? "HIGH"
                                                                    : ge.spatialLayers -
                                                                        1 -
                                                                        ge.currentSpatialLayer ==
                                                                      1
                                                                    ? "MEDIUM"
                                                                    : "LOW",
                                                                currentQuality:
                                                                  ge.spatialLayers -
                                                                    1 -
                                                                    me ==
                                                                  0
                                                                    ? "HIGH"
                                                                    : ge.spatialLayers -
                                                                        1 -
                                                                        me ==
                                                                      1
                                                                    ? "MEDIUM"
                                                                    : "LOW",
                                                              }
                                                            ),
                                                            null ===
                                                              (_e =
                                                                _._videosdkLogs) ||
                                                              void 0 === _e ||
                                                              _e.pushLogs({
                                                                logText:
                                                                  "Consumer Peer "
                                                                    .concat(
                                                                      ge.appData
                                                                        .peerId,
                                                                      " changed to "
                                                                    )
                                                                    .concat(
                                                                      ge.spatialLayers -
                                                                        1 -
                                                                        me ==
                                                                        0
                                                                        ? "HIGH"
                                                                        : ge.spatialLayers -
                                                                            1 -
                                                                            me ==
                                                                          1
                                                                        ? "MEDIUM"
                                                                        : "LOW",
                                                                      ", previous quality was "
                                                                    )
                                                                    .concat(
                                                                      ge.spatialLayers -
                                                                        1 -
                                                                        ge.currentSpatialLayer ==
                                                                        0
                                                                        ? "HIGH"
                                                                        : ge.spatialLayers -
                                                                            1 -
                                                                            ge.currentSpatialLayer ==
                                                                          1
                                                                        ? "MEDIUM"
                                                                        : "LOW"
                                                                    ),
                                                                logType: "INFO",
                                                                attributes: {
                                                                  consumerId:
                                                                    he,
                                                                },
                                                              }))
                                                          : (_._eventEmitter.emit(
                                                              "VIDEO_QUALITY_CHANGED",
                                                              {
                                                                peerId:
                                                                  ge.appData
                                                                    .peerId,
                                                                prevQuality:
                                                                  "HIGH",
                                                                currentQuality:
                                                                  "HIGH",
                                                              }
                                                            ),
                                                            null ===
                                                              (ve =
                                                                _._videosdkLogs) ||
                                                              void 0 === ve ||
                                                              ve.pushLogs({
                                                                logText:
                                                                  "Consumer Peer ".concat(
                                                                    ge.appData
                                                                      .peerId,
                                                                    " changed to HIGH, previous quality was HIGH"
                                                                  ),
                                                                logType: "INFO",
                                                                attributes: {
                                                                  consumerId:
                                                                    he,
                                                                },
                                                              })),
                                                        (ge.currentSpatialLayer =
                                                          me),
                                                        (ge.currentTemporalLayer =
                                                          fe),
                                                        Ve.dispatch(
                                                          ee(he, me, fe)
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 79:
                                                      return (
                                                        (be = t.data),
                                                        (ye = be.consumerId),
                                                        (we = be.score),
                                                        Ve.dispatch(ae(ye, we)),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 82:
                                                      if (
                                                        ((Se =
                                                          t.data
                                                            .dataConsumerId),
                                                        (Re =
                                                          _._dataConsumers.get(
                                                            Se
                                                          )))
                                                      ) {
                                                        e.next = 86;
                                                        break;
                                                      }
                                                      return e.abrupt(
                                                        "break",
                                                        172
                                                      );
                                                    case 86:
                                                      return (
                                                        Re.close(),
                                                        _._dataConsumers.delete(
                                                          Se
                                                        ),
                                                        (Ee =
                                                          Re.appData.peerId),
                                                        Ve.dispatch(se(Se, Ee)),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 91:
                                                      return (
                                                        (ke = t.data.peerId),
                                                        (Te = I(ke)),
                                                        Ve.dispatch(Te),
                                                        _._eventEmitter.emit(
                                                          Te.type,
                                                          Te.payload
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 96:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "TRANSCRIPTION_STATE_CHANGED",
                                                          t.data
                                                        ),
                                                        null ===
                                                          (Ce =
                                                            _._openTelemetry) ||
                                                          void 0 === Ce ||
                                                          Ce.traceAutoComplete({
                                                            spanName:
                                                              "Emitted TRANSCRIPTION_STATE_CHANGED, status : ".concat(
                                                                t.data.status
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                t.data
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 99:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "TRANSCRIPTION_TEXT",
                                                          t.data
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 101:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "RECORDING_STATE_CHANGED",
                                                          t.data
                                                        ),
                                                        null ===
                                                          (Oe =
                                                            _._openTelemetry) ||
                                                          void 0 === Oe ||
                                                          Oe.traceAutoComplete({
                                                            spanName:
                                                              "Emitted RECORDING_STATE_CHANGED, status : ".concat(
                                                                t.data.status
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                t.data
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 104:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "RECORDING_STARTED",
                                                          {}
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 106:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "RECORDING_STOPPED",
                                                          {}
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 108:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "LIVESTREAM_STATE_CHANGED",
                                                          t.data
                                                        ),
                                                        null ===
                                                          (De =
                                                            _._openTelemetry) ||
                                                          void 0 === De ||
                                                          De.traceAutoComplete({
                                                            spanName:
                                                              "Emitted LIVESTREAM_STATE_CHANGED, status : ".concat(
                                                                t.data.status
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                t.data
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 111:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "LIVESTREAM_STARTED",
                                                          {}
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 113:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "LIVESTREAM_STOPPED",
                                                          {}
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 115:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "HLS_STATE_CHANGED",
                                                          t.data
                                                        ),
                                                        null ===
                                                          (xe =
                                                            _._openTelemetry) ||
                                                          void 0 === xe ||
                                                          xe.traceAutoComplete({
                                                            spanName:
                                                              "Emitted HLS_STATE_CHANGED, status : ".concat(
                                                                t.data.status
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                t.data
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 118:
                                                      return (
                                                        t.data.isPlayable &&
                                                          (_._eventEmitter.emit(
                                                            "HLS_STATE_CHANGED",
                                                            He(
                                                              He({}, t.data),
                                                              {},
                                                              {
                                                                status:
                                                                  Pe.V
                                                                    .HLS_PLAYABLE,
                                                              }
                                                            )
                                                          ),
                                                          null ===
                                                            (Ie =
                                                              _._openTelemetry) ||
                                                            void 0 === Ie ||
                                                            Ie.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Protoo Noti: hlsPlayableStateChanged",
                                                                status: 1,
                                                              }
                                                            )),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 120:
                                                      return (
                                                        (Me =
                                                          t.data.downstreamUrl),
                                                        _._eventEmitter.emit(
                                                          "HLS_STARTED",
                                                          Me
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 123:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "HLS_STOPPED",
                                                          {}
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 125:
                                                      return (
                                                        (Ae = t.data.state),
                                                        _._eventEmitter.emit(
                                                          "WHITEBOARD_STARTED",
                                                          { state: Ae }
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 128:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "WHITEBOARD_STOPPED",
                                                          {}
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 130:
                                                      return (
                                                        (Ne = t.data),
                                                        (je = $(
                                                          He(
                                                            He({}, Ne),
                                                            {},
                                                            {
                                                              consumers: [],
                                                              dataConsumers: [],
                                                            }
                                                          )
                                                        )),
                                                        Ve.dispatch(je),
                                                        _._eventEmitter.emit(
                                                          "ADD_CHARACTER",
                                                          t.data
                                                        ),
                                                        null ===
                                                          (Le =
                                                            _._openTelemetry) ||
                                                          void 0 === Le ||
                                                          Le.traceAutoComplete({
                                                            spanName:
                                                              "Emitted ADD_CHARACTER : ".concat(
                                                                t.data
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                t.data
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 136:
                                                      return (
                                                        (Ue = t.data.id),
                                                        (We = K(Ue)),
                                                        Ve.dispatch(We),
                                                        _._eventEmitter.emit(
                                                          "REMOVE_CHARACTER",
                                                          t.data
                                                        ),
                                                        null ===
                                                          (Fe =
                                                            _._openTelemetry) ||
                                                          void 0 === Fe ||
                                                          Fe.traceAutoComplete({
                                                            spanName:
                                                              "Emitted REMOVE_CHARACTER : ".concat(
                                                                t.data
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                t.data
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 142:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "CHARACTER_STATE_CHANGED",
                                                          t.data
                                                        ),
                                                        null ===
                                                          (qe =
                                                            _._openTelemetry) ||
                                                          void 0 === qe ||
                                                          qe.traceAutoComplete({
                                                            spanName:
                                                              "Emitted CHARACTER_STATE_CHANGED, status : ".concat(
                                                                t.data.status
                                                              ),
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                t.data
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 145:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "CHARACTER_MESSAGE",
                                                          t.data
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 147:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "VIDEO_STATE_CHANGED",
                                                          t.data
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 149:
                                                      return (
                                                        (Ge =
                                                          t.data.currentTime),
                                                        _._eventEmitter.emit(
                                                          "VIDEO_SEEKED",
                                                          { currentTime: Ge }
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 152:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "CONNECTION_OPEN",
                                                          t.data
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 154:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "CONNECTION_CLOSE",
                                                          t.data
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 156:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "CONNECTION_CHAT_MESSAGE",
                                                          t.data
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 158:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "CONNECTION_PARTICIPANT_JOIN",
                                                          t.data
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 160:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "CONNECTION_PARTICIPANT_LEFT",
                                                          t.data
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 162:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "PUBSUB_MESSAGE",
                                                          t.data
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 164:
                                                      return (
                                                        _._eventEmitter.emit(
                                                          "PEER_MODE_CHANGED",
                                                          t.data
                                                        ),
                                                        null ===
                                                          (ze =
                                                            _._openTelemetry) ||
                                                          void 0 === ze ||
                                                          ze.traceAutoComplete({
                                                            spanName:
                                                              "Emitted PEER_MODE_CHANGED",
                                                            attributes: {
                                                              data: JSON.stringify(
                                                                t.data
                                                              ),
                                                            },
                                                            status: 1,
                                                          }),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 167:
                                                      return (
                                                        (Ke = t.data),
                                                        (Je = Ke.transportId),
                                                        (Qe = Ke.iceParameters),
                                                        (Xe =
                                                          null ===
                                                            ($e =
                                                              _._openTelemetry) ||
                                                          void 0 === $e
                                                            ? void 0
                                                            : $e.trace({
                                                                spanName:
                                                                  "Protoo Noti: restartIce for transportId :".concat(
                                                                    Je
                                                                  ),
                                                                attributes: {
                                                                  iceParameters:
                                                                    JSON.stringify(
                                                                      Qe
                                                                    ),
                                                                },
                                                              })),
                                                        _.handleRemoteRestartIce(
                                                          {
                                                            transportId: Je,
                                                            iceParameters: Qe,
                                                            internalSpan: Xe,
                                                          }
                                                        ),
                                                        e.abrupt("break", 172)
                                                      );
                                                    case 171:
                                                      Ye.error(
                                                        'unknown protoo notification.method "%s"',
                                                        t.method
                                                      );
                                                    case 172:
                                                    case "end":
                                                      return e.stop();
                                                  }
                                              }, e);
                                            })
                                          );
                                          return function (t) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      );
                                  case 27:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return ir.apply(this, arguments);
                      }),
                  },
                  {
                    key: "requestEntry",
                    value:
                      ((sr = (0, s.A)(
                        l().mark(function e() {
                          var t, r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (a =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "Requesting Entry",
                                              span: this._joinSpan,
                                            })),
                                      (e.next = 3),
                                      this._protoo.request("requestEntry", {
                                        name: this._displayName,
                                      })
                                    );
                                  case 3:
                                    null === (r = this._openTelemetry) ||
                                      void 0 === r ||
                                      r.completeSpan({
                                        span: a,
                                        status: 1,
                                        message: "Entry Requested Successfully",
                                      });
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return sr.apply(this, arguments);
                      }),
                  },
                  {
                    key: "respondEntry",
                    value:
                      ((nr = (0, s.A)(
                        l().mark(function e(t, r) {
                          var a, n, s;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (s =
                                        null === (a = this._openTelemetry) ||
                                        void 0 === a
                                          ? void 0
                                          : a.trace({
                                              spanName: "Responding Entry",
                                              attributes: {
                                                peerId: t,
                                                decision: r,
                                              },
                                              span: this._joinSpan,
                                            })),
                                      (e.next = 3),
                                      this._protoo.request("respondEntry", {
                                        id: t,
                                        decision: r,
                                      })
                                    );
                                  case 3:
                                    null === (n = this._openTelemetry) ||
                                      void 0 === n ||
                                      n.completeSpan({
                                        message: "Entry Responded Successfully",
                                        span: s,
                                        status: 1,
                                      });
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e, t) {
                        return nr.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startTranscription",
                    value:
                      ((ar = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n, s, i;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("startTranscription()"),
                                      (n =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "startTranscription() Start",
                                              attributes: {
                                                config: t
                                                  ? JSON.stringify(t)
                                                  : "config Not Specify",
                                              },
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request(
                                        "startTranscription",
                                        { config: t }
                                      )
                                    );
                                  case 5:
                                    e.next = 13;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Ye.error(
                                        "startTranscription() | failed:%o",
                                        e.t0
                                      ),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "startTranscription() failed",
                                        }),
                                      null === (i = this._videosdkLogs) ||
                                        void 0 === i ||
                                        i.pushLogs({
                                          logText:
                                            "Error startTranscription() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4031,
                                        message: e.t0.message,
                                      });
                                  case 13:
                                    null === (a = this._openTelemetry) ||
                                      void 0 === a ||
                                      a.completeSpan({
                                        span: n,
                                        status: 1,
                                        message: "startTranscription() End",
                                      });
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return ar.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopTranscription",
                    value:
                      ((rr = (0, s.A)(
                        l().mark(function e() {
                          var t, r, a, n, s;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("stopTranscription()"),
                                      (a =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "stopTranscription() Start",
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request(
                                        "stopTranscription",
                                        {}
                                      )
                                    );
                                  case 5:
                                    e.next = 12;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.completeSpan({
                                          span: a,
                                          status: 2,
                                          message: "stopTranscription() failed",
                                        }),
                                      null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText:
                                            "Error stopTranscription() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4032,
                                        message: e.t0.message,
                                      });
                                  case 12:
                                    null === (r = this._openTelemetry) ||
                                      void 0 === r ||
                                      r.completeSpan({
                                        span: a,
                                        status: 1,
                                        message: "stopTranscription() End",
                                      });
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function () {
                        return rr.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startRecording",
                    value:
                      ((tr = (0, s.A)(
                        l().mark(function e(t, r, a, n) {
                          var s, i, o, c, d;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("startRecording()"),
                                      (o =
                                        null === (s = this._openTelemetry) ||
                                        void 0 === s
                                          ? void 0
                                          : s.trace({
                                              spanName:
                                                "startRecording() Start",
                                              attributes: {
                                                webhookUrl:
                                                  t || "webhookUrl Not Specify",
                                                awsDirPath:
                                                  r || "awsDirPath Not Specify",
                                                config: a
                                                  ? JSON.stringify(a)
                                                  : "config Not Specify",
                                                transcription: n
                                                  ? JSON.stringify(n)
                                                  : "transcription Not Specify",
                                              },
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("startRecording", {
                                        webhookUrl: t,
                                        awsDirPath: r,
                                        config: a,
                                        transcription: n,
                                      })
                                    );
                                  case 5:
                                    e.next = 13;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Ye.error(
                                        "startRecording() | failed:%o",
                                        e.t0
                                      ),
                                      null === (c = this._openTelemetry) ||
                                        void 0 === c ||
                                        c.completeSpan({
                                          span: o,
                                          status: 2,
                                          message: "startRecording() failed",
                                        }),
                                      null === (d = this._videosdkLogs) ||
                                        void 0 === d ||
                                        d.pushLogs({
                                          logText:
                                            "Error startRecording() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4011,
                                        message: e.t0.message,
                                      });
                                  case 13:
                                    null === (i = this._openTelemetry) ||
                                      void 0 === i ||
                                      i.completeSpan({
                                        span: o,
                                        status: 1,
                                        message: "startRecording() End",
                                      });
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e, t, r, a) {
                        return tr.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopRecording",
                    value:
                      ((er = (0, s.A)(
                        l().mark(function e() {
                          var t, r, a, n, s;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._closed) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      Ye.debug("stopRecording()"),
                                      (a =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "stopRecording() Start",
                                            })),
                                      (e.prev = 4),
                                      (e.next = 7),
                                      this._protoo.request("stopRecording", {})
                                    );
                                  case 7:
                                    e.next = 14;
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(4)),
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.completeSpan({
                                          span: a,
                                          status: 2,
                                          message: "stopRecording() failed",
                                        }),
                                      null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText:
                                            "Error stopRecording() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4012,
                                        message: e.t0.message,
                                      });
                                  case 14:
                                    null === (r = this._openTelemetry) ||
                                      void 0 === r ||
                                      r.completeSpan({
                                        span: a,
                                        status: 1,
                                        message: "stopRecording() End",
                                      });
                                  case 15:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[4, 9]]
                          );
                        })
                      )),
                      function () {
                        return er.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startLivestream",
                    value:
                      ((Zt = (0, s.A)(
                        l().mark(function e(t, r) {
                          var a, n, s, i, o;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("startLivestream()"),
                                      (s =
                                        null === (a = this._openTelemetry) ||
                                        void 0 === a
                                          ? void 0
                                          : a.trace({
                                              spanName:
                                                "startLivestream() Start",
                                              attributes: {
                                                outputs: t
                                                  ? JSON.stringify(t)
                                                  : "outputs Not Specify",
                                                config: r
                                                  ? JSON.stringify(r)
                                                  : "config Not Specify",
                                              },
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("startLivestream", {
                                        outputs: t,
                                        config: r,
                                      })
                                    );
                                  case 5:
                                    e.next = 12;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: s,
                                          status: 1,
                                          message: "startLivestream() End",
                                        }),
                                      null === (o = this._videosdkLogs) ||
                                        void 0 === o ||
                                        o.pushLogs({
                                          logText:
                                            "Error startLivestream() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4013,
                                        message: e.t0.message,
                                      });
                                  case 12:
                                    null === (n = this._openTelemetry) ||
                                      void 0 === n ||
                                      n.completeSpan({
                                        span: s,
                                        status: 1,
                                        message: "startLivestream() End",
                                      });
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e, t) {
                        return Zt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopLivestream",
                    value:
                      ((Xt = (0, s.A)(
                        l().mark(function e() {
                          var t, r, a, n, s;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("stopLivestream()"),
                                      (a =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "stopLivestream() Start",
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("stopLivestream", {})
                                    );
                                  case 5:
                                    e.next = 12;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error stopLivestream() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: a,
                                          status: 2,
                                          message:
                                            "Error stopLivestream() failed",
                                        }),
                                      this._emitError({
                                        code: 4014,
                                        message: e.t0.message,
                                      });
                                  case 12:
                                    null === (r = this._openTelemetry) ||
                                      void 0 === r ||
                                      r.completeSpan({
                                        span: a,
                                        status: 1,
                                        message: "stopLivestream() End",
                                      });
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function () {
                        return Xt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startHls",
                    value:
                      ((Yt = (0, s.A)(
                        l().mark(function e(t, r) {
                          var a, n, s, i, o;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (t = t || {}),
                                      (r = r || {}),
                                      Ye.debug("startHls()"),
                                      (s =
                                        null === (a = this._openTelemetry) ||
                                        void 0 === a
                                          ? void 0
                                          : a.trace({
                                              spanName: "startHls() Start",
                                              attributes: {
                                                config: t
                                                  ? JSON.stringify(t)
                                                  : "config Not Specify",
                                                transcription: r
                                                  ? JSON.stringify(r)
                                                  : "transcription Not Specify",
                                              },
                                            })),
                                      (e.prev = 4),
                                      (e.next = 7),
                                      this._protoo.request("startHls", {
                                        config: t,
                                        transcription: r,
                                      })
                                    );
                                  case 7:
                                    e.next = 15;
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(4)),
                                      null === (i = this._videosdkLogs) ||
                                        void 0 === i ||
                                        i.pushLogs({
                                          logText: "Error startHls() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      null === (o = this._openTelemetry) ||
                                        void 0 === o ||
                                        o.completeSpan({
                                          span: s,
                                          status: 2,
                                          message: "Error startHls() failed",
                                        }),
                                      this._emitError({
                                        code: 4016,
                                        message: e.t0.message,
                                      }),
                                      Ye.error("startHls() | failed:%o", e.t0);
                                  case 15:
                                    null === (n = this._openTelemetry) ||
                                      void 0 === n ||
                                      n.completeSpan({
                                        span: s,
                                        status: 1,
                                        message: "startHlsSpan() End",
                                      });
                                  case 16:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[4, 9]]
                          );
                        })
                      )),
                      function (e, t) {
                        return Yt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopHls",
                    value:
                      ((Qt = (0, s.A)(
                        l().mark(function e() {
                          var t, r, a, n, s;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("stopHls()"),
                                      (a =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "stopHls() Start",
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("stopHls", {})
                                    );
                                  case 5:
                                    e.next = 12;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText: "Error stopHls() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: a,
                                          status: 2,
                                          message: "Error stopHls() failed",
                                        }),
                                      this._emitError({
                                        code: 4017,
                                        message: e.t0.message,
                                      });
                                  case 12:
                                    null === (r = this._openTelemetry) ||
                                      void 0 === r ||
                                      r.completeSpan({
                                        span: a,
                                        status: 1,
                                        message: "stopHls() End",
                                      });
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function () {
                        return Qt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startWhiteboard",
                    value:
                      ((Jt = (0, s.A)(
                        l().mark(function e() {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("startWhiteboard()"),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._protoo.request(
                                        "startWhiteboard",
                                        {}
                                      )
                                    );
                                  case 4:
                                    e.next = 10;
                                    break;
                                  case 6:
                                    (e.prev = 6),
                                      (e.t0 = e.catch(1)),
                                      Ye.error(
                                        "startWhiteboard() | failed:%o",
                                        e.t0
                                      ),
                                      this._emitError({
                                        code: 3021,
                                        message: e.t0.message,
                                      });
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 6]]
                          );
                        })
                      )),
                      function () {
                        return Jt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopWhiteboard",
                    value:
                      ((Kt = (0, s.A)(
                        l().mark(function e() {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("stopWhiteboard()"),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._protoo.request("stopWhiteboard", {})
                                    );
                                  case 4:
                                    e.next = 10;
                                    break;
                                  case 6:
                                    (e.prev = 6),
                                      (e.t0 = e.catch(1)),
                                      Ye.error(
                                        "stopWhiteboard() | failed:%o",
                                        e.t0
                                      ),
                                      this._emitError({
                                        code: 3022,
                                        message: e.t0.message,
                                      });
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 6]]
                          );
                        })
                      )),
                      function () {
                        return Kt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "joinCharacter",
                    value:
                      (($t = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n, s, i;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("joinCharacter()"),
                                      (n =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName: "joinCharacter() Start",
                                              attributes: {
                                                config: t
                                                  ? JSON.stringify(t)
                                                  : "config Not Specify",
                                              },
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("joinCharacter", {
                                        config: t,
                                      })
                                    );
                                  case 5:
                                    return e.abrupt("return", e.sent);
                                  case 8:
                                    (e.prev = 8),
                                      (e.t0 = e.catch(2)),
                                      Ye.error(
                                        "joinCharacter() | failed:%o",
                                        e.t0
                                      ),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: n,
                                          status: 2,
                                          message: "joinCharacter() failed",
                                        }),
                                      null === (i = this._videosdkLogs) ||
                                        void 0 === i ||
                                        i.pushLogs({
                                          logText:
                                            "Error joinCharacter() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4033,
                                        message: e.t0.message,
                                      });
                                  case 14:
                                    return (
                                      null === (a = this._openTelemetry) ||
                                        void 0 === a ||
                                        a.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "joinCharacter() End",
                                        }),
                                      e.abrupt("return", !1)
                                    );
                                  case 16:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 8]]
                          );
                        })
                      )),
                      function (e) {
                        return $t.apply(this, arguments);
                      }),
                  },
                  {
                    key: "removeCharacter",
                    value:
                      ((zt = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n, s, i;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("removeCharacter()"),
                                      (n =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "removeCharacter() Start",
                                            })),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("leaveCharacter", {
                                        config: t,
                                      })
                                    );
                                  case 5:
                                    e.next = 14;
                                    break;
                                  case 7:
                                    return (
                                      (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Ye.error(
                                        "removeCharacter() | failed:%o",
                                        e.t0
                                      ),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: n,
                                          status: 2,
                                          message: "removeCharacter() failed",
                                        }),
                                      null === (i = this._videosdkLogs) ||
                                        void 0 === i ||
                                        i.pushLogs({
                                          logText:
                                            "Error removeCharacter() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      this._emitError({
                                        code: 4034,
                                        message: e.t0.message,
                                      }),
                                      e.abrupt("return", !1)
                                    );
                                  case 14:
                                    return (
                                      null === (a = this._openTelemetry) ||
                                        void 0 === a ||
                                        a.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "removeCharacter() End",
                                        }),
                                      e.abrupt("return", !0)
                                    );
                                  case 16:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return zt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "sendCharacterMessage",
                    value:
                      ((Gt = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.interactionId),
                                      (a = t.text),
                                      Ye.debug("sendCharacterMessage()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request(
                                        "sendCharacterMessage",
                                        { interactionId: r, text: a }
                                      )
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Ye.error(
                                        "sendCharacterMessage() | failed:%o",
                                        e.t0
                                      ),
                                      this._emitError({
                                        code: 4035,
                                        message: e.t0.message,
                                      });
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Gt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "interruptCharacter",
                    value:
                      ((Vt = (0, s.A)(
                        l().mark(function e(t) {
                          var r;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.interactionId),
                                      Ye.debug("interruptCharacter()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request(
                                        "interruptCharacter",
                                        { interactionId: r }
                                      )
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Ye.error(
                                        "interruptCharacter() | failed:%o",
                                        e.t0
                                      ),
                                      this._emitError({
                                        code: 4036,
                                        message: e.t0.message,
                                      });
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Vt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pinStateChange",
                    value:
                      ((Ht = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n, s;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (a = t.peerId),
                                      (n = t.state),
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName:
                                            "Pin state Change for ".concat(a),
                                          attributes: {
                                            state: n ? JSON.stringify(n) : null,
                                          },
                                          status: 1,
                                        }),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("pinStateChanged", {
                                        peerId: a,
                                        state: n,
                                      })
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText:
                                            "Error pinStateChange() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error("pinStateChange() | failed");
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Ht.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startVideo",
                    value:
                      ((qt = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (a = t.link),
                                      Ye.debug("startVideo()"),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: "startVideo() Calling",
                                          logType: "INFO",
                                        }),
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._protoo.request("startVideo", {
                                        link: a,
                                      })
                                    );
                                  case 6:
                                    e.next = 13;
                                    break;
                                  case 8:
                                    (e.prev = 8),
                                      (e.t0 = e.catch(3)),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText: "Error startVideo() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error(
                                        "startVideo() | failed:%o",
                                        e.t0
                                      ),
                                      this._emitError({
                                        code: 3023,
                                        message: e.t0.message,
                                      });
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 8]]
                          );
                        })
                      )),
                      function (e) {
                        return qt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopVideo",
                    value:
                      ((Wt = (0, s.A)(
                        l().mark(function e() {
                          var t, r;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("stopVideo()"),
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText: "stopVideo() Calling",
                                          logType: "INFO",
                                        }),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("stopVideo", {})
                                    );
                                  case 5:
                                    e.next = 12;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: "Error stopVideo() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error("stopVideo() | failed:%o", e.t0),
                                      this._emitError({
                                        code: 3024,
                                        message: e.t0.message,
                                      });
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function () {
                        return Wt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pauseVideo",
                    value:
                      ((Ut = (0, s.A)(
                        l().mark(function e(t) {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("pauseVideo()"),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._protoo.request("pauseVideo", {
                                        currentTime: t,
                                      })
                                    );
                                  case 4:
                                    e.next = 10;
                                    break;
                                  case 6:
                                    (e.prev = 6),
                                      (e.t0 = e.catch(1)),
                                      Ye.error(
                                        "pauseVideo() | failed:%o",
                                        e.t0
                                      ),
                                      this._emitError({
                                        code: 3025,
                                        message: e.t0.message,
                                      });
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 6]]
                          );
                        })
                      )),
                      function (e) {
                        return Ut.apply(this, arguments);
                      }),
                  },
                  {
                    key: "resumeVideo",
                    value:
                      ((Ft = (0, s.A)(
                        l().mark(function e() {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("resumeVideo()"),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._protoo.request("resumeVideo", {})
                                    );
                                  case 4:
                                    e.next = 10;
                                    break;
                                  case 6:
                                    (e.prev = 6),
                                      (e.t0 = e.catch(1)),
                                      Ye.error(
                                        "resumeVideo() | failed:%o",
                                        e.t0
                                      ),
                                      this._emitError({
                                        code: 3026,
                                        message: e.t0.message,
                                      });
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 6]]
                          );
                        })
                      )),
                      function () {
                        return Ft.apply(this, arguments);
                      }),
                  },
                  {
                    key: "seekVideo",
                    value:
                      ((Bt = (0, s.A)(
                        l().mark(function e(t) {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("seekVideo()"),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._protoo.request("seekVideo", {
                                        currentTime: t,
                                      })
                                    );
                                  case 4:
                                    e.next = 10;
                                    break;
                                  case 6:
                                    (e.prev = 6),
                                      (e.t0 = e.catch(1)),
                                      Ye.error("seekVideo() | failed:%o", e.t0),
                                      this._emitError({
                                        code: 3031,
                                        message: e.t0.message,
                                      });
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 6]]
                          );
                        })
                      )),
                      function (e) {
                        return Bt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enablePeerMic",
                    value:
                      ((jt = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName: "Enabling peer ".concat(
                                            t,
                                            " Mic"
                                          ),
                                          status: 1,
                                        }),
                                      Ye.debug("enablePeerMic()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("enablePeerMic", {
                                        peerId: t,
                                      })
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error enablePeerMic() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error(
                                        "enablePeerMic() | failed:%o",
                                        e.t0
                                      );
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return jt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disablePeerMic",
                    value:
                      ((Nt = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName: "Disabling peer ".concat(
                                            t,
                                            " Mic"
                                          ),
                                          status: 1,
                                        }),
                                      Ye.debug("disablePeerMic()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("disablePeerMic", {
                                        peerId: t,
                                      })
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error disablePeerMic() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error(
                                        "disablePeerMic() | failed:%o",
                                        e.t0
                                      );
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Nt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "consumeWebcamStreams",
                    value:
                      ((Lt = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._closed) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      Ye.debug("consumeWebcamStreams()"),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText:
                                            "consumeWebcamStreams() Calling",
                                          logType: "INFO",
                                          attributes: { peerId: t },
                                        }),
                                      (e.prev = 4),
                                      (e.next = 7),
                                      this._protoo.request(
                                        "consumeVideoStreams",
                                        { peerId: t }
                                      )
                                    );
                                  case 7:
                                    e.next = 13;
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(4)),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error consumeWebcamStreams() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error(
                                        "consumeWebcamStreams() | failed:%o",
                                        e.t0
                                      );
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[4, 9]]
                          );
                        })
                      )),
                      function (e) {
                        return Lt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "consumeMicStreams",
                    value:
                      ((At = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("consumeMicStreams()"),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText:
                                            "consumeMicStreams() Calling",
                                          logType: "INFO",
                                          attributes: { peerId: t },
                                        }),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request(
                                        "consumeAudioStreams",
                                        { peerId: t }
                                      )
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error consumeMicStreams() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error(
                                        "consumeMicStreams() | failed:%o",
                                        e.t0
                                      );
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return At.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopConsumingMicStreams",
                    value:
                      ((Mt = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._closed) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      Ye.debug("stopConsumingAudioStreams()"),
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._protoo.request(
                                        "stopConsumingAudioStreams",
                                        { peerId: t }
                                      )
                                    );
                                  case 6:
                                    null === (r = this._videosdkLogs) ||
                                      void 0 === r ||
                                      r.pushLogs({
                                        logText:
                                          "stopConsumingAudioStreams() Calling",
                                        logType: "INFO",
                                        attributes: { peerId: t },
                                      }),
                                      (e.next = 13);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(3)),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error stopConsumingMicStreams() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error(
                                        "stopConsumingMicStreams() | failed:%o",
                                        e.t0
                                      );
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 9]]
                          );
                        })
                      )),
                      function (e) {
                        return Mt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopConsumingWebcamStreams",
                    value:
                      ((It = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("stopConsumingWebcamStreams()"),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText:
                                            "stopConsumingWebcamStreams() Calling",
                                          logType: "INFO",
                                          attributes: { peerId: t },
                                        }),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request(
                                        "stopConsumingVideoStreams",
                                        { peerId: t }
                                      )
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error stopConsumingWebcamStreams() failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error(
                                        "stopConsumingWebcamStreams() | failed:%o",
                                        e.t0
                                      );
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return It.apply(this, arguments);
                      }),
                  },
                  {
                    key: "changeMode",
                    value:
                      ((xt = (0, s.A)(
                        l().mark(function e(t) {
                          var r,
                            a,
                            n,
                            s,
                            i,
                            o,
                            c,
                            d,
                            p,
                            h,
                            m,
                            f,
                            g,
                            _,
                            v,
                            b,
                            y,
                            w,
                            S,
                            R,
                            E,
                            k,
                            T,
                            C,
                            O,
                            D,
                            x,
                            I = this;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((a =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "changeMode() Calling with mode : ".concat(
                                                  t
                                                ),
                                            })),
                                      (n = this._mode),
                                      (e.prev = 2),
                                      n !== t)
                                    ) {
                                      e.next = 7;
                                      break;
                                    }
                                    throw (
                                      (null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: a,
                                          status: 2,
                                          message: "changeMode() Ending",
                                        }),
                                      null === (i = this._videosdkLogs) ||
                                        void 0 === i ||
                                        i.pushLogs({
                                          logText: "You are already in ".concat(
                                            t,
                                            " mode"
                                          ),
                                          logType: "INFO",
                                        }),
                                      new Error(
                                        "You are already in ".concat(t, " mode")
                                      ))
                                    );
                                  case 7:
                                    if (
                                      ((this._mode = t), t !== Ce.n.CONFERENCE)
                                    ) {
                                      e.next = 38;
                                      break;
                                    }
                                    return (
                                      (this._consume = !0),
                                      (this._produce = !0),
                                      (this._mediasoupDevice = new u.Device({
                                        handlerName: this._handlerName,
                                      })),
                                      (e.next = 14),
                                      this._protoo.request(
                                        "getRouterRtpCapabilities"
                                      )
                                    );
                                  case 14:
                                    return (
                                      (d = e.sent),
                                      (e.next = 17),
                                      this._mediasoupDevice.load({
                                        routerRtpCapabilities: d,
                                      })
                                    );
                                  case 17:
                                    if (!this._produce) {
                                      e.next = 22;
                                      break;
                                    }
                                    return (
                                      (e.next = 20),
                                      this._protoo.request(
                                        "createWebRtcTransport",
                                        {
                                          preferredProtocol:
                                            this._preferredProtocol,
                                          producing: !0,
                                          consuming: !1,
                                          sctpCapabilities: this._useDataChannel
                                            ? this._mediasoupDevice
                                                .sctpCapabilities
                                            : void 0,
                                        }
                                      )
                                    );
                                  case 20:
                                    (p = e.sent),
                                      this.createProducerTransport(p, a);
                                  case 22:
                                    if (!this._consume) {
                                      e.next = 29;
                                      break;
                                    }
                                    return (
                                      (e.next = 25),
                                      this._protoo.request(
                                        "createWebRtcTransport",
                                        {
                                          preferredProtocol:
                                            this._preferredProtocol,
                                          producing: !1,
                                          consuming: !0,
                                          sctpCapabilities: this._useDataChannel
                                            ? this._mediasoupDevice
                                                .sctpCapabilities
                                            : void 0,
                                        }
                                      )
                                    );
                                  case 25:
                                    (h = e.sent),
                                      (m = h.id),
                                      (f = h.iceParameters),
                                      (g = h.iceCandidates),
                                      (_ = h.dtlsParameters),
                                      (v = h.sctpParameters),
                                      (this._recvTransport =
                                        this._mediasoupDevice.createRecvTransport(
                                          {
                                            id: m,
                                            iceParameters: f,
                                            iceCandidates: g,
                                            dtlsParameters: _,
                                            sctpParameters: v,
                                            iceServers: this._iceServers,
                                          }
                                        )),
                                      this._recvTransport.on(
                                        "connect",
                                        function (e, t, r) {
                                          var a = e.dtlsParameters;
                                          I._protoo
                                            .request("connectWebRtcTransport", {
                                              transportId: I._recvTransport.id,
                                              dtlsParameters: a,
                                            })
                                            .then(t)
                                            .catch(r);
                                        }
                                      );
                                  case 29:
                                    return (
                                      null === (o = this._openTelemetry) ||
                                        void 0 === o ||
                                        o.traceAutoComplete({
                                          spanName:
                                            "Sending changeMode request to server",
                                          span: a,
                                          status: 1,
                                        }),
                                      (e.next = 32),
                                      this._protoo.request("changeMode", {
                                        mode: t,
                                      })
                                    );
                                  case 32:
                                    this._produce &&
                                      (Ve.dispatch(
                                        A({
                                          canSendMic:
                                            this._mediasoupDevice.canProduce(
                                              "audio"
                                            ),
                                          canSendWebcam:
                                            this._mediasoupDevice.canProduce(
                                              "video"
                                            ),
                                        })
                                      ),
                                      this._micEnabled &&
                                        this.enableMic(
                                          this.customMicrophoneAudioTrack
                                        ),
                                      (b = P()),
                                      this._webcamEnabled &&
                                        (!b ||
                                          b.webcamEnabled ||
                                          this._externalVideo) &&
                                        this.enableWebcam(
                                          this.customCameraVideoTrack,
                                          a
                                        ),
                                      this.enableChatDataProducer()),
                                      window.SHOW_INFO &&
                                        ((y = Ve.getState()),
                                        (w = y.me),
                                        Ve.dispatch(M(w.id))),
                                      null === (c = this._openTelemetry) ||
                                        void 0 === c ||
                                        c.traceAutoComplete({
                                          spanName:
                                            "Emitting PEER_MODE_CHANGED for Peer : ".concat(
                                              this._peerId,
                                              " "
                                            ),
                                          span: a,
                                          status: 1,
                                        }),
                                      this._eventEmitter.emit(
                                        "PEER_MODE_CHANGED",
                                        {
                                          peerId: this._peerId,
                                          mode: "CONFERENCE",
                                        }
                                      ),
                                      (e.next = 52);
                                    break;
                                  case 38:
                                    if (t !== Ce.n.VIEWER) {
                                      e.next = 52;
                                      break;
                                    }
                                    return (
                                      null === (S = this._openTelemetry) ||
                                        void 0 === S ||
                                        S.traceAutoComplete({
                                          spanName:
                                            "Sending changeMode request to server",
                                          span: a,
                                          status: 1,
                                        }),
                                      (e.next = 42),
                                      this._protoo.request("changeMode", {
                                        mode: t,
                                      })
                                    );
                                  case 42:
                                    (this._consume = !1),
                                      (this._produce = !1),
                                      this._dataConsumers.clear(),
                                      (O =
                                        null === (R = this._openTelemetry) ||
                                        void 0 === R
                                          ? void 0
                                          : R.trace({
                                              spanName: "Closing Trasnport",
                                              span: a,
                                            })),
                                      null === (E = this._sendTransport) ||
                                        void 0 === E ||
                                        E.close(),
                                      (this._sendTransport = null),
                                      null === (k = this._recvTransport) ||
                                        void 0 === k ||
                                        k.close(),
                                      (this._recvTransport = null),
                                      null === (T = this._openTelemetry) ||
                                        void 0 === T ||
                                        T.completeSpan({
                                          span: O,
                                          status: 1,
                                          message: "Closed Trasnport",
                                        }),
                                      null === (C = this._openTelemetry) ||
                                        void 0 === C ||
                                        C.completeSpan({
                                          span: O,
                                          status: 1,
                                          message: "changeMode() Ending",
                                        });
                                  case 52:
                                    e.next = 58;
                                    break;
                                  case 54:
                                    (e.prev = 54),
                                      (e.t0 = e.catch(2)),
                                      null === (D = this._videosdkLogs) ||
                                        void 0 === D ||
                                        D.pushLogs({
                                          logText: "Error changeMode(".concat(
                                            t,
                                            ") | failed"
                                          ),
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      null === (x = this._openTelemetry) ||
                                        void 0 === x ||
                                        x.completeSpan({
                                          span: a,
                                          status: 2,
                                          message: "changeMode(".concat(
                                            t,
                                            ") | failed"
                                          ),
                                        });
                                  case 58:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 54]]
                          );
                        })
                      )),
                      function (e) {
                        return xt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enablePeerWebcam",
                    value:
                      ((Dt = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName: "Enabling peer ".concat(
                                            t,
                                            " Webcam"
                                          ),
                                          status: 1,
                                        }),
                                      Ye.debug("enablePeerWebcam()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("enablePeerWebcam", {
                                        peerId: t,
                                      })
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error enablePeerWebcam | failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error(
                                        "enablePeerWebcam() | failed:%o",
                                        e.t0
                                      );
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Dt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disablePeerWebcam",
                    value:
                      ((Ot = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName: "Disabling peer ".concat(
                                            t,
                                            " Webcam"
                                          ),
                                          status: 1,
                                        }),
                                      Ye.debug("disablePeerWebcam()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request(
                                        "disablePeerWebcam",
                                        { peerId: t }
                                      )
                                    );
                                  case 5:
                                    e.next = 10;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error disablePeerWebcam | failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return Ot.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getMicStats",
                    value: function (e) {
                      var t = this;
                      if (this._micProducer) {
                        var r = 0;
                        e.onStatsCollected = function (e) {
                          var a;
                          (t._stats.producerStats ||
                            (t._stats.producerStats = {}),
                          t._stats.producerStats.audio ||
                            (t._stats.producerStats.audio = []),
                          t._micProducer) &&
                            (t._latestStats[
                              null === (a = t._micProducer) || void 0 === a
                                ? void 0
                                : a.id
                            ] = []);
                          e.audio.forEach(function (e) {
                            var r;
                            t._micProducer &&
                              t._latestStats[
                                null === (r = t._micProducer) || void 0 === r
                                  ? void 0
                                  : r.id
                              ].push(e);
                          }),
                            r % 5 == 0 &&
                              null != t._micProducer &&
                              t._stats.producerStats.audio.push(
                                He(
                                  { timestamp: new Date() },
                                  t._latestStats[t._micProducer.id]
                                    ? t._latestStats[t._micProducer.id][0]
                                    : {}
                                )
                              ),
                            r++;
                        };
                      }
                    },
                  },
                  {
                    key: "enableMic",
                    value:
                      ((Pt = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r,
                            a,
                            n,
                            s,
                            i,
                            o,
                            c,
                            d,
                            p,
                            u,
                            h,
                            m,
                            f,
                            g,
                            _,
                            v,
                            b,
                            y,
                            w,
                            S,
                            R,
                            E,
                            k,
                            T,
                            C,
                            P,
                            O,
                            D,
                            x,
                            I,
                            M,
                            A,
                            L,
                            N,
                            j,
                            B,
                            F,
                            q,
                            H,
                            V,
                            G,
                            z,
                            $,
                            K,
                            J,
                            Q,
                            Y,
                            X,
                            Z,
                            ee,
                            te,
                            re,
                            ae,
                            ne,
                            se,
                            oe,
                            de,
                            le,
                            pe,
                            ue,
                            he,
                            me,
                            fe,
                            ge,
                            _e,
                            ve,
                            be,
                            ye,
                            we,
                            Se,
                            Re = this,
                            Ee = arguments;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((i =
                                        Ee.length > 0 && void 0 !== Ee[0]
                                          ? Ee[0]
                                          : void 0),
                                      (o =
                                        Ee.length > 1 && void 0 !== Ee[1]
                                          ? Ee[1]
                                          : void 0),
                                      (c =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "enableMic() Calling ".concat(
                                                  i
                                                    ? "With Custom Audio Track"
                                                    : "Without Custom Audio Track "
                                                ),
                                              attributes: {
                                                customAudioConfig: i
                                                  ? JSON.stringify(i)
                                                  : "Not Specify Custom Track",
                                              },
                                              span: o || null,
                                            })),
                                      Ye.debug("enableMic()"),
                                      (this._micEnabled = !0),
                                      !this._micProducer)
                                    ) {
                                      e.next = 27;
                                      break;
                                    }
                                    if (
                                      ((u =
                                        null === (d = this._openTelemetry) ||
                                        void 0 === d
                                          ? void 0
                                          : d.trace({
                                              spanName: "Mic Producer found",
                                              span: c,
                                            })),
                                      i &&
                                        (null === (h = this._openTelemetry) ||
                                          void 0 === h ||
                                          h.traceAutoComplete({
                                            spanName:
                                              "Stopping customAudioTrack",
                                            span: c,
                                            status: 1,
                                          }),
                                        i.getTracks().forEach(function (e) {
                                          e.stop();
                                        })),
                                      null === (p = this._openTelemetry) ||
                                        void 0 === p ||
                                        p.completeSpan({
                                          span: u,
                                          status: 1,
                                          message: "Resuming Mic Producer",
                                        }),
                                      this._micProducer.resume(),
                                      (m = this._micProducer),
                                      !this._sendTransport)
                                    ) {
                                      e.next = 18;
                                      break;
                                    }
                                    return (
                                      (e.next = 14),
                                      this._sendTransport.produce({
                                        track: this._micProducer.track,
                                        encodings:
                                          this._micProducer._appData.encodings,
                                        codecOptions:
                                          this._micProducer._appData
                                            .codecOptions,
                                      })
                                    );
                                  case 14:
                                    (this._micProducer = e.sent),
                                      this._micProducer
                                        ? ((g = U({
                                            id: this._micProducer.id,
                                            paused: this._micProducer.paused,
                                            track: this._micProducer.track,
                                            rtpParameters:
                                              this._micProducer.rtpParameters,
                                            codec:
                                              this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                                "/"
                                              )[1],
                                            encodings: m._appData.encodings,
                                            codecOptions:
                                              m._appData.codecOptions,
                                            instance: this._micProducer,
                                          })),
                                          this._micProducer.track.getConstraints()
                                            .deviceId &&
                                            (this._mic.device = this._mics.get(
                                              this._micProducer.track.getConstraints()
                                                .deviceId
                                            )),
                                          Ve.dispatch(g),
                                          this._eventEmitter.emit(
                                            g.type,
                                            g.payload
                                          ),
                                          null === (f = this._openTelemetry) ||
                                            void 0 === f ||
                                            f.completeSpan({
                                              span: c,
                                              status: 1,
                                              message: "Enable Mic Successful",
                                            }))
                                        : null === (_ = this._openTelemetry) ||
                                          void 0 === _ ||
                                          _.completeSpan({
                                            span: c,
                                            status: 2,
                                            message:
                                              "Error in enableMic() :: micProducer null",
                                          }),
                                      (e.next = 21);
                                    break;
                                  case 18:
                                    return (
                                      null === (v = this._videosdkLogs) ||
                                        void 0 === v ||
                                        v.pushLogs({
                                          logText:
                                            ke.q
                                              .ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                              .message,
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: Transport is not setup",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      this._emitError(
                                        ke.q
                                          .ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 21:
                                    return (
                                      this._micProducer.observer.on(
                                        "pause",
                                        function () {
                                          var e =
                                            Re._metrics.getProbe(
                                              "mic_producer"
                                            );
                                          null == e || e.stop(),
                                            (Re._latestStats[
                                              Re._micProducer.id
                                            ] = []),
                                            Re._metrics.removeExistingProbe(e);
                                        }
                                      ),
                                      this._micProducer.observer.on(
                                        "close",
                                        function () {
                                          var e =
                                            Re._metrics.getProbe(
                                              "mic_producer"
                                            );
                                          null == e || e.stop(),
                                            (Re._latestStats[
                                              Re._micProducer.id
                                            ] = []),
                                            Re._metrics.removeExistingProbe(e);
                                        }
                                      ),
                                      (b = this._metrics.addNewProbe(
                                        this._micProducer,
                                        { name: "mic_producer" }
                                      )),
                                      this.getMicStats(b),
                                      b.start(),
                                      e.abrupt("return")
                                    );
                                  case 27:
                                    if (!this._mediasoupDevice) {
                                      e.next = 36;
                                      break;
                                    }
                                    if (
                                      this._mediasoupDevice.canProduce("audio")
                                    ) {
                                      e.next = 34;
                                      break;
                                    }
                                    return (
                                      (S =
                                        "react-native" ==
                                        this._deviceInfo.sdkType
                                          ? ke.q.ERROR_RN_MIC_ACCESS_UNAVAILABLE
                                              .message
                                          : ke.q
                                              .ERROR_MICROPHONE_ACCESS_UNAVAILABLE
                                              .message),
                                      null === (y = this._videosdkLogs) ||
                                        void 0 === y ||
                                        y.pushLogs({
                                          logText: S,
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: Microphone access unavailable",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      Ye.error(
                                        "enableMic() | cannot produce audio"
                                      ),
                                      null === (w = this._openTelemetry) ||
                                        void 0 === w ||
                                        w.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableMic() :: ".concat(
                                              S
                                            ),
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 34:
                                    e.next = 39;
                                    break;
                                  case 36:
                                    return (
                                      null === (R = this._videosdkLogs) ||
                                        void 0 === R ||
                                        R.pushLogs({
                                          logText:
                                            "Oops! Something went wrong, and we're unable to enable the mic. Please try again.",
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic(): Something went wrong.",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (E = this._openTelemetry) ||
                                        void 0 === E ||
                                        E.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableMic() :: mediasoupDevice is undefined",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 39:
                                    if (((e.prev = 39), this._externalVideo)) {
                                      e.next = 106;
                                      break;
                                    }
                                    return (
                                      Ye.debug(
                                        "enableMic() | calling getUserMedia()"
                                      ),
                                      (e.next = 44),
                                      this._updateMics(c)
                                    );
                                  case 44:
                                    if (this._mic.device) {
                                      e.next = 47;
                                      break;
                                    }
                                    throw new Error(
                                      "Whoops! No Microphone Found: We couldn't find your microphone. Is it plugged in and turned on? If so, try restarting your computer or checking your device settings. Also, ensure you're on a secure website (https://)."
                                    );
                                  case 47:
                                    try {
                                      i &&
                                        "ended" ==
                                          (k = i.getAudioTracks()[0])
                                            .readyState &&
                                        ((k = null),
                                        (M =
                                          ke.q.ERROR_CUSTOM_AUDIO_TRACK_ENDED),
                                        null === (I = this._videosdkLogs) ||
                                          void 0 === I ||
                                          I.pushLogs({
                                            logText: M.message,
                                            logType: "INFO",
                                            attributes: {
                                              error:
                                                "In enableMic() :: Invalid Custom Track Passed",
                                            },
                                            dashboardLog: !0,
                                          }),
                                        this._emitError(M));
                                    } catch (e) {
                                      (L =
                                        ke.q.ERROR_INVALID_CUSTOM_AUDIO_TRACK),
                                        null === (A = this._videosdkLogs) ||
                                          void 0 === A ||
                                          A.pushLogs({
                                            logText: L.message,
                                            logType: "INFO",
                                            attributes: {
                                              error:
                                                "In enableMic() :: Invalid Custom Track Passed",
                                            },
                                          }),
                                        this._emitError(L),
                                        console.log(
                                          "Invalid Custom Audio Track Passed. Reverting to default Error: ".concat(
                                            e
                                          )
                                        );
                                    }
                                    if (k) {
                                      e.next = 104;
                                      break;
                                    }
                                    return (
                                      (B =
                                        null === (N = this._openTelemetry) ||
                                        void 0 === N
                                          ? void 0
                                          : N.trace({
                                              spanName: "Creating Track",
                                              span: c,
                                            })),
                                      (e.prev = 50),
                                      (e.next = 53),
                                      navigator.mediaDevices.getUserMedia({
                                        audio: {
                                          deviceId: {
                                            ideal: this._mic.device.deviceId,
                                          },
                                          channelCount: 1,
                                          noiseSuppression: !0,
                                          echoCancellation: !0,
                                          googEchoCancellation: !0,
                                          googEchoCancellation2: !0,
                                          googAutoGainControl: !0,
                                          googAutoGainControl2: !0,
                                          googNoiseSuppression: !0,
                                          googNoiseSuppression2: !0,
                                          googHighpassFilter: !0,
                                        },
                                      })
                                    );
                                  case 53:
                                    (F = e.sent), (e.next = 102);
                                    break;
                                  case 56:
                                    if (
                                      ((e.prev = 56),
                                      (e.t0 = e.catch(50)),
                                      null === (q = this._openTelemetry) ||
                                        void 0 === q ||
                                        q.completeSpan({
                                          message:
                                            "Error in enableMic() :: ".concat(
                                              e.t0.message
                                            ),
                                          span: B,
                                          status: 2,
                                        }),
                                      "SecurityError" !== e.t0.name)
                                    ) {
                                      e.next = 67;
                                      break;
                                    }
                                    (G =
                                      ke.q
                                        .ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED),
                                      (z = G.message),
                                      this._emitError(G),
                                      null === (H = this._videosdkLogs) ||
                                        void 0 === H ||
                                        H.pushLogs({
                                          logText: z,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: Microphone Permission Denied or Dismissed",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (V = this._openTelemetry) ||
                                        void 0 === V ||
                                        V.completeSpan({
                                          message:
                                            "Error in enableMic() :: occurred in creating audio track, ".concat(
                                              z
                                            ),
                                          span: c,
                                          status: 2,
                                        }),
                                      (e.next = 101);
                                    break;
                                  case 67:
                                    if ("DOMException" !== e.t0.name) {
                                      e.next = 75;
                                      break;
                                    }
                                    (J = ke.q.ERROR_RN_MIC_NOT_FOUND),
                                      (Q = J.message),
                                      this._emitError(J),
                                      null === ($ = this._videosdkLogs) ||
                                        void 0 === $ ||
                                        $.pushLogs({
                                          logText: Q,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: No Microphone Device Found",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (K = this._openTelemetry) ||
                                        void 0 === K ||
                                        K.completeSpan({
                                          message:
                                            "Error in enableMic() :: occurred in creating audio track, ".concat(
                                              Q
                                            ),
                                          span: c,
                                          status: 2,
                                        }),
                                      (e.next = 101);
                                    break;
                                  case 75:
                                    if (!(e.t0 instanceof DOMException)) {
                                      e.next = 98;
                                      break;
                                    }
                                    (e.t1 = e.t0.name),
                                      (e.next =
                                        "NotAllowedError" === e.t1
                                          ? 79
                                          : "NotReadableError" === e.t1
                                          ? 82
                                          : "NotFoundError" === e.t1
                                          ? 85
                                          : 92);
                                    break;
                                  case 79:
                                    return (
                                      (Y = this.handleNotAllowedError(
                                        e.t0,
                                        this._openTelemetry,
                                        this._videosdkLogs,
                                        c,
                                        "audio"
                                      )),
                                      this._emitError(Y),
                                      e.abrupt("break", 96)
                                    );
                                  case 82:
                                    return (
                                      (X = this.handleNotReadableError(
                                        e.t0,
                                        this._openTelemetry,
                                        this._videosdkLogs,
                                        c,
                                        "audio"
                                      )),
                                      this._emitError(X),
                                      e.abrupt("break", 96)
                                    );
                                  case 85:
                                    return (
                                      (Z = ke.q.ERROR_MICROPHONE_NOT_FOUND),
                                      navigator &&
                                        navigator.userAgent &&
                                        -1 !=
                                          navigator.userAgent.indexOf(
                                            "Firefox"
                                          ) &&
                                        (Z =
                                          ke.q
                                            .ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS),
                                      (ee = Z.message),
                                      this._emitError(Z),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: ee,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: No Microphone Device Found",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (a = this._openTelemetry) ||
                                        void 0 === a ||
                                        a.completeSpan({
                                          message:
                                            "Error in enableMic() :: occurred in creating audio track, ".concat(
                                              ee
                                            ),
                                          span: c,
                                          status: 2,
                                        }),
                                      e.abrupt("break", 96)
                                    );
                                  case 92:
                                    return (
                                      (te =
                                        "An error occurred in creating audio track, ".concat(
                                          e.t0.message
                                        )),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText: e.t0.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: ".concat(
                                                te
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          message:
                                            "Error in enableMic() :: ".concat(
                                              te
                                            ),
                                          span: c,
                                          status: 2,
                                        }),
                                      e.abrupt("break", 96)
                                    );
                                  case 96:
                                    e.next = 101;
                                    break;
                                  case 98:
                                    (ne =
                                      "An error occurred in creating audio track, ".concat(
                                        e.t0.message
                                      )),
                                      null === (re = this._videosdkLogs) ||
                                        void 0 === re ||
                                        re.pushLogs({
                                          logText: e.t0.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: ".concat(
                                                ne
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (ae = this._openTelemetry) ||
                                        void 0 === ae ||
                                        ae.completeSpan({
                                          message:
                                            "Error in enableMic() :: ".concat(
                                              ne
                                            ),
                                          span: c,
                                          status: 2,
                                        });
                                  case 101:
                                    return e.abrupt("return");
                                  case 102:
                                    (k = F.getAudioTracks()[0]),
                                      null === (j = this._openTelemetry) ||
                                        void 0 === j ||
                                        j.completeSpan({
                                          message: "Audio Track Generated",
                                          span: B,
                                          status: 1,
                                        });
                                  case 104:
                                    e.next = 110;
                                    break;
                                  case 106:
                                    return (
                                      (e.next = 108),
                                      this._getExternalVideoStream()
                                    );
                                  case 108:
                                    (se = e.sent),
                                      (k = se.getAudioTracks()[0].clone());
                                  case 110:
                                    if (
                                      ((T =
                                        null === (C = this._openTelemetry) ||
                                        void 0 === C
                                          ? void 0
                                          : C.trace({
                                              spanName:
                                                "Generating Producer Configuration",
                                              span: c,
                                            })),
                                      (oe = { opusStereo: 1, opusDtx: 1 }),
                                      i &&
                                        ((de = i.encoderConfig
                                          ? ce.$.audioProfiles[i.encoderConfig]
                                          : ce.$.audioProfiles.speech_standard),
                                        (oe = {
                                          opusStereo: de.stereo ? 1 : 0,
                                          opusFec: de.fec ? 1 : 0,
                                          opusDtx: de.dtx ? 1 : 0,
                                          opusMaxPlaybackRate:
                                            de.maxPlaybackRate,
                                          opusPtime: de.packetTime,
                                        })),
                                      (pe = {
                                        encodings: (le = [
                                          { networkPriority: "high" },
                                        ]),
                                        codecOptions: oe,
                                      }),
                                      null === (P = this._openTelemetry) ||
                                        void 0 === P ||
                                        P.traceAutoComplete({
                                          spanName: "Generated AppData",
                                          span: T,
                                          attributes: {
                                            appData: JSON.stringify(pe),
                                          },
                                          status: 1,
                                        }),
                                      null === (O = this._openTelemetry) ||
                                        void 0 === O ||
                                        O.completeSpan({
                                          span: T,
                                          status: 1,
                                          message:
                                            "Producer Configuration Generated",
                                        }),
                                      (T =
                                        null === (D = this._openTelemetry) ||
                                        void 0 === D
                                          ? void 0
                                          : D.trace({
                                              spanName: "Creating Mic Producer",
                                              span: c,
                                            })),
                                      null === (x = k) ||
                                        void 0 === x ||
                                        x.addEventListener(
                                          "ended",
                                          function () {
                                            console.log("Track Ended Error");
                                            try {
                                              var e,
                                                t,
                                                r =
                                                  "react-native" ==
                                                  Re._deviceInfo.sdkType
                                                    ? ke.q
                                                        .ERROR_RN_MIC_TRACK_ENDED
                                                    : ke.q
                                                        .ERROR_MICROPHONE_TRACK_ENDED;
                                              null === (e = Re._videosdkLogs) ||
                                                void 0 === e ||
                                                e.pushLogs({
                                                  logText: r.message,
                                                  logType: "ERROR",
                                                  attributes: {
                                                    error:
                                                      "Error Track Ended :: ".concat(
                                                        r.message
                                                      ),
                                                  },
                                                  dashboardLog: !0,
                                                }),
                                                null ===
                                                  (t = Re._openTelemetry) ||
                                                  void 0 === t ||
                                                  t.traceAutoComplete({
                                                    spanName:
                                                      "this._micProducer trackended or Microphone disconnected!",
                                                    span: c,
                                                    message: r.message,
                                                    status: 2,
                                                  }),
                                                Ve.dispatch(
                                                  ie({
                                                    type: "error",
                                                    text: "Microphone disconnected!",
                                                  })
                                                ),
                                                Re.disableMic(!0, c).catch(
                                                  function () {}
                                                );
                                            } catch (e) {
                                              console.error(e);
                                            }
                                          }
                                        ),
                                      !this._sendTransport)
                                    ) {
                                      e.next = 126;
                                      break;
                                    }
                                    return (
                                      (e.next = 123),
                                      this._sendTransport.produce({
                                        track: k,
                                        encodings: le,
                                        codecOptions: oe,
                                        appData: pe,
                                      })
                                    );
                                  case 123:
                                    (this._micProducer = e.sent),
                                      (e.next = 129);
                                    break;
                                  case 126:
                                    return (
                                      null === (ue = this._videosdkLogs) ||
                                        void 0 === ue ||
                                        ue.pushLogs({
                                          logText:
                                            ke.q
                                              .ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                              .message,
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: Transport is not setup",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      this._emitError(
                                        ke.q
                                          .ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 129:
                                    this._micProducer
                                      ? (k.getConstraints().deviceId &&
                                          (this._mic.device = this._mics.get(
                                            k.getConstraints().deviceId
                                          )),
                                        (fe = U({
                                          id: this._micProducer.id,
                                          paused: this._micProducer.paused,
                                          track: this._micProducer.track,
                                          rtpParameters:
                                            this._micProducer.rtpParameters,
                                          codec:
                                            this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                              "/"
                                            )[1],
                                          encodings: le,
                                          codecOptions: oe,
                                          instance: this._micProducer,
                                        })),
                                        Ve.dispatch(fe),
                                        this._eventEmitter.emit(
                                          fe.type,
                                          fe.payload
                                        ),
                                        (ge = this._metrics.addNewProbe(
                                          this._micProducer,
                                          { name: "mic_producer" }
                                        )).start(),
                                        this.getMicStats(ge),
                                        this._micProducer.on(
                                          "transportclose",
                                          function () {
                                            var e,
                                              t = W(Re._micProducer.id);
                                            Ve.dispatch(t),
                                              Re._eventEmitter.emit(
                                                t.type,
                                                t.payload
                                              ),
                                              null === (e = Re._micProducer) ||
                                                void 0 === e ||
                                                e.close(),
                                              (Re._micProducer = null);
                                          }
                                        ),
                                        this._micProducer.observer.on(
                                          "pause",
                                          function () {
                                            var e =
                                              Re._metrics.getProbe(
                                                "mic_producer"
                                              );
                                            null == e || e.stop(),
                                              (Re._latestStats[
                                                Re._micProducer.id
                                              ] = []),
                                              Re._metrics.removeExistingProbe(
                                                e
                                              );
                                          }
                                        ),
                                        this._micProducer.observer.on(
                                          "close",
                                          function () {
                                            var e =
                                              Re._metrics.getProbe(
                                                "mic_producer"
                                              );
                                            null == e || e.stop(),
                                              (Re._latestStats[
                                                Re._micProducer.id
                                              ] = []),
                                              Re._metrics.removeExistingProbe(
                                                e
                                              );
                                          }
                                        ),
                                        this._micProducer.on(
                                          "trackended",
                                          function () {
                                            var e,
                                              t,
                                              r =
                                                "react-native" ==
                                                Re._deviceInfo.sdkType
                                                  ? ke.q
                                                      .ERROR_RN_MIC_TRACK_ENDED
                                                  : ke.q
                                                      .ERROR_MICROPHONE_TRACK_ENDED;
                                            null === (e = Re._videosdkLogs) ||
                                              void 0 === e ||
                                              e.pushLogs({
                                                logText: message,
                                                logType: "ERROR",
                                                attributes: {
                                                  error:
                                                    "Error in enableMic() :: ".concat(
                                                      r.message
                                                    ),
                                                },
                                                dashboardLog: !0,
                                              }),
                                              null ===
                                                (t = Re._openTelemetry) ||
                                                void 0 === t ||
                                                t.traceAutoComplete({
                                                  spanName:
                                                    "this._micProducer trackended or Microphone disconnected!",
                                                  span: c,
                                                  message: r.message,
                                                  status: 2,
                                                }),
                                              Ve.dispatch(
                                                ie({
                                                  type: "error",
                                                  text: "Microphone disconnected!",
                                                })
                                              ),
                                              Re.disableMic(!0, c).catch(
                                                function () {}
                                              );
                                          }
                                        ),
                                        null === (he = this._openTelemetry) ||
                                          void 0 === he ||
                                          he.completeSpan({
                                            span: T,
                                            status: 1,
                                            message: "Mic Producer Created",
                                          }),
                                        null === (me = this._openTelemetry) ||
                                          void 0 === me ||
                                          me.completeSpan({
                                            span: c,
                                            status: 1,
                                            message: "Enable Mic Successful",
                                          }))
                                      : (null === (_e = this._videosdkLogs) ||
                                          void 0 === _e ||
                                          _e.pushLogs({
                                            logText:
                                              "Oops! Something went wrong, and we're unable to enable the mic. Please try again.",
                                            logType: "ERROR",
                                            attributes: {
                                              error:
                                                "Error in enableMic(): Something went wrong.",
                                            },
                                            dashboardLog: !0,
                                          }),
                                        null === (ve = this._openTelemetry) ||
                                          void 0 === ve ||
                                          ve.completeSpan({
                                            span: T,
                                            status: 2,
                                            message:
                                              "Error in enableMic() :: micProducer null",
                                          }),
                                        null === (be = this._openTelemetry) ||
                                          void 0 === be ||
                                          be.completeSpan({
                                            span: enableWebcamSpan,
                                            status: 2,
                                            message:
                                              "Error in enableMic() :: micProducer null",
                                          })),
                                      (e.next = 142);
                                    break;
                                  case 132:
                                    return (
                                      (e.prev = 132),
                                      (e.t2 = e.catch(39)),
                                      null === (ye = this._openTelemetry) ||
                                        void 0 === ye ||
                                        ye.completeSpan({
                                          span: T,
                                          status: 2,
                                          message:
                                            "Error in enableMic() :: occurred in creating mic producer, ".concat(
                                              e.t2.message
                                            ),
                                        }),
                                      null === (we = this._openTelemetry) ||
                                        void 0 === we ||
                                        we.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableMic :: ".concat(
                                              e.t2.message
                                            ),
                                        }),
                                      null === (Se = this._videosdkLogs) ||
                                        void 0 === Se ||
                                        Se.pushLogs({
                                          logText: e.t2.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableMic() :: ".concat(
                                                e.t2.message
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                      Ye.error("enableMic() | failed:%o", e.t2),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error enabling microphone: ".concat(
                                            e.t2
                                          ),
                                        })
                                      ),
                                      (e.next = 141),
                                      this._protoo.request("produceError", {
                                        mediaType: "audio",
                                        message: e.t2.message,
                                      })
                                    );
                                  case 141:
                                    k && k.stop();
                                  case 142:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [39, 132],
                              [50, 56],
                            ]
                          );
                        })
                      )),
                      function () {
                        return Pt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableMic",
                    value:
                      ((Ct = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r,
                            a,
                            n,
                            s,
                            i,
                            o,
                            c,
                            d,
                            p,
                            u,
                            h,
                            m,
                            f,
                            g,
                            _,
                            v,
                            b,
                            y,
                            w,
                            S,
                            R,
                            E,
                            k,
                            T,
                            C = arguments;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((a =
                                        C.length > 0 &&
                                        void 0 !== C[0] &&
                                        C[0]),
                                      (n =
                                        C.length > 1 && void 0 !== C[1]
                                          ? C[1]
                                          : void 0),
                                      Ye.debug("disableMic()"),
                                      (s =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "disableMic() Calling",
                                              status: 1,
                                              span: n || null,
                                            })),
                                      this._micProducer)
                                    ) {
                                      e.next = 8;
                                      break;
                                    }
                                    return (
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: s,
                                          status: 2,
                                          message:
                                            "Error in disableMic() :: Mic Producer Not found",
                                        }),
                                      null === (o = this._videosdkLogs) ||
                                        void 0 === o ||
                                        o.pushLogs({
                                          logText:
                                            "Attempted to call disableMic() multiple times",
                                          attributes: {
                                            error:
                                              "Error in disableMic() :: Microphone is already disabled",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 8:
                                    if (
                                      ((c =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName: "Closing Mic Producer",
                                              span: s,
                                              status: 1,
                                            })),
                                      (this._micEnabled = !1),
                                      !this._micProducer || a)
                                    ) {
                                      e.next = 32;
                                      break;
                                    }
                                    return (
                                      (h =
                                        null === (d = this._openTelemetry) ||
                                        void 0 === d
                                          ? void 0
                                          : d.trace({
                                              spanName: "Pausing Mic Producer",
                                              span: c,
                                              status: 1,
                                            })),
                                      this._micProducer.pause(),
                                      (m = W(this._micProducer.id)),
                                      null === (p = this._openTelemetry) ||
                                        void 0 === p ||
                                        p.completeSpan({
                                          span: h,
                                          status: 1,
                                          message: "Pause Mic Successfully",
                                        }),
                                      Ve.dispatch(m),
                                      this._eventEmitter.emit(
                                        m.type,
                                        m.payload
                                      ),
                                      (e.prev = 17),
                                      (e.next = 20),
                                      this._protoo.request("closeProducer", {
                                        producerId: this._micProducer.id,
                                      })
                                    );
                                  case 20:
                                    null === (f = this._openTelemetry) ||
                                      void 0 === f ||
                                      f.completeSpan({
                                        span: c,
                                        status: 1,
                                        message:
                                          "Requested Server to Close Producer",
                                      }),
                                      (e.next = 30);
                                    break;
                                  case 23:
                                    (e.prev = 23),
                                      (e.t0 = e.catch(17)),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error closing server-side mic Producer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      (b =
                                        "Error in disableMic() :: Failed to close server-side microphone producer. closeProducer status: ".concat(
                                          a
                                        )),
                                      null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in disableMic() :: ".concat(
                                              e.t0.message
                                            ),
                                        }),
                                      null === (_ = this._openTelemetry) ||
                                        void 0 === _ ||
                                        _.completeSpan({
                                          span: s,
                                          status: 2,
                                          message: b,
                                        }),
                                      null === (v = this._videosdkLogs) ||
                                        void 0 === v ||
                                        v.pushLogs({
                                          logText: b,
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                          dashboardLog: !0,
                                        });
                                  case 30:
                                    return (
                                      null === (u = this._openTelemetry) ||
                                        void 0 === u ||
                                        u.completeSpan({
                                          span: s,
                                          status: 1,
                                          message: "Mic Disabled Successfully",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 32:
                                    return (
                                      this._micProducer.close(),
                                      (y = W(this._micProducer.id)),
                                      Ve.dispatch(y),
                                      this._eventEmitter.emit(
                                        y.type,
                                        y.payload
                                      ),
                                      (e.prev = 36),
                                      (e.next = 39),
                                      this._protoo.request("closeProducer", {
                                        producerId: this._micProducer.id,
                                      })
                                    );
                                  case 39:
                                    null === (w = this._openTelemetry) ||
                                      void 0 === w ||
                                      w.completeSpan({
                                        span: c,
                                        status: 1,
                                        message:
                                          "Requested Server to Close Producer",
                                      }),
                                      null === (S = this._openTelemetry) ||
                                        void 0 === S ||
                                        S.completeSpan({
                                          span: s,
                                          status: 1,
                                          message: "Mic Disabled Successfully",
                                        }),
                                      (e.next = 50);
                                    break;
                                  case 43:
                                    (e.prev = 43),
                                      (e.t1 = e.catch(36)),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error closing server-side mic Producer: ".concat(
                                            e.t1
                                          ),
                                        })
                                      ),
                                      (T =
                                        "Error in disableMic() :: Failed to close server-side microphone producer. closeProducer status: ".concat(
                                          a
                                        )),
                                      null === (R = this._openTelemetry) ||
                                        void 0 === R ||
                                        R.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in disableMic() :: ".concat(
                                              e.t1.message
                                            ),
                                        }),
                                      null === (E = this._openTelemetry) ||
                                        void 0 === E ||
                                        E.completeSpan({
                                          span: s,
                                          status: 2,
                                          message: T,
                                        }),
                                      null === (k = this._videosdkLogs) ||
                                        void 0 === k ||
                                        k.pushLogs({
                                          logText: T,
                                          logType: "ERROR",
                                          attributes: { error: e.t1.message },
                                          dashboardLog: !0,
                                        });
                                  case 50:
                                    this._micProducer = null;
                                  case 51:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [17, 23],
                              [36, 43],
                            ]
                          );
                        })
                      )),
                      function () {
                        return Ct.apply(this, arguments);
                      }),
                  },
                  {
                    key: "muteMic",
                    value:
                      ((Tt = (0, s.A)(
                        l().mark(function e() {
                          var t;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("muteMic()"),
                                      (this._micEnabled = !1),
                                      this._micProducer.pause(),
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._protoo.request("pauseProducer", {
                                        producerId: this._micProducer.id,
                                      })
                                    );
                                  case 6:
                                    Ve.dispatch({
                                      type: "SET_PRODUCER_PAUSED",
                                      payload: {
                                        producerId: this._micProducer.id,
                                      },
                                    }),
                                      (e.next = 14);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(3)),
                                      Ye.error("muteMic() | failed: %o", e.t0),
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText:
                                            "Error pausing server-side mic Producer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error pausing server-side mic Producer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 9]]
                          );
                        })
                      )),
                      function () {
                        return Tt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "unmuteMic",
                    value:
                      ((kt = (0, s.A)(
                        l().mark(function e() {
                          var t;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("unmuteMic()"),
                                      (this._micEnabled = !0),
                                      this._micProducer.resume(),
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._protoo.request("resumeProducer", {
                                        producerId: this._micProducer.id,
                                      })
                                    );
                                  case 6:
                                    Ve.dispatch({
                                      type: "SET_PRODUCER_RESUMED",
                                      payload: {
                                        producerId: this._micProducer.id,
                                      },
                                    }),
                                      (e.next = 14);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(3)),
                                      Ye.error(
                                        "unmuteMic() | failed: %o",
                                        e.t0
                                      ),
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText:
                                            "Error resuming server-side mic Producer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error resuming server-side mic Producer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 9]]
                          );
                        })
                      )),
                      function () {
                        return kt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enableWebcam",
                    value:
                      ((Et = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r,
                            a,
                            n,
                            s,
                            i,
                            o,
                            c,
                            d,
                            p,
                            u,
                            h,
                            m,
                            f,
                            g,
                            _,
                            v,
                            b,
                            y,
                            w,
                            S,
                            R,
                            E,
                            k,
                            T,
                            C,
                            P,
                            O,
                            D,
                            x,
                            I,
                            M,
                            A,
                            L,
                            N,
                            j,
                            B,
                            F,
                            q,
                            H,
                            V,
                            z,
                            $,
                            K,
                            J,
                            Q,
                            Y,
                            X,
                            Z,
                            ee,
                            te,
                            re,
                            ae,
                            ne,
                            se,
                            oe,
                            ce,
                            de,
                            le,
                            pe,
                            ue,
                            he,
                            me,
                            fe,
                            ge,
                            _e,
                            ve,
                            be,
                            ye,
                            Se,
                            Re = this,
                            Ee = arguments;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((i =
                                        Ee.length > 0 && void 0 !== Ee[0]
                                          ? Ee[0]
                                          : void 0),
                                      (o =
                                        Ee.length > 1 && void 0 !== Ee[1]
                                          ? Ee[1]
                                          : void 0),
                                      (c =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "enableWebcam() Calling ".concat(
                                                  i
                                                    ? "With Custom Video Track"
                                                    : "Without Custom Video Track "
                                                ),
                                              attributes: {
                                                customVideoConfig: i
                                                  ? JSON.stringify(i)
                                                  : "Not Specify Custom Track",
                                              },
                                              span: o || null,
                                            })),
                                      Ye.debug("enableWebcam()"),
                                      (this._webcamEnabled = !0),
                                      !this._webcamProducer)
                                    ) {
                                      e.next = 9;
                                      break;
                                    }
                                    return (
                                      null === (d = this._openTelemetry) ||
                                        void 0 === d ||
                                        d.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableWebcam() :: Webcam Producer found",
                                        }),
                                      null === (p = this._videosdkLogs) ||
                                        void 0 === p ||
                                        p.pushLogs({
                                          logText:
                                            "Attempted to call enableWebcam() multiple times",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: Webcam is already enabled",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 9:
                                    if (!this._mediasoupDevice) {
                                      e.next = 18;
                                      break;
                                    }
                                    if (
                                      this._mediasoupDevice.canProduce("video")
                                    ) {
                                      e.next = 16;
                                      break;
                                    }
                                    return (
                                      (m =
                                        "react-native" ==
                                        this._deviceInfo.sdkType
                                          ? ke.q
                                              .ERROR_RN_CAMERA_ACCESS_UNAVAILABLE
                                              .message
                                          : ke.q.ERROR_CAMERA_ACCESS_UNAVAILABLE
                                              .message),
                                      null === (u = this._openTelemetry) ||
                                        void 0 === u ||
                                        u.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableWebcam() :: ".concat(
                                              m
                                            ),
                                        }),
                                      null === (h = this._videosdkLogs) ||
                                        void 0 === h ||
                                        h.pushLogs({
                                          logText: m,
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: Camera access unavailable",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      Ye.error(
                                        "enableWebcam() | cannot produce video"
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 16:
                                    e.next = 21;
                                    break;
                                  case 18:
                                    return (
                                      null === (f = this._videosdkLogs) ||
                                        void 0 === f ||
                                        f.pushLogs({
                                          logText:
                                            "Oops! Something went wrong, and we're unable to enable the webcam. Please try again.",
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam(): Something went wrong.",
                                          },
                                        }),
                                      null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableWebcam() :: mediasoupDevice is undefined",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 21:
                                    if (
                                      (Ve.dispatch(G(!0)),
                                      (b = this._webcam.resolution),
                                      (e.prev = 23),
                                      this._externalVideo)
                                    ) {
                                      e.next = 100;
                                      break;
                                    }
                                    return (
                                      (e.next = 27), this._updateWebcams(c)
                                    );
                                  case 27:
                                    if ((v = this._webcam.device)) {
                                      e.next = 31;
                                      break;
                                    }
                                    throw new Error(
                                      "Whoops! No Webcam Found: We couldn't find your camera. Is it plugged in and turned on? If so, try restarting your computer or checking your device settings. If you need help, check out troubleshooter at https://test.8x8.vc/. Also, ensure you're on a secure website (https://)."
                                    );
                                  case 31:
                                    Ye.debug(
                                      "enableWebcam() | calling getUserMedia()"
                                    );
                                    try {
                                      i &&
                                        "ended" ==
                                          (_ = i.getVideoTracks()[0])
                                            .readyState &&
                                        ((_ = null),
                                        (k =
                                          ke.q.ERROR_CUSTOM_VIDEO_TRACK_ENDED),
                                        null === (E = this._videosdkLogs) ||
                                          void 0 === E ||
                                          E.pushLogs({
                                            logText: k.message,
                                            logType: "INFO",
                                            attributes: {
                                              error:
                                                "In enableWebcam() :: Invalid Custom Track Passed",
                                            },
                                            dashboardLog: !0,
                                          }),
                                        this._emitError(k));
                                    } catch (e) {
                                      (C =
                                        ke.q.ERROR_INVALID_CUSTOM_VIDEO_TRACK),
                                        null === (T = this._videosdkLogs) ||
                                          void 0 === T ||
                                          T.pushLogs({
                                            logText: C.message,
                                            logType: "INFO",
                                            attributes: {
                                              error:
                                                "In enableWebcam() :: Invalid Custom Track Passed",
                                            },
                                          }),
                                        this._emitError(C),
                                        console.log(
                                          "Invalid Custom Video Track Passed. Reverting to default Error: ".concat(
                                            e
                                          )
                                        );
                                    }
                                    if (_) {
                                      e.next = 98;
                                      break;
                                    }
                                    if (
                                      ((O =
                                        null === (P = this._openTelemetry) ||
                                        void 0 === P
                                          ? void 0
                                          : P.trace({
                                              spanName: "Creating Track",
                                              span: c,
                                            })),
                                      (D = null),
                                      (e.prev = 36),
                                      "hd" != this._webcam.resolution)
                                    ) {
                                      e.next = 44;
                                      break;
                                    }
                                    return (
                                      (e.next = 40),
                                      this.createCameraVideoTrack({
                                        cameraId: v.deviceId,
                                        encoderConfig: "h720p_w1280p",
                                        multiStream: this._useSimulcast,
                                        facingMode: v.facing,
                                      })
                                    );
                                  case 40:
                                    (i = e.sent),
                                      (D = JSON.stringify({
                                        encoderConfig: "h720p_w1280p",
                                        multiStream: this._useSimulcast,
                                      })),
                                      (e.next = 48);
                                    break;
                                  case 44:
                                    return (
                                      (e.next = 46),
                                      this.createCameraVideoTrack({
                                        cameraId: v.deviceId,
                                        encoderConfig: "h540p_w960p",
                                        multiStream: this._useSimulcast,
                                        facingMode: v.facing,
                                      })
                                    );
                                  case 46:
                                    (i = e.sent),
                                      (D = JSON.stringify({
                                        encoderConfig: "h540p_w960p",
                                        multiStream: this._useSimulcast,
                                      }));
                                  case 48:
                                    (_ = i.getVideoTracks()[0]),
                                      null === (x = this._openTelemetry) ||
                                        void 0 === x ||
                                        x.completeSpan({
                                          message: "Video Track Generated",
                                          span: O,
                                          attributes: {
                                            customVideoTrackConfig: D,
                                          },
                                          status: 1,
                                        }),
                                      (e.next = 98);
                                    break;
                                  case 52:
                                    if (
                                      ((e.prev = 52),
                                      (e.t0 = e.catch(36)),
                                      null === (I = this._openTelemetry) ||
                                        void 0 === I ||
                                        I.completeSpan({
                                          message:
                                            "Error in enableWebcam() :: ".concat(
                                              e.t0.message
                                            ),
                                          span: O,
                                          status: 2,
                                        }),
                                      "SecurityError" !== e.t0.name)
                                    ) {
                                      e.next = 63;
                                      break;
                                    }
                                    (L =
                                      ke.q
                                        .ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED),
                                      (N = L.message),
                                      this._emitError(L),
                                      null === (M = this._videosdkLogs) ||
                                        void 0 === M ||
                                        M.pushLogs({
                                          logText: N,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: Camera Permission Denied or Dismissed",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (A = this._openTelemetry) ||
                                        void 0 === A ||
                                        A.completeSpan({
                                          message:
                                            "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                              N
                                            ),
                                          span: enableMicSpan,
                                          status: 2,
                                        }),
                                      (e.next = 97);
                                    break;
                                  case 63:
                                    if ("DOMException" !== e.t0.name) {
                                      e.next = 71;
                                      break;
                                    }
                                    (F = ke.q.ERROR_RN_CAMERA_NOT_FOUND),
                                      (q = F.message),
                                      this._emitError(F),
                                      null === (j = this._videosdkLogs) ||
                                        void 0 === j ||
                                        j.pushLogs({
                                          logText: q,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: No Camra Device Found",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (B = this._openTelemetry) ||
                                        void 0 === B ||
                                        B.completeSpan({
                                          message:
                                            "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                              q
                                            ),
                                          span: enableMicSpan,
                                          status: 2,
                                        }),
                                      (e.next = 97);
                                    break;
                                  case 71:
                                    if (!(e.t0 instanceof DOMException)) {
                                      e.next = 94;
                                      break;
                                    }
                                    (e.t1 = e.t0.name),
                                      (e.next =
                                        "NotAllowedError" === e.t1
                                          ? 75
                                          : "NotReadableError" === e.t1
                                          ? 78
                                          : "NotFoundError" === e.t1
                                          ? 81
                                          : 88);
                                    break;
                                  case 75:
                                    return (
                                      (H = this.handleNotAllowedError(
                                        e.t0,
                                        this._openTelemetry,
                                        this._videosdkLogs,
                                        c,
                                        "video"
                                      )),
                                      this._emitError(H),
                                      e.abrupt("break", 92)
                                    );
                                  case 78:
                                    return (
                                      (V = this.handleNotReadableError(
                                        e.t0,
                                        this._openTelemetry,
                                        this._videosdkLogs,
                                        c,
                                        "video"
                                      )),
                                      this._emitError(V),
                                      e.abrupt("break", 92)
                                    );
                                  case 81:
                                    return (
                                      (z = ke.q.ERROR_CAMERA_NOT_FOUND),
                                      navigator &&
                                        navigator.userAgent &&
                                        -1 !=
                                          navigator.userAgent.indexOf(
                                            "Firefox"
                                          ) &&
                                        (z =
                                          ke.q
                                            .ERROR_CAMERA_PERMISSION_DENIED_BY_OS),
                                      ($ = z.message),
                                      this._emitError(z),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: $,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: No Webcam Device Found",
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (a = this._openTelemetry) ||
                                        void 0 === a ||
                                        a.completeSpan({
                                          message:
                                            "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                              $
                                            ),
                                          span: c,
                                          status: 2,
                                        }),
                                      e.abrupt("break", 92)
                                    );
                                  case 88:
                                    return (
                                      (K =
                                        "An error occurred in creating video track, ".concat(
                                          e.t0.message
                                        )),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText: e.t0.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: ".concat(
                                                K
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          message:
                                            "Error in enableWebcam() :: ".concat(
                                              K
                                            ),
                                          span: c,
                                          status: 2,
                                        }),
                                      e.abrupt("break", 92)
                                    );
                                  case 92:
                                    e.next = 97;
                                    break;
                                  case 94:
                                    (Y =
                                      "An error occurred in creating video track, ".concat(
                                        e.t0.message
                                      )),
                                      null === (J = this._videosdkLogs) ||
                                        void 0 === J ||
                                        J.pushLogs({
                                          logText: e.t0.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: ".concat(
                                                Y
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (Q = this._openTelemetry) ||
                                        void 0 === Q ||
                                        Q.completeSpan({
                                          message:
                                            "Error in enableWebcam() :: ".concat(
                                              Y
                                            ),
                                          span: c,
                                          status: 2,
                                        });
                                  case 97:
                                    return e.abrupt("return");
                                  case 98:
                                    e.next = 105;
                                    break;
                                  case 100:
                                    return (
                                      (v = { label: "external video" }),
                                      (e.next = 103),
                                      this._getExternalVideoStream()
                                    );
                                  case 103:
                                    (X = e.sent),
                                      (_ = X.getVideoTracks()[0].clone());
                                  case 105:
                                    if (
                                      ((Z =
                                        null === (y = this._openTelemetry) ||
                                        void 0 === y
                                          ? void 0
                                          : y.trace({
                                              spanName:
                                                "Generating Producer Configuration",
                                              span: c,
                                            })),
                                      (re = { videoGoogleStartBitrate: 1e3 }),
                                      !this._forceH264)
                                    ) {
                                      e.next = 114;
                                      break;
                                    }
                                    if (
                                      (te =
                                        this._mediasoupDevice.rtpCapabilities.codecs.find(
                                          function (e) {
                                            return (
                                              "video/h264" ===
                                              e.mimeType.toLowerCase()
                                            );
                                          }
                                        ))
                                    ) {
                                      e.next = 112;
                                      break;
                                    }
                                    throw new Error(
                                      "The desired H.264 codec and configuration are not supported"
                                    );
                                  case 112:
                                    e.next = 119;
                                    break;
                                  case 114:
                                    if (!this._forceVP9) {
                                      e.next = 119;
                                      break;
                                    }
                                    if (
                                      (te =
                                        this._mediasoupDevice.rtpCapabilities.codecs.find(
                                          function (e) {
                                            return (
                                              "video/vp9" ===
                                              e.mimeType.toLowerCase()
                                            );
                                          }
                                        ))
                                    ) {
                                      e.next = 119;
                                      break;
                                    }
                                    throw new Error(
                                      "The desired VP9 codec and configuration are not supported"
                                    );
                                  case 119:
                                    _
                                      ? ((ae = _.getConstraints()),
                                        (ne =
                                          "react-native" ==
                                            this._deviceInfo.sdkType &&
                                          "ios" == this._deviceInfo.platform),
                                        (ee = we(
                                          !1,
                                          ae.width,
                                          ae.height,
                                          { simulcast: i.multiStream },
                                          ne
                                        )))
                                      : this._useSimulcast &&
                                        ((se =
                                          this._mediasoupDevice.rtpCapabilities.codecs.find(
                                            function (e) {
                                              return "video" === e.kind;
                                            }
                                          )),
                                        (ee =
                                          (this._forceVP9 && te) ||
                                          "video/vp9" ===
                                            se.mimeType.toLowerCase()
                                            ? Ke
                                            : $e[this._webcam.resolution])),
                                      (oe = {});
                                    try {
                                      oe = {
                                        encodings: ee,
                                        width: i
                                          ? null === (ce = _) || void 0 === ce
                                            ? void 0
                                            : ce.getConstraints().width
                                          : ze[b].width.ideal,
                                        height: i
                                          ? null === (de = _) || void 0 === de
                                            ? void 0
                                            : de.getConstraints().height
                                          : ze[b].height.ideal,
                                      };
                                    } catch (e) {
                                      null === (le = this._videosdkLogs) ||
                                        void 0 === le ||
                                        le.pushLogs({
                                          logText: e.message,
                                          logType: "INFO",
                                          attributes: {
                                            error:
                                              "In enableWebcam() :: ".concat(
                                                e.message
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                        console.log(e);
                                    }
                                    if (
                                      (null === (w = this._openTelemetry) ||
                                        void 0 === w ||
                                        w.traceAutoComplete({
                                          spanName:
                                            "Track Generated with height "
                                              .concat(oe.height, " and width ")
                                              .concat(
                                                oe.width,
                                                " with multiStream "
                                              )
                                              .concat(this._useSimulcast),
                                          attributes: {
                                            appData: JSON.stringify(oe),
                                          },
                                          span: c,
                                          status: 1,
                                        }),
                                      null === (S = this._openTelemetry) ||
                                        void 0 === S ||
                                        S.completeSpan({
                                          span: Z,
                                          status: 1,
                                          message:
                                            "Producer Configuration Generated",
                                        }),
                                      (Z =
                                        null === (R = this._openTelemetry) ||
                                        void 0 === R
                                          ? void 0
                                          : R.trace({
                                              spanName:
                                                "Creating Webcam Producer",
                                              span: c,
                                            })),
                                      !this._sendTransport)
                                    ) {
                                      e.next = 131;
                                      break;
                                    }
                                    return (
                                      (e.next = 128),
                                      this._sendTransport.produce({
                                        track: _,
                                        encodings: ee,
                                        codecOptions: re,
                                        codec: te,
                                        appData: oe,
                                      })
                                    );
                                  case 128:
                                    (this._webcamProducer = e.sent),
                                      (e.next = 134);
                                    break;
                                  case 131:
                                    return (
                                      null === (pe = this._videosdkLogs) ||
                                        void 0 === pe ||
                                        pe.pushLogs({
                                          logText:
                                            ke.q
                                              .ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                              .message,
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: Transport is not setup",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      this._emitError(
                                        ke.q
                                          .ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 134:
                                    _.getConstraints().deviceId &&
                                      (this._webcam.device = this._webcams.get(
                                        _.getConstraints().deviceId
                                      )),
                                      this._webcamProducer
                                        ? ((me = U({
                                            id: this._webcamProducer.id,
                                            deviceLabel: v.label,
                                            type: this._getWebcamType(v),
                                            paused: this._webcamProducer.paused,
                                            track: this._webcamProducer.track,
                                            rtpParameters:
                                              this._webcamProducer
                                                .rtpParameters,
                                            codec:
                                              this._webcamProducer.rtpParameters.codecs[0].mimeType.split(
                                                "/"
                                              )[1],
                                            instance: this._webcamProducer,
                                          })),
                                          Ve.dispatch(me),
                                          this._eventEmitter.emit(
                                            me.type,
                                            me.payload
                                          ),
                                          (fe = 0),
                                          ((ge = this._metrics.addNewProbe(
                                            this._webcamProducer,
                                            "producer"
                                          )).onStatsCollected = function (e) {
                                            try {
                                              var t;
                                              Re._stats.producerStats ||
                                                (Re._stats.producerStats = {}),
                                                Re._stats.producerStats.video ||
                                                  (Re._stats.producerStats.video =
                                                    []),
                                                Re._webcamProducer &&
                                                  (Re._latestStats[
                                                    null ===
                                                      (t =
                                                        Re._webcamProducer) ||
                                                    void 0 === t
                                                      ? void 0
                                                      : t.id
                                                  ] = []),
                                                e.video.forEach(function (e) {
                                                  var t;
                                                  Re._latestStats[
                                                    null ===
                                                      (t =
                                                        Re._webcamProducer) ||
                                                    void 0 === t
                                                      ? void 0
                                                      : t.id
                                                  ].push(e);
                                                }),
                                                fe % 5 == 0 &&
                                                  null != Re._webcamProducer &&
                                                  Re._stats.producerStats.video.push(
                                                    {
                                                      timestamp: new Date(),
                                                      stats:
                                                        Re._latestStats[
                                                          Re._webcamProducer.id
                                                        ],
                                                    }
                                                  ),
                                                fe++;
                                            } catch (e) {
                                              var r;
                                              null === (r = Re._videosdkLogs) ||
                                                void 0 === r ||
                                                r.pushLogs({
                                                  logText:
                                                    "Error PRODUCER Stats ERROR",
                                                  logType: "ERROR",
                                                  attributes: {
                                                    error: e.message,
                                                  },
                                                }),
                                                console.log(
                                                  "PRODUCER ERROR",
                                                  e
                                                );
                                            }
                                          }),
                                          ge.start(),
                                          this._webcamProducer.observer.on(
                                            "close",
                                            function () {
                                              ge.stop(),
                                                Re._metrics.removeExistingProbe(
                                                  ge
                                                );
                                            }
                                          ),
                                          this._webcamProducer.on(
                                            "transportclose",
                                            function () {
                                              var e,
                                                t = W(Re._webcamProducer.id);
                                              Ve.dispatch(t),
                                                Re._eventEmitter.emit(
                                                  t.type,
                                                  t.payload
                                                ),
                                                null ===
                                                  (e = Re._webcamProducer) ||
                                                  void 0 === e ||
                                                  e.close(),
                                                (Re._webcamProducer = null);
                                            }
                                          ),
                                          this._webcamProducer.on(
                                            "trackended",
                                            function () {
                                              var e,
                                                t,
                                                r =
                                                  "react-native" ==
                                                  Re._deviceInfo.sdkType
                                                    ? ke.q
                                                        .ERROR_RN_CAMERA_TRACK_ENDED
                                                    : ke.q
                                                        .ERROR_WEBCAM_TRACK_ENDED;
                                              null === (e = Re._videosdkLogs) ||
                                                void 0 === e ||
                                                e.pushLogs({
                                                  logText: message,
                                                  logType: "ERROR",
                                                  attributes: {
                                                    error:
                                                      "Error in enableWebcam() :: ".concat(
                                                        r.message
                                                      ),
                                                  },
                                                  dashboardLog: !0,
                                                }),
                                                null ===
                                                  (t = Re._openTelemetry) ||
                                                  void 0 === t ||
                                                  t.traceAutoComplete({
                                                    spanName:
                                                      "this._webcamProducer trackended or Webcam disconnected!",
                                                    span: c,
                                                    message: r.message,
                                                    status: 2,
                                                  }),
                                                Ve.dispatch(
                                                  ie({
                                                    type: "error",
                                                    text: "Webcam disconnected!",
                                                  })
                                                ),
                                                Re._emitError(r),
                                                Re.disableWebcam(c).catch(
                                                  function () {}
                                                );
                                            }
                                          ),
                                          null === (ue = this._openTelemetry) ||
                                            void 0 === ue ||
                                            ue.completeSpan({
                                              span: Z,
                                              status: 1,
                                              message:
                                                "Webcam Producer Created",
                                            }),
                                          null === (he = this._openTelemetry) ||
                                            void 0 === he ||
                                            he.completeSpan({
                                              span: c,
                                              status: 1,
                                              message:
                                                "Enable Webcam Successful",
                                            }))
                                        : (null === (_e = this._videosdkLogs) ||
                                            void 0 === _e ||
                                            _e.pushLogs({
                                              logText:
                                                "Oops! Something went wrong, and we're unable to enable the webcam. Please try again.",
                                              logType: "ERROR",
                                              attributes: {
                                                error:
                                                  "Error in enableWebcam(): Something went wrong.",
                                              },
                                              dashboardLog: !0,
                                            }),
                                          null === (ve = this._openTelemetry) ||
                                            void 0 === ve ||
                                            ve.completeSpan({
                                              span: Z,
                                              status: 2,
                                              message:
                                                "Error in enableWebcam() :: webcamProducer null",
                                            }),
                                          null === (be = this._openTelemetry) ||
                                            void 0 === be ||
                                            be.completeSpan({
                                              span: c,
                                              status: 2,
                                              message:
                                                "Error in enableWebcam() :: webcamProducer null",
                                            })),
                                      (e.next = 146);
                                    break;
                                  case 138:
                                    return (
                                      (e.prev = 138),
                                      (e.t2 = e.catch(23)),
                                      null === (ye = this._videosdkLogs) ||
                                        void 0 === ye ||
                                        ye.pushLogs({
                                          logText: e.t2.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in enableWebcam() :: ".concat(
                                                e.t2.message
                                              ),
                                          },
                                          dashboardLog: !0,
                                        }),
                                      null === (Se = this._openTelemetry) ||
                                        void 0 === Se ||
                                        Se.completeSpan({
                                          span: c,
                                          status: 2,
                                          message:
                                            "Error in enableWebcam() :: ".concat(
                                              e.t2.message
                                            ),
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error enabling webcam: ".concat(
                                            e.t2
                                          ),
                                        })
                                      ),
                                      (e.next = 145),
                                      this._protoo.request("produceError", {
                                        mediaType: "video",
                                        message: e.t2.message,
                                      })
                                    );
                                  case 145:
                                    _ && _.stop();
                                  case 146:
                                    Ve.dispatch(G(!1));
                                  case 147:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [23, 138],
                              [36, 52],
                            ]
                          );
                        })
                      )),
                      function () {
                        return Et.apply(this, arguments);
                      }),
                  },
                  {
                    key: "handleNotAllowedError",
                    value: function (e, t, r, a, n) {
                      var s = {};
                      return (
                        (s =
                          "Permission denied" === e.message ||
                          "Permission dismissed" === e.message
                            ? "video" === n
                              ? ke.q.ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED
                              : ke.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED
                            : e.message.includes(
                                "The request is not allowed by the user agent"
                              )
                            ? "video" === n
                              ? ke.q.ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE
                              : ke.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED
                            : "Permission denied by system" === e.message
                            ? "video" === n
                              ? ke.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                              : ke.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS
                            : "video" === n
                            ? ke.q.ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
                            : ke.q.ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED),
                        r.pushLogs({
                          logText: s.message,
                          logType: "ERROR",
                          attributes: {
                            error: "Error in "
                              .concat(
                                "video" === n
                                  ? "enableWebcam()"
                                  : "enableMic()",
                                " :: "
                              )
                              .concat(e.message),
                          },
                          dashboardLog: !0,
                        }),
                        t.completeSpan({
                          message:
                            "video" === n
                              ? "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                  s.message
                                )
                              : "Error in enableMic() :: occurred in creating audio track, ".concat(
                                  s.message
                                ),
                          span: a,
                          status: 2,
                        }),
                        s
                      );
                    },
                  },
                  {
                    key: "handleNotReadableError",
                    value: function (e, t, r, a, n) {
                      var s = {};
                      return (
                        (s =
                          "Device in use" === e.message
                            ? "video" === n
                              ? ke.q.ERROR_CAMERA_IN_USE
                              : ke.q.ERROR_MICROPHONE_IN_USE
                            : "video" === n
                            ? ke.q.ERROR_VIDEO_SOURCE_INITIATION_FAILED
                            : ke.q.ERROR_MICROPHONE_IN_USE),
                        r.pushLogs({
                          logText: s.message,
                          logType: "ERROR",
                          attributes: {
                            error: "Error in "
                              .concat(
                                "video" === n
                                  ? "enableWebcam()"
                                  : "enableMic()",
                                " :: "
                              )
                              .concat(e.message),
                          },
                          dashboardLog: !0,
                        }),
                        t.completeSpan({
                          message:
                            "video" === n
                              ? "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                  s.message
                                )
                              : "Error in enableMic() :: occurred in creating audio track, ".concat(
                                  s.message
                                ),
                          span: a,
                          status: 2,
                        }),
                        s
                      );
                    },
                  },
                  {
                    key: "createCameraVideoTrack",
                    value:
                      ((Rt = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n, s, i, o, c, d, p, u, h, m, f;
                          return l().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.cameraId),
                                    (a = void 0 === r ? void 0 : r),
                                    (n = t.encoderConfig),
                                    (s = void 0 === n ? void 0 : n),
                                    (i = t.facingMode),
                                    (o = void 0 === i ? void 0 : i),
                                    (c = t.optimizationMode),
                                    (d = void 0 === c ? void 0 : c),
                                    (p = t.multiStream),
                                    (u = void 0 === p || p),
                                    (h = s
                                      ? ce.$.videoProfiles[s]
                                      : ce.$.videoProfiles.h360p_w640p),
                                    (m = {
                                      video: {
                                        deviceId: a || void 0,
                                        facingMode: o || void 0,
                                        width: h.width,
                                        height: h.height,
                                        frameRate: h.frameRate,
                                      },
                                    }),
                                    (e.next = 5),
                                    (0, Fe.lp)(m)
                                  );
                                case 5:
                                  return (
                                    (f = e.sent),
                                    d && (f.contentHint = d),
                                    (f.encoderConfig = s || "h360p_w640p"),
                                    (f.contentHint = d || ""),
                                    (f.multiStream = u),
                                    (f.cameraId = a),
                                    e.abrupt("return", f)
                                  );
                                case 12:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e) {
                        return Rt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableWebcam",
                    value:
                      ((St = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r,
                            a,
                            n,
                            s,
                            i,
                            o,
                            c,
                            d,
                            p,
                            u,
                            h,
                            m,
                            f = arguments;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((a =
                                        f.length > 0 && void 0 !== f[0]
                                          ? f[0]
                                          : void 0),
                                      (n =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "disableWebcam() Calling",
                                              status: 1,
                                              span: a || null,
                                            })),
                                      Ye.debug("disableWebcam()"),
                                      (this._webcamEnabled = !1),
                                      this._webcamProducer)
                                    ) {
                                      e.next = 8;
                                      break;
                                    }
                                    return (
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Error in disableWebcam() :: Webcam Producer Not found",
                                        }),
                                      null === (i = this._videosdkLogs) ||
                                        void 0 === i ||
                                        i.pushLogs({
                                          logText:
                                            "Attempted to call disableWebcam() multiple times",
                                          attributes: {
                                            error:
                                              "Error in disableWebcam() :: Webcam is already disabled",
                                          },
                                          logType: "ERROR",
                                          dashboardLog: !0,
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 8:
                                    return (
                                      (o =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "Closing Webcam Producer",
                                              span: n,
                                              status: 1,
                                            })),
                                      this._webcamProducer.close(),
                                      (c = W(this._webcamProducer.id)),
                                      Ve.dispatch(c),
                                      this._eventEmitter.emit(
                                        c.type,
                                        c.payload
                                      ),
                                      (e.prev = 13),
                                      (e.next = 16),
                                      this._protoo.request("closeProducer", {
                                        producerId: this._webcamProducer.id,
                                      })
                                    );
                                  case 16:
                                    null === (d = this._openTelemetry) ||
                                      void 0 === d ||
                                      d.completeSpan({
                                        span: o,
                                        status: 1,
                                        message:
                                          "Requested Server to Close Producer",
                                      }),
                                      (this._webcamProducer = null),
                                      null === (p = this._openTelemetry) ||
                                        void 0 === p ||
                                        p.completeSpan({
                                          span: n,
                                          status: 1,
                                          message:
                                            "Webcam Disabled Successfully",
                                        }),
                                      (e.next = 27);
                                    break;
                                  case 21:
                                    (e.prev = 21),
                                      (e.t0 = e.catch(13)),
                                      null === (u = this._videosdkLogs) ||
                                        void 0 === u ||
                                        u.pushLogs({
                                          logText:
                                            "Error in disableWebcam() :: Failed to close server-side webcam producer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                          dashboardLog: !0,
                                        }),
                                      null === (h = this._openTelemetry) ||
                                        void 0 === h ||
                                        h.completeSpan({
                                          span: o,
                                          status: 2,
                                          message:
                                            "Error in disableWebcam() :: closing server-side webcam Producer: ".concat(
                                              e.t0
                                            ),
                                        }),
                                      null === (m = this._openTelemetry) ||
                                        void 0 === m ||
                                        m.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Error in disableWebcam() :: closing server-side webcam Producer: ".concat(
                                              e.t0
                                            ),
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error closing server-side webcam Producer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 27:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[13, 21]]
                          );
                        })
                      )),
                      function () {
                        return St.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getMics",
                    value:
                      ((wt = (0, s.A)(
                        l().mark(function e() {
                          var t, r;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (t = []),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._updateMics()
                                    );
                                  case 4:
                                    this._mics.forEach(function (e, r) {
                                      t.push({ deviceId: r, label: e.label });
                                    }),
                                      (e.next = 11);
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(1)),
                                      Ye.error("getMics() | Error", e.t0),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: e.t0.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in getMics() :: Not able to get Mic List",
                                          },
                                          dashboardLog: !0,
                                        });
                                  case 11:
                                    return e.abrupt("return", t);
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 7]]
                          );
                        })
                      )),
                      function () {
                        return wt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "changeMic",
                    value:
                      ((yt = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, s, i, o, c, d, p, u, h, m, f, g, _;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((a =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName: "changeMic() Calling",
                                            })),
                                      (e.prev = 1),
                                      "object" != (0, n.A)(t))
                                    ) {
                                      e.next = 9;
                                      break;
                                    }
                                    return (e.next = 5), this.disableMic(!0, a);
                                  case 5:
                                    return (e.next = 7), this.enableMic(t, a);
                                  case 7:
                                    e.next = 27;
                                    break;
                                  case 9:
                                    return (
                                      (c = t), (e.next = 12), this._updateMics()
                                    );
                                  case 12:
                                    if (
                                      ((d = Array.from(this._mics.keys())),
                                      (p = d.length),
                                      (u = this._mic.device
                                        ? this._mic.device.deviceId
                                        : void 0),
                                      null != c && null != c
                                        ? (h = d.indexOf(c))
                                        : (h = d.indexOf(u)) < p - 1
                                        ? h++
                                        : (h = 0),
                                      (this._mic.device = this._mics.get(d[h])),
                                      (m =
                                        null === (s = this._openTelemetry) ||
                                        void 0 === s
                                          ? void 0
                                          : s.trace({
                                              spanName: "Getting Selected Mic",
                                              span: a,
                                              attributes: {
                                                selectedWebcam: this._mic.device
                                                  ? JSON.stringify(
                                                      this._mic.device
                                                    )
                                                  : "No Mic devices",
                                              },
                                            })),
                                      this._mic.device)
                                    ) {
                                      e.next = 21;
                                      break;
                                    }
                                    throw (
                                      (null === (f = this._videosdkLogs) ||
                                        void 0 === f ||
                                        f.pushLogs({
                                          logText:
                                            "Error changeMic : No mic Found",
                                          logType: "ERROR",
                                        }),
                                      new Error("No mic Found"))
                                    );
                                  case 21:
                                    return (
                                      (e.next = 23), this.disableMic(!0, a)
                                    );
                                  case 23:
                                    return (
                                      (e.next = 25), this.enableMic(void 0, a)
                                    );
                                  case 25:
                                    null === (i = this._openTelemetry) ||
                                      void 0 === i ||
                                      i.completeSpan({
                                        span: m,
                                        status: 1,
                                        message: "Done",
                                      }),
                                      null === (o = this._openTelemetry) ||
                                        void 0 === o ||
                                        o.completeSpan({
                                          span: a,
                                          status: 1,
                                          message: "changeMic() Ending",
                                        });
                                  case 27:
                                    e.next = 33;
                                    break;
                                  case 29:
                                    (e.prev = 29),
                                      (e.t0 = e.catch(1)),
                                      null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          span: a,
                                          status: 2,
                                          message:
                                            "changeMic() | Error ".concat(e.t0),
                                        }),
                                      null === (_ = this._videosdkLogs) ||
                                        void 0 === _ ||
                                        _.pushLogs({
                                          logText: "Error changeMic() | Error",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 33:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 29]]
                          );
                        })
                      )),
                      function (e) {
                        return yt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getWebcams",
                    value:
                      ((bt = (0, s.A)(
                        l().mark(function e() {
                          var t, r;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (t = []),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._updateWebcams()
                                    );
                                  case 4:
                                    this._webcams.forEach(function (e, r) {
                                      t.push({
                                        deviceId: r,
                                        label: e.label,
                                        facingMode: e.facing || "environment",
                                      });
                                    }),
                                      (e.next = 11);
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(1)),
                                      Ye.error(
                                        "getWebcams() | failed %o",
                                        e.t0
                                      ),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: e.t0.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error:
                                              "Error in getWebcams() :: Not able to get Webcam List",
                                          },
                                          dashboardLog: !0,
                                        });
                                  case 11:
                                    return e.abrupt("return", t);
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 7]]
                          );
                        })
                      )),
                      function () {
                        return bt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "replaceWebcamStream",
                    value:
                      ((vt = (0, s.A)(
                        l().mark(function e(t) {
                          var r;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._webcamProducer) {
                                      e.next = 7;
                                      break;
                                    }
                                    return (
                                      (r = t.getVideoTracks()[0]),
                                      (e.next = 4),
                                      this._webcamProducer.replaceTrack({
                                        track: r,
                                      })
                                    );
                                  case 4:
                                    this._eventEmitter.emit("UPDATE_PRODUCER", {
                                      producer: this._webcamProducer,
                                    }),
                                      (e.next = 11);
                                    break;
                                  case 7:
                                    return (e.next = 9), this.disableWebcam();
                                  case 9:
                                    return (e.next = 11), this.enableWebcam(t);
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return vt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "changeWebcam",
                    value:
                      ((_t = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, s, i, o, c, d, p, u, h, m, f, g, _;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((a =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "changeWebcam() Calling",
                                            })),
                                      Ve.dispatch(G(!0)),
                                      "object" !== (0, n.A)(t))
                                    ) {
                                      e.next = 17;
                                      break;
                                    }
                                    return (
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this.disableWebcam(a)
                                    );
                                  case 6:
                                    return (
                                      (e.next = 8), this.enableWebcam(t, a)
                                    );
                                  case 8:
                                    e.next = 15;
                                    break;
                                  case 10:
                                    (e.prev = 10),
                                      (e.t0 = e.catch(3)),
                                      Ye.error(
                                        "changeWebcam() | failed: %o",
                                        e.t0
                                      ),
                                      null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText:
                                            "Error Could not change webcam",
                                          logType: "ERROR",
                                          attributes: {
                                            object: JSON.stringify(t),
                                            error: e.t0.message,
                                          },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Could not change webcam: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 15:
                                    e.next = 46;
                                    break;
                                  case 17:
                                    return (
                                      (e.prev = 17),
                                      (e.next = 20),
                                      this._updateWebcams(a)
                                    );
                                  case 20:
                                    if (
                                      ((d = Array.from(this._webcams.keys())),
                                      (p = d.length),
                                      (u = this._webcam.device
                                        ? this._webcam.device.deviceId
                                        : void 0),
                                      null != t && null != t
                                        ? (h = d.indexOf(t))
                                        : (h = d.indexOf(u)) < p - 1
                                        ? h++
                                        : (h = 0),
                                      (this._webcam.device = this._webcams.get(
                                        d[h]
                                      )),
                                      Ye.debug(
                                        "changeWebcam() | new selected webcam [device:%o]",
                                        this._webcam.device
                                      ),
                                      (this._webcam.resolution =
                                        this._webcam.resolution || "hd"),
                                      (m =
                                        null === (i = this._openTelemetry) ||
                                        void 0 === i
                                          ? void 0
                                          : i.trace({
                                              spanName:
                                                "Getting Selected Webcam",
                                              span: a,
                                              attributes: {
                                                selectedWebcam: this._webcam
                                                  .device
                                                  ? JSON.stringify(
                                                      this._webcam.device
                                                    )
                                                  : "No webcam devices",
                                              },
                                            })),
                                      this._webcam.device)
                                    ) {
                                      e.next = 31;
                                      break;
                                    }
                                    throw (
                                      (null === (f = this._videosdkLogs) ||
                                        void 0 === f ||
                                        f.pushLogs({
                                          logText:
                                            "Error changeWebcam : No webcam Found",
                                          logType: "ERROR",
                                        }),
                                      new Error("no webcam devices"))
                                    );
                                  case 31:
                                    return (e.next = 33), this.disableWebcam(a);
                                  case 33:
                                    return (
                                      (e.next = 35),
                                      this.enableWebcam(void 0, a)
                                    );
                                  case 35:
                                    return (
                                      null === (o = this._openTelemetry) ||
                                        void 0 === o ||
                                        o.completeSpan({
                                          span: m,
                                          status: 1,
                                          message: "Done",
                                        }),
                                      null === (c = this._openTelemetry) ||
                                        void 0 === c ||
                                        c.completeSpan({
                                          span: a,
                                          status: 1,
                                          message: "changeWebcam() Ending",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 40:
                                    (e.prev = 40),
                                      (e.t1 = e.catch(17)),
                                      Ye.error(
                                        "changeWebcam() | failed: %o",
                                        e.t1
                                      ),
                                      null === (g = this._videosdkLogs) ||
                                        void 0 === g ||
                                        g.pushLogs({
                                          logText:
                                            "Error Could not change webcam",
                                          logType: "ERROR",
                                          attributes: {
                                            object: JSON.stringify(t),
                                            error: e.t1.message,
                                          },
                                        }),
                                      null === (_ = this._openTelemetry) ||
                                        void 0 === _ ||
                                        _.completeSpan({
                                          span: a,
                                          status: 2,
                                          message:
                                            "Could not change webcam ".concat(
                                              e.t1
                                            ),
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Could not change webcam: ".concat(
                                            e.t1
                                          ),
                                        })
                                      );
                                  case 46:
                                    Ve.dispatch(G(!1));
                                  case 47:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [3, 10],
                              [17, 40],
                            ]
                          );
                        })
                      )),
                      function (e) {
                        return _t.apply(this, arguments);
                      }),
                  },
                  {
                    key: "changeWebcamResolution",
                    value:
                      ((gt = (0, s.A)(
                        l().mark(function e() {
                          var t, r, a, n;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    Ye.debug("changeWebcamResolution()"),
                                      Ve.dispatch(G(!0)),
                                      (e.prev = 2),
                                      (e.t0 = this._webcam.resolution),
                                      (e.next =
                                        "qvga" === e.t0
                                          ? 6
                                          : "vga" === e.t0
                                          ? 8
                                          : "hd" === e.t0
                                          ? 10
                                          : 12);
                                    break;
                                  case 6:
                                    return (
                                      (this._webcam.resolution = "vga"),
                                      e.abrupt("break", 13)
                                    );
                                  case 8:
                                    return (
                                      (this._webcam.resolution = "hd"),
                                      e.abrupt("break", 13)
                                    );
                                  case 10:
                                    return (
                                      (this._webcam.resolution = "qvga"),
                                      e.abrupt("break", 13)
                                    );
                                  case 12:
                                    this._webcam.resolution = "hd";
                                  case 13:
                                    return (
                                      Ye.debug(
                                        "changeWebcamResolution() | calling getUserMedia()"
                                      ),
                                      (e.prev = 14),
                                      (e.next = 17),
                                      navigator.mediaDevices.getUserMedia({
                                        video: He(
                                          {
                                            deviceId: {
                                              exact:
                                                this._webcam.device.deviceId,
                                            },
                                          },
                                          ze[this._webcam.resolution]
                                        ),
                                      })
                                    );
                                  case 17:
                                    (t = e.sent), (e.next = 25);
                                    break;
                                  case 20:
                                    return (
                                      (e.prev = 20),
                                      (e.t1 = e.catch(14)),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText:
                                            "Error in getUserMedia for changeWebcamResolution",
                                          logType: "ERROR",
                                          attributes: {
                                            error: JSON.stringify(e.t1),
                                          },
                                        }),
                                      "Permission denied" === e.t1.message ||
                                      "NotAllowedError" === e.t1.name
                                        ? this._emitError(
                                            ke.q
                                              .ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
                                          )
                                        : this._emitError(
                                            ke.q.ERROR_GET_VIDEO_MEDIA
                                          ),
                                      e.abrupt("return")
                                    );
                                  case 25:
                                    return (
                                      (a = t.getVideoTracks()[0]),
                                      (e.next = 28),
                                      this._webcamProducer.replaceTrack({
                                        track: a,
                                      })
                                    );
                                  case 28:
                                    Ve.dispatch(q(this._webcamProducer.id, a)),
                                      (e.next = 36);
                                    break;
                                  case 31:
                                    (e.prev = 31),
                                      (e.t2 = e.catch(2)),
                                      Ye.error(
                                        "changeWebcamResolution() | failed: %o",
                                        e.t2
                                      ),
                                      null === (n = this._videosdkLogs) ||
                                        void 0 === n ||
                                        n.pushLogs({
                                          logText:
                                            "Error Could not change webcam resolution",
                                          logType: "ERROR",
                                          attributes: { error: e.t2.message },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Could not change webcam resolution: ".concat(
                                            e.t2
                                          ),
                                        })
                                      );
                                  case 36:
                                    Ve.dispatch(G(!1));
                                  case 37:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [2, 31],
                              [14, 20],
                            ]
                          );
                        })
                      )),
                      function () {
                        return gt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enableShare",
                    value:
                      ((ft = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r,
                            a,
                            n,
                            s,
                            i,
                            o,
                            c,
                            d,
                            p,
                            u,
                            h,
                            m,
                            f,
                            g,
                            _,
                            v,
                            b,
                            y,
                            w,
                            S,
                            R,
                            E,
                            k,
                            T,
                            C,
                            P,
                            O,
                            D,
                            x,
                            I,
                            M,
                            A,
                            L,
                            N,
                            j,
                            B,
                            F,
                            q = this,
                            H = arguments;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((r =
                                        H.length > 0 && void 0 !== H[0]
                                          ? H[0]
                                          : void 0),
                                      (a =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "enableShare() Calling ".concat(
                                                  r
                                                    ? "With Custom Video Track"
                                                    : "Without Custom Video Track "
                                                ),
                                              attributes: {
                                                customShareConfig: r
                                                  ? JSON.stringify(r)
                                                  : "Not Specify Custom Track",
                                              },
                                            })),
                                      Ye.debug("enableShare()"),
                                      !this._shareProducer)
                                    ) {
                                      e.next = 6;
                                      break;
                                    }
                                    return (
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.completeSpan({
                                          span: a,
                                          status: 2,
                                          message:
                                            "Screen Share Producer found",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 6:
                                    if (
                                      this._mediasoupDevice.canProduce("video")
                                    ) {
                                      e.next = 10;
                                      break;
                                    }
                                    return (
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: a,
                                          status: 2,
                                          message:
                                            "enableShare() | cannot produce video",
                                        }),
                                      Ye.error(
                                        "enableShare() | cannot produce video"
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 10:
                                    if (
                                      (Ve.dispatch(z(!0)),
                                      (e.prev = 11),
                                      Ye.debug(
                                        "enableShare() | calling getUserMedia()"
                                      ),
                                      (f =
                                        null === (c = this._openTelemetry) ||
                                        void 0 === c
                                          ? void 0
                                          : c.trace({
                                              spanName: "Creating Track",
                                              span: a,
                                            })),
                                      !r || !r.active)
                                    ) {
                                      e.next = 19;
                                      break;
                                    }
                                    (i = r.getVideoTracks()[0]),
                                      (o = r.getAudioTracks()[0]),
                                      (e.next = 38);
                                    break;
                                  case 19:
                                    return (
                                      (e.prev = 19),
                                      (e.next = 22),
                                      navigator.mediaDevices.getDisplayMedia({
                                        audio: !0,
                                        video: {
                                          width: { max: 1920 },
                                          height: { max: 1080 },
                                          frameRate: { max: 10 },
                                        },
                                      })
                                    );
                                  case 22:
                                    (_ = e.sent), (e.next = 31);
                                    break;
                                  case 25:
                                    return (
                                      (e.prev = 25),
                                      (e.t0 = e.catch(19)),
                                      null === (v = this._videosdkLogs) ||
                                        void 0 === v ||
                                        v.pushLogs({
                                          logText:
                                            "Error in getDisplayMedia for screen share",
                                          logType: "ERROR",
                                          attributes: {
                                            error: JSON.stringify(e.t0),
                                          },
                                        }),
                                      null === (b = this._openTelemetry) ||
                                        void 0 === b ||
                                        b.completeSpan({
                                          span: a,
                                          status: 2,
                                          message:
                                            "Error in getDisplayMedia for screen share ".concat(
                                              e.t0
                                            ),
                                        }),
                                      "Permission denied" === e.t0.message ||
                                      "NotAllowedError" === e.t0.name
                                        ? this._emitError(
                                            ke.q
                                              .ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED
                                          )
                                        : this._emitError(
                                            ke.q.ERROR_GET_DISPLAY_MEDIA
                                          ),
                                      e.abrupt("return")
                                    );
                                  case 31:
                                    if (_) {
                                      e.next = 35;
                                      break;
                                    }
                                    return (
                                      Ve.dispatch(z(!0)),
                                      null === (y = this._openTelemetry) ||
                                        void 0 === y ||
                                        y.completeSpan({
                                          span: a,
                                          status: 2,
                                          message: "Stream not found",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 35:
                                    (i = _.getVideoTracks()[0]),
                                      (o = _.getAudioTracks()[0]),
                                      null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          message:
                                            "Track Generated with height "
                                              .concat(
                                                i.getSettings().height,
                                                " and width "
                                              )
                                              .concat(i.getSettings().width),
                                          span: f,
                                          status: 1,
                                        });
                                  case 38:
                                    if (
                                      ((w =
                                        null === (d = this._openTelemetry) ||
                                        void 0 === d
                                          ? void 0
                                          : d.trace({
                                              spanName:
                                                "Generating Producer Configuration",
                                              span: a,
                                            })),
                                      (E = { videoGoogleStartBitrate: 1e3 }),
                                      !this._forceH264)
                                    ) {
                                      e.next = 47;
                                      break;
                                    }
                                    if (
                                      (R =
                                        this._mediasoupDevice.rtpCapabilities.codecs.find(
                                          function (e) {
                                            return (
                                              "video/h264" ===
                                              e.mimeType.toLowerCase()
                                            );
                                          }
                                        ))
                                    ) {
                                      e.next = 45;
                                      break;
                                    }
                                    throw (
                                      (null === (k = this._videosdkLogs) ||
                                        void 0 === k ||
                                        k.pushLogs({
                                          logText:
                                            "Error EnableShare : desired H264 codec+configuration is not supported",
                                          logType: "ERROR",
                                        }),
                                      new Error(
                                        "desired H264 codec+configuration is not supported"
                                      ))
                                    );
                                  case 45:
                                    e.next = 52;
                                    break;
                                  case 47:
                                    if (!this._forceVP9) {
                                      e.next = 52;
                                      break;
                                    }
                                    if (
                                      (R =
                                        this._mediasoupDevice.rtpCapabilities.codecs.find(
                                          function (e) {
                                            return (
                                              "video/vp9" ===
                                              e.mimeType.toLowerCase()
                                            );
                                          }
                                        ))
                                    ) {
                                      e.next = 52;
                                      break;
                                    }
                                    throw (
                                      (null === (T = this._videosdkLogs) ||
                                        void 0 === T ||
                                        T.pushLogs({
                                          logText:
                                            "Error EnableShare :desired VP9 codec+configuration is not supported",
                                          logType: "ERROR",
                                        }),
                                      new Error(
                                        "desired VP9 codec+configuration is not supported"
                                      ))
                                    );
                                  case 52:
                                    return (
                                      this._useSharingSimulcast &&
                                        ((C =
                                          this._mediasoupDevice.rtpCapabilities.codecs.find(
                                            function (e) {
                                              return "video" === e.kind;
                                            }
                                          )),
                                        (S =
                                          (this._forceVP9 && R) ||
                                          "video/vp9" ===
                                            C.mimeType.toLowerCase()
                                            ? Qe
                                            : Je.map(function (e) {
                                                return He(
                                                  He({}, e),
                                                  {},
                                                  { dtx: !0 }
                                                );
                                              }))),
                                      null === (p = this._openTelemetry) ||
                                        void 0 === p ||
                                        p.completeSpan({
                                          span: w,
                                          status: 1,
                                          message:
                                            "Producer Configuration Generated",
                                        }),
                                      (w =
                                        null === (u = this._openTelemetry) ||
                                        void 0 === u
                                          ? void 0
                                          : u.trace({
                                              spanName:
                                                "Creating Share Producer",
                                              span: a,
                                            })),
                                      (e.next = 57),
                                      this._sendTransport.produce({
                                        track: i,
                                        encodings: S,
                                        codecOptions: E,
                                        codec: R,
                                        appData: { share: !0 },
                                      })
                                    );
                                  case 57:
                                    if (
                                      ((this._shareProducer = e.sent),
                                      (P = U({
                                        id: this._shareProducer.id,
                                        type: "share",
                                        paused: this._shareProducer.paused,
                                        track: this._shareProducer.track,
                                        rtpParameters:
                                          this._shareProducer.rtpParameters,
                                        codec:
                                          this._shareProducer.rtpParameters.codecs[0].mimeType.split(
                                            "/"
                                          )[1],
                                        appData: { share: !0 },
                                        instance: this._shareProducer,
                                      })),
                                      Ve.dispatch(P),
                                      this._eventEmitter.emit(
                                        P.type,
                                        P.payload
                                      ),
                                      this._shareProducer.on(
                                        "transportclose",
                                        function () {
                                          var e,
                                            t = W(q._shareProducer.id);
                                          Ve.dispatch(t),
                                            q._eventEmitter.emit(
                                              t.type,
                                              t.payload
                                            ),
                                            null === (e = q._shareProducer) ||
                                              void 0 === e ||
                                              e.close(),
                                            (q._shareProducer = null);
                                        }
                                      ),
                                      this._shareProducer.on(
                                        "trackended",
                                        function () {
                                          var e;
                                          null === (e = q._openTelemetry) ||
                                            void 0 === e ||
                                            e.traceAutoComplete({
                                              spanName:
                                                "this._shareProducer trackended or Share disconnected!",
                                              span: a,
                                              status: 2,
                                            }),
                                            Ve.dispatch(
                                              ie({
                                                type: "error",
                                                text: "Share disconnected!",
                                              })
                                            ),
                                            q
                                              .disableShare()
                                              .catch(function () {});
                                        }
                                      ),
                                      null === (h = this._openTelemetry) ||
                                        void 0 === h ||
                                        h.completeSpan({
                                          span: w,
                                          status: 1,
                                          message: "Share Producer Created",
                                        }),
                                      !o)
                                    ) {
                                      e.next = 84;
                                      break;
                                    }
                                    return (
                                      (e.prev = 65),
                                      (x = { opusStereo: 1, opusDtx: 1 }),
                                      (w =
                                        null === (O = this._openTelemetry) ||
                                        void 0 === O
                                          ? void 0
                                          : O.trace({
                                              spanName:
                                                "Creating Share Audio Producer",
                                              span: a,
                                            })),
                                      (e.next = 70),
                                      this._sendTransport.produce({
                                        track: o,
                                        codecOptions: x,
                                        appData: { share: !0 },
                                      })
                                    );
                                  case 70:
                                    (this._shareAudioProducer = e.sent),
                                      (I = U({
                                        id: this._shareAudioProducer.id,
                                        type: "share",
                                        paused: this._shareAudioProducer.paused,
                                        track: this._shareAudioProducer.track,
                                        rtpParameters:
                                          this._shareAudioProducer
                                            .rtpParameters,
                                        codec:
                                          this._shareAudioProducer.rtpParameters.codecs[0].mimeType.split(
                                            "/"
                                          )[1],
                                        appData: { share: !0 },
                                        instance: this._shareAudioProducer,
                                      })),
                                      Ve.dispatch(I),
                                      this._eventEmitter.emit(
                                        I.type,
                                        I.payload
                                      ),
                                      this._shareAudioProducer.on(
                                        "transportclose",
                                        function () {
                                          var e,
                                            t = W(q._shareAudioProducer.id);
                                          Ve.dispatch(t),
                                            q._eventEmitter.emit(
                                              t.type,
                                              t.payload
                                            ),
                                            null ===
                                              (e = q._shareAudioProducer) ||
                                              void 0 === e ||
                                              e.close(),
                                            (q._shareAudioProducer = null);
                                        }
                                      ),
                                      this._shareAudioProducer.on(
                                        "trackended",
                                        function () {
                                          var e;
                                          null === (e = q._openTelemetry) ||
                                            void 0 === e ||
                                            e.traceAutoComplete({
                                              spanName:
                                                "this._shareAudioProducer trackended",
                                              span: a,
                                              status: 2,
                                            }),
                                            Ve.dispatch(
                                              ie({
                                                type: "error",
                                                text: "Share disconnected!",
                                              })
                                            );
                                        }
                                      ),
                                      null === (D = this._openTelemetry) ||
                                        void 0 === D ||
                                        D.completeSpan({
                                          span: w,
                                          status: 1,
                                          message:
                                            "Share Audio Producer Created",
                                        }),
                                      (e.next = 84);
                                    break;
                                  case 79:
                                    return (
                                      (e.prev = 79),
                                      (e.t1 = e.catch(65)),
                                      (e.next = 83),
                                      this._protoo.request("produceError", {
                                        mediaType: "shareAudio",
                                        message: e.t1.message,
                                      })
                                    );
                                  case 83:
                                    null === (M = this._videosdkLogs) ||
                                      void 0 === M ||
                                      M.pushLogs({
                                        logText:
                                          "Error in shareAudio produceError",
                                        logType: "ERROR",
                                        attributes: { error: e.t1.message },
                                      });
                                  case 84:
                                    null === (m = this._openTelemetry) ||
                                      void 0 === m ||
                                      m.completeSpan({
                                        span: a,
                                        status: 1,
                                        message: "Enable Share Successful",
                                      }),
                                      (e.next = 98);
                                    break;
                                  case 87:
                                    return (
                                      (e.prev = 87),
                                      (e.t2 = e.catch(11)),
                                      Ye.error(
                                        "enableShare() | failed:%o",
                                        e.t2
                                      ),
                                      null === (A = this._openTelemetry) ||
                                        void 0 === A ||
                                        A.completeSpan({
                                          span: a,
                                          status: 2,
                                          attributes: { error: e.t2.message },
                                          message:
                                            "Error in enableShare video produceError",
                                        }),
                                      console.log(
                                        "screen share catch",
                                        e.t2.message
                                      ),
                                      null === (L = this._videosdkLogs) ||
                                        void 0 === L ||
                                        L.pushLogs({
                                          logText:
                                            "Error in enableShare video produceError",
                                          logType: "ERROR",
                                          attributes: { error: e.t2.message },
                                        }),
                                      "NotAllowedError" !== e.t2.name &&
                                        Ve.dispatch(
                                          ie({
                                            type: "error",
                                            text: "Error sharing: ".concat(
                                              e.t2
                                            ),
                                          })
                                        ),
                                      (e.next = 96),
                                      this._protoo.request("produceError", {
                                        mediaType: "share",
                                        message: e.t2.message,
                                      })
                                    );
                                  case 96:
                                    i && i.stop(), o && o.stop();
                                  case 98:
                                    Ve.dispatch(z(!1)),
                                      this._shareProducer &&
                                        ((N = 0),
                                        ((j = this._metrics.addNewProbe(
                                          this._shareProducer,
                                          "share_producer"
                                        )).onStatsCollected = function (e) {
                                          try {
                                            var t;
                                            q._stats.producerStats ||
                                              (q._stats.producerStats = {}),
                                              q._stats.producerStats.share ||
                                                (q._stats.producerStats.share =
                                                  []),
                                              q._shareProducer &&
                                                (q._latestStats[
                                                  null ===
                                                    (t = q._shareProducer) ||
                                                  void 0 === t
                                                    ? void 0
                                                    : t.id
                                                ] = []),
                                              e.video.forEach(function (e) {
                                                var t;
                                                q._shareProducer &&
                                                  q._latestStats[
                                                    null ===
                                                      (t = q._shareProducer) ||
                                                    void 0 === t
                                                      ? void 0
                                                      : t.id
                                                  ].push(e);
                                              }),
                                              N % 5 == 0 &&
                                                null != q._shareProducer &&
                                                q._stats.producerStats.share.push(
                                                  {
                                                    timestamp: new Date(),
                                                    stats:
                                                      q._latestStats[
                                                        q._shareProducer.id
                                                      ],
                                                  }
                                                ),
                                              N++;
                                          } catch (e) {
                                            var r;
                                            null === (r = q._videosdkLogs) ||
                                              void 0 === r ||
                                              r.pushLogs({
                                                logText:
                                                  "Error PRODUCER Stats ERROR",
                                                logType: "ERROR",
                                                attributes: {
                                                  error: e.message,
                                                },
                                              }),
                                              console.log("PRODUCER ERROR", e);
                                          }
                                        }),
                                        j.start(),
                                        this._shareProducer.observer.on(
                                          "close",
                                          function () {
                                            j.stop(),
                                              q._metrics.removeExistingProbe(j);
                                          }
                                        )),
                                      this._shareAudioProducer &&
                                        ((B = 0),
                                        ((F = this._metrics.addNewProbe(
                                          this._shareAudioProducer,
                                          "share_audio_producer"
                                        )).onStatsCollected = function (e) {
                                          try {
                                            var t;
                                            q._stats.producerStats ||
                                              (q._stats.producerStats = {}),
                                              q._stats.producerStats
                                                .shareAudio ||
                                                (q._stats.producerStats.shareAudio =
                                                  []),
                                              q._shareAudioProducer &&
                                                (q._latestStats[
                                                  null ===
                                                    (t =
                                                      q._shareAudioProducer) ||
                                                  void 0 === t
                                                    ? void 0
                                                    : t.id
                                                ] = []),
                                              e.audio.forEach(function (e) {
                                                var t;
                                                q._shareAudioProducer &&
                                                  q._latestStats[
                                                    null ===
                                                      (t =
                                                        q._shareAudioProducer) ||
                                                    void 0 === t
                                                      ? void 0
                                                      : t.id
                                                  ].push(e);
                                              }),
                                              B % 5 == 0 &&
                                                null != q._shareAudioProducer &&
                                                q._stats.producerStats.shareAudio.push(
                                                  He(
                                                    { timestamp: new Date() },
                                                    q._latestStats[
                                                      q._shareAudioProducer.id
                                                    ]
                                                      ? q._latestStats[
                                                          q._shareAudioProducer
                                                            .id
                                                        ][0]
                                                      : {}
                                                  )
                                                ),
                                              B++;
                                          } catch (e) {
                                            var r;
                                            null === (r = q._videosdkLogs) ||
                                              void 0 === r ||
                                              r.pushLogs({
                                                logText:
                                                  "Error PRODUCER Stats ERROR",
                                                logType: "ERROR",
                                                attributes: {
                                                  error: e.message,
                                                },
                                              }),
                                              console.log("PRODUCER ERROR", e);
                                          }
                                        }),
                                        F.start(),
                                        this._shareAudioProducer.observer.on(
                                          "close",
                                          function () {
                                            F.stop(),
                                              q._metrics.removeExistingProbe(F);
                                          }
                                        ));
                                  case 101:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [11, 87],
                              [19, 25],
                              [65, 79],
                            ]
                          );
                        })
                      )),
                      function () {
                        return ft.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableShare",
                    value:
                      ((mt = (0, s.A)(
                        l().mark(function e() {
                          var t, r, a, n, s, i, o, c, d, p, u, h, m;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("disableShare()"),
                                      (n =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "disableShare() Calling",
                                              status: 1,
                                            })),
                                      this._shareProducer)
                                    ) {
                                      e.next = 5;
                                      break;
                                    }
                                    return (
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: n,
                                          status: 2,
                                          message: "Share Producer Not found",
                                        }),
                                      e.abrupt("return")
                                    );
                                  case 5:
                                    return (
                                      (i =
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "Closing Share Producer",
                                              span: n,
                                              status: 1,
                                            })),
                                      this._shareProducer.close(),
                                      (o = W(this._shareProducer.id)),
                                      Ve.dispatch(o),
                                      this._eventEmitter.emit(
                                        o.type,
                                        o.payload
                                      ),
                                      this._shareAudioProducer &&
                                        ((p =
                                          null === (c = this._openTelemetry) ||
                                          void 0 === c
                                            ? void 0
                                            : c.trace({
                                                spanName:
                                                  "Closing Share Audio Producer",
                                                span: n,
                                                status: 1,
                                              })),
                                        this._shareAudioProducer.close(),
                                        (o = W(this._shareAudioProducer.id)),
                                        Ve.dispatch(o),
                                        this._eventEmitter.emit(
                                          o.type,
                                          o.payload
                                        ),
                                        null === (d = this._openTelemetry) ||
                                          void 0 === d ||
                                          d.completeSpan({
                                            span: p,
                                            status: 1,
                                            message:
                                              "Closed Share Audio Producer",
                                          })),
                                      (e.prev = 11),
                                      (e.next = 14),
                                      this._protoo.request("closeProducer", {
                                        producerId: this._shareProducer.id,
                                      })
                                    );
                                  case 14:
                                    if (!this._shareAudioProducer) {
                                      e.next = 17;
                                      break;
                                    }
                                    return (
                                      (e.next = 17),
                                      this._protoo.request("closeProducer", {
                                        producerId: this._shareAudioProducer.id,
                                      })
                                    );
                                  case 17:
                                    null === (u = this._openTelemetry) ||
                                      void 0 === u ||
                                      u.completeSpan({
                                        span: i,
                                        status: 1,
                                        message:
                                          "Requested Server to Close Producer",
                                      }),
                                      (e.next = 25);
                                    break;
                                  case 20:
                                    (e.prev = 20),
                                      (e.t0 = e.catch(11)),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error closing server-side share Producer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      null === (h = this._openTelemetry) ||
                                        void 0 === h ||
                                        h.completeSpan({
                                          span: n,
                                          status: 2,
                                          message:
                                            "Error closing server-side share Producer ".concat(
                                              e.t0
                                            ),
                                        }),
                                      null === (m = this._videosdkLogs) ||
                                        void 0 === m ||
                                        m.pushLogs({
                                          logText:
                                            "Error closing server-side share Producer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 25:
                                    (this._shareProducer = null),
                                      (this._shareAudioProducer = null),
                                      null === (a = this._openTelemetry) ||
                                        void 0 === a ||
                                        a.completeSpan({
                                          span: n,
                                          status: 1,
                                          message:
                                            "Screen Share Disabled Successfully",
                                        });
                                  case 28:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[11, 20]]
                          );
                        })
                      )),
                      function () {
                        return mt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enableAudioOnly",
                    value:
                      ((ht = (0, s.A)(
                        l().mark(function e() {
                          var t, r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    Ye.debug("enableAudioOnly()"),
                                      Ve.dispatch(j(!0)),
                                      this.disableWebcam(),
                                      (t = Ue(this._consumers.values())),
                                      (e.prev = 4),
                                      t.s();
                                  case 6:
                                    if ((r = t.n()).done) {
                                      e.next = 13;
                                      break;
                                    }
                                    if ("video" === (a = r.value).kind) {
                                      e.next = 10;
                                      break;
                                    }
                                    return e.abrupt("continue", 11);
                                  case 10:
                                    this._pauseConsumer(a);
                                  case 11:
                                    e.next = 6;
                                    break;
                                  case 13:
                                    e.next = 18;
                                    break;
                                  case 15:
                                    (e.prev = 15),
                                      (e.t0 = e.catch(4)),
                                      t.e(e.t0);
                                  case 18:
                                    return (e.prev = 18), t.f(), e.finish(18);
                                  case 21:
                                    Ve.dispatch(N(!0)), Ve.dispatch(j(!1));
                                  case 23:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[4, 15, 18, 21]]
                          );
                        })
                      )),
                      function () {
                        return ht.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableAudioOnly",
                    value:
                      ((ut = (0, s.A)(
                        l().mark(function e() {
                          var t, r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    Ye.debug("disableAudioOnly()"),
                                      Ve.dispatch(j(!0)),
                                      !this._webcamProducer &&
                                        this._produce &&
                                        (P() || {}).webcamEnabled &&
                                        this.enableWebcam(),
                                      (t = Ue(this._consumers.values())),
                                      (e.prev = 4),
                                      t.s();
                                  case 6:
                                    if ((r = t.n()).done) {
                                      e.next = 13;
                                      break;
                                    }
                                    if ("video" === (a = r.value).kind) {
                                      e.next = 10;
                                      break;
                                    }
                                    return e.abrupt("continue", 11);
                                  case 10:
                                    this._resumeConsumer(a);
                                  case 11:
                                    e.next = 6;
                                    break;
                                  case 13:
                                    e.next = 18;
                                    break;
                                  case 15:
                                    (e.prev = 15),
                                      (e.t0 = e.catch(4)),
                                      t.e(e.t0);
                                  case 18:
                                    return (e.prev = 18), t.f(), e.finish(18);
                                  case 21:
                                    Ve.dispatch(N(!1)), Ve.dispatch(j(!1));
                                  case 23:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[4, 15, 18, 21]]
                          );
                        })
                      )),
                      function () {
                        return ut.apply(this, arguments);
                      }),
                  },
                  {
                    key: "muteAudio",
                    value:
                      ((pt = (0, s.A)(
                        l().mark(function e() {
                          return l().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  Ye.debug("muteAudio()"), Ve.dispatch(B(!0));
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function () {
                        return pt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "unmuteAudio",
                    value:
                      ((lt = (0, s.A)(
                        l().mark(function e() {
                          return l().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  Ye.debug("unmuteAudio()"), Ve.dispatch(B(!1));
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function () {
                        return lt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "handleRemoteRestartIce",
                    value:
                      ((dt = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n, s, i, o, c, d;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (n = t.iceParameters),
                                      (s = t.transportId),
                                      (i = t.internalSpan),
                                      s ===
                                        (null === (r = this._sendTransport) ||
                                        void 0 === r
                                          ? void 0
                                          : r.id) &&
                                        this._sendTransport.restartIce({
                                          iceParameters: n,
                                        }),
                                      s ===
                                        (null === (a = this._recvTransport) ||
                                        void 0 === a
                                          ? void 0
                                          : a.id) &&
                                        this._recvTransport.restartIce({
                                          iceParameters: n,
                                        }),
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._protoo.request("iceRestarted", {
                                        transportId: s,
                                      })
                                    );
                                  case 6:
                                    null === (o = this._openTelemetry) ||
                                      void 0 === o ||
                                      o.completeSpan({
                                        span: i,
                                        status: 1,
                                        message: "iceRestarted",
                                      }),
                                      (e.next = 14);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(3)),
                                      null === (c = this._openTelemetry) ||
                                        void 0 === c ||
                                        c.completeSpan({
                                          span: i,
                                          status: 2,
                                          message:
                                            "handleRemoteRestartIce() ICE restart failed ".concat(
                                              e.t0
                                            ),
                                        }),
                                      null === (d = this._videosdkLogs) ||
                                        void 0 === d ||
                                        d.pushLogs({
                                          logText:
                                            "Error handleRemoteRestartIce() ICE restart failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "ICE restart failed: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 9]]
                          );
                        })
                      )),
                      function (e) {
                        return dt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "restartIce",
                    value:
                      ((ct = (0, s.A)(
                        l().mark(function e() {
                          var t, r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("restartIce()"),
                                      Ve.dispatch(F(!0)),
                                      (e.prev = 2),
                                      !this._sendTransport)
                                    ) {
                                      e.next = 9;
                                      break;
                                    }
                                    return (
                                      (e.next = 6),
                                      this._protoo.request("restartIce", {
                                        transportId: this._sendTransport.id,
                                      })
                                    );
                                  case 6:
                                    return (
                                      (t = e.sent),
                                      (e.next = 9),
                                      this._sendTransport.restartIce({
                                        iceParameters: t,
                                      })
                                    );
                                  case 9:
                                    if (!this._recvTransport) {
                                      e.next = 15;
                                      break;
                                    }
                                    return (
                                      (e.next = 12),
                                      this._protoo.request("restartIce", {
                                        transportId: this._recvTransport.id,
                                      })
                                    );
                                  case 12:
                                    return (
                                      (r = e.sent),
                                      (e.next = 15),
                                      this._recvTransport.restartIce({
                                        iceParameters: r,
                                      })
                                    );
                                  case 15:
                                    Ve.dispatch(ie({ text: "ICE restarted" })),
                                      (e.next = 23);
                                    break;
                                  case 18:
                                    (e.prev = 18),
                                      (e.t0 = e.catch(2)),
                                      Ye.error(
                                        "restartIce() | failed:%o",
                                        e.t0
                                      ),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "ICE restart failed: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error restartIce() ICE restart failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 23:
                                    Ve.dispatch(F(!1));
                                  case 24:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 18]]
                          );
                        })
                      )),
                      function () {
                        return ct.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setMaxSendingSpatialLayer",
                    value:
                      ((ot = (0, s.A)(
                        l().mark(function e(t) {
                          var r;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug(
                                        "setMaxSendingSpatialLayer() [spatialLayer:%s]",
                                        t
                                      ),
                                      (e.prev = 1),
                                      !this._webcamProducer)
                                    ) {
                                      e.next = 7;
                                      break;
                                    }
                                    return (
                                      (e.next = 5),
                                      this._webcamProducer.setMaxSpatialLayer(t)
                                    );
                                  case 5:
                                    e.next = 10;
                                    break;
                                  case 7:
                                    if (!this._shareProducer) {
                                      e.next = 10;
                                      break;
                                    }
                                    return (
                                      (e.next = 10),
                                      this._shareProducer.setMaxSpatialLayer(t)
                                    );
                                  case 10:
                                    e.next = 17;
                                    break;
                                  case 12:
                                    (e.prev = 12),
                                      (e.t0 = e.catch(1)),
                                      Ye.error(
                                        "setMaxSendingSpatialLayer() | failed:%o",
                                        e.t0
                                      ),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText:
                                            "Error setting max sending video spatial layer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error setting max sending video spatial layer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 17:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 12]]
                          );
                        })
                      )),
                      function (e) {
                        return ot.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setWebcamQuality",
                    value:
                      ((it = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (this._webcamProducer) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    if (
                                      ((r = this._webcam.resolution),
                                      (a = Ge[r][t].s),
                                      this._webcamProducer.maxSpatialLayer != a)
                                    ) {
                                      e.next = 6;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 6:
                                    return (
                                      (e.next = 8),
                                      this._webcamProducer.setMaxSpatialLayer(a)
                                    );
                                  case 8:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return it.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setConsumerQuality",
                    value:
                      ((st = (0, s.A)(
                        l().mark(function e(t, r) {
                          var a, n, s, i, o, c, d;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (i = this._webcam.resolution),
                                      (o =
                                        null === (a = this._openTelemetry) ||
                                        void 0 === a
                                          ? void 0
                                          : a.trace({
                                              spanName: 'Setting "'.concat(
                                                r,
                                                '" Quality'
                                              ),
                                            })),
                                      (c = Ge[i][r].s),
                                      (d = Ge[i][r].t),
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.traceAutoComplete({
                                          spanName:
                                            "Getting spatial & temporal layers",
                                          span: o,
                                          attributes: {
                                            spatialLayers: JSON.parse(c),
                                            temporalLayers: JSON.parse(d),
                                          },
                                          status: 1,
                                        }),
                                      (e.next = 7),
                                      this.setConsumerPreferredLayers(t, c, d)
                                    );
                                  case 7:
                                    null === (s = this._openTelemetry) ||
                                      void 0 === s ||
                                      s.completeSpan({
                                        message: "Done",
                                        span: o,
                                        status: 1,
                                      });
                                  case 8:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e, t) {
                        return st.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setViewPort",
                    value:
                      ((nt = (0, s.A)(
                        l().mark(function e(t, r, a) {
                          var n, s, i, o;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (this._consumers.get(t.id)) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    if (
                                      ((n = Ee(
                                        this._consumers.get(t.id),
                                        r,
                                        a
                                      )),
                                      (s = n.consumerId),
                                      (i = n.newPreferredSpatialLayer),
                                      (o = n.newPreferredTemporalLayer),
                                      !s)
                                    ) {
                                      e.next = 6;
                                      break;
                                    }
                                    return (
                                      (e.next = 6),
                                      this.setConsumerPreferredLayers(s, i, o)
                                    );
                                  case 6:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e, t, r) {
                        return nt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setConsumerPreferredLayers",
                    value:
                      ((at = (0, s.A)(
                        l().mark(function e(t, r, a) {
                          var n, s;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug(
                                        "setConsumerPreferredLayers() [consumerId:%s, spatialLayer:%s, temporalLayer:%s]",
                                        t,
                                        r,
                                        a
                                      ),
                                      (e.prev = 1),
                                      (n = this._consumers.get(t))
                                        .spatialLayers > 1 &&
                                        ((n.preferredSpatialLayer = r),
                                        (n.preferredTemporalLayer = a)),
                                      (e.next = 6),
                                      this._protoo.request(
                                        "setConsumerPreferredLayers",
                                        {
                                          consumerId: t,
                                          spatialLayer: r,
                                          temporalLayer: a,
                                        }
                                      )
                                    );
                                  case 6:
                                    Ve.dispatch(te(t, r, a)), (e.next = 14);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(1)),
                                      Ye.error(
                                        "setConsumerPreferredLayers() | failed:%o",
                                        e.t0
                                      ),
                                      null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText:
                                            "Error setting Consumer preferred layers:",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error setting Consumer preferred layers: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 9]]
                          );
                        })
                      )),
                      function (e, t, r) {
                        return at.apply(this, arguments);
                      }),
                  },
                  {
                    key: "setConsumerPriority",
                    value:
                      ((rt = (0, s.A)(
                        l().mark(function e(t, r) {
                          var a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug(
                                        "setConsumerPriority() [consumerId:%s, priority:%d]",
                                        t,
                                        r
                                      ),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._protoo.request(
                                        "setConsumerPriority",
                                        { consumerId: t, priority: r }
                                      )
                                    );
                                  case 4:
                                    Ve.dispatch(re(t, r)), (e.next = 12);
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(1)),
                                      Ye.error(
                                        "setConsumerPriority() | failed:%o",
                                        e.t0
                                      ),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error setting Consumer priority",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error setting Consumer priority: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 7]]
                          );
                        })
                      )),
                      function (e, t) {
                        return rt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "requestConsumerKeyFrame",
                    value:
                      ((tt = (0, s.A)(
                        l().mark(function e(t) {
                          var r;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug(
                                        "requestConsumerKeyFrame() [consumerId:%s]",
                                        t
                                      ),
                                      (e.prev = 1),
                                      (e.next = 4),
                                      this._protoo.request(
                                        "requestConsumerKeyFrame",
                                        { consumerId: t }
                                      )
                                    );
                                  case 4:
                                    Ve.dispatch(
                                      ie({
                                        text: "Keyframe requested for video consumer",
                                      })
                                    ),
                                      (e.next = 12);
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(1)),
                                      Ye.error(
                                        "requestConsumerKeyFrame() | failed:%o",
                                        e.t0
                                      ),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText:
                                            "Error requesting key frame for Consumer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error requesting key frame for Consumer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return tt.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enableChatDataProducer",
                    value:
                      ((et = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r = this;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("enableChatDataProducer()"),
                                      this._useDataChannel)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return (
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._sendTransport.produceData({
                                        ordered: !1,
                                        maxRetransmits: 1,
                                        label: "chat",
                                        priority: "medium",
                                        appData: {
                                          info: "my-chat-DataProducer",
                                        },
                                      })
                                    );
                                  case 6:
                                    (this._chatDataProducer = e.sent),
                                      Ve.dispatch(
                                        V({
                                          id: this._chatDataProducer.id,
                                          sctpStreamParameters:
                                            this._chatDataProducer
                                              .sctpStreamParameters,
                                          label: this._chatDataProducer.label,
                                          protocol:
                                            this._chatDataProducer.protocol,
                                        })
                                      ),
                                      this._chatDataProducer.on(
                                        "transportclose",
                                        function () {
                                          r._chatDataProducer = null;
                                        }
                                      ),
                                      this._chatDataProducer.on(
                                        "open",
                                        function () {
                                          Ye.debug(
                                            'chat DataProducer "open" event'
                                          );
                                        }
                                      ),
                                      this._chatDataProducer.on(
                                        "close",
                                        function () {
                                          Ye.error(
                                            'chat DataProducer "close" event'
                                          ),
                                            (r._chatDataProducer = null),
                                            Ve.dispatch(
                                              ie({
                                                type: "error",
                                                text: "Chat DataProducer closed",
                                              })
                                            );
                                        }
                                      ),
                                      this._chatDataProducer.on(
                                        "error",
                                        function (e) {
                                          Ye.error(
                                            'chat DataProducer "error" event:%o',
                                            e
                                          ),
                                            Ve.dispatch(
                                              ie({
                                                type: "error",
                                                text: "Chat DataProducer error: ".concat(
                                                  e
                                                ),
                                              })
                                            );
                                        }
                                      ),
                                      this._chatDataProducer.on(
                                        "bufferedamountlow",
                                        function () {
                                          Ye.debug(
                                            'chat DataProducer "bufferedamountlow" event'
                                          );
                                        }
                                      ),
                                      (e.next = 21);
                                    break;
                                  case 15:
                                    throw (
                                      ((e.prev = 15),
                                      (e.t0 = e.catch(3)),
                                      Ye.error(
                                        "enableChatDataProducer() | failed:%o",
                                        e.t0
                                      ),
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText:
                                            "Error enabling chat DataProducer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error enabling chat DataProducer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      e.t0)
                                    );
                                  case 21:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 15]]
                          );
                        })
                      )),
                      function () {
                        return et.apply(this, arguments);
                      }),
                  },
                  {
                    key: "enableBotDataProducer",
                    value:
                      ((Ze = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r = this;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("enableBotDataProducer()"),
                                      this._useDataChannel)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return (
                                      (e.prev = 3),
                                      (e.next = 6),
                                      this._sendTransport.produceData({
                                        ordered: !1,
                                        maxPacketLifeTime: 2e3,
                                        label: "bot",
                                        priority: "medium",
                                        appData: {
                                          info: "my-bot-DataProducer",
                                        },
                                      })
                                    );
                                  case 6:
                                    (this._botDataProducer = e.sent),
                                      Ve.dispatch(
                                        V({
                                          id: this._botDataProducer.id,
                                          sctpStreamParameters:
                                            this._botDataProducer
                                              .sctpStreamParameters,
                                          label: this._botDataProducer.label,
                                          protocol:
                                            this._botDataProducer.protocol,
                                        })
                                      ),
                                      this._botDataProducer.on(
                                        "transportclose",
                                        function () {
                                          r._botDataProducer = null;
                                        }
                                      ),
                                      this._botDataProducer.on(
                                        "open",
                                        function () {
                                          Ye.debug(
                                            'bot DataProducer "open" event'
                                          );
                                        }
                                      ),
                                      this._botDataProducer.on(
                                        "close",
                                        function () {
                                          Ye.error(
                                            'bot DataProducer "close" event'
                                          ),
                                            (r._botDataProducer = null),
                                            Ve.dispatch(
                                              ie({
                                                type: "error",
                                                text: "Bot DataProducer closed",
                                              })
                                            );
                                        }
                                      ),
                                      this._botDataProducer.on(
                                        "error",
                                        function (e) {
                                          Ye.error(
                                            'bot DataProducer "error" event:%o',
                                            e
                                          ),
                                            Ve.dispatch(
                                              ie({
                                                type: "error",
                                                text: "Bot DataProducer error: ".concat(
                                                  e
                                                ),
                                              })
                                            );
                                        }
                                      ),
                                      this._botDataProducer.on(
                                        "bufferedamountlow",
                                        function () {
                                          Ye.debug(
                                            'bot DataProducer "bufferedamountlow" event'
                                          );
                                        }
                                      ),
                                      (e.next = 21);
                                    break;
                                  case 15:
                                    throw (
                                      ((e.prev = 15),
                                      (e.t0 = e.catch(3)),
                                      Ye.error(
                                        "enableBotDataProducer() | failed:%o",
                                        e.t0
                                      ),
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText:
                                            "Error enabling bot DataProducer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error enabling bot DataProducer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      e.t0)
                                    );
                                  case 21:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[3, 15]]
                          );
                        })
                      )),
                      function () {
                        return Ze.apply(this, arguments);
                      }),
                  },
                  {
                    key: "sendChatMessage",
                    value:
                      ((Xe = (0, s.A)(
                        l().mark(function e(t) {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug(
                                        'sendChatMessage() [text:"%s]',
                                        t
                                      ),
                                      this._chatDataProducer)
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return (
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "No chat DataProducer",
                                        })
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 4:
                                    try {
                                      this._chatDataProducer.send(t);
                                    } catch (e) {
                                      Ye.error(
                                        "chat DataProducer.send() failed:%o",
                                        e
                                      ),
                                        Ve.dispatch(
                                          ie({
                                            type: "error",
                                            text: "chat DataProducer.send() failed: ".concat(
                                              e
                                            ),
                                          })
                                        );
                                    }
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return Xe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "sendBotMessage",
                    value:
                      ((qe = (0, s.A)(
                        l().mark(function e(t) {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug(
                                        'sendBotMessage() [text:"%s]',
                                        t
                                      ),
                                      this._botDataProducer)
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return (
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "No bot DataProducer",
                                        })
                                      ),
                                      e.abrupt("return")
                                    );
                                  case 4:
                                    try {
                                      this._botDataProducer.send(t);
                                    } catch (e) {
                                      Ye.error(
                                        "bot DataProducer.send() failed:%o",
                                        e
                                      ),
                                        Ve.dispatch(
                                          ie({
                                            type: "error",
                                            text: "bot DataProducer.send() failed: ".concat(
                                              e
                                            ),
                                          })
                                        );
                                    }
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return qe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "changeDisplayName",
                    value:
                      ((We = (0, s.A)(
                        l().mark(function e(t) {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug(
                                        'changeDisplayName() [displayName:"%s"]',
                                        t
                                      ),
                                      C({ displayName: t }),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request(
                                        "changeDisplayName",
                                        { displayName: t }
                                      )
                                    );
                                  case 5:
                                    (this._displayName = t),
                                      Ve.dispatch(L(t)),
                                      Ve.dispatch(
                                        ie({ text: "Display name changed" })
                                      ),
                                      (e.next = 15);
                                    break;
                                  case 10:
                                    (e.prev = 10),
                                      (e.t0 = e.catch(2)),
                                      Ye.error(
                                        "changeDisplayName() | failed: %o",
                                        e.t0
                                      ),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Could not change display name: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      Ve.dispatch(L());
                                  case 15:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 10]]
                          );
                        })
                      )),
                      function (e) {
                        return We.apply(this, arguments);
                      }),
                  },
                  {
                    key: "openConnection",
                    value:
                      ((je = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.roomId),
                                      (a = t.payload),
                                      (e.next = 3),
                                      this._protoo
                                        .request("openConnection", {
                                          roomId: r,
                                          payload: a,
                                        })
                                        .catch(function (e) {
                                          throw new Error(e);
                                        })
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return je.apply(this, arguments);
                      }),
                  },
                  {
                    key: "closeConnection",
                    value:
                      ((Ne = (0, s.A)(
                        l().mark(function e(t) {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2),
                                      this._protoo.request("closeConnection", {
                                        roomId: t,
                                      })
                                    );
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return Ne.apply(this, arguments);
                      }),
                  },
                  {
                    key: "switchTo",
                    value:
                      ((Ae = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.roomId),
                                      (a = t.peerIds),
                                      (n = t.payload),
                                      (e.next = 3),
                                      this._protoo.request(
                                        "requestSwitchRoom",
                                        { roomId: r, peerIds: a, payload: n }
                                      )
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return Ae.apply(this, arguments);
                      }),
                  },
                  {
                    key: "switchPeerRoom",
                    value:
                      ((Me = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n, s;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.peerId),
                                      (a = t.roomId),
                                      (n = t.payload),
                                      (s = t.token),
                                      (e.next = 3),
                                      this._protoo.request("switchPeerRoom", {
                                        roomId: a,
                                        peerId: r,
                                        payload: n,
                                        token: s,
                                      })
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return Me.apply(this, arguments);
                      }),
                  },
                  {
                    key: "connectionSwitchPeerRoom",
                    value:
                      ((Ie = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n, s, i;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.roomId),
                                      (a = t.connectionRoomId),
                                      (n = t.peerId),
                                      (s = t.payload),
                                      (i = t.token),
                                      (e.next = 3),
                                      this._protoo.request(
                                        "connectionSwitchPeerRoom",
                                        {
                                          roomId: r,
                                          connectionRoomId: a,
                                          peerId: n,
                                          payload: s,
                                          token: i,
                                        }
                                      )
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return Ie.apply(this, arguments);
                      }),
                  },
                  {
                    key: "connectionSendChatMessage",
                    value:
                      ((xe = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.roomId),
                                      (a = t.message),
                                      (e.next = 3),
                                      this._protoo.request(
                                        "connectionSendChatMessage",
                                        { roomId: r, message: a }
                                      )
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return xe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "connectionEndMeeting",
                    value:
                      ((De = (0, s.A)(
                        l().mark(function e(t) {
                          var r;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.roomId),
                                      (e.next = 3),
                                      this._protoo.request(
                                        "connectionCloseRoom",
                                        { roomId: r }
                                      )
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return De.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pubsubPublish",
                    value:
                      ((Oe = (0, s.A)(
                        l().mark(function e(t, r, a, n) {
                          var s, i, o, c, d, p;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((e.prev = 0), null != a && a.sendOnly)
                                    ) {
                                      if (((s = a.sendOnly), (i = []), s)) {
                                        o = Ue(s);
                                        try {
                                          for (o.s(); !(c = o.n()).done; )
                                            (d = c.value) &&
                                              i.push(d.toString());
                                        } catch (e) {
                                          o.e(e);
                                        } finally {
                                          o.f();
                                        }
                                      }
                                      a.sendOnly = i;
                                    }
                                    return (
                                      (e.next = 4),
                                      this._protoo.request("pubsubPublish", {
                                        topic: t,
                                        message: r,
                                        options: a,
                                        payload: n,
                                      })
                                    );
                                  case 4:
                                    e.next = 10;
                                    break;
                                  case 6:
                                    (e.prev = 6),
                                      (e.t0 = e.catch(0)),
                                      null === (p = this._videosdkLogs) ||
                                        void 0 === p ||
                                        p.pushLogs({
                                          logText:
                                            "Error pubsubPublish() | failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error(
                                        "pubsubPublish() | failed: %o",
                                        e.t0
                                      );
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[0, 6]]
                          );
                        })
                      )),
                      function (e, t, r, a) {
                        return Oe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pubsubSubscribe",
                    value:
                      ((Re = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._closed) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("pubsubSubscribe", {
                                        topic: t,
                                      })
                                    );
                                  case 5:
                                    return (r = e.sent), e.abrupt("return", r);
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(2)),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error pubsubSubscribe() | failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error(
                                        "pubsubSubscribe() | failed: %o",
                                        e.t0
                                      );
                                  case 13:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 9]]
                          );
                        })
                      )),
                      function (e) {
                        return Re.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pubsubUnsubscribe",
                    value:
                      ((Se = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._closed) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request(
                                        "pubsubUnsubscribe",
                                        { topic: t }
                                      )
                                    );
                                  case 5:
                                    null === (r = this._videosdkLogs) ||
                                      void 0 === r ||
                                      r.pushLogs({
                                        logText:
                                          "Pubsub Unsubscribing Successfully for topic ".concat(
                                            t
                                          ),
                                        logType: "INFO",
                                      }),
                                      (e.next = 12);
                                    break;
                                  case 8:
                                    (e.prev = 8),
                                      (e.t0 = e.catch(2)),
                                      null === (a = this._videosdkLogs) ||
                                        void 0 === a ||
                                        a.pushLogs({
                                          logText:
                                            "Error pubsubUnsubscribe() | failed",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ye.error(
                                        "pubsubUnsubscribe() | failed: %o",
                                        e.t0
                                      );
                                  case 12:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 8]]
                          );
                        })
                      )),
                      function (e) {
                        return Se.apply(this, arguments);
                      }),
                  },
                  {
                    key: "closeRoom",
                    value:
                      ((ye = (0, s.A)(
                        l().mark(function e() {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2),
                                      this._protoo.request("closeRoom", {})
                                    );
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return ye.apply(this, arguments);
                      }),
                  },
                  {
                    key: "removePeer",
                    value:
                      ((be = (0, s.A)(
                        l().mark(function e(t) {
                          var r;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.traceAutoComplete({
                                          spanName: "Removing peer ".concat(t),
                                          status: 1,
                                        }),
                                      null != t)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return (
                                      (e.next = 5),
                                      this._protoo.request("removePeer", {
                                        peerId: t,
                                      })
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return be.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startPingPong",
                    value:
                      ((ve = (0, s.A)(
                        l().mark(function e() {
                          var t = this;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    null != this._pingWebsocketInterval &&
                                      clearInterval(
                                        this._pingWebsocketInterval
                                      ),
                                      (this._pingWebsocketInterval =
                                        setInterval(function () {
                                          t.pingWebSocket();
                                        }, 2e3));
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return ve.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pingWebSocket",
                    value:
                      ((_e = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r = this;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._closed) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    (t = !1),
                                      this._protoo
                                        .request("ping")
                                        .then(function (e) {
                                          e && (t = !0);
                                        })
                                        .catch(function (e) {}),
                                      setTimeout(function () {
                                        t
                                          ? (!r._isWebsocketAlive ||
                                            r._pingWebsocketFailedCounter > 1
                                              ? (r._eventEmitter.emit(
                                                  "MEETING_STATE_CHANGED",
                                                  { state: "CONNECTED" }
                                                ),
                                                (r._isWebsocketAlive = !0),
                                                (r._pingWebsocketFailedCounter = 0),
                                                r.restartIce())
                                              : ("failed" !=
                                                  r._transportState &&
                                                  "disconnected" !=
                                                    r._transportState) ||
                                                (console.log(
                                                  "Calling Restart Ice based on transport state",
                                                  r._transportState
                                                ),
                                                r.restartIce()),
                                            (r._pingWebsocketFailedCounter = 0))
                                          : (r._isWebsocketAlive &&
                                              r._pingWebsocketFailedCounter >
                                                1 &&
                                              (r._eventEmitter.emit(
                                                "MEETING_STATE_CHANGED",
                                                { state: "DISCONNECTED" }
                                              ),
                                              (r._isWebsocketAlive = !1),
                                              r.startInternetPingPong()),
                                            (r._pingWebsocketFailedCounter =
                                              r._pingWebsocketFailedCounter +
                                              1));
                                      }, 1e3);
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return _e.apply(this, arguments);
                      }),
                  },
                  {
                    key: "startInternetPingPong",
                    value:
                      ((ge = (0, s.A)(
                        l().mark(function e() {
                          var t = this;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    null != this._pingInternetInterval &&
                                      clearInterval(this._pingInternetInterval),
                                      (this._pingInternetInterval = setInterval(
                                        function () {
                                          t.pingInternet();
                                        },
                                        2e3
                                      ));
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return ge.apply(this, arguments);
                      }),
                  },
                  {
                    key: "pingInternet",
                    value:
                      ((fe = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r,
                            a,
                            n,
                            s,
                            i,
                            o = this;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._closed) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      null === (t = this._videosdkLogs) ||
                                        void 0 === t ||
                                        t.pushLogs({
                                          logText: "pinging internet",
                                          logType: "INFO",
                                        }),
                                      (r = new AbortController()),
                                      (a = r.signal),
                                      (n = setTimeout(function () {
                                        r.abort();
                                      }, 1e3)),
                                      (e.next = 8),
                                      fetch(
                                        "https://".concat(
                                          this._signalingBaseUrl,
                                          "/ping"
                                        ),
                                        { method: "GET", signal: a }
                                      )
                                        .then(function (e) {
                                          return clearTimeout(n), e.text();
                                        })
                                        .catch(function (e) {
                                          var t;
                                          return (
                                            null === (t = o._videosdkLogs) ||
                                              void 0 === t ||
                                              t.pushLogs({
                                                logText:
                                                  "Error pingInternet failed",
                                                logType: "ERROR",
                                                attributes: {
                                                  error: e.message,
                                                },
                                              }),
                                            "failed"
                                          );
                                        })
                                    );
                                  case 8:
                                    if ("pong" != e.sent) {
                                      e.next = 19;
                                      break;
                                    }
                                    if (
                                      (null === (s = this._videosdkLogs) ||
                                        void 0 === s ||
                                        s.pushLogs({
                                          logText: "Pong",
                                          logType: "INFO",
                                        }),
                                      !(
                                        this._pingWebsocketFailedCounter > 5 &&
                                        this._pongInternetCounter > 3
                                      ) || this._isWebsocketAlive)
                                    ) {
                                      e.next = 17;
                                      break;
                                    }
                                    return (
                                      (this._pongInternetCounter = 0),
                                      this.close({ sendLeft: !1 }),
                                      null === (i = this._videosdkLogs) ||
                                        void 0 === i ||
                                        i.pushLogs({
                                          logText:
                                            "Re-join the meeting, after diconnect",
                                          logType: "INFO",
                                        }),
                                      (e.next = 17),
                                      this.join()
                                    );
                                  case 17:
                                    (this._pongInternetCounter =
                                      this._pongInternetCounter + 1),
                                      this._isWebsocketAlive &&
                                        ((this._pongInternetCounter = 0),
                                        null != this._pingInternetInterval &&
                                          (clearInterval(
                                            this._pingInternetInterval
                                          ),
                                          (this._pingInternetInterval = null)));
                                  case 19:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return fe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getSendTransportRemoteStats",
                    value:
                      ((me = (0, s.A)(
                        l().mark(function e() {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug(
                                        "getSendTransportRemoteStats()"
                                      ),
                                      this._sendTransport)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt(
                                      "return",
                                      this._protoo.request(
                                        "getTransportStats",
                                        { transportId: this._sendTransport.id }
                                      )
                                    );
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return me.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getRecvTransportRemoteStats",
                    value:
                      ((he = (0, s.A)(
                        l().mark(function e() {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug(
                                        "getRecvTransportRemoteStats()"
                                      ),
                                      this._recvTransport)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt(
                                      "return",
                                      this._protoo.request(
                                        "getTransportStats",
                                        { transportId: this._recvTransport.id }
                                      )
                                    );
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return he.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getAudioRemoteStats",
                    value:
                      ((ue = (0, s.A)(
                        l().mark(function e() {
                          var t;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("getAudioRemoteStats()"),
                                      (t = this._micProducer))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt(
                                      "return",
                                      this._latestStats[t.id]
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return ue.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getVideoRemoteStats",
                    value:
                      ((pe = (0, s.A)(
                        l().mark(function e() {
                          var t;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("getVideoRemoteStats()"),
                                      (t = this._webcamProducer))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt(
                                      "return",
                                      this._latestStats[t.id]
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return pe.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getShareRemoteStats",
                    value:
                      ((le = (0, s.A)(
                        l().mark(function e() {
                          var t;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("getVideoRemoteStats()"),
                                      (t = this._shareProducer))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt(
                                      "return",
                                      this._latestStats[t.id]
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return le.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getShareAudioRemoteStats",
                    value:
                      ((de = (0, s.A)(
                        l().mark(function e() {
                          var t;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if ((t = this._shareAudioProducer)) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt(
                                      "return",
                                      this._latestStats[t.id]
                                    );
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return de.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getConsumerRemoteStats",
                    value:
                      ((D = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("getConsumerRemoteStats()"),
                                      (r = this._consumers.get(t)))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return (
                                      this._latestStats[t] &&
                                        ((this._latestStats[
                                          t
                                        ][0].currentSpatialLayer =
                                          r.currentSpatialLayer),
                                        (this._latestStats[
                                          t
                                        ][0].currentTemporalLayer =
                                          r.currentTemporalLayer),
                                        (this._latestStats[
                                          t
                                        ][0].preferredSpatialLayer =
                                          r.preferredSpatialLayer),
                                        (this._latestStats[
                                          t
                                        ][0].preferredTemporalLayer =
                                          r.preferredTemporalLayer)),
                                      (a = r.track.id.replace(/[{}]/g, "")),
                                      e.abrupt("return", this._latestStats[a])
                                    );
                                  case 7:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return D.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getChatDataProducerRemoteStats",
                    value:
                      ((O = (0, s.A)(
                        l().mark(function e() {
                          var t;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug(
                                        "getChatDataProducerRemoteStats()"
                                      ),
                                      (t = this._chatDataProducer))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt(
                                      "return",
                                      this._protoo.request(
                                        "getDataProducerStats",
                                        { dataProducerId: t.id }
                                      )
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return O.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getBotDataProducerRemoteStats",
                    value:
                      ((T = (0, s.A)(
                        l().mark(function e() {
                          var t;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug(
                                        "getBotDataProducerRemoteStats()"
                                      ),
                                      (t = this._botDataProducer))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt(
                                      "return",
                                      this._protoo.request(
                                        "getDataProducerStats",
                                        { dataProducerId: t.id }
                                      )
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return T.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getDataConsumerRemoteStats",
                    value:
                      ((k = (0, s.A)(
                        l().mark(function e(t) {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("getDataConsumerRemoteStats()"),
                                      this._dataConsumers.get(t))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt(
                                      "return",
                                      this._protoo.request(
                                        "getDataConsumerStats",
                                        { dataConsumerId: t }
                                      )
                                    );
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return k.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getSendTransportLocalStats",
                    value:
                      ((E = (0, s.A)(
                        l().mark(function e() {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("getSendTransportLocalStats()"),
                                      this._sendTransport)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt(
                                      "return",
                                      this._sendTransport.getStats()
                                    );
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return E.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getRecvTransportLocalStats",
                    value:
                      ((R = (0, s.A)(
                        l().mark(function e() {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("getRecvTransportLocalStats()"),
                                      this._recvTransport)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt(
                                      "return",
                                      this._recvTransport.getStats()
                                    );
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return R.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getAudioLocalStats",
                    value:
                      ((S = (0, s.A)(
                        l().mark(function e() {
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("getAudioLocalStats()"),
                                      this._micProducer)
                                    ) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt(
                                      "return",
                                      this._micProducer.getStats()
                                    );
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return S.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getVideoLocalStats",
                    value:
                      ((w = (0, s.A)(
                        l().mark(function e() {
                          var t;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      (Ye.debug("getVideoLocalStats()"),
                                      (t =
                                        this._webcamProducer ||
                                        this._shareProducer))
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 4:
                                    return e.abrupt("return", t.getStats());
                                  case 5:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return w.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getConsumerLocalStats",
                    value:
                      ((b = (0, s.A)(
                        l().mark(function e(t) {
                          var r;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if ((r = this._consumers.get(t))) {
                                      e.next = 3;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 3:
                                    return e.abrupt("return", r.getStats());
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return b.apply(this, arguments);
                      }),
                  },
                  {
                    key: "applyNetworkThrottle",
                    value:
                      ((v = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n, s;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.uplink),
                                      (a = t.downlink),
                                      (n = t.rtt),
                                      (s = t.secret),
                                      Ye.debug(
                                        "applyNetworkThrottle() [uplink:%s, downlink:%s, rtt:%s]",
                                        r,
                                        a,
                                        n
                                      ),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request(
                                        "applyNetworkThrottle",
                                        {
                                          uplink: r,
                                          downlink: a,
                                          rtt: n,
                                          secret: s,
                                        }
                                      )
                                    );
                                  case 5:
                                    e.next = 11;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      Ye.error(
                                        "applyNetworkThrottle() | failed:%o",
                                        e.t0
                                      ),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error applying network throttle: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return v.apply(this, arguments);
                      }),
                  },
                  {
                    key: "resetNetworkThrottle",
                    value:
                      ((_ = (0, s.A)(
                        l().mark(function e(t) {
                          var r, a, n;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.silent),
                                      (a = void 0 !== r && r),
                                      (n = t.secret),
                                      Ye.debug("resetNetworkThrottle()"),
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request(
                                        "resetNetworkThrottle",
                                        { secret: n }
                                      )
                                    );
                                  case 5:
                                    e.next = 10;
                                    break;
                                  case 7:
                                    (e.prev = 7),
                                      (e.t0 = e.catch(2)),
                                      a ||
                                        (Ye.error(
                                          "resetNetworkThrottle() | failed:%o",
                                          e.t0
                                        ),
                                        Ve.dispatch(
                                          ie({
                                            type: "error",
                                            text: "Error resetting network throttle: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ));
                                  case 10:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 7]]
                          );
                        })
                      )),
                      function (e) {
                        return _.apply(this, arguments);
                      }),
                  },
                  {
                    key: "createProducerTransport",
                    value:
                      ((g = (0, s.A)(
                        l().mark(function e(t, r) {
                          var a,
                            n,
                            i,
                            o,
                            c,
                            d,
                            p,
                            u,
                            h = this;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    (i = t.id),
                                      (o = t.iceParameters),
                                      (c = t.iceCandidates),
                                      (d = t.dtlsParameters),
                                      (p = t.sctpParameters),
                                      (u =
                                        null === (a = this._openTelemetry) ||
                                        void 0 === a
                                          ? void 0
                                          : a.trace({
                                              spanName:
                                                "Creating Send Transport",
                                              span: r || null,
                                            })),
                                      (this._sendTransport =
                                        this._mediasoupDevice.createSendTransport(
                                          {
                                            id: i,
                                            iceParameters: o,
                                            iceCandidates: c,
                                            dtlsParameters: d,
                                            sctpParameters: p,
                                            iceServers: this._iceServers,
                                          }
                                        )),
                                      this._sendTransport.on(
                                        "connect",
                                        function (e, t, r) {
                                          var a,
                                            n = e.dtlsParameters;
                                          null === (a = h._openTelemetry) ||
                                            void 0 === a ||
                                            a.traceAutoComplete({
                                              spanName:
                                                "this._sendTransport `connect` Event : Transport is about to establish the ICE+DTLS connection",
                                              span: u,
                                              status: 1,
                                            }),
                                            h._protoo
                                              .request(
                                                "connectWebRtcTransport",
                                                {
                                                  transportId:
                                                    h._sendTransport.id,
                                                  dtlsParameters: n,
                                                }
                                              )
                                              .then(t)
                                              .catch(r);
                                        }
                                      ),
                                      this._sendTransport.on(
                                        "produce",
                                        (function () {
                                          var e = (0, s.A)(
                                            l().mark(function e(t, r, a) {
                                              var n, s, i, o, c, d, p;
                                              return l().wrap(
                                                function (e) {
                                                  for (;;)
                                                    switch ((e.prev = e.next)) {
                                                      case 0:
                                                        return (
                                                          (n = t.kind),
                                                          (s = t.rtpParameters),
                                                          (i = t.appData),
                                                          (e.prev = 1),
                                                          null ===
                                                            (o =
                                                              h._openTelemetry) ||
                                                            void 0 === o ||
                                                            o.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "this._sendTransport `produce` Event : Transmit information about a new producer ",
                                                                span: u,
                                                                status: 1,
                                                              }
                                                            ),
                                                          (e.next = 5),
                                                          h._protoo.request(
                                                            "produce",
                                                            {
                                                              transportId:
                                                                h._sendTransport
                                                                  .id,
                                                              kind: n,
                                                              rtpParameters: s,
                                                              appData: i,
                                                            }
                                                          )
                                                        );
                                                      case 5:
                                                        (c = e.sent),
                                                          (d = c.id),
                                                          r({ id: d }),
                                                          (e.next = 14);
                                                        break;
                                                      case 10:
                                                        (e.prev = 10),
                                                          (e.t0 = e.catch(1)),
                                                          null ===
                                                            (p =
                                                              h._videosdkLogs) ||
                                                            void 0 === p ||
                                                            p.pushLogs({
                                                              logText:
                                                                'Error this._sendTransport "produce" Event catch',
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.t0.message,
                                                              },
                                                            }),
                                                          a(e.t0);
                                                      case 14:
                                                      case "end":
                                                        return e.stop();
                                                    }
                                                },
                                                e,
                                                null,
                                                [[1, 10]]
                                              );
                                            })
                                          );
                                          return function (t, r, a) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._sendTransport.on(
                                        "producedata",
                                        (function () {
                                          var e = (0, s.A)(
                                            l().mark(function e(t, r, a) {
                                              var n, s, i, o, c, d, p;
                                              return l().wrap(
                                                function (e) {
                                                  for (;;)
                                                    switch ((e.prev = e.next)) {
                                                      case 0:
                                                        return (
                                                          (n =
                                                            t.sctpStreamParameters),
                                                          (s = t.label),
                                                          (i = t.protocol),
                                                          (o = t.appData),
                                                          Ye.debug(
                                                            '"producedata" event: [sctpStreamParameters:%o, appData:%o]',
                                                            n,
                                                            o
                                                          ),
                                                          (e.prev = 2),
                                                          (e.next = 5),
                                                          h._protoo.request(
                                                            "produceData",
                                                            {
                                                              transportId:
                                                                h._sendTransport
                                                                  .id,
                                                              sctpStreamParameters:
                                                                n,
                                                              label: s,
                                                              protocol: i,
                                                              appData: o,
                                                            }
                                                          )
                                                        );
                                                      case 5:
                                                        (c = e.sent),
                                                          (d = c.id),
                                                          r({ id: d }),
                                                          (e.next = 14);
                                                        break;
                                                      case 10:
                                                        (e.prev = 10),
                                                          (e.t0 = e.catch(2)),
                                                          null ===
                                                            (p =
                                                              h._videosdkLogs) ||
                                                            void 0 === p ||
                                                            p.pushLogs({
                                                              logText:
                                                                "Error producedata event catch",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.t0.message,
                                                              },
                                                            }),
                                                          a(e.t0);
                                                      case 14:
                                                      case "end":
                                                        return e.stop();
                                                    }
                                                },
                                                e,
                                                null,
                                                [[2, 10]]
                                              );
                                            })
                                          );
                                          return function (t, r, a) {
                                            return e.apply(this, arguments);
                                          };
                                        })()
                                      ),
                                      this._sendTransport.on(
                                        "connectionstatechange",
                                        function (e) {
                                          var t;
                                          null === (t = h._openTelemetry) ||
                                            void 0 === t ||
                                            t.traceAutoComplete({
                                              spanName:
                                                "_sendTransport Event connectionstatechange ".concat(
                                                  e
                                                ),
                                              span: u,
                                              status: 1,
                                            }),
                                            "failed" === e && h.restartIce(),
                                            (h._transportState = e);
                                        }
                                      ),
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.completeSpan({
                                          span: u,
                                          status: 1,
                                          message:
                                            "Send Transport Created Successfully",
                                        });
                                  case 8:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e, t) {
                        return g.apply(this, arguments);
                      }),
                  },
                  {
                    key: "createConsumerTransport",
                    value:
                      ((f = (0, s.A)(
                        l().mark(function e(t, r) {
                          var n,
                            s,
                            i,
                            o,
                            c,
                            d,
                            p,
                            u,
                            h,
                            m,
                            f = this;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    (i = t.id),
                                      (o = t.iceParameters),
                                      (c = t.iceCandidates),
                                      (d = t.dtlsParameters),
                                      (p = t.sctpParameters),
                                      (u =
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName:
                                                "Creating Recieve Transport",
                                              span: r || null,
                                            })),
                                      (this._recvTransport =
                                        this._mediasoupDevice.createRecvTransport(
                                          {
                                            id: i,
                                            iceParameters: o,
                                            iceCandidates: c,
                                            dtlsParameters: d,
                                            sctpParameters: p,
                                            iceServers: this._iceServers,
                                          }
                                        )),
                                      this._recvTransport.on(
                                        "connect",
                                        function (e, t, r) {
                                          var a,
                                            n = e.dtlsParameters;
                                          null === (a = f._openTelemetry) ||
                                            void 0 === a ||
                                            a.traceAutoComplete({
                                              spanName:
                                                "this._recvTransport `connect` Event : Recieve Transport is about to establish the ICE+DTLS connection",
                                              span: u,
                                              status: 1,
                                            }),
                                            f._protoo
                                              .request(
                                                "connectWebRtcTransport",
                                                {
                                                  transportId:
                                                    f._recvTransport.id,
                                                  dtlsParameters: n,
                                                }
                                              )
                                              .then(t)
                                              .catch(r);
                                        }
                                      ),
                                      this._recvTransport.on(
                                        "connectionstatechange",
                                        function (e) {
                                          var t;
                                          null === (t = f._openTelemetry) ||
                                            void 0 === t ||
                                            t.traceAutoComplete({
                                              spanName:
                                                "_recvTransport Event connectionstatechange ".concat(
                                                  e
                                                ),
                                              span: u,
                                              status: 1,
                                            }),
                                            "failed" === e && f.restartIce(),
                                            (f._transportState = e);
                                        }
                                      ),
                                      (h = 0),
                                      ((m = this._metrics.addNewProbe(
                                        this._recvTransport,
                                        "transport"
                                      )).onStatsCollected = function (e) {
                                        try {
                                          var t = function (e, t, r) {
                                              f._stats.consumerStats ||
                                                (f._stats.consumerStats = {});
                                              var a = t.appData.peerId;
                                              f._stats.consumerStats[a] ||
                                                (f._stats.consumerStats[a] =
                                                  {}),
                                                f._stats.consumerStats[a][r] ||
                                                  (f._stats.consumerStats[a][
                                                    r
                                                  ] = []),
                                                (f._latestStats[
                                                  t.track.id.replace(
                                                    /[{}]/g,
                                                    ""
                                                  )
                                                ] = [e]),
                                                h % 5 == 0 &&
                                                  f._stats.consumerStats[a][
                                                    r
                                                  ].push(e);
                                            },
                                            r = function (r) {
                                              e[r].forEach(function (e) {
                                                var r,
                                                  n = Ue(f._consumers);
                                                try {
                                                  for (
                                                    n.s();
                                                    !(r = n.n()).done;

                                                  ) {
                                                    var s = (0, a.A)(
                                                        r.value,
                                                        2
                                                      ),
                                                      i = (s[0], s[1]);
                                                    if (
                                                      i.track.id.replace(
                                                        /[{}]/g,
                                                        ""
                                                      ) === e.trackId
                                                    ) {
                                                      var o = i.appData.share
                                                        ? "audio" === i.kind
                                                          ? "shareAudio"
                                                          : "share"
                                                        : i.kind;
                                                      t(e, i, o);
                                                    }
                                                  }
                                                } catch (e) {
                                                  n.e(e);
                                                } finally {
                                                  n.f();
                                                }
                                              });
                                            };
                                          r("audio"), r("video"), h++;
                                        } catch (e) {
                                          var n;
                                          null === (n = f._videosdkLogs) ||
                                            void 0 === n ||
                                            n.pushLogs({
                                              logText:
                                                "Error CONSUMER Stats ERROR",
                                              logType: "ERROR",
                                              attributes: { error: e.message },
                                            }),
                                            console.log("CONSUMER CATCH", e);
                                        }
                                      }),
                                      m.start(),
                                      this._recvTransport.observer.on(
                                        "close",
                                        function () {
                                          m.stop(),
                                            f._metrics.removeExistingProbe(m);
                                        }
                                      ),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: u,
                                          status: 1,
                                          message:
                                            "Recieve Transport Created Successfully",
                                        });
                                  case 11:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e, t) {
                        return f.apply(this, arguments);
                      }),
                  },
                  {
                    key: "joinRoom",
                    value:
                      ((m = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r,
                            a,
                            n,
                            s,
                            i,
                            o,
                            c,
                            d,
                            p,
                            h,
                            m,
                            f,
                            g,
                            _,
                            v,
                            b,
                            y,
                            w,
                            S,
                            R,
                            E,
                            k,
                            T,
                            C;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      Ye.debug("joinRoom()"),
                                      (e.prev = 1),
                                      (o =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "Loading Router Capabilities",
                                              span: this._joinSpan,
                                            })),
                                      (this._mediasoupDevice = new u.Device({
                                        handlerName: this._handlerName,
                                      })),
                                      (e.next = 6),
                                      this._protoo.request(
                                        "getRouterRtpCapabilities"
                                      )
                                    );
                                  case 6:
                                    return (
                                      (c = e.sent),
                                      (e.next = 9),
                                      this._mediasoupDevice.load({
                                        routerRtpCapabilities: c,
                                      })
                                    );
                                  case 9:
                                    if (
                                      (null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.completeSpan({
                                          span: o,
                                          status: 1,
                                          attributes: {
                                            routerRtpCapabilities:
                                              JSON.stringify(c).toString(),
                                          },
                                          message: "Router Capabilities Loaded",
                                        }),
                                      !this._produce)
                                    ) {
                                      e.next = 15;
                                      break;
                                    }
                                    return (
                                      (e.next = 13),
                                      this._protoo.request(
                                        "createWebRtcTransport",
                                        {
                                          preferredProtocol:
                                            this._preferredProtocol,
                                          producing: !0,
                                          consuming: !1,
                                          sctpCapabilities: this._useDataChannel
                                            ? this._mediasoupDevice
                                                .sctpCapabilities
                                            : void 0,
                                        }
                                      )
                                    );
                                  case 13:
                                    (d = e.sent),
                                      this.createProducerTransport(
                                        d,
                                        this._joinSpan
                                      );
                                  case 15:
                                    if (!this._consume) {
                                      e.next = 20;
                                      break;
                                    }
                                    return (
                                      (e.next = 18),
                                      this._protoo.request(
                                        "createWebRtcTransport",
                                        {
                                          preferredProtocol:
                                            this._preferredProtocol,
                                          producing: !1,
                                          consuming: !0,
                                          sctpCapabilities: this._useDataChannel
                                            ? this._mediasoupDevice
                                                .sctpCapabilities
                                            : void 0,
                                        }
                                      )
                                    );
                                  case 18:
                                    (p = e.sent),
                                      this.createConsumerTransport(
                                        p,
                                        this._joinSpan
                                      );
                                  case 20:
                                    return (
                                      (e.next = 22),
                                      this._protoo.request("join", {
                                        displayName: this._displayName,
                                        device: this._device,
                                        secret: this._secret,
                                        rtpCapabilities:
                                          null ===
                                            (a = this._mediasoupDevice) ||
                                          void 0 === a
                                            ? void 0
                                            : a.rtpCapabilities,
                                        sctpCapabilities:
                                          null ===
                                            (n = this._mediasoupDevice) ||
                                          void 0 === n
                                            ? void 0
                                            : n.sctpCapabilities,
                                        deviceInfo: this._deviceInfo,
                                        debugMode: this._debugMode,
                                        autoConsume: this._autoConsume,
                                        metaData: this._metaData,
                                      })
                                    );
                                  case 22:
                                    (h = e.sent),
                                      (m = h.peers),
                                      (f = h.poll),
                                      (g = h.messages),
                                      Ve.dispatch(x("connected")),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.traceAutoComplete({
                                          spanName:
                                            "Emitted `MEETING_JOINED` Event",
                                          span: this._joinSpan,
                                          status: 1,
                                        }),
                                      this._eventEmitter.emit(
                                        "MEETING_JOINED",
                                        {
                                          peers: m,
                                          poll: f,
                                          messages: g,
                                          baseUrl: this._baseUrl,
                                        }
                                      ),
                                      Ve.dispatch({
                                        type: "REMOVE_ALL_NOTIFICATIONS",
                                      }),
                                      Ve.dispatch(
                                        ie({
                                          text: "You are in the room!",
                                          timeout: 3e3,
                                        })
                                      ),
                                      (_ = Ue(m));
                                    try {
                                      for (_.s(); !(v = _.n()).done; )
                                        (b = v.value),
                                          (y = $(
                                            He(
                                              He({}, b),
                                              {},
                                              {
                                                consumers: [],
                                                dataConsumers: [],
                                              }
                                            )
                                          )),
                                          Ve.dispatch(y),
                                          this._eventEmitter.emit(
                                            y.type,
                                            y.payload
                                          );
                                    } catch (e) {
                                      _.e(e);
                                    } finally {
                                      _.f();
                                    }
                                    this._produce &&
                                      (Ve.dispatch(
                                        A({
                                          canSendMic:
                                            this._mediasoupDevice.canProduce(
                                              "audio"
                                            ),
                                          canSendWebcam:
                                            this._mediasoupDevice.canProduce(
                                              "video"
                                            ),
                                        })
                                      ),
                                      this._micEnabled
                                        ? this.enableMic(
                                            this.customMicrophoneAudioTrack,
                                            this._joinSpan
                                          )
                                        : this.customMicrophoneAudioTrack &&
                                          (null === (w = this._openTelemetry) ||
                                            void 0 === w ||
                                            w.traceAutoComplete({
                                              spanName: "Disposing Audio Track",
                                              span: this._joinSpan,
                                              status: 2,
                                            }),
                                          this.customMicrophoneAudioTrack
                                            .getTracks()
                                            .forEach(function (e) {
                                              e.stop();
                                            })),
                                      (S = P()),
                                      this._webcamEnabled &&
                                      (!S ||
                                        S.webcamEnabled ||
                                        this._externalVideo)
                                        ? this.enableWebcam(
                                            this.customCameraVideoTrack,
                                            this._joinSpan
                                          )
                                        : this.customCameraVideoTrack &&
                                          (null === (R = this._openTelemetry) ||
                                            void 0 === R ||
                                            R.traceAutoComplete({
                                              spanName: "Disposing Video Track",
                                              span: this._joinSpan,
                                              status: 2,
                                            }),
                                          this.customCameraVideoTrack
                                            .getTracks()
                                            .forEach(function (e) {
                                              e.stop();
                                            })),
                                      this.enableChatDataProducer()),
                                      window.SHOW_INFO &&
                                        ((E = Ve.getState()),
                                        (k = E.me),
                                        Ve.dispatch(M(k.id))),
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: this._joinSpan,
                                          status: 1,
                                          message: "Room Joined",
                                        }),
                                      (e.next = 45);
                                    break;
                                  case 38:
                                    (e.prev = 38),
                                      (e.t0 = e.catch(1)),
                                      Ye.error("joinRoom() failed:%o", e.t0),
                                      null === (T = this._videosdkLogs) ||
                                        void 0 === T ||
                                        T.pushLogs({
                                          logText:
                                            "Error Could not join the room",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      null === (C = this._openTelemetry) ||
                                        void 0 === C ||
                                        C.completeSpan({
                                          span: this._joinSpan,
                                          status: 2,
                                          message:
                                            "Could not join the room ".concat(
                                              e.t0
                                            ),
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Could not join the room: ".concat(
                                            e.t0
                                          ),
                                        })
                                      ),
                                      this.close({ sendLeft: !0 });
                                  case 45:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[1, 38]]
                          );
                        })
                      )),
                      function () {
                        return m.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_updateMics",
                    value:
                      ((h = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r,
                            a,
                            n,
                            s,
                            i,
                            o,
                            c,
                            d,
                            p,
                            u,
                            h,
                            m,
                            f,
                            g,
                            _ = arguments;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r =
                                        _.length > 0 && void 0 !== _[0]
                                          ? _[0]
                                          : void 0),
                                      (this._mics = new Map()),
                                      Ye.debug("_updateMics() |"),
                                      (a =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "_updateMics() Calling for Getting System Mic list",
                                              span: r || null,
                                            })),
                                      (e.prev = 4),
                                      (e.next = 7),
                                      navigator.mediaDevices.enumerateDevices()
                                    );
                                  case 7:
                                    (i = e.sent),
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.traceAutoComplete({
                                          spanName: "Getting System Mic list",
                                          span: a,
                                          status: 1,
                                          attributes: {
                                            systemDevice: i
                                              ? JSON.stringify(i)
                                              : "Device not found",
                                          },
                                        }),
                                      (o = Ue(i));
                                    try {
                                      for (o.s(); !(c = o.n()).done; )
                                        "audioinput" == (d = c.value).kind &&
                                          this._mics.set(d.deviceId, d);
                                    } catch (e) {
                                      o.e(e);
                                    } finally {
                                      o.f();
                                    }
                                    (p = Array.from(this._mics.values())),
                                      (u = p.length),
                                      (h = this._mic.device
                                        ? this._mic.device.deviceId
                                        : void 0),
                                      0 === u
                                        ? (this._mic.device = null)
                                        : this._mics.has(h) ||
                                          (this._mic.device = p[0]),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: a,
                                          status: 1,
                                          message: "Update Mic",
                                        }),
                                      (e.next = 30);
                                    break;
                                  case 18:
                                    if (
                                      ((e.prev = 18),
                                      (e.t0 = e.catch(4)),
                                      !(e.t0 instanceof TypeError))
                                    ) {
                                      e.next = 30;
                                      break;
                                    }
                                    if ("TypeError" !== e.t0.name) {
                                      e.next = 28;
                                      break;
                                    }
                                    throw (
                                      ((f =
                                        ke.q
                                          .ERROR_MICROPHONE_ACCESS_UNAVAILABLE),
                                      this._emitError(f),
                                      null === (m = this._openTelemetry) ||
                                        void 0 === m ||
                                        m.completeSpan({
                                          span: a,
                                          status: 2,
                                          message:
                                            "Error in updateMics() :: ".concat(
                                              f.message
                                            ),
                                        }),
                                      new Error(f.message))
                                    );
                                  case 28:
                                    throw (
                                      (null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          span: a,
                                          status: 2,
                                          message:
                                            "Error in updateMics() :: ".concat(
                                              e.t0.message
                                            ),
                                        }),
                                      new Error(e.t0.message))
                                    );
                                  case 30:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[4, 18]]
                          );
                        })
                      )),
                      function () {
                        return h.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_updateWebcams",
                    value:
                      ((d = (0, s.A)(
                        l().mark(function e() {
                          var t,
                            r,
                            a,
                            n,
                            s,
                            i,
                            o,
                            c,
                            d,
                            p,
                            u,
                            h,
                            m,
                            f,
                            g,
                            _ = arguments;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r =
                                        _.length > 0 && void 0 !== _[0]
                                          ? _[0]
                                          : void 0),
                                      Ye.debug("_updateWebcams()"),
                                      (this._webcams = new Map()),
                                      Ye.debug(
                                        "_updateWebcams() | calling enumerateDevices()"
                                      ),
                                      (a =
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "_updateWebcams() Calling for Getting System Webcam list",
                                              span: r || null,
                                            })),
                                      (e.prev = 5),
                                      (e.next = 8),
                                      navigator.mediaDevices.enumerateDevices()
                                    );
                                  case 8:
                                    (i = e.sent),
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.traceAutoComplete({
                                          spanName:
                                            "Getting System Webcam list",
                                          span: a,
                                          status: 1,
                                          attributes: {
                                            systemDevice: i
                                              ? JSON.stringify(i)
                                              : "Device not found",
                                          },
                                        }),
                                      (o = Ue(i)),
                                      (e.prev = 11),
                                      o.s();
                                  case 13:
                                    if ((c = o.n()).done) {
                                      e.next = 20;
                                      break;
                                    }
                                    if ("videoinput" === (d = c.value).kind) {
                                      e.next = 17;
                                      break;
                                    }
                                    return e.abrupt("continue", 18);
                                  case 17:
                                    this._webcams.set(d.deviceId, d);
                                  case 18:
                                    e.next = 13;
                                    break;
                                  case 20:
                                    e.next = 25;
                                    break;
                                  case 22:
                                    (e.prev = 22),
                                      (e.t0 = e.catch(11)),
                                      o.e(e.t0);
                                  case 25:
                                    return (e.prev = 25), o.f(), e.finish(25);
                                  case 28:
                                    (p = Array.from(this._webcams.values())),
                                      (u = p.length),
                                      (h = this._webcam.device
                                        ? this._webcam.device.deviceId
                                        : void 0) &&
                                        (this._defaultCameraIndex = h),
                                      Ye.debug(
                                        "_updateWebcams() [webcams:%o]",
                                        p
                                      ),
                                      0 === u
                                        ? (this._webcam.device = null)
                                        : this._webcams.has(h) ||
                                          (this._webcam.device =
                                            p[this._defaultCameraIndex]),
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: a,
                                          status: 1,
                                          message: "Update Webcam",
                                        }),
                                      Ve.dispatch({
                                        type: "SET_CAN_CHANGE_WEBCAM",
                                        payload: this._webcams.size > 1,
                                      }),
                                      (e.next = 50);
                                    break;
                                  case 38:
                                    if (
                                      ((e.prev = 38),
                                      (e.t1 = e.catch(5)),
                                      !(e.t1 instanceof TypeError))
                                    ) {
                                      e.next = 50;
                                      break;
                                    }
                                    if ("TypeError" !== e.t1.name) {
                                      e.next = 48;
                                      break;
                                    }
                                    throw (
                                      ((f =
                                        ke.q.ERROR_CAMERA_ACCESS_UNAVAILABLE),
                                      this._emitError(f),
                                      null === (m = this._openTelemetry) ||
                                        void 0 === m ||
                                        m.completeSpan({
                                          span: a,
                                          status: 2,
                                          message:
                                            "Error in updateWebcams() :: ".concat(
                                              f.message
                                            ),
                                        }),
                                      new Error(f.message))
                                    );
                                  case 48:
                                    throw (
                                      (null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          span: a,
                                          status: 2,
                                          message:
                                            "Error in updateWebcams() :: ".concat(
                                              e.t1.message
                                            ),
                                        }),
                                      new Error(e.t1.message))
                                    );
                                  case 50:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [
                              [5, 38],
                              [11, 22, 25, 28],
                            ]
                          );
                        })
                      )),
                      function () {
                        return d.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_getWebcamType",
                    value: function (e) {
                      return /(back|rear)/i.test(e.label)
                        ? (Ye.debug(
                            "_getWebcamType() | it seems to be a back camera"
                          ),
                          "back")
                        : (Ye.debug(
                            "_getWebcamType() | it seems to be a front camera"
                          ),
                          "front");
                    },
                  },
                  {
                    key: "_pauseConsumer",
                    value:
                      ((r = (0, s.A)(
                        l().mark(function e(t) {
                          var r;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!t.paused) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("pauseConsumer", {
                                        consumerId: t.id,
                                      })
                                    );
                                  case 5:
                                    t.pause(),
                                      Ve.dispatch(X(t.id, "local")),
                                      (e.next = 14);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(2)),
                                      Ye.error(
                                        "_pauseConsumer() | failed:%o",
                                        e.t0
                                      ),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: "Error pausing Consumer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error pausing Consumer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 9]]
                          );
                        })
                      )),
                      function (e) {
                        return r.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_resumeConsumer",
                    value:
                      ((t = (0, s.A)(
                        l().mark(function e(t) {
                          var r;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (t.paused) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return");
                                  case 2:
                                    return (
                                      (e.prev = 2),
                                      (e.next = 5),
                                      this._protoo.request("resumeConsumer", {
                                        consumerId: t.id,
                                      })
                                    );
                                  case 5:
                                    t.resume(),
                                      Ve.dispatch(Z(t.id, "local")),
                                      (e.next = 14);
                                    break;
                                  case 9:
                                    (e.prev = 9),
                                      (e.t0 = e.catch(2)),
                                      Ye.error(
                                        "_resumeConsumer() | failed:%o",
                                        e.t0
                                      ),
                                      null === (r = this._videosdkLogs) ||
                                        void 0 === r ||
                                        r.pushLogs({
                                          logText: "Error resuming Consumer",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        }),
                                      Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Error resuming Consumer: ".concat(
                                            e.t0
                                          ),
                                        })
                                      );
                                  case 14:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[2, 9]]
                          );
                        })
                      )),
                      function (e) {
                        return t.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_getExternalVideoStream",
                    value:
                      ((e = (0, s.A)(
                        l().mark(function e() {
                          var t = this;
                          return l().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._externalVideoStream) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt(
                                      "return",
                                      this._externalVideoStream
                                    );
                                  case 2:
                                    if (!(this._externalVideo.readyState < 3)) {
                                      e.next = 5;
                                      break;
                                    }
                                    return (
                                      (e.next = 5),
                                      new Promise(function (e) {
                                        return t._externalVideo.addEventListener(
                                          "canplay",
                                          e
                                        );
                                      })
                                    );
                                  case 5:
                                    if (!this._externalVideo.captureStream) {
                                      e.next = 9;
                                      break;
                                    }
                                    (this._externalVideoStream =
                                      this._externalVideo.captureStream()),
                                      (e.next = 14);
                                    break;
                                  case 9:
                                    if (!this._externalVideo.mozCaptureStream) {
                                      e.next = 13;
                                      break;
                                    }
                                    (this._externalVideoStream =
                                      this._externalVideo.mozCaptureStream()),
                                      (e.next = 14);
                                    break;
                                  case 13:
                                    throw new Error(
                                      "video.captureStream() not supported"
                                    );
                                  case 14:
                                    return e.abrupt(
                                      "return",
                                      this._externalVideoStream
                                    );
                                  case 15:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return e.apply(this, arguments);
                      }),
                  },
                  {
                    key: "_emitError",
                    value: function (e) {
                      this._eventEmitter.emit("ERROR", e);
                    },
                  },
                ],
                [
                  {
                    key: "init",
                    value: function (e) {
                      Ve = e.store;
                    },
                  },
                ]
              );
              var e,
                t,
                r,
                d,
                h,
                m,
                f,
                g,
                _,
                v,
                b,
                w,
                S,
                R,
                E,
                k,
                T,
                O,
                D,
                de,
                le,
                pe,
                ue,
                he,
                me,
                fe,
                ge,
                _e,
                ve,
                be,
                ye,
                Se,
                Re,
                Oe,
                De,
                xe,
                Ie,
                Me,
                Ae,
                Ne,
                je,
                We,
                qe,
                Xe,
                Ze,
                et,
                tt,
                rt,
                at,
                nt,
                st,
                it,
                ot,
                ct,
                dt,
                lt,
                pt,
                ut,
                ht,
                mt,
                ft,
                gt,
                _t,
                vt,
                bt,
                yt,
                wt,
                St,
                Rt,
                Et,
                kt,
                Tt,
                Ct,
                Pt,
                Ot,
                Dt,
                xt,
                It,
                Mt,
                At,
                Lt,
                Nt,
                jt,
                Bt,
                Ft,
                Ut,
                Wt,
                qt,
                Ht,
                Vt,
                Gt,
                zt,
                $t,
                Kt,
                Jt,
                Qt,
                Yt,
                Xt,
                Zt,
                er,
                tr,
                rr,
                ar,
                nr,
                sr,
                ir;
            })();
        },
        4973: (e, t, r) => {
          "use strict";
          r.d(t, { Zu: () => o, lp: () => i });
          var a = r(467),
            n = r(4756),
            s = r.n(n),
            i =
              (r(9027),
              (function () {
                var e = (0, a.A)(
                  s().mark(function e(t) {
                    return s().wrap(function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            return (
                              void 0 === navigator.mediaDevices &&
                                (navigator.mediaDevices = {}),
                              void 0 === navigator.mediaDevices.getUserMedia &&
                                (navigator.mediaDevices.getUserMedia =
                                  function (e) {
                                    var t =
                                      navigator.webkitGetUserMedia ||
                                      navigator.mozGetUserMedia;
                                    return t
                                      ? new Promise(function (r, a) {
                                          t.call(navigator, e, r, a);
                                        })
                                      : Promise.reject(
                                          new Error(
                                            "getUserMedia is not implemented in this browser"
                                          )
                                        );
                                  }),
                              (e.next = 4),
                              navigator.mediaDevices.getUserMedia(t)
                            );
                          case 4:
                            return e.abrupt("return", e.sent);
                          case 5:
                          case "end":
                            return e.stop();
                        }
                    }, e);
                  })
                );
                return function (t) {
                  return e.apply(this, arguments);
                };
              })()),
            o = (function () {
              var e = (0, a.A)(
                s().mark(function e(t) {
                  return s().wrap(function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            void 0 === navigator.mediaDevices &&
                              (navigator.mediaDevices = {}),
                            void 0 === navigator.mediaDevices.getDisplayMedia &&
                              (navigator.mediaDevices.getDisplayMedia =
                                function (e) {
                                  var t =
                                    navigator.webkitGetDisplayMedia ||
                                    navigator.mozGetDisplayMedia;
                                  return t
                                    ? new Promise(function (r, a) {
                                        t.call(navigator, e, r, a);
                                      })
                                    : Promise.reject(
                                        new Error(
                                          "getDisplayMedia is not implemented in this browser"
                                        )
                                      );
                                }),
                            (e.next = 4),
                            navigator.mediaDevices.getDisplayMedia(t)
                          );
                        case 4:
                          return e.abrupt("return", e.sent);
                        case 5:
                        case "end":
                          return e.stop();
                      }
                  }, e);
                })
              );
              return function (t) {
                return e.apply(this, arguments);
              };
            })();
        },
        6880: function (e) {
          e.exports = (function (e) {
            var t = {};
            function r(a) {
              if (t[a]) return t[a].exports;
              var n = (t[a] = { i: a, l: !1, exports: {} });
              return (
                e[a].call(n.exports, n, n.exports, r), (n.l = !0), n.exports
              );
            }
            return (
              (r.m = e),
              (r.c = t),
              (r.d = function (e, t, a) {
                r.o(e, t) ||
                  Object.defineProperty(e, t, { enumerable: !0, get: a });
              }),
              (r.r = function (e) {
                "undefined" != typeof Symbol &&
                  Symbol.toStringTag &&
                  Object.defineProperty(e, Symbol.toStringTag, {
                    value: "Module",
                  }),
                  Object.defineProperty(e, "__esModule", { value: !0 });
              }),
              (r.t = function (e, t) {
                if ((1 & t && (e = r(e)), 8 & t)) return e;
                if (4 & t && "object" == typeof e && e && e.__esModule)
                  return e;
                var a = Object.create(null);
                if (
                  (r.r(a),
                  Object.defineProperty(a, "default", {
                    enumerable: !0,
                    value: e,
                  }),
                  2 & t && "string" != typeof e)
                )
                  for (var n in e)
                    r.d(
                      a,
                      n,
                      function (t) {
                        return e[t];
                      }.bind(null, n)
                    );
                return a;
              }),
              (r.n = function (e) {
                var t =
                  e && e.__esModule
                    ? function () {
                        return e.default;
                      }
                    : function () {
                        return e;
                      };
                return r.d(t, "a", t), t;
              }),
              (r.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
              }),
              (r.p = ""),
              r((r.s = 90))
            );
          })({
            17: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var a = r(18),
                n = (function () {
                  function e() {}
                  return (
                    (e.getFirstMatch = function (e, t) {
                      var r = t.match(e);
                      return (r && r.length > 0 && r[1]) || "";
                    }),
                    (e.getSecondMatch = function (e, t) {
                      var r = t.match(e);
                      return (r && r.length > 1 && r[2]) || "";
                    }),
                    (e.matchAndReturnConst = function (e, t, r) {
                      if (e.test(t)) return r;
                    }),
                    (e.getWindowsVersionName = function (e) {
                      switch (e) {
                        case "NT":
                          return "NT";
                        case "XP":
                        case "NT 5.1":
                          return "XP";
                        case "NT 5.0":
                          return "2000";
                        case "NT 5.2":
                          return "2003";
                        case "NT 6.0":
                          return "Vista";
                        case "NT 6.1":
                          return "7";
                        case "NT 6.2":
                          return "8";
                        case "NT 6.3":
                          return "8.1";
                        case "NT 10.0":
                          return "10";
                        default:
                          return;
                      }
                    }),
                    (e.getMacOSVersionName = function (e) {
                      var t = e
                        .split(".")
                        .splice(0, 2)
                        .map(function (e) {
                          return parseInt(e, 10) || 0;
                        });
                      if ((t.push(0), 10 === t[0]))
                        switch (t[1]) {
                          case 5:
                            return "Leopard";
                          case 6:
                            return "Snow Leopard";
                          case 7:
                            return "Lion";
                          case 8:
                            return "Mountain Lion";
                          case 9:
                            return "Mavericks";
                          case 10:
                            return "Yosemite";
                          case 11:
                            return "El Capitan";
                          case 12:
                            return "Sierra";
                          case 13:
                            return "High Sierra";
                          case 14:
                            return "Mojave";
                          case 15:
                            return "Catalina";
                          default:
                            return;
                        }
                    }),
                    (e.getAndroidVersionName = function (e) {
                      var t = e
                        .split(".")
                        .splice(0, 2)
                        .map(function (e) {
                          return parseInt(e, 10) || 0;
                        });
                      if ((t.push(0), !(1 === t[0] && t[1] < 5)))
                        return 1 === t[0] && t[1] < 6
                          ? "Cupcake"
                          : 1 === t[0] && t[1] >= 6
                          ? "Donut"
                          : 2 === t[0] && t[1] < 2
                          ? "Eclair"
                          : 2 === t[0] && 2 === t[1]
                          ? "Froyo"
                          : 2 === t[0] && t[1] > 2
                          ? "Gingerbread"
                          : 3 === t[0]
                          ? "Honeycomb"
                          : 4 === t[0] && t[1] < 1
                          ? "Ice Cream Sandwich"
                          : 4 === t[0] && t[1] < 4
                          ? "Jelly Bean"
                          : 4 === t[0] && t[1] >= 4
                          ? "KitKat"
                          : 5 === t[0]
                          ? "Lollipop"
                          : 6 === t[0]
                          ? "Marshmallow"
                          : 7 === t[0]
                          ? "Nougat"
                          : 8 === t[0]
                          ? "Oreo"
                          : 9 === t[0]
                          ? "Pie"
                          : void 0;
                    }),
                    (e.getVersionPrecision = function (e) {
                      return e.split(".").length;
                    }),
                    (e.compareVersions = function (t, r, a) {
                      void 0 === a && (a = !1);
                      var n = e.getVersionPrecision(t),
                        s = e.getVersionPrecision(r),
                        i = Math.max(n, s),
                        o = 0,
                        c = e.map([t, r], function (t) {
                          var r = i - e.getVersionPrecision(t),
                            a = t + new Array(r + 1).join(".0");
                          return e
                            .map(a.split("."), function (e) {
                              return new Array(20 - e.length).join("0") + e;
                            })
                            .reverse();
                        });
                      for (a && (o = i - Math.min(n, s)), i -= 1; i >= o; ) {
                        if (c[0][i] > c[1][i]) return 1;
                        if (c[0][i] === c[1][i]) {
                          if (i === o) return 0;
                          i -= 1;
                        } else if (c[0][i] < c[1][i]) return -1;
                      }
                    }),
                    (e.map = function (e, t) {
                      var r,
                        a = [];
                      if (Array.prototype.map)
                        return Array.prototype.map.call(e, t);
                      for (r = 0; r < e.length; r += 1) a.push(t(e[r]));
                      return a;
                    }),
                    (e.find = function (e, t) {
                      var r, a;
                      if (Array.prototype.find)
                        return Array.prototype.find.call(e, t);
                      for (r = 0, a = e.length; r < a; r += 1) {
                        var n = e[r];
                        if (t(n, r)) return n;
                      }
                    }),
                    (e.assign = function (e) {
                      for (
                        var t,
                          r,
                          a = e,
                          n = arguments.length,
                          s = new Array(n > 1 ? n - 1 : 0),
                          i = 1;
                        i < n;
                        i++
                      )
                        s[i - 1] = arguments[i];
                      if (Object.assign)
                        return Object.assign.apply(Object, [e].concat(s));
                      var o = function () {
                        var e = s[t];
                        "object" == typeof e &&
                          null !== e &&
                          Object.keys(e).forEach(function (t) {
                            a[t] = e[t];
                          });
                      };
                      for (t = 0, r = s.length; t < r; t += 1) o();
                      return e;
                    }),
                    (e.getBrowserAlias = function (e) {
                      return a.BROWSER_ALIASES_MAP[e];
                    }),
                    (e.getBrowserTypeByAlias = function (e) {
                      return a.BROWSER_MAP[e] || "";
                    }),
                    e
                  );
                })();
              (t.default = n), (e.exports = t.default);
            },
            18: function (e, t, r) {
              "use strict";
              (t.__esModule = !0),
                (t.ENGINE_MAP =
                  t.OS_MAP =
                  t.PLATFORMS_MAP =
                  t.BROWSER_MAP =
                  t.BROWSER_ALIASES_MAP =
                    void 0),
                (t.BROWSER_ALIASES_MAP = {
                  "Amazon Silk": "amazon_silk",
                  "Android Browser": "android",
                  Bada: "bada",
                  BlackBerry: "blackberry",
                  Chrome: "chrome",
                  Chromium: "chromium",
                  Electron: "electron",
                  Epiphany: "epiphany",
                  Firefox: "firefox",
                  Focus: "focus",
                  Generic: "generic",
                  "Google Search": "google_search",
                  Googlebot: "googlebot",
                  "Internet Explorer": "ie",
                  "K-Meleon": "k_meleon",
                  Maxthon: "maxthon",
                  "Microsoft Edge": "edge",
                  "MZ Browser": "mz",
                  "NAVER Whale Browser": "naver",
                  Opera: "opera",
                  "Opera Coast": "opera_coast",
                  PhantomJS: "phantomjs",
                  Puffin: "puffin",
                  QupZilla: "qupzilla",
                  QQ: "qq",
                  QQLite: "qqlite",
                  Safari: "safari",
                  Sailfish: "sailfish",
                  "Samsung Internet for Android": "samsung_internet",
                  SeaMonkey: "seamonkey",
                  Sleipnir: "sleipnir",
                  Swing: "swing",
                  Tizen: "tizen",
                  "UC Browser": "uc",
                  Vivaldi: "vivaldi",
                  "WebOS Browser": "webos",
                  WeChat: "wechat",
                  "Yandex Browser": "yandex",
                  Roku: "roku",
                }),
                (t.BROWSER_MAP = {
                  amazon_silk: "Amazon Silk",
                  android: "Android Browser",
                  bada: "Bada",
                  blackberry: "BlackBerry",
                  chrome: "Chrome",
                  chromium: "Chromium",
                  electron: "Electron",
                  epiphany: "Epiphany",
                  firefox: "Firefox",
                  focus: "Focus",
                  generic: "Generic",
                  googlebot: "Googlebot",
                  google_search: "Google Search",
                  ie: "Internet Explorer",
                  k_meleon: "K-Meleon",
                  maxthon: "Maxthon",
                  edge: "Microsoft Edge",
                  mz: "MZ Browser",
                  naver: "NAVER Whale Browser",
                  opera: "Opera",
                  opera_coast: "Opera Coast",
                  phantomjs: "PhantomJS",
                  puffin: "Puffin",
                  qupzilla: "QupZilla",
                  qq: "QQ Browser",
                  qqlite: "QQ Browser Lite",
                  safari: "Safari",
                  sailfish: "Sailfish",
                  samsung_internet: "Samsung Internet for Android",
                  seamonkey: "SeaMonkey",
                  sleipnir: "Sleipnir",
                  swing: "Swing",
                  tizen: "Tizen",
                  uc: "UC Browser",
                  vivaldi: "Vivaldi",
                  webos: "WebOS Browser",
                  wechat: "WeChat",
                  yandex: "Yandex Browser",
                }),
                (t.PLATFORMS_MAP = {
                  tablet: "tablet",
                  mobile: "mobile",
                  desktop: "desktop",
                  tv: "tv",
                }),
                (t.OS_MAP = {
                  WindowsPhone: "Windows Phone",
                  Windows: "Windows",
                  MacOS: "macOS",
                  iOS: "iOS",
                  Android: "Android",
                  WebOS: "WebOS",
                  BlackBerry: "BlackBerry",
                  Bada: "Bada",
                  Tizen: "Tizen",
                  Linux: "Linux",
                  ChromeOS: "Chrome OS",
                  PlayStation4: "PlayStation 4",
                  Roku: "Roku",
                }),
                (t.ENGINE_MAP = {
                  EdgeHTML: "EdgeHTML",
                  Blink: "Blink",
                  Trident: "Trident",
                  Presto: "Presto",
                  Gecko: "Gecko",
                  WebKit: "WebKit",
                });
            },
            90: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var a,
                n = (a = r(91)) && a.__esModule ? a : { default: a },
                s = r(18);
              function i(e, t) {
                for (var r = 0; r < t.length; r++) {
                  var a = t[r];
                  (a.enumerable = a.enumerable || !1),
                    (a.configurable = !0),
                    "value" in a && (a.writable = !0),
                    Object.defineProperty(e, a.key, a);
                }
              }
              var o = (function () {
                function e() {}
                var t, r, a;
                return (
                  (e.getParser = function (e, t) {
                    if ((void 0 === t && (t = !1), "string" != typeof e))
                      throw new Error("UserAgent should be a string");
                    return new n.default(e, t);
                  }),
                  (e.parse = function (e) {
                    return new n.default(e).getResult();
                  }),
                  (t = e),
                  (a = [
                    {
                      key: "BROWSER_MAP",
                      get: function () {
                        return s.BROWSER_MAP;
                      },
                    },
                    {
                      key: "ENGINE_MAP",
                      get: function () {
                        return s.ENGINE_MAP;
                      },
                    },
                    {
                      key: "OS_MAP",
                      get: function () {
                        return s.OS_MAP;
                      },
                    },
                    {
                      key: "PLATFORMS_MAP",
                      get: function () {
                        return s.PLATFORMS_MAP;
                      },
                    },
                  ]),
                  (r = null) && i(t.prototype, r),
                  a && i(t, a),
                  e
                );
              })();
              (t.default = o), (e.exports = t.default);
            },
            91: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var a = c(r(92)),
                n = c(r(93)),
                s = c(r(94)),
                i = c(r(95)),
                o = c(r(17));
              function c(e) {
                return e && e.__esModule ? e : { default: e };
              }
              var d = (function () {
                function e(e, t) {
                  if ((void 0 === t && (t = !1), null == e || "" === e))
                    throw new Error("UserAgent parameter can't be empty");
                  (this._ua = e),
                    (this.parsedResult = {}),
                    !0 !== t && this.parse();
                }
                var t = e.prototype;
                return (
                  (t.getUA = function () {
                    return this._ua;
                  }),
                  (t.test = function (e) {
                    return e.test(this._ua);
                  }),
                  (t.parseBrowser = function () {
                    var e = this;
                    this.parsedResult.browser = {};
                    var t = o.default.find(a.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t &&
                        (this.parsedResult.browser = t.describe(this.getUA())),
                      this.parsedResult.browser
                    );
                  }),
                  (t.getBrowser = function () {
                    return this.parsedResult.browser
                      ? this.parsedResult.browser
                      : this.parseBrowser();
                  }),
                  (t.getBrowserName = function (e) {
                    return e
                      ? String(this.getBrowser().name).toLowerCase() || ""
                      : this.getBrowser().name || "";
                  }),
                  (t.getBrowserVersion = function () {
                    return this.getBrowser().version;
                  }),
                  (t.getOS = function () {
                    return this.parsedResult.os
                      ? this.parsedResult.os
                      : this.parseOS();
                  }),
                  (t.parseOS = function () {
                    var e = this;
                    this.parsedResult.os = {};
                    var t = o.default.find(n.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t && (this.parsedResult.os = t.describe(this.getUA())),
                      this.parsedResult.os
                    );
                  }),
                  (t.getOSName = function (e) {
                    var t = this.getOS().name;
                    return e ? String(t).toLowerCase() || "" : t || "";
                  }),
                  (t.getOSVersion = function () {
                    return this.getOS().version;
                  }),
                  (t.getPlatform = function () {
                    return this.parsedResult.platform
                      ? this.parsedResult.platform
                      : this.parsePlatform();
                  }),
                  (t.getPlatformType = function (e) {
                    void 0 === e && (e = !1);
                    var t = this.getPlatform().type;
                    return e ? String(t).toLowerCase() || "" : t || "";
                  }),
                  (t.parsePlatform = function () {
                    var e = this;
                    this.parsedResult.platform = {};
                    var t = o.default.find(s.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t &&
                        (this.parsedResult.platform = t.describe(this.getUA())),
                      this.parsedResult.platform
                    );
                  }),
                  (t.getEngine = function () {
                    return this.parsedResult.engine
                      ? this.parsedResult.engine
                      : this.parseEngine();
                  }),
                  (t.getEngineName = function (e) {
                    return e
                      ? String(this.getEngine().name).toLowerCase() || ""
                      : this.getEngine().name || "";
                  }),
                  (t.parseEngine = function () {
                    var e = this;
                    this.parsedResult.engine = {};
                    var t = o.default.find(i.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t &&
                        (this.parsedResult.engine = t.describe(this.getUA())),
                      this.parsedResult.engine
                    );
                  }),
                  (t.parse = function () {
                    return (
                      this.parseBrowser(),
                      this.parseOS(),
                      this.parsePlatform(),
                      this.parseEngine(),
                      this
                    );
                  }),
                  (t.getResult = function () {
                    return o.default.assign({}, this.parsedResult);
                  }),
                  (t.satisfies = function (e) {
                    var t = this,
                      r = {},
                      a = 0,
                      n = {},
                      s = 0;
                    if (
                      (Object.keys(e).forEach(function (t) {
                        var i = e[t];
                        "string" == typeof i
                          ? ((n[t] = i), (s += 1))
                          : "object" == typeof i && ((r[t] = i), (a += 1));
                      }),
                      a > 0)
                    ) {
                      var i = Object.keys(r),
                        c = o.default.find(i, function (e) {
                          return t.isOS(e);
                        });
                      if (c) {
                        var d = this.satisfies(r[c]);
                        if (void 0 !== d) return d;
                      }
                      var l = o.default.find(i, function (e) {
                        return t.isPlatform(e);
                      });
                      if (l) {
                        var p = this.satisfies(r[l]);
                        if (void 0 !== p) return p;
                      }
                    }
                    if (s > 0) {
                      var u = Object.keys(n),
                        h = o.default.find(u, function (e) {
                          return t.isBrowser(e, !0);
                        });
                      if (void 0 !== h) return this.compareVersion(n[h]);
                    }
                  }),
                  (t.isBrowser = function (e, t) {
                    void 0 === t && (t = !1);
                    var r = this.getBrowserName().toLowerCase(),
                      a = e.toLowerCase(),
                      n = o.default.getBrowserTypeByAlias(a);
                    return t && n && (a = n.toLowerCase()), a === r;
                  }),
                  (t.compareVersion = function (e) {
                    var t = [0],
                      r = e,
                      a = !1,
                      n = this.getBrowserVersion();
                    if ("string" == typeof n)
                      return (
                        ">" === e[0] || "<" === e[0]
                          ? ((r = e.substr(1)),
                            "=" === e[1]
                              ? ((a = !0), (r = e.substr(2)))
                              : (t = []),
                            ">" === e[0] ? t.push(1) : t.push(-1))
                          : "=" === e[0]
                          ? (r = e.substr(1))
                          : "~" === e[0] && ((a = !0), (r = e.substr(1))),
                        t.indexOf(o.default.compareVersions(n, r, a)) > -1
                      );
                  }),
                  (t.isOS = function (e) {
                    return this.getOSName(!0) === String(e).toLowerCase();
                  }),
                  (t.isPlatform = function (e) {
                    return this.getPlatformType(!0) === String(e).toLowerCase();
                  }),
                  (t.isEngine = function (e) {
                    return this.getEngineName(!0) === String(e).toLowerCase();
                  }),
                  (t.is = function (e, t) {
                    return (
                      void 0 === t && (t = !1),
                      this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e)
                    );
                  }),
                  (t.some = function (e) {
                    var t = this;
                    return (
                      void 0 === e && (e = []),
                      e.some(function (e) {
                        return t.is(e);
                      })
                    );
                  }),
                  e
                );
              })();
              (t.default = d), (e.exports = t.default);
            },
            92: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var a,
                n = (a = r(17)) && a.__esModule ? a : { default: a },
                s = /version\/(\d+(\.?_?\d+)+)/i,
                i = [
                  {
                    test: [/googlebot/i],
                    describe: function (e) {
                      var t = { name: "Googlebot" },
                        r =
                          n.default.getFirstMatch(
                            /googlebot\/(\d+(\.\d+))/i,
                            e
                          ) || n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/opera/i],
                    describe: function (e) {
                      var t = { name: "Opera" },
                        r =
                          n.default.getFirstMatch(s, e) ||
                          n.default.getFirstMatch(
                            /(?:opera)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/opr\/|opios/i],
                    describe: function (e) {
                      var t = { name: "Opera" },
                        r =
                          n.default.getFirstMatch(
                            /(?:opr|opios)[\s/](\S+)/i,
                            e
                          ) || n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/SamsungBrowser/i],
                    describe: function (e) {
                      var t = { name: "Samsung Internet for Android" },
                        r =
                          n.default.getFirstMatch(s, e) ||
                          n.default.getFirstMatch(
                            /(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/Whale/i],
                    describe: function (e) {
                      var t = { name: "NAVER Whale Browser" },
                        r =
                          n.default.getFirstMatch(s, e) ||
                          n.default.getFirstMatch(
                            /(?:whale)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/MZBrowser/i],
                    describe: function (e) {
                      var t = { name: "MZ Browser" },
                        r =
                          n.default.getFirstMatch(
                            /(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          ) || n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/focus/i],
                    describe: function (e) {
                      var t = { name: "Focus" },
                        r =
                          n.default.getFirstMatch(
                            /(?:focus)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          ) || n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/swing/i],
                    describe: function (e) {
                      var t = { name: "Swing" },
                        r =
                          n.default.getFirstMatch(
                            /(?:swing)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          ) || n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/coast/i],
                    describe: function (e) {
                      var t = { name: "Opera Coast" },
                        r =
                          n.default.getFirstMatch(s, e) ||
                          n.default.getFirstMatch(
                            /(?:coast)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/opt\/\d+(?:.?_?\d+)+/i],
                    describe: function (e) {
                      var t = { name: "Opera Touch" },
                        r =
                          n.default.getFirstMatch(
                            /(?:opt)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/yabrowser/i],
                    describe: function (e) {
                      var t = { name: "Yandex Browser" },
                        r =
                          n.default.getFirstMatch(
                            /(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/ucbrowser/i],
                    describe: function (e) {
                      var t = { name: "UC Browser" },
                        r =
                          n.default.getFirstMatch(s, e) ||
                          n.default.getFirstMatch(
                            /(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/Maxthon|mxios/i],
                    describe: function (e) {
                      var t = { name: "Maxthon" },
                        r =
                          n.default.getFirstMatch(s, e) ||
                          n.default.getFirstMatch(
                            /(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/epiphany/i],
                    describe: function (e) {
                      var t = { name: "Epiphany" },
                        r =
                          n.default.getFirstMatch(s, e) ||
                          n.default.getFirstMatch(
                            /(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/puffin/i],
                    describe: function (e) {
                      var t = { name: "Puffin" },
                        r =
                          n.default.getFirstMatch(s, e) ||
                          n.default.getFirstMatch(
                            /(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/sleipnir/i],
                    describe: function (e) {
                      var t = { name: "Sleipnir" },
                        r =
                          n.default.getFirstMatch(s, e) ||
                          n.default.getFirstMatch(
                            /(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/k-meleon/i],
                    describe: function (e) {
                      var t = { name: "K-Meleon" },
                        r =
                          n.default.getFirstMatch(s, e) ||
                          n.default.getFirstMatch(
                            /(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/micromessenger/i],
                    describe: function (e) {
                      var t = { name: "WeChat" },
                        r =
                          n.default.getFirstMatch(
                            /(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/qqbrowser/i],
                    describe: function (e) {
                      var t = {
                          name: /qqbrowserlite/i.test(e)
                            ? "QQ Browser Lite"
                            : "QQ Browser",
                        },
                        r =
                          n.default.getFirstMatch(
                            /(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/msie|trident/i],
                    describe: function (e) {
                      var t = { name: "Internet Explorer" },
                        r = n.default.getFirstMatch(
                          /(?:msie |rv:)(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/\sedg\//i],
                    describe: function (e) {
                      var t = { name: "Microsoft Edge" },
                        r = n.default.getFirstMatch(
                          /\sedg\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/edg([ea]|ios)/i],
                    describe: function (e) {
                      var t = { name: "Microsoft Edge" },
                        r = n.default.getSecondMatch(
                          /edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/vivaldi/i],
                    describe: function (e) {
                      var t = { name: "Vivaldi" },
                        r = n.default.getFirstMatch(
                          /vivaldi\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/seamonkey/i],
                    describe: function (e) {
                      var t = { name: "SeaMonkey" },
                        r = n.default.getFirstMatch(
                          /seamonkey\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/sailfish/i],
                    describe: function (e) {
                      var t = { name: "Sailfish" },
                        r = n.default.getFirstMatch(
                          /sailfish\s?browser\/(\d+(\.\d+)?)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/silk/i],
                    describe: function (e) {
                      var t = { name: "Amazon Silk" },
                        r = n.default.getFirstMatch(
                          /silk\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/phantom/i],
                    describe: function (e) {
                      var t = { name: "PhantomJS" },
                        r = n.default.getFirstMatch(
                          /phantomjs\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/slimerjs/i],
                    describe: function (e) {
                      var t = { name: "SlimerJS" },
                        r = n.default.getFirstMatch(
                          /slimerjs\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function (e) {
                      var t = { name: "BlackBerry" },
                        r =
                          n.default.getFirstMatch(s, e) ||
                          n.default.getFirstMatch(
                            /blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function (e) {
                      var t = { name: "WebOS Browser" },
                        r =
                          n.default.getFirstMatch(s, e) ||
                          n.default.getFirstMatch(
                            /w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/bada/i],
                    describe: function (e) {
                      var t = { name: "Bada" },
                        r = n.default.getFirstMatch(
                          /dolfin\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/tizen/i],
                    describe: function (e) {
                      var t = { name: "Tizen" },
                        r =
                          n.default.getFirstMatch(
                            /(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,
                            e
                          ) || n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/qupzilla/i],
                    describe: function (e) {
                      var t = { name: "QupZilla" },
                        r =
                          n.default.getFirstMatch(
                            /(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/firefox|iceweasel|fxios/i],
                    describe: function (e) {
                      var t = { name: "Firefox" },
                        r = n.default.getFirstMatch(
                          /(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/electron/i],
                    describe: function (e) {
                      var t = { name: "Electron" },
                        r = n.default.getFirstMatch(
                          /(?:electron)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/MiuiBrowser/i],
                    describe: function (e) {
                      var t = { name: "Miui" },
                        r = n.default.getFirstMatch(
                          /(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/chromium/i],
                    describe: function (e) {
                      var t = { name: "Chromium" },
                        r =
                          n.default.getFirstMatch(
                            /(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/chrome|crios|crmo/i],
                    describe: function (e) {
                      var t = { name: "Chrome" },
                        r = n.default.getFirstMatch(
                          /(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/GSA/i],
                    describe: function (e) {
                      var t = { name: "Google Search" },
                        r = n.default.getFirstMatch(
                          /(?:GSA)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: function (e) {
                      var t = !e.test(/like android/i),
                        r = e.test(/android/i);
                      return t && r;
                    },
                    describe: function (e) {
                      var t = { name: "Android Browser" },
                        r = n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/playstation 4/i],
                    describe: function (e) {
                      var t = { name: "PlayStation 4" },
                        r = n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/safari|applewebkit/i],
                    describe: function (e) {
                      var t = { name: "Safari" },
                        r = n.default.getFirstMatch(s, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/.*/i],
                    describe: function (e) {
                      var t =
                        -1 !== e.search("\\(")
                          ? /^(.*)\/(.*)[ \t]\((.*)/
                          : /^(.*)\/(.*) /;
                      return {
                        name: n.default.getFirstMatch(t, e),
                        version: n.default.getSecondMatch(t, e),
                      };
                    },
                  },
                ];
              (t.default = i), (e.exports = t.default);
            },
            93: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var a,
                n = (a = r(17)) && a.__esModule ? a : { default: a },
                s = r(18),
                i = [
                  {
                    test: [/Roku\/DVP/],
                    describe: function (e) {
                      var t = n.default.getFirstMatch(
                        /Roku\/DVP-(\d+\.\d+)/i,
                        e
                      );
                      return { name: s.OS_MAP.Roku, version: t };
                    },
                  },
                  {
                    test: [/windows phone/i],
                    describe: function (e) {
                      var t = n.default.getFirstMatch(
                        /windows phone (?:os)?\s?(\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: s.OS_MAP.WindowsPhone, version: t };
                    },
                  },
                  {
                    test: [/windows /i],
                    describe: function (e) {
                      var t = n.default.getFirstMatch(
                          /Windows ((NT|XP)( \d\d?.\d)?)/i,
                          e
                        ),
                        r = n.default.getWindowsVersionName(t);
                      return {
                        name: s.OS_MAP.Windows,
                        version: t,
                        versionName: r,
                      };
                    },
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function (e) {
                      var t = { name: s.OS_MAP.iOS },
                        r = n.default.getSecondMatch(
                          /(Version\/)(\d[\d.]+)/,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/macintosh/i],
                    describe: function (e) {
                      var t = n.default
                          .getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e)
                          .replace(/[_\s]/g, "."),
                        r = n.default.getMacOSVersionName(t),
                        a = { name: s.OS_MAP.MacOS, version: t };
                      return r && (a.versionName = r), a;
                    },
                  },
                  {
                    test: [/(ipod|iphone|ipad)/i],
                    describe: function (e) {
                      var t = n.default
                        .getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e)
                        .replace(/[_\s]/g, ".");
                      return { name: s.OS_MAP.iOS, version: t };
                    },
                  },
                  {
                    test: function (e) {
                      var t = !e.test(/like android/i),
                        r = e.test(/android/i);
                      return t && r;
                    },
                    describe: function (e) {
                      var t = n.default.getFirstMatch(
                          /android[\s/-](\d+(\.\d+)*)/i,
                          e
                        ),
                        r = n.default.getAndroidVersionName(t),
                        a = { name: s.OS_MAP.Android, version: t };
                      return r && (a.versionName = r), a;
                    },
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function (e) {
                      var t = n.default.getFirstMatch(
                          /(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,
                          e
                        ),
                        r = { name: s.OS_MAP.WebOS };
                      return t && t.length && (r.version = t), r;
                    },
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function (e) {
                      var t =
                        n.default.getFirstMatch(
                          /rim\stablet\sos\s(\d+(\.\d+)*)/i,
                          e
                        ) ||
                        n.default.getFirstMatch(
                          /blackberry\d+\/(\d+([_\s]\d+)*)/i,
                          e
                        ) ||
                        n.default.getFirstMatch(/\bbb(\d+)/i, e);
                      return { name: s.OS_MAP.BlackBerry, version: t };
                    },
                  },
                  {
                    test: [/bada/i],
                    describe: function (e) {
                      var t = n.default.getFirstMatch(
                        /bada\/(\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: s.OS_MAP.Bada, version: t };
                    },
                  },
                  {
                    test: [/tizen/i],
                    describe: function (e) {
                      var t = n.default.getFirstMatch(
                        /tizen[/\s](\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: s.OS_MAP.Tizen, version: t };
                    },
                  },
                  {
                    test: [/linux/i],
                    describe: function () {
                      return { name: s.OS_MAP.Linux };
                    },
                  },
                  {
                    test: [/CrOS/],
                    describe: function () {
                      return { name: s.OS_MAP.ChromeOS };
                    },
                  },
                  {
                    test: [/PlayStation 4/],
                    describe: function (e) {
                      var t = n.default.getFirstMatch(
                        /PlayStation 4[/\s](\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: s.OS_MAP.PlayStation4, version: t };
                    },
                  },
                ];
              (t.default = i), (e.exports = t.default);
            },
            94: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var a,
                n = (a = r(17)) && a.__esModule ? a : { default: a },
                s = r(18),
                i = [
                  {
                    test: [/googlebot/i],
                    describe: function () {
                      return { type: "bot", vendor: "Google" };
                    },
                  },
                  {
                    test: [/huawei/i],
                    describe: function (e) {
                      var t =
                          n.default.getFirstMatch(/(can-l01)/i, e) && "Nova",
                        r = { type: s.PLATFORMS_MAP.mobile, vendor: "Huawei" };
                      return t && (r.model = t), r;
                    },
                  },
                  {
                    test: [/nexus\s*(?:7|8|9|10).*/i],
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.tablet, vendor: "Nexus" };
                    },
                  },
                  {
                    test: [/ipad/i],
                    describe: function () {
                      return {
                        type: s.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad",
                      };
                    },
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function () {
                      return {
                        type: s.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad",
                      };
                    },
                  },
                  {
                    test: [/kftt build/i],
                    describe: function () {
                      return {
                        type: s.PLATFORMS_MAP.tablet,
                        vendor: "Amazon",
                        model: "Kindle Fire HD 7",
                      };
                    },
                  },
                  {
                    test: [/silk/i],
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.tablet, vendor: "Amazon" };
                    },
                  },
                  {
                    test: [/tablet(?! pc)/i],
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.tablet };
                    },
                  },
                  {
                    test: function (e) {
                      var t = e.test(/ipod|iphone/i),
                        r = e.test(/like (ipod|iphone)/i);
                      return t && !r;
                    },
                    describe: function (e) {
                      var t = n.default.getFirstMatch(/(ipod|iphone)/i, e);
                      return {
                        type: s.PLATFORMS_MAP.mobile,
                        vendor: "Apple",
                        model: t,
                      };
                    },
                  },
                  {
                    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.mobile, vendor: "Nexus" };
                    },
                  },
                  {
                    test: [/[^-]mobi/i],
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.mobile };
                    },
                  },
                  {
                    test: function (e) {
                      return "blackberry" === e.getBrowserName(!0);
                    },
                    describe: function () {
                      return {
                        type: s.PLATFORMS_MAP.mobile,
                        vendor: "BlackBerry",
                      };
                    },
                  },
                  {
                    test: function (e) {
                      return "bada" === e.getBrowserName(!0);
                    },
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.mobile };
                    },
                  },
                  {
                    test: function (e) {
                      return "windows phone" === e.getBrowserName();
                    },
                    describe: function () {
                      return {
                        type: s.PLATFORMS_MAP.mobile,
                        vendor: "Microsoft",
                      };
                    },
                  },
                  {
                    test: function (e) {
                      var t = Number(String(e.getOSVersion()).split(".")[0]);
                      return "android" === e.getOSName(!0) && t >= 3;
                    },
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.tablet };
                    },
                  },
                  {
                    test: function (e) {
                      return "android" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.mobile };
                    },
                  },
                  {
                    test: function (e) {
                      return "macos" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.desktop, vendor: "Apple" };
                    },
                  },
                  {
                    test: function (e) {
                      return "windows" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.desktop };
                    },
                  },
                  {
                    test: function (e) {
                      return "linux" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.desktop };
                    },
                  },
                  {
                    test: function (e) {
                      return "playstation 4" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.tv };
                    },
                  },
                  {
                    test: function (e) {
                      return "roku" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: s.PLATFORMS_MAP.tv };
                    },
                  },
                ];
              (t.default = i), (e.exports = t.default);
            },
            95: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var a,
                n = (a = r(17)) && a.__esModule ? a : { default: a },
                s = r(18),
                i = [
                  {
                    test: function (e) {
                      return "microsoft edge" === e.getBrowserName(!0);
                    },
                    describe: function (e) {
                      if (/\sedg\//i.test(e))
                        return { name: s.ENGINE_MAP.Blink };
                      var t = n.default.getFirstMatch(
                        /edge\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                      return { name: s.ENGINE_MAP.EdgeHTML, version: t };
                    },
                  },
                  {
                    test: [/trident/i],
                    describe: function (e) {
                      var t = { name: s.ENGINE_MAP.Trident },
                        r = n.default.getFirstMatch(
                          /trident\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: function (e) {
                      return e.test(/presto/i);
                    },
                    describe: function (e) {
                      var t = { name: s.ENGINE_MAP.Presto },
                        r = n.default.getFirstMatch(
                          /presto\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: function (e) {
                      var t = e.test(/gecko/i),
                        r = e.test(/like gecko/i);
                      return t && !r;
                    },
                    describe: function (e) {
                      var t = { name: s.ENGINE_MAP.Gecko },
                        r = n.default.getFirstMatch(
                          /gecko\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/(apple)?webkit\/537\.36/i],
                    describe: function () {
                      return { name: s.ENGINE_MAP.Blink };
                    },
                  },
                  {
                    test: [/(apple)?webkit/i],
                    describe: function (e) {
                      var t = { name: s.ENGINE_MAP.WebKit },
                        r = n.default.getFirstMatch(
                          /webkit\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                ];
              (t.default = i), (e.exports = t.default);
            },
          });
        },
        955: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(754),
            r(4636),
            r(9506),
            r(7165),
            (function () {
              var e = a,
                t = e.lib.BlockCipher,
                r = e.algo,
                n = [],
                s = [],
                i = [],
                o = [],
                c = [],
                d = [],
                l = [],
                p = [],
                u = [],
                h = [];
              !(function () {
                for (var e = [], t = 0; t < 256; t++)
                  e[t] = t < 128 ? t << 1 : (t << 1) ^ 283;
                var r = 0,
                  a = 0;
                for (t = 0; t < 256; t++) {
                  var m = a ^ (a << 1) ^ (a << 2) ^ (a << 3) ^ (a << 4);
                  (m = (m >>> 8) ^ (255 & m) ^ 99), (n[r] = m), (s[m] = r);
                  var f = e[r],
                    g = e[f],
                    _ = e[g],
                    v = (257 * e[m]) ^ (16843008 * m);
                  (i[r] = (v << 24) | (v >>> 8)),
                    (o[r] = (v << 16) | (v >>> 16)),
                    (c[r] = (v << 8) | (v >>> 24)),
                    (d[r] = v),
                    (v =
                      (16843009 * _) ^
                      (65537 * g) ^
                      (257 * f) ^
                      (16843008 * r)),
                    (l[m] = (v << 24) | (v >>> 8)),
                    (p[m] = (v << 16) | (v >>> 16)),
                    (u[m] = (v << 8) | (v >>> 24)),
                    (h[m] = v),
                    r
                      ? ((r = f ^ e[e[e[_ ^ f]]]), (a ^= e[e[a]]))
                      : (r = a = 1);
                }
              })();
              var m = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
                f = (r.AES = t.extend({
                  _doReset: function () {
                    if (!this._nRounds || this._keyPriorReset !== this._key) {
                      for (
                        var e = (this._keyPriorReset = this._key),
                          t = e.words,
                          r = e.sigBytes / 4,
                          a = 4 * ((this._nRounds = r + 6) + 1),
                          s = (this._keySchedule = []),
                          i = 0;
                        i < a;
                        i++
                      )
                        i < r
                          ? (s[i] = t[i])
                          : ((d = s[i - 1]),
                            i % r
                              ? r > 6 &&
                                i % r == 4 &&
                                (d =
                                  (n[d >>> 24] << 24) |
                                  (n[(d >>> 16) & 255] << 16) |
                                  (n[(d >>> 8) & 255] << 8) |
                                  n[255 & d])
                              : ((d =
                                  (n[(d = (d << 8) | (d >>> 24)) >>> 24] <<
                                    24) |
                                  (n[(d >>> 16) & 255] << 16) |
                                  (n[(d >>> 8) & 255] << 8) |
                                  n[255 & d]),
                                (d ^= m[(i / r) | 0] << 24)),
                            (s[i] = s[i - r] ^ d));
                      for (
                        var o = (this._invKeySchedule = []), c = 0;
                        c < a;
                        c++
                      ) {
                        if (((i = a - c), c % 4)) var d = s[i];
                        else d = s[i - 4];
                        o[c] =
                          c < 4 || i <= 4
                            ? d
                            : l[n[d >>> 24]] ^
                              p[n[(d >>> 16) & 255]] ^
                              u[n[(d >>> 8) & 255]] ^
                              h[n[255 & d]];
                      }
                    }
                  },
                  encryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._keySchedule, i, o, c, d, n);
                  },
                  decryptBlock: function (e, t) {
                    var r = e[t + 1];
                    (e[t + 1] = e[t + 3]),
                      (e[t + 3] = r),
                      this._doCryptBlock(
                        e,
                        t,
                        this._invKeySchedule,
                        l,
                        p,
                        u,
                        h,
                        s
                      ),
                      (r = e[t + 1]),
                      (e[t + 1] = e[t + 3]),
                      (e[t + 3] = r);
                  },
                  _doCryptBlock: function (e, t, r, a, n, s, i, o) {
                    for (
                      var c = this._nRounds,
                        d = e[t] ^ r[0],
                        l = e[t + 1] ^ r[1],
                        p = e[t + 2] ^ r[2],
                        u = e[t + 3] ^ r[3],
                        h = 4,
                        m = 1;
                      m < c;
                      m++
                    ) {
                      var f =
                          a[d >>> 24] ^
                          n[(l >>> 16) & 255] ^
                          s[(p >>> 8) & 255] ^
                          i[255 & u] ^
                          r[h++],
                        g =
                          a[l >>> 24] ^
                          n[(p >>> 16) & 255] ^
                          s[(u >>> 8) & 255] ^
                          i[255 & d] ^
                          r[h++],
                        _ =
                          a[p >>> 24] ^
                          n[(u >>> 16) & 255] ^
                          s[(d >>> 8) & 255] ^
                          i[255 & l] ^
                          r[h++],
                        v =
                          a[u >>> 24] ^
                          n[(d >>> 16) & 255] ^
                          s[(l >>> 8) & 255] ^
                          i[255 & p] ^
                          r[h++];
                      (d = f), (l = g), (p = _), (u = v);
                    }
                    (f =
                      ((o[d >>> 24] << 24) |
                        (o[(l >>> 16) & 255] << 16) |
                        (o[(p >>> 8) & 255] << 8) |
                        o[255 & u]) ^
                      r[h++]),
                      (g =
                        ((o[l >>> 24] << 24) |
                          (o[(p >>> 16) & 255] << 16) |
                          (o[(u >>> 8) & 255] << 8) |
                          o[255 & d]) ^
                        r[h++]),
                      (_ =
                        ((o[p >>> 24] << 24) |
                          (o[(u >>> 16) & 255] << 16) |
                          (o[(d >>> 8) & 255] << 8) |
                          o[255 & l]) ^
                        r[h++]),
                      (v =
                        ((o[u >>> 24] << 24) |
                          (o[(d >>> 16) & 255] << 16) |
                          (o[(l >>> 8) & 255] << 8) |
                          o[255 & p]) ^
                        r[h++]),
                      (e[t] = f),
                      (e[t + 1] = g),
                      (e[t + 2] = _),
                      (e[t + 3] = v);
                  },
                  keySize: 8,
                }));
              e.AES = t._createHelper(f);
            })(),
            a.AES);
        },
        3128: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(754),
            r(4636),
            r(9506),
            r(7165),
            (function () {
              var e = a,
                t = e.lib.BlockCipher,
                r = e.algo;
              const n = 16,
                s = [
                  608135816, 2242054355, 320440878, 57701188, 2752067618,
                  698298832, 137296536, 3964562569, 1160258022, 953160567,
                  3193202383, 887688300, 3232508343, 3380367581, 1065670069,
                  3041331479, 2450970073, 2306472731,
                ],
                i = [
                  [
                    3509652390, 2564797868, 805139163, 3491422135, 3101798381,
                    1780907670, 3128725573, 4046225305, 614570311, 3012652279,
                    134345442, 2240740374, 1667834072, 1901547113, 2757295779,
                    4103290238, 227898511, 1921955416, 1904987480, 2182433518,
                    2069144605, 3260701109, 2620446009, 720527379, 3318853667,
                    677414384, 3393288472, 3101374703, 2390351024, 1614419982,
                    1822297739, 2954791486, 3608508353, 3174124327, 2024746970,
                    1432378464, 3864339955, 2857741204, 1464375394, 1676153920,
                    1439316330, 715854006, 3033291828, 289532110, 2706671279,
                    2087905683, 3018724369, 1668267050, 732546397, 1947742710,
                    3462151702, 2609353502, 2950085171, 1814351708, 2050118529,
                    680887927, 999245976, 1800124847, 3300911131, 1713906067,
                    1641548236, 4213287313, 1216130144, 1575780402, 4018429277,
                    3917837745, 3693486850, 3949271944, 596196993, 3549867205,
                    258830323, 2213823033, 772490370, 2760122372, 1774776394,
                    2652871518, 566650946, 4142492826, 1728879713, 2882767088,
                    1783734482, 3629395816, 2517608232, 2874225571, 1861159788,
                    326777828, 3124490320, 2130389656, 2716951837, 967770486,
                    1724537150, 2185432712, 2364442137, 1164943284, 2105845187,
                    998989502, 3765401048, 2244026483, 1075463327, 1455516326,
                    1322494562, 910128902, 469688178, 1117454909, 936433444,
                    3490320968, 3675253459, 1240580251, 122909385, 2157517691,
                    634681816, 4142456567, 3825094682, 3061402683, 2540495037,
                    79693498, 3249098678, 1084186820, 1583128258, 426386531,
                    1761308591, 1047286709, 322548459, 995290223, 1845252383,
                    2603652396, 3431023940, 2942221577, 3202600964, 3727903485,
                    1712269319, 422464435, 3234572375, 1170764815, 3523960633,
                    3117677531, 1434042557, 442511882, 3600875718, 1076654713,
                    1738483198, 4213154764, 2393238008, 3677496056, 1014306527,
                    4251020053, 793779912, 2902807211, 842905082, 4246964064,
                    1395751752, 1040244610, 2656851899, 3396308128, 445077038,
                    3742853595, 3577915638, 679411651, 2892444358, 2354009459,
                    1767581616, 3150600392, 3791627101, 3102740896, 284835224,
                    4246832056, 1258075500, 768725851, 2589189241, 3069724005,
                    3532540348, 1274779536, 3789419226, 2764799539, 1660621633,
                    3471099624, 4011903706, 913787905, 3497959166, 737222580,
                    2514213453, 2928710040, 3937242737, 1804850592, 3499020752,
                    2949064160, 2386320175, 2390070455, 2415321851, 4061277028,
                    2290661394, 2416832540, 1336762016, 1754252060, 3520065937,
                    3014181293, 791618072, 3188594551, 3933548030, 2332172193,
                    3852520463, 3043980520, 413987798, 3465142937, 3030929376,
                    4245938359, 2093235073, 3534596313, 375366246, 2157278981,
                    2479649556, 555357303, 3870105701, 2008414854, 3344188149,
                    4221384143, 3956125452, 2067696032, 3594591187, 2921233993,
                    2428461, 544322398, 577241275, 1471733935, 610547355,
                    4027169054, 1432588573, 1507829418, 2025931657, 3646575487,
                    545086370, 48609733, 2200306550, 1653985193, 298326376,
                    1316178497, 3007786442, 2064951626, 458293330, 2589141269,
                    3591329599, 3164325604, 727753846, 2179363840, 146436021,
                    1461446943, 4069977195, 705550613, 3059967265, 3887724982,
                    4281599278, 3313849956, 1404054877, 2845806497, 146425753,
                    1854211946,
                  ],
                  [
                    1266315497, 3048417604, 3681880366, 3289982499, 290971e4,
                    1235738493, 2632868024, 2414719590, 3970600049, 1771706367,
                    1449415276, 3266420449, 422970021, 1963543593, 2690192192,
                    3826793022, 1062508698, 1531092325, 1804592342, 2583117782,
                    2714934279, 4024971509, 1294809318, 4028980673, 1289560198,
                    2221992742, 1669523910, 35572830, 157838143, 1052438473,
                    1016535060, 1802137761, 1753167236, 1386275462, 3080475397,
                    2857371447, 1040679964, 2145300060, 2390574316, 1461121720,
                    2956646967, 4031777805, 4028374788, 33600511, 2920084762,
                    1018524850, 629373528, 3691585981, 3515945977, 2091462646,
                    2486323059, 586499841, 988145025, 935516892, 3367335476,
                    2599673255, 2839830854, 265290510, 3972581182, 2759138881,
                    3795373465, 1005194799, 847297441, 406762289, 1314163512,
                    1332590856, 1866599683, 4127851711, 750260880, 613907577,
                    1450815602, 3165620655, 3734664991, 3650291728, 3012275730,
                    3704569646, 1427272223, 778793252, 1343938022, 2676280711,
                    2052605720, 1946737175, 3164576444, 3914038668, 3967478842,
                    3682934266, 1661551462, 3294938066, 4011595847, 840292616,
                    3712170807, 616741398, 312560963, 711312465, 1351876610,
                    322626781, 1910503582, 271666773, 2175563734, 1594956187,
                    70604529, 3617834859, 1007753275, 1495573769, 4069517037,
                    2549218298, 2663038764, 504708206, 2263041392, 3941167025,
                    2249088522, 1514023603, 1998579484, 1312622330, 694541497,
                    2582060303, 2151582166, 1382467621, 776784248, 2618340202,
                    3323268794, 2497899128, 2784771155, 503983604, 4076293799,
                    907881277, 423175695, 432175456, 1378068232, 4145222326,
                    3954048622, 3938656102, 3820766613, 2793130115, 2977904593,
                    26017576, 3274890735, 3194772133, 1700274565, 1756076034,
                    4006520079, 3677328699, 720338349, 1533947780, 354530856,
                    688349552, 3973924725, 1637815568, 332179504, 3949051286,
                    53804574, 2852348879, 3044236432, 1282449977, 3583942155,
                    3416972820, 4006381244, 1617046695, 2628476075, 3002303598,
                    1686838959, 431878346, 2686675385, 1700445008, 1080580658,
                    1009431731, 832498133, 3223435511, 2605976345, 2271191193,
                    2516031870, 1648197032, 4164389018, 2548247927, 300782431,
                    375919233, 238389289, 3353747414, 2531188641, 2019080857,
                    1475708069, 455242339, 2609103871, 448939670, 3451063019,
                    1395535956, 2413381860, 1841049896, 1491858159, 885456874,
                    4264095073, 4001119347, 1565136089, 3898914787, 1108368660,
                    540939232, 1173283510, 2745871338, 3681308437, 4207628240,
                    3343053890, 4016749493, 1699691293, 1103962373, 3625875870,
                    2256883143, 3830138730, 1031889488, 3479347698, 1535977030,
                    4236805024, 3251091107, 2132092099, 1774941330, 1199868427,
                    1452454533, 157007616, 2904115357, 342012276, 595725824,
                    1480756522, 206960106, 497939518, 591360097, 863170706,
                    2375253569, 3596610801, 1814182875, 2094937945, 3421402208,
                    1082520231, 3463918190, 2785509508, 435703966, 3908032597,
                    1641649973, 2842273706, 3305899714, 1510255612, 2148256476,
                    2655287854, 3276092548, 4258621189, 236887753, 3681803219,
                    274041037, 1734335097, 3815195456, 3317970021, 1899903192,
                    1026095262, 4050517792, 356393447, 2410691914, 3873677099,
                    3682840055,
                  ],
                  [
                    3913112168, 2491498743, 4132185628, 2489919796, 1091903735,
                    1979897079, 3170134830, 3567386728, 3557303409, 857797738,
                    1136121015, 1342202287, 507115054, 2535736646, 337727348,
                    3213592640, 1301675037, 2528481711, 1895095763, 1721773893,
                    3216771564, 62756741, 2142006736, 835421444, 2531993523,
                    1442658625, 3659876326, 2882144922, 676362277, 1392781812,
                    170690266, 3921047035, 1759253602, 3611846912, 1745797284,
                    664899054, 1329594018, 3901205900, 3045908486, 2062866102,
                    2865634940, 3543621612, 3464012697, 1080764994, 553557557,
                    3656615353, 3996768171, 991055499, 499776247, 1265440854,
                    648242737, 3940784050, 980351604, 3713745714, 1749149687,
                    3396870395, 4211799374, 3640570775, 1161844396, 3125318951,
                    1431517754, 545492359, 4268468663, 3499529547, 1437099964,
                    2702547544, 3433638243, 2581715763, 2787789398, 1060185593,
                    1593081372, 2418618748, 4260947970, 69676912, 2159744348,
                    86519011, 2512459080, 3838209314, 1220612927, 3339683548,
                    133810670, 1090789135, 1078426020, 1569222167, 845107691,
                    3583754449, 4072456591, 1091646820, 628848692, 1613405280,
                    3757631651, 526609435, 236106946, 48312990, 2942717905,
                    3402727701, 1797494240, 859738849, 992217954, 4005476642,
                    2243076622, 3870952857, 3732016268, 765654824, 3490871365,
                    2511836413, 1685915746, 3888969200, 1414112111, 2273134842,
                    3281911079, 4080962846, 172450625, 2569994100, 980381355,
                    4109958455, 2819808352, 2716589560, 2568741196, 3681446669,
                    3329971472, 1835478071, 660984891, 3704678404, 4045999559,
                    3422617507, 3040415634, 1762651403, 1719377915, 3470491036,
                    2693910283, 3642056355, 3138596744, 1364962596, 2073328063,
                    1983633131, 926494387, 3423689081, 2150032023, 4096667949,
                    1749200295, 3328846651, 309677260, 2016342300, 1779581495,
                    3079819751, 111262694, 1274766160, 443224088, 298511866,
                    1025883608, 3806446537, 1145181785, 168956806, 3641502830,
                    3584813610, 1689216846, 3666258015, 3200248200, 1692713982,
                    2646376535, 4042768518, 1618508792, 1610833997, 3523052358,
                    4130873264, 2001055236, 3610705100, 2202168115, 4028541809,
                    2961195399, 1006657119, 2006996926, 3186142756, 1430667929,
                    3210227297, 1314452623, 4074634658, 4101304120, 2273951170,
                    1399257539, 3367210612, 3027628629, 1190975929, 2062231137,
                    2333990788, 2221543033, 2438960610, 1181637006, 548689776,
                    2362791313, 3372408396, 3104550113, 3145860560, 296247880,
                    1970579870, 3078560182, 3769228297, 1714227617, 3291629107,
                    3898220290, 166772364, 1251581989, 493813264, 448347421,
                    195405023, 2709975567, 677966185, 3703036547, 1463355134,
                    2715995803, 1338867538, 1343315457, 2802222074, 2684532164,
                    233230375, 2599980071, 2000651841, 3277868038, 1638401717,
                    4028070440, 3237316320, 6314154, 819756386, 300326615,
                    590932579, 1405279636, 3267499572, 3150704214, 2428286686,
                    3959192993, 3461946742, 1862657033, 1266418056, 963775037,
                    2089974820, 2263052895, 1917689273, 448879540, 3550394620,
                    3981727096, 150775221, 3627908307, 1303187396, 508620638,
                    2975983352, 2726630617, 1817252668, 1876281319, 1457606340,
                    908771278, 3720792119, 3617206836, 2455994898, 1729034894,
                    1080033504,
                  ],
                  [
                    976866871, 3556439503, 2881648439, 1522871579, 1555064734,
                    1336096578, 3548522304, 2579274686, 3574697629, 3205460757,
                    3593280638, 3338716283, 3079412587, 564236357, 2993598910,
                    1781952180, 1464380207, 3163844217, 3332601554, 1699332808,
                    1393555694, 1183702653, 3581086237, 1288719814, 691649499,
                    2847557200, 2895455976, 3193889540, 2717570544, 1781354906,
                    1676643554, 2592534050, 3230253752, 1126444790, 2770207658,
                    2633158820, 2210423226, 2615765581, 2414155088, 3127139286,
                    673620729, 2805611233, 1269405062, 4015350505, 3341807571,
                    4149409754, 1057255273, 2012875353, 2162469141, 2276492801,
                    2601117357, 993977747, 3918593370, 2654263191, 753973209,
                    36408145, 2530585658, 25011837, 3520020182, 2088578344,
                    530523599, 2918365339, 1524020338, 1518925132, 3760827505,
                    3759777254, 1202760957, 3985898139, 3906192525, 674977740,
                    4174734889, 2031300136, 2019492241, 3983892565, 4153806404,
                    3822280332, 352677332, 2297720250, 60907813, 90501309,
                    3286998549, 1016092578, 2535922412, 2839152426, 457141659,
                    509813237, 4120667899, 652014361, 1966332200, 2975202805,
                    55981186, 2327461051, 676427537, 3255491064, 2882294119,
                    3433927263, 1307055953, 942726286, 933058658, 2468411793,
                    3933900994, 4215176142, 1361170020, 2001714738, 2830558078,
                    3274259782, 1222529897, 1679025792, 2729314320, 3714953764,
                    1770335741, 151462246, 3013232138, 1682292957, 1483529935,
                    471910574, 1539241949, 458788160, 3436315007, 1807016891,
                    3718408830, 978976581, 1043663428, 3165965781, 1927990952,
                    4200891579, 2372276910, 3208408903, 3533431907, 1412390302,
                    2931980059, 4132332400, 1947078029, 3881505623, 4168226417,
                    2941484381, 1077988104, 1320477388, 886195818, 18198404,
                    3786409e3, 2509781533, 112762804, 3463356488, 1866414978,
                    891333506, 18488651, 661792760, 1628790961, 3885187036,
                    3141171499, 876946877, 2693282273, 1372485963, 791857591,
                    2686433993, 3759982718, 3167212022, 3472953795, 2716379847,
                    445679433, 3561995674, 3504004811, 3574258232, 54117162,
                    3331405415, 2381918588, 3769707343, 4154350007, 1140177722,
                    4074052095, 668550556, 3214352940, 367459370, 261225585,
                    2610173221, 4209349473, 3468074219, 3265815641, 314222801,
                    3066103646, 3808782860, 282218597, 3406013506, 3773591054,
                    379116347, 1285071038, 846784868, 2669647154, 3771962079,
                    3550491691, 2305946142, 453669953, 1268987020, 3317592352,
                    3279303384, 3744833421, 2610507566, 3859509063, 266596637,
                    3847019092, 517658769, 3462560207, 3443424879, 370717030,
                    4247526661, 2224018117, 4143653529, 4112773975, 2788324899,
                    2477274417, 1456262402, 2901442914, 1517677493, 1846949527,
                    2295493580, 3734397586, 2176403920, 1280348187, 1908823572,
                    3871786941, 846861322, 1172426758, 3287448474, 3383383037,
                    1655181056, 3139813346, 901632758, 1897031941, 2986607138,
                    3066810236, 3447102507, 1393639104, 373351379, 950779232,
                    625454576, 3124240540, 4148612726, 2007998917, 544563296,
                    2244738638, 2330496472, 2058025392, 1291430526, 424198748,
                    50039436, 29584100, 3605783033, 2429876329, 2791104160,
                    1057563949, 3255363231, 3075367218, 3463963227, 1469046755,
                    985887462,
                  ],
                ];
              var o = { pbox: [], sbox: [] };
              function c(e, t) {
                let r = (t >> 24) & 255,
                  a = (t >> 16) & 255,
                  n = (t >> 8) & 255,
                  s = 255 & t,
                  i = e.sbox[0][r] + e.sbox[1][a];
                return (i ^= e.sbox[2][n]), (i += e.sbox[3][s]), i;
              }
              function d(e, t, r) {
                let a,
                  s = t,
                  i = r;
                for (let t = 0; t < n; ++t)
                  (s ^= e.pbox[t]),
                    (i = c(e, s) ^ i),
                    (a = s),
                    (s = i),
                    (i = a);
                return (
                  (a = s),
                  (s = i),
                  (i = a),
                  (i ^= e.pbox[n]),
                  (s ^= e.pbox[n + 1]),
                  { left: s, right: i }
                );
              }
              function l(e, t, r) {
                let a,
                  s = t,
                  i = r;
                for (let t = n + 1; t > 1; --t)
                  (s ^= e.pbox[t]),
                    (i = c(e, s) ^ i),
                    (a = s),
                    (s = i),
                    (i = a);
                return (
                  (a = s),
                  (s = i),
                  (i = a),
                  (i ^= e.pbox[1]),
                  (s ^= e.pbox[0]),
                  { left: s, right: i }
                );
              }
              function p(e, t, r) {
                for (let t = 0; t < 4; t++) {
                  e.sbox[t] = [];
                  for (let r = 0; r < 256; r++) e.sbox[t][r] = i[t][r];
                }
                let a = 0;
                for (let i = 0; i < n + 2; i++)
                  (e.pbox[i] = s[i] ^ t[a]), a++, a >= r && (a = 0);
                let o = 0,
                  c = 0,
                  l = 0;
                for (let t = 0; t < n + 2; t += 2)
                  (l = d(e, o, c)),
                    (o = l.left),
                    (c = l.right),
                    (e.pbox[t] = o),
                    (e.pbox[t + 1] = c);
                for (let t = 0; t < 4; t++)
                  for (let r = 0; r < 256; r += 2)
                    (l = d(e, o, c)),
                      (o = l.left),
                      (c = l.right),
                      (e.sbox[t][r] = o),
                      (e.sbox[t][r + 1] = c);
                return !0;
              }
              var u = (r.Blowfish = t.extend({
                _doReset: function () {
                  if (this._keyPriorReset !== this._key) {
                    var e = (this._keyPriorReset = this._key),
                      t = e.words,
                      r = e.sigBytes / 4;
                    p(o, t, r);
                  }
                },
                encryptBlock: function (e, t) {
                  var r = d(o, e[t], e[t + 1]);
                  (e[t] = r.left), (e[t + 1] = r.right);
                },
                decryptBlock: function (e, t) {
                  var r = l(o, e[t], e[t + 1]);
                  (e[t] = r.left), (e[t + 1] = r.right);
                },
                blockSize: 2,
                keySize: 4,
                ivSize: 2,
              }));
              e.Blowfish = t._createHelper(u);
            })(),
            a.Blowfish);
        },
        7165: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(9506),
            void (
              a.lib.Cipher ||
              (function (e) {
                var t = a,
                  r = t.lib,
                  n = r.Base,
                  s = r.WordArray,
                  i = r.BufferedBlockAlgorithm,
                  o = t.enc,
                  c = (o.Utf8, o.Base64),
                  d = t.algo.EvpKDF,
                  l = (r.Cipher = i.extend({
                    cfg: n.extend(),
                    createEncryptor: function (e, t) {
                      return this.create(this._ENC_XFORM_MODE, e, t);
                    },
                    createDecryptor: function (e, t) {
                      return this.create(this._DEC_XFORM_MODE, e, t);
                    },
                    init: function (e, t, r) {
                      (this.cfg = this.cfg.extend(r)),
                        (this._xformMode = e),
                        (this._key = t),
                        this.reset();
                    },
                    reset: function () {
                      i.reset.call(this), this._doReset();
                    },
                    process: function (e) {
                      return this._append(e), this._process();
                    },
                    finalize: function (e) {
                      return e && this._append(e), this._doFinalize();
                    },
                    keySize: 4,
                    ivSize: 4,
                    _ENC_XFORM_MODE: 1,
                    _DEC_XFORM_MODE: 2,
                    _createHelper: (function () {
                      function e(e) {
                        return "string" == typeof e ? b : _;
                      }
                      return function (t) {
                        return {
                          encrypt: function (r, a, n) {
                            return e(a).encrypt(t, r, a, n);
                          },
                          decrypt: function (r, a, n) {
                            return e(a).decrypt(t, r, a, n);
                          },
                        };
                      };
                    })(),
                  })),
                  p =
                    ((r.StreamCipher = l.extend({
                      _doFinalize: function () {
                        return this._process(!0);
                      },
                      blockSize: 1,
                    })),
                    (t.mode = {})),
                  u = (r.BlockCipherMode = n.extend({
                    createEncryptor: function (e, t) {
                      return this.Encryptor.create(e, t);
                    },
                    createDecryptor: function (e, t) {
                      return this.Decryptor.create(e, t);
                    },
                    init: function (e, t) {
                      (this._cipher = e), (this._iv = t);
                    },
                  })),
                  h = (p.CBC = (function () {
                    var t = u.extend();
                    function r(t, r, a) {
                      var n,
                        s = this._iv;
                      s ? ((n = s), (this._iv = e)) : (n = this._prevBlock);
                      for (var i = 0; i < a; i++) t[r + i] ^= n[i];
                    }
                    return (
                      (t.Encryptor = t.extend({
                        processBlock: function (e, t) {
                          var a = this._cipher,
                            n = a.blockSize;
                          r.call(this, e, t, n),
                            a.encryptBlock(e, t),
                            (this._prevBlock = e.slice(t, t + n));
                        },
                      })),
                      (t.Decryptor = t.extend({
                        processBlock: function (e, t) {
                          var a = this._cipher,
                            n = a.blockSize,
                            s = e.slice(t, t + n);
                          a.decryptBlock(e, t),
                            r.call(this, e, t, n),
                            (this._prevBlock = s);
                        },
                      })),
                      t
                    );
                  })()),
                  m = ((t.pad = {}).Pkcs7 = {
                    pad: function (e, t) {
                      for (
                        var r = 4 * t,
                          a = r - (e.sigBytes % r),
                          n = (a << 24) | (a << 16) | (a << 8) | a,
                          i = [],
                          o = 0;
                        o < a;
                        o += 4
                      )
                        i.push(n);
                      var c = s.create(i, a);
                      e.concat(c);
                    },
                    unpad: function (e) {
                      var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                      e.sigBytes -= t;
                    },
                  }),
                  f =
                    ((r.BlockCipher = l.extend({
                      cfg: l.cfg.extend({ mode: h, padding: m }),
                      reset: function () {
                        var e;
                        l.reset.call(this);
                        var t = this.cfg,
                          r = t.iv,
                          a = t.mode;
                        this._xformMode == this._ENC_XFORM_MODE
                          ? (e = a.createEncryptor)
                          : ((e = a.createDecryptor),
                            (this._minBufferSize = 1)),
                          this._mode && this._mode.__creator == e
                            ? this._mode.init(this, r && r.words)
                            : ((this._mode = e.call(a, this, r && r.words)),
                              (this._mode.__creator = e));
                      },
                      _doProcessBlock: function (e, t) {
                        this._mode.processBlock(e, t);
                      },
                      _doFinalize: function () {
                        var e,
                          t = this.cfg.padding;
                        return (
                          this._xformMode == this._ENC_XFORM_MODE
                            ? (t.pad(this._data, this.blockSize),
                              (e = this._process(!0)))
                            : ((e = this._process(!0)), t.unpad(e)),
                          e
                        );
                      },
                      blockSize: 4,
                    })),
                    (r.CipherParams = n.extend({
                      init: function (e) {
                        this.mixIn(e);
                      },
                      toString: function (e) {
                        return (e || this.formatter).stringify(this);
                      },
                    }))),
                  g = ((t.format = {}).OpenSSL = {
                    stringify: function (e) {
                      var t = e.ciphertext,
                        r = e.salt;
                      return (
                        r
                          ? s
                              .create([1398893684, 1701076831])
                              .concat(r)
                              .concat(t)
                          : t
                      ).toString(c);
                    },
                    parse: function (e) {
                      var t,
                        r = c.parse(e),
                        a = r.words;
                      return (
                        1398893684 == a[0] &&
                          1701076831 == a[1] &&
                          ((t = s.create(a.slice(2, 4))),
                          a.splice(0, 4),
                          (r.sigBytes -= 16)),
                        f.create({ ciphertext: r, salt: t })
                      );
                    },
                  }),
                  _ = (r.SerializableCipher = n.extend({
                    cfg: n.extend({ format: g }),
                    encrypt: function (e, t, r, a) {
                      a = this.cfg.extend(a);
                      var n = e.createEncryptor(r, a),
                        s = n.finalize(t),
                        i = n.cfg;
                      return f.create({
                        ciphertext: s,
                        key: r,
                        iv: i.iv,
                        algorithm: e,
                        mode: i.mode,
                        padding: i.padding,
                        blockSize: e.blockSize,
                        formatter: a.format,
                      });
                    },
                    decrypt: function (e, t, r, a) {
                      return (
                        (a = this.cfg.extend(a)),
                        (t = this._parse(t, a.format)),
                        e.createDecryptor(r, a).finalize(t.ciphertext)
                      );
                    },
                    _parse: function (e, t) {
                      return "string" == typeof e ? t.parse(e, this) : e;
                    },
                  })),
                  v = ((t.kdf = {}).OpenSSL = {
                    execute: function (e, t, r, a, n) {
                      if ((a || (a = s.random(8)), n))
                        i = d
                          .create({ keySize: t + r, hasher: n })
                          .compute(e, a);
                      else var i = d.create({ keySize: t + r }).compute(e, a);
                      var o = s.create(i.words.slice(t), 4 * r);
                      return (
                        (i.sigBytes = 4 * t),
                        f.create({ key: i, iv: o, salt: a })
                      );
                    },
                  }),
                  b = (r.PasswordBasedCipher = _.extend({
                    cfg: _.cfg.extend({ kdf: v }),
                    encrypt: function (e, t, r, a) {
                      var n = (a = this.cfg.extend(a)).kdf.execute(
                        r,
                        e.keySize,
                        e.ivSize,
                        a.salt,
                        a.hasher
                      );
                      a.iv = n.iv;
                      var s = _.encrypt.call(this, e, t, n.key, a);
                      return s.mixIn(n), s;
                    },
                    decrypt: function (e, t, r, a) {
                      (a = this.cfg.extend(a)), (t = this._parse(t, a.format));
                      var n = a.kdf.execute(
                        r,
                        e.keySize,
                        e.ivSize,
                        t.salt,
                        a.hasher
                      );
                      return (
                        (a.iv = n.iv), _.decrypt.call(this, e, t, n.key, a)
                      );
                    },
                  }));
              })()
            ));
        },
        9021: function (e, t, r) {
          var a;
          e.exports =
            ((a =
              a ||
              (function (e, t) {
                var a;
                if (
                  ("undefined" != typeof window &&
                    window.crypto &&
                    (a = window.crypto),
                  "undefined" != typeof self &&
                    self.crypto &&
                    (a = self.crypto),
                  "undefined" != typeof globalThis &&
                    globalThis.crypto &&
                    (a = globalThis.crypto),
                  !a &&
                    "undefined" != typeof window &&
                    window.msCrypto &&
                    (a = window.msCrypto),
                  !a && void 0 !== r.g && r.g.crypto && (a = r.g.crypto),
                  !a)
                )
                  try {
                    a = r(477);
                  } catch (e) {}
                var n = function () {
                    if (a) {
                      if ("function" == typeof a.getRandomValues)
                        try {
                          return a.getRandomValues(new Uint32Array(1))[0];
                        } catch (e) {}
                      if ("function" == typeof a.randomBytes)
                        try {
                          return a.randomBytes(4).readInt32LE();
                        } catch (e) {}
                    }
                    throw new Error(
                      "Native crypto module could not be used to get secure random number."
                    );
                  },
                  s =
                    Object.create ||
                    (function () {
                      function e() {}
                      return function (t) {
                        var r;
                        return (
                          (e.prototype = t),
                          (r = new e()),
                          (e.prototype = null),
                          r
                        );
                      };
                    })(),
                  i = {},
                  o = (i.lib = {}),
                  c = (o.Base = {
                    extend: function (e) {
                      var t = s(this);
                      return (
                        e && t.mixIn(e),
                        (t.hasOwnProperty("init") && this.init !== t.init) ||
                          (t.init = function () {
                            t.$super.init.apply(this, arguments);
                          }),
                        (t.init.prototype = t),
                        (t.$super = this),
                        t
                      );
                    },
                    create: function () {
                      var e = this.extend();
                      return e.init.apply(e, arguments), e;
                    },
                    init: function () {},
                    mixIn: function (e) {
                      for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t]);
                      e.hasOwnProperty("toString") &&
                        (this.toString = e.toString);
                    },
                    clone: function () {
                      return this.init.prototype.extend(this);
                    },
                  }),
                  d = (o.WordArray = c.extend({
                    init: function (e, r) {
                      (e = this.words = e || []),
                        (this.sigBytes = r != t ? r : 4 * e.length);
                    },
                    toString: function (e) {
                      return (e || p).stringify(this);
                    },
                    concat: function (e) {
                      var t = this.words,
                        r = e.words,
                        a = this.sigBytes,
                        n = e.sigBytes;
                      if ((this.clamp(), a % 4))
                        for (var s = 0; s < n; s++) {
                          var i = (r[s >>> 2] >>> (24 - (s % 4) * 8)) & 255;
                          t[(a + s) >>> 2] |= i << (24 - ((a + s) % 4) * 8);
                        }
                      else
                        for (var o = 0; o < n; o += 4)
                          t[(a + o) >>> 2] = r[o >>> 2];
                      return (this.sigBytes += n), this;
                    },
                    clamp: function () {
                      var t = this.words,
                        r = this.sigBytes;
                      (t[r >>> 2] &= 4294967295 << (32 - (r % 4) * 8)),
                        (t.length = e.ceil(r / 4));
                    },
                    clone: function () {
                      var e = c.clone.call(this);
                      return (e.words = this.words.slice(0)), e;
                    },
                    random: function (e) {
                      for (var t = [], r = 0; r < e; r += 4) t.push(n());
                      return new d.init(t, e);
                    },
                  })),
                  l = (i.enc = {}),
                  p = (l.Hex = {
                    stringify: function (e) {
                      for (
                        var t = e.words, r = e.sigBytes, a = [], n = 0;
                        n < r;
                        n++
                      ) {
                        var s = (t[n >>> 2] >>> (24 - (n % 4) * 8)) & 255;
                        a.push((s >>> 4).toString(16)),
                          a.push((15 & s).toString(16));
                      }
                      return a.join("");
                    },
                    parse: function (e) {
                      for (var t = e.length, r = [], a = 0; a < t; a += 2)
                        r[a >>> 3] |=
                          parseInt(e.substr(a, 2), 16) << (24 - (a % 8) * 4);
                      return new d.init(r, t / 2);
                    },
                  }),
                  u = (l.Latin1 = {
                    stringify: function (e) {
                      for (
                        var t = e.words, r = e.sigBytes, a = [], n = 0;
                        n < r;
                        n++
                      ) {
                        var s = (t[n >>> 2] >>> (24 - (n % 4) * 8)) & 255;
                        a.push(String.fromCharCode(s));
                      }
                      return a.join("");
                    },
                    parse: function (e) {
                      for (var t = e.length, r = [], a = 0; a < t; a++)
                        r[a >>> 2] |=
                          (255 & e.charCodeAt(a)) << (24 - (a % 4) * 8);
                      return new d.init(r, t);
                    },
                  }),
                  h = (l.Utf8 = {
                    stringify: function (e) {
                      try {
                        return decodeURIComponent(escape(u.stringify(e)));
                      } catch (e) {
                        throw new Error("Malformed UTF-8 data");
                      }
                    },
                    parse: function (e) {
                      return u.parse(unescape(encodeURIComponent(e)));
                    },
                  }),
                  m = (o.BufferedBlockAlgorithm = c.extend({
                    reset: function () {
                      (this._data = new d.init()), (this._nDataBytes = 0);
                    },
                    _append: function (e) {
                      "string" == typeof e && (e = h.parse(e)),
                        this._data.concat(e),
                        (this._nDataBytes += e.sigBytes);
                    },
                    _process: function (t) {
                      var r,
                        a = this._data,
                        n = a.words,
                        s = a.sigBytes,
                        i = this.blockSize,
                        o = s / (4 * i),
                        c =
                          (o = t
                            ? e.ceil(o)
                            : e.max((0 | o) - this._minBufferSize, 0)) * i,
                        l = e.min(4 * c, s);
                      if (c) {
                        for (var p = 0; p < c; p += i)
                          this._doProcessBlock(n, p);
                        (r = n.splice(0, c)), (a.sigBytes -= l);
                      }
                      return new d.init(r, l);
                    },
                    clone: function () {
                      var e = c.clone.call(this);
                      return (e._data = this._data.clone()), e;
                    },
                    _minBufferSize: 0,
                  })),
                  f =
                    ((o.Hasher = m.extend({
                      cfg: c.extend(),
                      init: function (e) {
                        (this.cfg = this.cfg.extend(e)), this.reset();
                      },
                      reset: function () {
                        m.reset.call(this), this._doReset();
                      },
                      update: function (e) {
                        return this._append(e), this._process(), this;
                      },
                      finalize: function (e) {
                        return e && this._append(e), this._doFinalize();
                      },
                      blockSize: 16,
                      _createHelper: function (e) {
                        return function (t, r) {
                          return new e.init(r).finalize(t);
                        };
                      },
                      _createHmacHelper: function (e) {
                        return function (t, r) {
                          return new f.HMAC.init(e, r).finalize(t);
                        };
                      },
                    })),
                    (i.algo = {}));
                return i;
              })(Math)),
            a);
        },
        754: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            (function () {
              var e = a,
                t = e.lib.WordArray;
              function r(e, r, a) {
                for (var n = [], s = 0, i = 0; i < r; i++)
                  if (i % 4) {
                    var o =
                      (a[e.charCodeAt(i - 1)] << ((i % 4) * 2)) |
                      (a[e.charCodeAt(i)] >>> (6 - (i % 4) * 2));
                    (n[s >>> 2] |= o << (24 - (s % 4) * 8)), s++;
                  }
                return t.create(n, s);
              }
              e.enc.Base64 = {
                stringify: function (e) {
                  var t = e.words,
                    r = e.sigBytes,
                    a = this._map;
                  e.clamp();
                  for (var n = [], s = 0; s < r; s += 3)
                    for (
                      var i =
                          (((t[s >>> 2] >>> (24 - (s % 4) * 8)) & 255) << 16) |
                          (((t[(s + 1) >>> 2] >>> (24 - ((s + 1) % 4) * 8)) &
                            255) <<
                            8) |
                          ((t[(s + 2) >>> 2] >>> (24 - ((s + 2) % 4) * 8)) &
                            255),
                        o = 0;
                      o < 4 && s + 0.75 * o < r;
                      o++
                    )
                      n.push(a.charAt((i >>> (6 * (3 - o))) & 63));
                  var c = a.charAt(64);
                  if (c) for (; n.length % 4; ) n.push(c);
                  return n.join("");
                },
                parse: function (e) {
                  var t = e.length,
                    a = this._map,
                    n = this._reverseMap;
                  if (!n) {
                    n = this._reverseMap = [];
                    for (var s = 0; s < a.length; s++) n[a.charCodeAt(s)] = s;
                  }
                  var i = a.charAt(64);
                  if (i) {
                    var o = e.indexOf(i);
                    -1 !== o && (t = o);
                  }
                  return r(e, t, n);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
              };
            })(),
            a.enc.Base64);
        },
        4725: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            (function () {
              var e = a,
                t = e.lib.WordArray;
              function r(e, r, a) {
                for (var n = [], s = 0, i = 0; i < r; i++)
                  if (i % 4) {
                    var o =
                      (a[e.charCodeAt(i - 1)] << ((i % 4) * 2)) |
                      (a[e.charCodeAt(i)] >>> (6 - (i % 4) * 2));
                    (n[s >>> 2] |= o << (24 - (s % 4) * 8)), s++;
                  }
                return t.create(n, s);
              }
              e.enc.Base64url = {
                stringify: function (e, t) {
                  void 0 === t && (t = !0);
                  var r = e.words,
                    a = e.sigBytes,
                    n = t ? this._safe_map : this._map;
                  e.clamp();
                  for (var s = [], i = 0; i < a; i += 3)
                    for (
                      var o =
                          (((r[i >>> 2] >>> (24 - (i % 4) * 8)) & 255) << 16) |
                          (((r[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) &
                            255) <<
                            8) |
                          ((r[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) &
                            255),
                        c = 0;
                      c < 4 && i + 0.75 * c < a;
                      c++
                    )
                      s.push(n.charAt((o >>> (6 * (3 - c))) & 63));
                  var d = n.charAt(64);
                  if (d) for (; s.length % 4; ) s.push(d);
                  return s.join("");
                },
                parse: function (e, t) {
                  void 0 === t && (t = !0);
                  var a = e.length,
                    n = t ? this._safe_map : this._map,
                    s = this._reverseMap;
                  if (!s) {
                    s = this._reverseMap = [];
                    for (var i = 0; i < n.length; i++) s[n.charCodeAt(i)] = i;
                  }
                  var o = n.charAt(64);
                  if (o) {
                    var c = e.indexOf(o);
                    -1 !== c && (a = c);
                  }
                  return r(e, a, s);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                _safe_map:
                  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
              };
            })(),
            a.enc.Base64url);
        },
        5503: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            (function () {
              var e = a,
                t = e.lib.WordArray,
                r = e.enc;
              function n(e) {
                return ((e << 8) & 4278255360) | ((e >>> 8) & 16711935);
              }
              (r.Utf16 = r.Utf16BE =
                {
                  stringify: function (e) {
                    for (
                      var t = e.words, r = e.sigBytes, a = [], n = 0;
                      n < r;
                      n += 2
                    ) {
                      var s = (t[n >>> 2] >>> (16 - (n % 4) * 8)) & 65535;
                      a.push(String.fromCharCode(s));
                    }
                    return a.join("");
                  },
                  parse: function (e) {
                    for (var r = e.length, a = [], n = 0; n < r; n++)
                      a[n >>> 1] |= e.charCodeAt(n) << (16 - (n % 2) * 16);
                    return t.create(a, 2 * r);
                  },
                }),
                (r.Utf16LE = {
                  stringify: function (e) {
                    for (
                      var t = e.words, r = e.sigBytes, a = [], s = 0;
                      s < r;
                      s += 2
                    ) {
                      var i = n((t[s >>> 2] >>> (16 - (s % 4) * 8)) & 65535);
                      a.push(String.fromCharCode(i));
                    }
                    return a.join("");
                  },
                  parse: function (e) {
                    for (var r = e.length, a = [], s = 0; s < r; s++)
                      a[s >>> 1] |= n(e.charCodeAt(s) << (16 - (s % 2) * 16));
                    return t.create(a, 2 * r);
                  },
                });
            })(),
            a.enc.Utf16);
        },
        9506: function (e, t, r) {
          var a, n, s, i, o, c, d, l;
          e.exports =
            ((l = r(9021)),
            r(5471),
            r(1025),
            (n = (a = l).lib),
            (s = n.Base),
            (i = n.WordArray),
            (o = a.algo),
            (c = o.MD5),
            (d = o.EvpKDF =
              s.extend({
                cfg: s.extend({ keySize: 4, hasher: c, iterations: 1 }),
                init: function (e) {
                  this.cfg = this.cfg.extend(e);
                },
                compute: function (e, t) {
                  for (
                    var r,
                      a = this.cfg,
                      n = a.hasher.create(),
                      s = i.create(),
                      o = s.words,
                      c = a.keySize,
                      d = a.iterations;
                    o.length < c;

                  ) {
                    r && n.update(r), (r = n.update(e).finalize(t)), n.reset();
                    for (var l = 1; l < d; l++) (r = n.finalize(r)), n.reset();
                    s.concat(r);
                  }
                  return (s.sigBytes = 4 * c), s;
                },
              })),
            (a.EvpKDF = function (e, t, r) {
              return d.create(r).compute(e, t);
            }),
            l.EvpKDF);
        },
        25: function (e, t, r) {
          var a, n, s, i;
          e.exports =
            ((i = r(9021)),
            r(7165),
            (n = (a = i).lib.CipherParams),
            (s = a.enc.Hex),
            (a.format.Hex = {
              stringify: function (e) {
                return e.ciphertext.toString(s);
              },
              parse: function (e) {
                var t = s.parse(e);
                return n.create({ ciphertext: t });
              },
            }),
            i.format.Hex);
        },
        1025: function (e, t, r) {
          var a, n, s, i;
          e.exports =
            ((a = r(9021)),
            (s = (n = a).lib.Base),
            (i = n.enc.Utf8),
            void (n.algo.HMAC = s.extend({
              init: function (e, t) {
                (e = this._hasher = new e.init()),
                  "string" == typeof t && (t = i.parse(t));
                var r = e.blockSize,
                  a = 4 * r;
                t.sigBytes > a && (t = e.finalize(t)), t.clamp();
                for (
                  var n = (this._oKey = t.clone()),
                    s = (this._iKey = t.clone()),
                    o = n.words,
                    c = s.words,
                    d = 0;
                  d < r;
                  d++
                )
                  (o[d] ^= 1549556828), (c[d] ^= 909522486);
                (n.sigBytes = s.sigBytes = a), this.reset();
              },
              reset: function () {
                var e = this._hasher;
                e.reset(), e.update(this._iKey);
              },
              update: function (e) {
                return this._hasher.update(e), this;
              },
              finalize: function (e) {
                var t = this._hasher,
                  r = t.finalize(e);
                return t.reset(), t.finalize(this._oKey.clone().concat(r));
              },
            })));
        },
        1396: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(3240),
            r(6440),
            r(5503),
            r(754),
            r(4725),
            r(4636),
            r(5471),
            r(3009),
            r(6308),
            r(1380),
            r(9557),
            r(5953),
            r(8056),
            r(1025),
            r(19),
            r(9506),
            r(7165),
            r(2169),
            r(6939),
            r(6372),
            r(3797),
            r(8454),
            r(2073),
            r(4905),
            r(482),
            r(2155),
            r(8124),
            r(25),
            r(955),
            r(7628),
            r(7193),
            r(6298),
            r(2696),
            r(3128),
            a);
        },
        6440: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            (function () {
              if ("function" == typeof ArrayBuffer) {
                var e = a.lib.WordArray,
                  t = e.init,
                  r = (e.init = function (e) {
                    if (
                      (e instanceof ArrayBuffer && (e = new Uint8Array(e)),
                      (e instanceof Int8Array ||
                        ("undefined" != typeof Uint8ClampedArray &&
                          e instanceof Uint8ClampedArray) ||
                        e instanceof Int16Array ||
                        e instanceof Uint16Array ||
                        e instanceof Int32Array ||
                        e instanceof Uint32Array ||
                        e instanceof Float32Array ||
                        e instanceof Float64Array) &&
                        (e = new Uint8Array(
                          e.buffer,
                          e.byteOffset,
                          e.byteLength
                        )),
                      e instanceof Uint8Array)
                    ) {
                      for (var r = e.byteLength, a = [], n = 0; n < r; n++)
                        a[n >>> 2] |= e[n] << (24 - (n % 4) * 8);
                      t.call(this, a, r);
                    } else t.apply(this, arguments);
                  });
                r.prototype = e;
              }
            })(),
            a.lib.WordArray);
        },
        4636: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            (function (e) {
              var t = a,
                r = t.lib,
                n = r.WordArray,
                s = r.Hasher,
                i = t.algo,
                o = [];
              !(function () {
                for (var t = 0; t < 64; t++)
                  o[t] = (4294967296 * e.abs(e.sin(t + 1))) | 0;
              })();
              var c = (i.MD5 = s.extend({
                _doReset: function () {
                  this._hash = new n.init([
                    1732584193, 4023233417, 2562383102, 271733878,
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (var r = 0; r < 16; r++) {
                    var a = t + r,
                      n = e[a];
                    e[a] =
                      (16711935 & ((n << 8) | (n >>> 24))) |
                      (4278255360 & ((n << 24) | (n >>> 8)));
                  }
                  var s = this._hash.words,
                    i = e[t + 0],
                    c = e[t + 1],
                    h = e[t + 2],
                    m = e[t + 3],
                    f = e[t + 4],
                    g = e[t + 5],
                    _ = e[t + 6],
                    v = e[t + 7],
                    b = e[t + 8],
                    y = e[t + 9],
                    w = e[t + 10],
                    S = e[t + 11],
                    R = e[t + 12],
                    E = e[t + 13],
                    k = e[t + 14],
                    T = e[t + 15],
                    C = s[0],
                    P = s[1],
                    O = s[2],
                    D = s[3];
                  (C = d(C, P, O, D, i, 7, o[0])),
                    (D = d(D, C, P, O, c, 12, o[1])),
                    (O = d(O, D, C, P, h, 17, o[2])),
                    (P = d(P, O, D, C, m, 22, o[3])),
                    (C = d(C, P, O, D, f, 7, o[4])),
                    (D = d(D, C, P, O, g, 12, o[5])),
                    (O = d(O, D, C, P, _, 17, o[6])),
                    (P = d(P, O, D, C, v, 22, o[7])),
                    (C = d(C, P, O, D, b, 7, o[8])),
                    (D = d(D, C, P, O, y, 12, o[9])),
                    (O = d(O, D, C, P, w, 17, o[10])),
                    (P = d(P, O, D, C, S, 22, o[11])),
                    (C = d(C, P, O, D, R, 7, o[12])),
                    (D = d(D, C, P, O, E, 12, o[13])),
                    (O = d(O, D, C, P, k, 17, o[14])),
                    (C = l(
                      C,
                      (P = d(P, O, D, C, T, 22, o[15])),
                      O,
                      D,
                      c,
                      5,
                      o[16]
                    )),
                    (D = l(D, C, P, O, _, 9, o[17])),
                    (O = l(O, D, C, P, S, 14, o[18])),
                    (P = l(P, O, D, C, i, 20, o[19])),
                    (C = l(C, P, O, D, g, 5, o[20])),
                    (D = l(D, C, P, O, w, 9, o[21])),
                    (O = l(O, D, C, P, T, 14, o[22])),
                    (P = l(P, O, D, C, f, 20, o[23])),
                    (C = l(C, P, O, D, y, 5, o[24])),
                    (D = l(D, C, P, O, k, 9, o[25])),
                    (O = l(O, D, C, P, m, 14, o[26])),
                    (P = l(P, O, D, C, b, 20, o[27])),
                    (C = l(C, P, O, D, E, 5, o[28])),
                    (D = l(D, C, P, O, h, 9, o[29])),
                    (O = l(O, D, C, P, v, 14, o[30])),
                    (C = p(
                      C,
                      (P = l(P, O, D, C, R, 20, o[31])),
                      O,
                      D,
                      g,
                      4,
                      o[32]
                    )),
                    (D = p(D, C, P, O, b, 11, o[33])),
                    (O = p(O, D, C, P, S, 16, o[34])),
                    (P = p(P, O, D, C, k, 23, o[35])),
                    (C = p(C, P, O, D, c, 4, o[36])),
                    (D = p(D, C, P, O, f, 11, o[37])),
                    (O = p(O, D, C, P, v, 16, o[38])),
                    (P = p(P, O, D, C, w, 23, o[39])),
                    (C = p(C, P, O, D, E, 4, o[40])),
                    (D = p(D, C, P, O, i, 11, o[41])),
                    (O = p(O, D, C, P, m, 16, o[42])),
                    (P = p(P, O, D, C, _, 23, o[43])),
                    (C = p(C, P, O, D, y, 4, o[44])),
                    (D = p(D, C, P, O, R, 11, o[45])),
                    (O = p(O, D, C, P, T, 16, o[46])),
                    (C = u(
                      C,
                      (P = p(P, O, D, C, h, 23, o[47])),
                      O,
                      D,
                      i,
                      6,
                      o[48]
                    )),
                    (D = u(D, C, P, O, v, 10, o[49])),
                    (O = u(O, D, C, P, k, 15, o[50])),
                    (P = u(P, O, D, C, g, 21, o[51])),
                    (C = u(C, P, O, D, R, 6, o[52])),
                    (D = u(D, C, P, O, m, 10, o[53])),
                    (O = u(O, D, C, P, w, 15, o[54])),
                    (P = u(P, O, D, C, c, 21, o[55])),
                    (C = u(C, P, O, D, b, 6, o[56])),
                    (D = u(D, C, P, O, T, 10, o[57])),
                    (O = u(O, D, C, P, _, 15, o[58])),
                    (P = u(P, O, D, C, E, 21, o[59])),
                    (C = u(C, P, O, D, f, 6, o[60])),
                    (D = u(D, C, P, O, S, 10, o[61])),
                    (O = u(O, D, C, P, h, 15, o[62])),
                    (P = u(P, O, D, C, y, 21, o[63])),
                    (s[0] = (s[0] + C) | 0),
                    (s[1] = (s[1] + P) | 0),
                    (s[2] = (s[2] + O) | 0),
                    (s[3] = (s[3] + D) | 0);
                },
                _doFinalize: function () {
                  var t = this._data,
                    r = t.words,
                    a = 8 * this._nDataBytes,
                    n = 8 * t.sigBytes;
                  r[n >>> 5] |= 128 << (24 - (n % 32));
                  var s = e.floor(a / 4294967296),
                    i = a;
                  (r[15 + (((n + 64) >>> 9) << 4)] =
                    (16711935 & ((s << 8) | (s >>> 24))) |
                    (4278255360 & ((s << 24) | (s >>> 8)))),
                    (r[14 + (((n + 64) >>> 9) << 4)] =
                      (16711935 & ((i << 8) | (i >>> 24))) |
                      (4278255360 & ((i << 24) | (i >>> 8)))),
                    (t.sigBytes = 4 * (r.length + 1)),
                    this._process();
                  for (var o = this._hash, c = o.words, d = 0; d < 4; d++) {
                    var l = c[d];
                    c[d] =
                      (16711935 & ((l << 8) | (l >>> 24))) |
                      (4278255360 & ((l << 24) | (l >>> 8)));
                  }
                  return o;
                },
                clone: function () {
                  var e = s.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
              }));
              function d(e, t, r, a, n, s, i) {
                var o = e + ((t & r) | (~t & a)) + n + i;
                return ((o << s) | (o >>> (32 - s))) + t;
              }
              function l(e, t, r, a, n, s, i) {
                var o = e + ((t & a) | (r & ~a)) + n + i;
                return ((o << s) | (o >>> (32 - s))) + t;
              }
              function p(e, t, r, a, n, s, i) {
                var o = e + (t ^ r ^ a) + n + i;
                return ((o << s) | (o >>> (32 - s))) + t;
              }
              function u(e, t, r, a, n, s, i) {
                var o = e + (r ^ (t | ~a)) + n + i;
                return ((o << s) | (o >>> (32 - s))) + t;
              }
              (t.MD5 = s._createHelper(c)),
                (t.HmacMD5 = s._createHmacHelper(c));
            })(Math),
            a.MD5);
        },
        2169: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(7165),
            (a.mode.CFB = (function () {
              var e = a.lib.BlockCipherMode.extend();
              function t(e, t, r, a) {
                var n,
                  s = this._iv;
                s
                  ? ((n = s.slice(0)), (this._iv = void 0))
                  : (n = this._prevBlock),
                  a.encryptBlock(n, 0);
                for (var i = 0; i < r; i++) e[t + i] ^= n[i];
              }
              return (
                (e.Encryptor = e.extend({
                  processBlock: function (e, r) {
                    var a = this._cipher,
                      n = a.blockSize;
                    t.call(this, e, r, n, a),
                      (this._prevBlock = e.slice(r, r + n));
                  },
                })),
                (e.Decryptor = e.extend({
                  processBlock: function (e, r) {
                    var a = this._cipher,
                      n = a.blockSize,
                      s = e.slice(r, r + n);
                    t.call(this, e, r, n, a), (this._prevBlock = s);
                  },
                })),
                e
              );
            })()),
            a.mode.CFB);
        },
        6372: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(7165),
            (a.mode.CTRGladman = (function () {
              var e = a.lib.BlockCipherMode.extend();
              function t(e) {
                if (255 & ~(e >> 24)) e += 1 << 24;
                else {
                  var t = (e >> 16) & 255,
                    r = (e >> 8) & 255,
                    a = 255 & e;
                  255 === t
                    ? ((t = 0),
                      255 === r ? ((r = 0), 255 === a ? (a = 0) : ++a) : ++r)
                    : ++t,
                    (e = 0),
                    (e += t << 16),
                    (e += r << 8),
                    (e += a);
                }
                return e;
              }
              function r(e) {
                return 0 === (e[0] = t(e[0])) && (e[1] = t(e[1])), e;
              }
              var n = (e.Encryptor = e.extend({
                processBlock: function (e, t) {
                  var a = this._cipher,
                    n = a.blockSize,
                    s = this._iv,
                    i = this._counter;
                  s && ((i = this._counter = s.slice(0)), (this._iv = void 0)),
                    r(i);
                  var o = i.slice(0);
                  a.encryptBlock(o, 0);
                  for (var c = 0; c < n; c++) e[t + c] ^= o[c];
                },
              }));
              return (e.Decryptor = n), e;
            })()),
            a.mode.CTRGladman);
        },
        6939: function (e, t, r) {
          var a, n, s;
          e.exports =
            ((s = r(9021)),
            r(7165),
            (s.mode.CTR =
              ((a = s.lib.BlockCipherMode.extend()),
              (n = a.Encryptor =
                a.extend({
                  processBlock: function (e, t) {
                    var r = this._cipher,
                      a = r.blockSize,
                      n = this._iv,
                      s = this._counter;
                    n &&
                      ((s = this._counter = n.slice(0)), (this._iv = void 0));
                    var i = s.slice(0);
                    r.encryptBlock(i, 0), (s[a - 1] = (s[a - 1] + 1) | 0);
                    for (var o = 0; o < a; o++) e[t + o] ^= i[o];
                  },
                })),
              (a.Decryptor = n),
              a)),
            s.mode.CTR);
        },
        8454: function (e, t, r) {
          var a, n;
          e.exports =
            ((n = r(9021)),
            r(7165),
            (n.mode.ECB =
              (((a = n.lib.BlockCipherMode.extend()).Encryptor = a.extend({
                processBlock: function (e, t) {
                  this._cipher.encryptBlock(e, t);
                },
              })),
              (a.Decryptor = a.extend({
                processBlock: function (e, t) {
                  this._cipher.decryptBlock(e, t);
                },
              })),
              a)),
            n.mode.ECB);
        },
        3797: function (e, t, r) {
          var a, n, s;
          e.exports =
            ((s = r(9021)),
            r(7165),
            (s.mode.OFB =
              ((a = s.lib.BlockCipherMode.extend()),
              (n = a.Encryptor =
                a.extend({
                  processBlock: function (e, t) {
                    var r = this._cipher,
                      a = r.blockSize,
                      n = this._iv,
                      s = this._keystream;
                    n &&
                      ((s = this._keystream = n.slice(0)), (this._iv = void 0)),
                      r.encryptBlock(s, 0);
                    for (var i = 0; i < a; i++) e[t + i] ^= s[i];
                  },
                })),
              (a.Decryptor = n),
              a)),
            s.mode.OFB);
        },
        2073: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(7165),
            (a.pad.AnsiX923 = {
              pad: function (e, t) {
                var r = e.sigBytes,
                  a = 4 * t,
                  n = a - (r % a),
                  s = r + n - 1;
                e.clamp(),
                  (e.words[s >>> 2] |= n << (24 - (s % 4) * 8)),
                  (e.sigBytes += n);
              },
              unpad: function (e) {
                var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                e.sigBytes -= t;
              },
            }),
            a.pad.Ansix923);
        },
        4905: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(7165),
            (a.pad.Iso10126 = {
              pad: function (e, t) {
                var r = 4 * t,
                  n = r - (e.sigBytes % r);
                e.concat(a.lib.WordArray.random(n - 1)).concat(
                  a.lib.WordArray.create([n << 24], 1)
                );
              },
              unpad: function (e) {
                var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                e.sigBytes -= t;
              },
            }),
            a.pad.Iso10126);
        },
        482: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(7165),
            (a.pad.Iso97971 = {
              pad: function (e, t) {
                e.concat(a.lib.WordArray.create([2147483648], 1)),
                  a.pad.ZeroPadding.pad(e, t);
              },
              unpad: function (e) {
                a.pad.ZeroPadding.unpad(e), e.sigBytes--;
              },
            }),
            a.pad.Iso97971);
        },
        8124: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(7165),
            (a.pad.NoPadding = { pad: function () {}, unpad: function () {} }),
            a.pad.NoPadding);
        },
        2155: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(7165),
            (a.pad.ZeroPadding = {
              pad: function (e, t) {
                var r = 4 * t;
                e.clamp(), (e.sigBytes += r - (e.sigBytes % r || r));
              },
              unpad: function (e) {
                var t = e.words,
                  r = e.sigBytes - 1;
                for (r = e.sigBytes - 1; r >= 0; r--)
                  if ((t[r >>> 2] >>> (24 - (r % 4) * 8)) & 255) {
                    e.sigBytes = r + 1;
                    break;
                  }
              },
            }),
            a.pad.ZeroPadding);
        },
        19: function (e, t, r) {
          var a, n, s, i, o, c, d, l, p;
          e.exports =
            ((p = r(9021)),
            r(3009),
            r(1025),
            (n = (a = p).lib),
            (s = n.Base),
            (i = n.WordArray),
            (o = a.algo),
            (c = o.SHA256),
            (d = o.HMAC),
            (l = o.PBKDF2 =
              s.extend({
                cfg: s.extend({ keySize: 4, hasher: c, iterations: 25e4 }),
                init: function (e) {
                  this.cfg = this.cfg.extend(e);
                },
                compute: function (e, t) {
                  for (
                    var r = this.cfg,
                      a = d.create(r.hasher, e),
                      n = i.create(),
                      s = i.create([1]),
                      o = n.words,
                      c = s.words,
                      l = r.keySize,
                      p = r.iterations;
                    o.length < l;

                  ) {
                    var u = a.update(t).finalize(s);
                    a.reset();
                    for (
                      var h = u.words, m = h.length, f = u, g = 1;
                      g < p;
                      g++
                    ) {
                      (f = a.finalize(f)), a.reset();
                      for (var _ = f.words, v = 0; v < m; v++) h[v] ^= _[v];
                    }
                    n.concat(u), c[0]++;
                  }
                  return (n.sigBytes = 4 * l), n;
                },
              })),
            (a.PBKDF2 = function (e, t, r) {
              return l.create(r).compute(e, t);
            }),
            p.PBKDF2);
        },
        2696: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(754),
            r(4636),
            r(9506),
            r(7165),
            (function () {
              var e = a,
                t = e.lib.StreamCipher,
                r = e.algo,
                n = [],
                s = [],
                i = [],
                o = (r.RabbitLegacy = t.extend({
                  _doReset: function () {
                    var e = this._key.words,
                      t = this.cfg.iv,
                      r = (this._X = [
                        e[0],
                        (e[3] << 16) | (e[2] >>> 16),
                        e[1],
                        (e[0] << 16) | (e[3] >>> 16),
                        e[2],
                        (e[1] << 16) | (e[0] >>> 16),
                        e[3],
                        (e[2] << 16) | (e[1] >>> 16),
                      ]),
                      a = (this._C = [
                        (e[2] << 16) | (e[2] >>> 16),
                        (4294901760 & e[0]) | (65535 & e[1]),
                        (e[3] << 16) | (e[3] >>> 16),
                        (4294901760 & e[1]) | (65535 & e[2]),
                        (e[0] << 16) | (e[0] >>> 16),
                        (4294901760 & e[2]) | (65535 & e[3]),
                        (e[1] << 16) | (e[1] >>> 16),
                        (4294901760 & e[3]) | (65535 & e[0]),
                      ]);
                    this._b = 0;
                    for (var n = 0; n < 4; n++) c.call(this);
                    for (n = 0; n < 8; n++) a[n] ^= r[(n + 4) & 7];
                    if (t) {
                      var s = t.words,
                        i = s[0],
                        o = s[1],
                        d =
                          (16711935 & ((i << 8) | (i >>> 24))) |
                          (4278255360 & ((i << 24) | (i >>> 8))),
                        l =
                          (16711935 & ((o << 8) | (o >>> 24))) |
                          (4278255360 & ((o << 24) | (o >>> 8))),
                        p = (d >>> 16) | (4294901760 & l),
                        u = (l << 16) | (65535 & d);
                      for (
                        a[0] ^= d,
                          a[1] ^= p,
                          a[2] ^= l,
                          a[3] ^= u,
                          a[4] ^= d,
                          a[5] ^= p,
                          a[6] ^= l,
                          a[7] ^= u,
                          n = 0;
                        n < 4;
                        n++
                      )
                        c.call(this);
                    }
                  },
                  _doProcessBlock: function (e, t) {
                    var r = this._X;
                    c.call(this),
                      (n[0] = r[0] ^ (r[5] >>> 16) ^ (r[3] << 16)),
                      (n[1] = r[2] ^ (r[7] >>> 16) ^ (r[5] << 16)),
                      (n[2] = r[4] ^ (r[1] >>> 16) ^ (r[7] << 16)),
                      (n[3] = r[6] ^ (r[3] >>> 16) ^ (r[1] << 16));
                    for (var a = 0; a < 4; a++)
                      (n[a] =
                        (16711935 & ((n[a] << 8) | (n[a] >>> 24))) |
                        (4278255360 & ((n[a] << 24) | (n[a] >>> 8)))),
                        (e[t + a] ^= n[a]);
                  },
                  blockSize: 4,
                  ivSize: 2,
                }));
              function c() {
                for (var e = this._X, t = this._C, r = 0; r < 8; r++)
                  s[r] = t[r];
                for (
                  t[0] = (t[0] + 1295307597 + this._b) | 0,
                    t[1] =
                      (t[1] + 3545052371 + (t[0] >>> 0 < s[0] >>> 0 ? 1 : 0)) |
                      0,
                    t[2] =
                      (t[2] + 886263092 + (t[1] >>> 0 < s[1] >>> 0 ? 1 : 0)) |
                      0,
                    t[3] =
                      (t[3] + 1295307597 + (t[2] >>> 0 < s[2] >>> 0 ? 1 : 0)) |
                      0,
                    t[4] =
                      (t[4] + 3545052371 + (t[3] >>> 0 < s[3] >>> 0 ? 1 : 0)) |
                      0,
                    t[5] =
                      (t[5] + 886263092 + (t[4] >>> 0 < s[4] >>> 0 ? 1 : 0)) |
                      0,
                    t[6] =
                      (t[6] + 1295307597 + (t[5] >>> 0 < s[5] >>> 0 ? 1 : 0)) |
                      0,
                    t[7] =
                      (t[7] + 3545052371 + (t[6] >>> 0 < s[6] >>> 0 ? 1 : 0)) |
                      0,
                    this._b = t[7] >>> 0 < s[7] >>> 0 ? 1 : 0,
                    r = 0;
                  r < 8;
                  r++
                ) {
                  var a = e[r] + t[r],
                    n = 65535 & a,
                    o = a >>> 16,
                    c = ((((n * n) >>> 17) + n * o) >>> 15) + o * o,
                    d = (((4294901760 & a) * a) | 0) + (((65535 & a) * a) | 0);
                  i[r] = c ^ d;
                }
                (e[0] =
                  (i[0] +
                    ((i[7] << 16) | (i[7] >>> 16)) +
                    ((i[6] << 16) | (i[6] >>> 16))) |
                  0),
                  (e[1] = (i[1] + ((i[0] << 8) | (i[0] >>> 24)) + i[7]) | 0),
                  (e[2] =
                    (i[2] +
                      ((i[1] << 16) | (i[1] >>> 16)) +
                      ((i[0] << 16) | (i[0] >>> 16))) |
                    0),
                  (e[3] = (i[3] + ((i[2] << 8) | (i[2] >>> 24)) + i[1]) | 0),
                  (e[4] =
                    (i[4] +
                      ((i[3] << 16) | (i[3] >>> 16)) +
                      ((i[2] << 16) | (i[2] >>> 16))) |
                    0),
                  (e[5] = (i[5] + ((i[4] << 8) | (i[4] >>> 24)) + i[3]) | 0),
                  (e[6] =
                    (i[6] +
                      ((i[5] << 16) | (i[5] >>> 16)) +
                      ((i[4] << 16) | (i[4] >>> 16))) |
                    0),
                  (e[7] = (i[7] + ((i[6] << 8) | (i[6] >>> 24)) + i[5]) | 0);
              }
              e.RabbitLegacy = t._createHelper(o);
            })(),
            a.RabbitLegacy);
        },
        6298: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(754),
            r(4636),
            r(9506),
            r(7165),
            (function () {
              var e = a,
                t = e.lib.StreamCipher,
                r = e.algo,
                n = [],
                s = [],
                i = [],
                o = (r.Rabbit = t.extend({
                  _doReset: function () {
                    for (
                      var e = this._key.words, t = this.cfg.iv, r = 0;
                      r < 4;
                      r++
                    )
                      e[r] =
                        (16711935 & ((e[r] << 8) | (e[r] >>> 24))) |
                        (4278255360 & ((e[r] << 24) | (e[r] >>> 8)));
                    var a = (this._X = [
                        e[0],
                        (e[3] << 16) | (e[2] >>> 16),
                        e[1],
                        (e[0] << 16) | (e[3] >>> 16),
                        e[2],
                        (e[1] << 16) | (e[0] >>> 16),
                        e[3],
                        (e[2] << 16) | (e[1] >>> 16),
                      ]),
                      n = (this._C = [
                        (e[2] << 16) | (e[2] >>> 16),
                        (4294901760 & e[0]) | (65535 & e[1]),
                        (e[3] << 16) | (e[3] >>> 16),
                        (4294901760 & e[1]) | (65535 & e[2]),
                        (e[0] << 16) | (e[0] >>> 16),
                        (4294901760 & e[2]) | (65535 & e[3]),
                        (e[1] << 16) | (e[1] >>> 16),
                        (4294901760 & e[3]) | (65535 & e[0]),
                      ]);
                    for (this._b = 0, r = 0; r < 4; r++) c.call(this);
                    for (r = 0; r < 8; r++) n[r] ^= a[(r + 4) & 7];
                    if (t) {
                      var s = t.words,
                        i = s[0],
                        o = s[1],
                        d =
                          (16711935 & ((i << 8) | (i >>> 24))) |
                          (4278255360 & ((i << 24) | (i >>> 8))),
                        l =
                          (16711935 & ((o << 8) | (o >>> 24))) |
                          (4278255360 & ((o << 24) | (o >>> 8))),
                        p = (d >>> 16) | (4294901760 & l),
                        u = (l << 16) | (65535 & d);
                      for (
                        n[0] ^= d,
                          n[1] ^= p,
                          n[2] ^= l,
                          n[3] ^= u,
                          n[4] ^= d,
                          n[5] ^= p,
                          n[6] ^= l,
                          n[7] ^= u,
                          r = 0;
                        r < 4;
                        r++
                      )
                        c.call(this);
                    }
                  },
                  _doProcessBlock: function (e, t) {
                    var r = this._X;
                    c.call(this),
                      (n[0] = r[0] ^ (r[5] >>> 16) ^ (r[3] << 16)),
                      (n[1] = r[2] ^ (r[7] >>> 16) ^ (r[5] << 16)),
                      (n[2] = r[4] ^ (r[1] >>> 16) ^ (r[7] << 16)),
                      (n[3] = r[6] ^ (r[3] >>> 16) ^ (r[1] << 16));
                    for (var a = 0; a < 4; a++)
                      (n[a] =
                        (16711935 & ((n[a] << 8) | (n[a] >>> 24))) |
                        (4278255360 & ((n[a] << 24) | (n[a] >>> 8)))),
                        (e[t + a] ^= n[a]);
                  },
                  blockSize: 4,
                  ivSize: 2,
                }));
              function c() {
                for (var e = this._X, t = this._C, r = 0; r < 8; r++)
                  s[r] = t[r];
                for (
                  t[0] = (t[0] + 1295307597 + this._b) | 0,
                    t[1] =
                      (t[1] + 3545052371 + (t[0] >>> 0 < s[0] >>> 0 ? 1 : 0)) |
                      0,
                    t[2] =
                      (t[2] + 886263092 + (t[1] >>> 0 < s[1] >>> 0 ? 1 : 0)) |
                      0,
                    t[3] =
                      (t[3] + 1295307597 + (t[2] >>> 0 < s[2] >>> 0 ? 1 : 0)) |
                      0,
                    t[4] =
                      (t[4] + 3545052371 + (t[3] >>> 0 < s[3] >>> 0 ? 1 : 0)) |
                      0,
                    t[5] =
                      (t[5] + 886263092 + (t[4] >>> 0 < s[4] >>> 0 ? 1 : 0)) |
                      0,
                    t[6] =
                      (t[6] + 1295307597 + (t[5] >>> 0 < s[5] >>> 0 ? 1 : 0)) |
                      0,
                    t[7] =
                      (t[7] + 3545052371 + (t[6] >>> 0 < s[6] >>> 0 ? 1 : 0)) |
                      0,
                    this._b = t[7] >>> 0 < s[7] >>> 0 ? 1 : 0,
                    r = 0;
                  r < 8;
                  r++
                ) {
                  var a = e[r] + t[r],
                    n = 65535 & a,
                    o = a >>> 16,
                    c = ((((n * n) >>> 17) + n * o) >>> 15) + o * o,
                    d = (((4294901760 & a) * a) | 0) + (((65535 & a) * a) | 0);
                  i[r] = c ^ d;
                }
                (e[0] =
                  (i[0] +
                    ((i[7] << 16) | (i[7] >>> 16)) +
                    ((i[6] << 16) | (i[6] >>> 16))) |
                  0),
                  (e[1] = (i[1] + ((i[0] << 8) | (i[0] >>> 24)) + i[7]) | 0),
                  (e[2] =
                    (i[2] +
                      ((i[1] << 16) | (i[1] >>> 16)) +
                      ((i[0] << 16) | (i[0] >>> 16))) |
                    0),
                  (e[3] = (i[3] + ((i[2] << 8) | (i[2] >>> 24)) + i[1]) | 0),
                  (e[4] =
                    (i[4] +
                      ((i[3] << 16) | (i[3] >>> 16)) +
                      ((i[2] << 16) | (i[2] >>> 16))) |
                    0),
                  (e[5] = (i[5] + ((i[4] << 8) | (i[4] >>> 24)) + i[3]) | 0),
                  (e[6] =
                    (i[6] +
                      ((i[5] << 16) | (i[5] >>> 16)) +
                      ((i[4] << 16) | (i[4] >>> 16))) |
                    0),
                  (e[7] = (i[7] + ((i[6] << 8) | (i[6] >>> 24)) + i[5]) | 0);
              }
              e.Rabbit = t._createHelper(o);
            })(),
            a.Rabbit);
        },
        7193: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(754),
            r(4636),
            r(9506),
            r(7165),
            (function () {
              var e = a,
                t = e.lib.StreamCipher,
                r = e.algo,
                n = (r.RC4 = t.extend({
                  _doReset: function () {
                    for (
                      var e = this._key,
                        t = e.words,
                        r = e.sigBytes,
                        a = (this._S = []),
                        n = 0;
                      n < 256;
                      n++
                    )
                      a[n] = n;
                    n = 0;
                    for (var s = 0; n < 256; n++) {
                      var i = n % r,
                        o = (t[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                      s = (s + a[n] + o) % 256;
                      var c = a[n];
                      (a[n] = a[s]), (a[s] = c);
                    }
                    this._i = this._j = 0;
                  },
                  _doProcessBlock: function (e, t) {
                    e[t] ^= s.call(this);
                  },
                  keySize: 8,
                  ivSize: 0,
                }));
              function s() {
                for (
                  var e = this._S, t = this._i, r = this._j, a = 0, n = 0;
                  n < 4;
                  n++
                ) {
                  r = (r + e[(t = (t + 1) % 256)]) % 256;
                  var s = e[t];
                  (e[t] = e[r]),
                    (e[r] = s),
                    (a |= e[(e[t] + e[r]) % 256] << (24 - 8 * n));
                }
                return (this._i = t), (this._j = r), a;
              }
              e.RC4 = t._createHelper(n);
              var i = (r.RC4Drop = n.extend({
                cfg: n.cfg.extend({ drop: 192 }),
                _doReset: function () {
                  n._doReset.call(this);
                  for (var e = this.cfg.drop; e > 0; e--) s.call(this);
                },
              }));
              e.RC4Drop = t._createHelper(i);
            })(),
            a.RC4);
        },
        8056: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            (function () {
              var e = a,
                t = e.lib,
                r = t.WordArray,
                n = t.Hasher,
                s = e.algo,
                i = r.create([
                  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4,
                  13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4,
                  9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8,
                  12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10,
                  14, 1, 3, 8, 11, 6, 15, 13,
                ]),
                o = r.create([
                  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11,
                  3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7,
                  14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15,
                  0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6,
                  2, 13, 14, 0, 3, 9, 11,
                ]),
                c = r.create([
                  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6,
                  8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6,
                  7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15,
                  14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8,
                  13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
                ]),
                d = r.create([
                  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13,
                  15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11,
                  8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14,
                  14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14,
                  6, 8, 13, 6, 5, 15, 13, 11, 11,
                ]),
                l = r.create([
                  0, 1518500249, 1859775393, 2400959708, 2840853838,
                ]),
                p = r.create([
                  1352829926, 1548603684, 1836072691, 2053994217, 0,
                ]),
                u = (s.RIPEMD160 = n.extend({
                  _doReset: function () {
                    this._hash = r.create([
                      1732584193, 4023233417, 2562383102, 271733878, 3285377520,
                    ]);
                  },
                  _doProcessBlock: function (e, t) {
                    for (var r = 0; r < 16; r++) {
                      var a = t + r,
                        n = e[a];
                      e[a] =
                        (16711935 & ((n << 8) | (n >>> 24))) |
                        (4278255360 & ((n << 24) | (n >>> 8)));
                    }
                    var s,
                      u,
                      b,
                      y,
                      w,
                      S,
                      R,
                      E,
                      k,
                      T,
                      C,
                      P = this._hash.words,
                      O = l.words,
                      D = p.words,
                      x = i.words,
                      I = o.words,
                      M = c.words,
                      A = d.words;
                    for (
                      S = s = P[0],
                        R = u = P[1],
                        E = b = P[2],
                        k = y = P[3],
                        T = w = P[4],
                        r = 0;
                      r < 80;
                      r += 1
                    )
                      (C = (s + e[t + x[r]]) | 0),
                        (C +=
                          r < 16
                            ? h(u, b, y) + O[0]
                            : r < 32
                            ? m(u, b, y) + O[1]
                            : r < 48
                            ? f(u, b, y) + O[2]
                            : r < 64
                            ? g(u, b, y) + O[3]
                            : _(u, b, y) + O[4]),
                        (C = ((C = v((C |= 0), M[r])) + w) | 0),
                        (s = w),
                        (w = y),
                        (y = v(b, 10)),
                        (b = u),
                        (u = C),
                        (C = (S + e[t + I[r]]) | 0),
                        (C +=
                          r < 16
                            ? _(R, E, k) + D[0]
                            : r < 32
                            ? g(R, E, k) + D[1]
                            : r < 48
                            ? f(R, E, k) + D[2]
                            : r < 64
                            ? m(R, E, k) + D[3]
                            : h(R, E, k) + D[4]),
                        (C = ((C = v((C |= 0), A[r])) + T) | 0),
                        (S = T),
                        (T = k),
                        (k = v(E, 10)),
                        (E = R),
                        (R = C);
                    (C = (P[1] + b + k) | 0),
                      (P[1] = (P[2] + y + T) | 0),
                      (P[2] = (P[3] + w + S) | 0),
                      (P[3] = (P[4] + s + R) | 0),
                      (P[4] = (P[0] + u + E) | 0),
                      (P[0] = C);
                  },
                  _doFinalize: function () {
                    var e = this._data,
                      t = e.words,
                      r = 8 * this._nDataBytes,
                      a = 8 * e.sigBytes;
                    (t[a >>> 5] |= 128 << (24 - (a % 32))),
                      (t[14 + (((a + 64) >>> 9) << 4)] =
                        (16711935 & ((r << 8) | (r >>> 24))) |
                        (4278255360 & ((r << 24) | (r >>> 8)))),
                      (e.sigBytes = 4 * (t.length + 1)),
                      this._process();
                    for (var n = this._hash, s = n.words, i = 0; i < 5; i++) {
                      var o = s[i];
                      s[i] =
                        (16711935 & ((o << 8) | (o >>> 24))) |
                        (4278255360 & ((o << 24) | (o >>> 8)));
                    }
                    return n;
                  },
                  clone: function () {
                    var e = n.clone.call(this);
                    return (e._hash = this._hash.clone()), e;
                  },
                }));
              function h(e, t, r) {
                return e ^ t ^ r;
              }
              function m(e, t, r) {
                return (e & t) | (~e & r);
              }
              function f(e, t, r) {
                return (e | ~t) ^ r;
              }
              function g(e, t, r) {
                return (e & r) | (t & ~r);
              }
              function _(e, t, r) {
                return e ^ (t | ~r);
              }
              function v(e, t) {
                return (e << t) | (e >>> (32 - t));
              }
              (e.RIPEMD160 = n._createHelper(u)),
                (e.HmacRIPEMD160 = n._createHmacHelper(u));
            })(Math),
            a.RIPEMD160);
        },
        5471: function (e, t, r) {
          var a, n, s, i, o, c, d, l;
          e.exports =
            ((l = r(9021)),
            (n = (a = l).lib),
            (s = n.WordArray),
            (i = n.Hasher),
            (o = a.algo),
            (c = []),
            (d = o.SHA1 =
              i.extend({
                _doReset: function () {
                  this._hash = new s.init([
                    1732584193, 4023233417, 2562383102, 271733878, 3285377520,
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var r = this._hash.words,
                      a = r[0],
                      n = r[1],
                      s = r[2],
                      i = r[3],
                      o = r[4],
                      d = 0;
                    d < 80;
                    d++
                  ) {
                    if (d < 16) c[d] = 0 | e[t + d];
                    else {
                      var l = c[d - 3] ^ c[d - 8] ^ c[d - 14] ^ c[d - 16];
                      c[d] = (l << 1) | (l >>> 31);
                    }
                    var p = ((a << 5) | (a >>> 27)) + o + c[d];
                    (p +=
                      d < 20
                        ? 1518500249 + ((n & s) | (~n & i))
                        : d < 40
                        ? 1859775393 + (n ^ s ^ i)
                        : d < 60
                        ? ((n & s) | (n & i) | (s & i)) - 1894007588
                        : (n ^ s ^ i) - 899497514),
                      (o = i),
                      (i = s),
                      (s = (n << 30) | (n >>> 2)),
                      (n = a),
                      (a = p);
                  }
                  (r[0] = (r[0] + a) | 0),
                    (r[1] = (r[1] + n) | 0),
                    (r[2] = (r[2] + s) | 0),
                    (r[3] = (r[3] + i) | 0),
                    (r[4] = (r[4] + o) | 0);
                },
                _doFinalize: function () {
                  var e = this._data,
                    t = e.words,
                    r = 8 * this._nDataBytes,
                    a = 8 * e.sigBytes;
                  return (
                    (t[a >>> 5] |= 128 << (24 - (a % 32))),
                    (t[14 + (((a + 64) >>> 9) << 4)] = Math.floor(
                      r / 4294967296
                    )),
                    (t[15 + (((a + 64) >>> 9) << 4)] = r),
                    (e.sigBytes = 4 * t.length),
                    this._process(),
                    this._hash
                  );
                },
                clone: function () {
                  var e = i.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
              })),
            (a.SHA1 = i._createHelper(d)),
            (a.HmacSHA1 = i._createHmacHelper(d)),
            l.SHA1);
        },
        6308: function (e, t, r) {
          var a, n, s, i, o, c;
          e.exports =
            ((c = r(9021)),
            r(3009),
            (n = (a = c).lib.WordArray),
            (s = a.algo),
            (i = s.SHA256),
            (o = s.SHA224 =
              i.extend({
                _doReset: function () {
                  this._hash = new n.init([
                    3238371032, 914150663, 812702999, 4144912697, 4290775857,
                    1750603025, 1694076839, 3204075428,
                  ]);
                },
                _doFinalize: function () {
                  var e = i._doFinalize.call(this);
                  return (e.sigBytes -= 4), e;
                },
              })),
            (a.SHA224 = i._createHelper(o)),
            (a.HmacSHA224 = i._createHmacHelper(o)),
            c.SHA224);
        },
        3009: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            (function (e) {
              var t = a,
                r = t.lib,
                n = r.WordArray,
                s = r.Hasher,
                i = t.algo,
                o = [],
                c = [];
              !(function () {
                function t(t) {
                  for (var r = e.sqrt(t), a = 2; a <= r; a++)
                    if (!(t % a)) return !1;
                  return !0;
                }
                function r(e) {
                  return (4294967296 * (e - (0 | e))) | 0;
                }
                for (var a = 2, n = 0; n < 64; )
                  t(a) &&
                    (n < 8 && (o[n] = r(e.pow(a, 0.5))),
                    (c[n] = r(e.pow(a, 1 / 3))),
                    n++),
                    a++;
              })();
              var d = [],
                l = (i.SHA256 = s.extend({
                  _doReset: function () {
                    this._hash = new n.init(o.slice(0));
                  },
                  _doProcessBlock: function (e, t) {
                    for (
                      var r = this._hash.words,
                        a = r[0],
                        n = r[1],
                        s = r[2],
                        i = r[3],
                        o = r[4],
                        l = r[5],
                        p = r[6],
                        u = r[7],
                        h = 0;
                      h < 64;
                      h++
                    ) {
                      if (h < 16) d[h] = 0 | e[t + h];
                      else {
                        var m = d[h - 15],
                          f =
                            ((m << 25) | (m >>> 7)) ^
                            ((m << 14) | (m >>> 18)) ^
                            (m >>> 3),
                          g = d[h - 2],
                          _ =
                            ((g << 15) | (g >>> 17)) ^
                            ((g << 13) | (g >>> 19)) ^
                            (g >>> 10);
                        d[h] = f + d[h - 7] + _ + d[h - 16];
                      }
                      var v = (a & n) ^ (a & s) ^ (n & s),
                        b =
                          ((a << 30) | (a >>> 2)) ^
                          ((a << 19) | (a >>> 13)) ^
                          ((a << 10) | (a >>> 22)),
                        y =
                          u +
                          (((o << 26) | (o >>> 6)) ^
                            ((o << 21) | (o >>> 11)) ^
                            ((o << 7) | (o >>> 25))) +
                          ((o & l) ^ (~o & p)) +
                          c[h] +
                          d[h];
                      (u = p),
                        (p = l),
                        (l = o),
                        (o = (i + y) | 0),
                        (i = s),
                        (s = n),
                        (n = a),
                        (a = (y + (b + v)) | 0);
                    }
                    (r[0] = (r[0] + a) | 0),
                      (r[1] = (r[1] + n) | 0),
                      (r[2] = (r[2] + s) | 0),
                      (r[3] = (r[3] + i) | 0),
                      (r[4] = (r[4] + o) | 0),
                      (r[5] = (r[5] + l) | 0),
                      (r[6] = (r[6] + p) | 0),
                      (r[7] = (r[7] + u) | 0);
                  },
                  _doFinalize: function () {
                    var t = this._data,
                      r = t.words,
                      a = 8 * this._nDataBytes,
                      n = 8 * t.sigBytes;
                    return (
                      (r[n >>> 5] |= 128 << (24 - (n % 32))),
                      (r[14 + (((n + 64) >>> 9) << 4)] = e.floor(
                        a / 4294967296
                      )),
                      (r[15 + (((n + 64) >>> 9) << 4)] = a),
                      (t.sigBytes = 4 * r.length),
                      this._process(),
                      this._hash
                    );
                  },
                  clone: function () {
                    var e = s.clone.call(this);
                    return (e._hash = this._hash.clone()), e;
                  },
                }));
              (t.SHA256 = s._createHelper(l)),
                (t.HmacSHA256 = s._createHmacHelper(l));
            })(Math),
            a.SHA256);
        },
        5953: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(3240),
            (function (e) {
              var t = a,
                r = t.lib,
                n = r.WordArray,
                s = r.Hasher,
                i = t.x64.Word,
                o = t.algo,
                c = [],
                d = [],
                l = [];
              !(function () {
                for (var e = 1, t = 0, r = 0; r < 24; r++) {
                  c[e + 5 * t] = (((r + 1) * (r + 2)) / 2) % 64;
                  var a = (2 * e + 3 * t) % 5;
                  (e = t % 5), (t = a);
                }
                for (e = 0; e < 5; e++)
                  for (t = 0; t < 5; t++)
                    d[e + 5 * t] = t + ((2 * e + 3 * t) % 5) * 5;
                for (var n = 1, s = 0; s < 24; s++) {
                  for (var o = 0, p = 0, u = 0; u < 7; u++) {
                    if (1 & n) {
                      var h = (1 << u) - 1;
                      h < 32 ? (p ^= 1 << h) : (o ^= 1 << (h - 32));
                    }
                    128 & n ? (n = (n << 1) ^ 113) : (n <<= 1);
                  }
                  l[s] = i.create(o, p);
                }
              })();
              var p = [];
              !(function () {
                for (var e = 0; e < 25; e++) p[e] = i.create();
              })();
              var u = (o.SHA3 = s.extend({
                cfg: s.cfg.extend({ outputLength: 512 }),
                _doReset: function () {
                  for (var e = (this._state = []), t = 0; t < 25; t++)
                    e[t] = new i.init();
                  this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var r = this._state, a = this.blockSize / 2, n = 0;
                    n < a;
                    n++
                  ) {
                    var s = e[t + 2 * n],
                      i = e[t + 2 * n + 1];
                    (s =
                      (16711935 & ((s << 8) | (s >>> 24))) |
                      (4278255360 & ((s << 24) | (s >>> 8)))),
                      (i =
                        (16711935 & ((i << 8) | (i >>> 24))) |
                        (4278255360 & ((i << 24) | (i >>> 8)))),
                      ((P = r[n]).high ^= i),
                      (P.low ^= s);
                  }
                  for (var o = 0; o < 24; o++) {
                    for (var u = 0; u < 5; u++) {
                      for (var h = 0, m = 0, f = 0; f < 5; f++)
                        (h ^= (P = r[u + 5 * f]).high), (m ^= P.low);
                      var g = p[u];
                      (g.high = h), (g.low = m);
                    }
                    for (u = 0; u < 5; u++) {
                      var _ = p[(u + 4) % 5],
                        v = p[(u + 1) % 5],
                        b = v.high,
                        y = v.low;
                      for (
                        h = _.high ^ ((b << 1) | (y >>> 31)),
                          m = _.low ^ ((y << 1) | (b >>> 31)),
                          f = 0;
                        f < 5;
                        f++
                      )
                        ((P = r[u + 5 * f]).high ^= h), (P.low ^= m);
                    }
                    for (var w = 1; w < 25; w++) {
                      var S = (P = r[w]).high,
                        R = P.low,
                        E = c[w];
                      E < 32
                        ? ((h = (S << E) | (R >>> (32 - E))),
                          (m = (R << E) | (S >>> (32 - E))))
                        : ((h = (R << (E - 32)) | (S >>> (64 - E))),
                          (m = (S << (E - 32)) | (R >>> (64 - E))));
                      var k = p[d[w]];
                      (k.high = h), (k.low = m);
                    }
                    var T = p[0],
                      C = r[0];
                    for (T.high = C.high, T.low = C.low, u = 0; u < 5; u++)
                      for (f = 0; f < 5; f++) {
                        var P = r[(w = u + 5 * f)],
                          O = p[w],
                          D = p[((u + 1) % 5) + 5 * f],
                          x = p[((u + 2) % 5) + 5 * f];
                        (P.high = O.high ^ (~D.high & x.high)),
                          (P.low = O.low ^ (~D.low & x.low));
                      }
                    P = r[0];
                    var I = l[o];
                    (P.high ^= I.high), (P.low ^= I.low);
                  }
                },
                _doFinalize: function () {
                  var t = this._data,
                    r = t.words,
                    a = (this._nDataBytes, 8 * t.sigBytes),
                    s = 32 * this.blockSize;
                  (r[a >>> 5] |= 1 << (24 - (a % 32))),
                    (r[((e.ceil((a + 1) / s) * s) >>> 5) - 1] |= 128),
                    (t.sigBytes = 4 * r.length),
                    this._process();
                  for (
                    var i = this._state,
                      o = this.cfg.outputLength / 8,
                      c = o / 8,
                      d = [],
                      l = 0;
                    l < c;
                    l++
                  ) {
                    var p = i[l],
                      u = p.high,
                      h = p.low;
                    (u =
                      (16711935 & ((u << 8) | (u >>> 24))) |
                      (4278255360 & ((u << 24) | (u >>> 8)))),
                      (h =
                        (16711935 & ((h << 8) | (h >>> 24))) |
                        (4278255360 & ((h << 24) | (h >>> 8)))),
                      d.push(h),
                      d.push(u);
                  }
                  return new n.init(d, o);
                },
                clone: function () {
                  for (
                    var e = s.clone.call(this),
                      t = (e._state = this._state.slice(0)),
                      r = 0;
                    r < 25;
                    r++
                  )
                    t[r] = t[r].clone();
                  return e;
                },
              }));
              (t.SHA3 = s._createHelper(u)),
                (t.HmacSHA3 = s._createHmacHelper(u));
            })(Math),
            a.SHA3);
        },
        9557: function (e, t, r) {
          var a, n, s, i, o, c, d, l;
          e.exports =
            ((l = r(9021)),
            r(3240),
            r(1380),
            (n = (a = l).x64),
            (s = n.Word),
            (i = n.WordArray),
            (o = a.algo),
            (c = o.SHA512),
            (d = o.SHA384 =
              c.extend({
                _doReset: function () {
                  this._hash = new i.init([
                    new s.init(3418070365, 3238371032),
                    new s.init(1654270250, 914150663),
                    new s.init(2438529370, 812702999),
                    new s.init(355462360, 4144912697),
                    new s.init(1731405415, 4290775857),
                    new s.init(2394180231, 1750603025),
                    new s.init(3675008525, 1694076839),
                    new s.init(1203062813, 3204075428),
                  ]);
                },
                _doFinalize: function () {
                  var e = c._doFinalize.call(this);
                  return (e.sigBytes -= 16), e;
                },
              })),
            (a.SHA384 = c._createHelper(d)),
            (a.HmacSHA384 = c._createHmacHelper(d)),
            l.SHA384);
        },
        1380: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(3240),
            (function () {
              var e = a,
                t = e.lib.Hasher,
                r = e.x64,
                n = r.Word,
                s = r.WordArray,
                i = e.algo;
              function o() {
                return n.create.apply(n, arguments);
              }
              var c = [
                  o(1116352408, 3609767458),
                  o(1899447441, 602891725),
                  o(3049323471, 3964484399),
                  o(3921009573, 2173295548),
                  o(961987163, 4081628472),
                  o(1508970993, 3053834265),
                  o(2453635748, 2937671579),
                  o(2870763221, 3664609560),
                  o(3624381080, 2734883394),
                  o(310598401, 1164996542),
                  o(607225278, 1323610764),
                  o(1426881987, 3590304994),
                  o(1925078388, 4068182383),
                  o(2162078206, 991336113),
                  o(2614888103, 633803317),
                  o(3248222580, 3479774868),
                  o(3835390401, 2666613458),
                  o(4022224774, 944711139),
                  o(264347078, 2341262773),
                  o(604807628, 2007800933),
                  o(770255983, 1495990901),
                  o(1249150122, 1856431235),
                  o(1555081692, 3175218132),
                  o(1996064986, 2198950837),
                  o(2554220882, 3999719339),
                  o(2821834349, 766784016),
                  o(2952996808, 2566594879),
                  o(3210313671, 3203337956),
                  o(3336571891, 1034457026),
                  o(3584528711, 2466948901),
                  o(113926993, 3758326383),
                  o(338241895, 168717936),
                  o(666307205, 1188179964),
                  o(773529912, 1546045734),
                  o(1294757372, 1522805485),
                  o(1396182291, 2643833823),
                  o(1695183700, 2343527390),
                  o(1986661051, 1014477480),
                  o(2177026350, 1206759142),
                  o(2456956037, 344077627),
                  o(2730485921, 1290863460),
                  o(2820302411, 3158454273),
                  o(3259730800, 3505952657),
                  o(3345764771, 106217008),
                  o(3516065817, 3606008344),
                  o(3600352804, 1432725776),
                  o(4094571909, 1467031594),
                  o(275423344, 851169720),
                  o(430227734, 3100823752),
                  o(506948616, 1363258195),
                  o(659060556, 3750685593),
                  o(883997877, 3785050280),
                  o(958139571, 3318307427),
                  o(1322822218, 3812723403),
                  o(1537002063, 2003034995),
                  o(1747873779, 3602036899),
                  o(1955562222, 1575990012),
                  o(2024104815, 1125592928),
                  o(2227730452, 2716904306),
                  o(2361852424, 442776044),
                  o(2428436474, 593698344),
                  o(2756734187, 3733110249),
                  o(3204031479, 2999351573),
                  o(3329325298, 3815920427),
                  o(3391569614, 3928383900),
                  o(3515267271, 566280711),
                  o(3940187606, 3454069534),
                  o(4118630271, 4000239992),
                  o(116418474, 1914138554),
                  o(174292421, 2731055270),
                  o(289380356, 3203993006),
                  o(460393269, 320620315),
                  o(685471733, 587496836),
                  o(852142971, 1086792851),
                  o(1017036298, 365543100),
                  o(1126000580, 2618297676),
                  o(1288033470, 3409855158),
                  o(1501505948, 4234509866),
                  o(1607167915, 987167468),
                  o(1816402316, 1246189591),
                ],
                d = [];
              !(function () {
                for (var e = 0; e < 80; e++) d[e] = o();
              })();
              var l = (i.SHA512 = t.extend({
                _doReset: function () {
                  this._hash = new s.init([
                    new n.init(1779033703, 4089235720),
                    new n.init(3144134277, 2227873595),
                    new n.init(1013904242, 4271175723),
                    new n.init(2773480762, 1595750129),
                    new n.init(1359893119, 2917565137),
                    new n.init(2600822924, 725511199),
                    new n.init(528734635, 4215389547),
                    new n.init(1541459225, 327033209),
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var r = this._hash.words,
                      a = r[0],
                      n = r[1],
                      s = r[2],
                      i = r[3],
                      o = r[4],
                      l = r[5],
                      p = r[6],
                      u = r[7],
                      h = a.high,
                      m = a.low,
                      f = n.high,
                      g = n.low,
                      _ = s.high,
                      v = s.low,
                      b = i.high,
                      y = i.low,
                      w = o.high,
                      S = o.low,
                      R = l.high,
                      E = l.low,
                      k = p.high,
                      T = p.low,
                      C = u.high,
                      P = u.low,
                      O = h,
                      D = m,
                      x = f,
                      I = g,
                      M = _,
                      A = v,
                      L = b,
                      N = y,
                      j = w,
                      B = S,
                      F = R,
                      U = E,
                      W = k,
                      q = T,
                      H = C,
                      V = P,
                      G = 0;
                    G < 80;
                    G++
                  ) {
                    var z,
                      $,
                      K = d[G];
                    if (G < 16)
                      ($ = K.high = 0 | e[t + 2 * G]),
                        (z = K.low = 0 | e[t + 2 * G + 1]);
                    else {
                      var J = d[G - 15],
                        Q = J.high,
                        Y = J.low,
                        X =
                          ((Q >>> 1) | (Y << 31)) ^
                          ((Q >>> 8) | (Y << 24)) ^
                          (Q >>> 7),
                        Z =
                          ((Y >>> 1) | (Q << 31)) ^
                          ((Y >>> 8) | (Q << 24)) ^
                          ((Y >>> 7) | (Q << 25)),
                        ee = d[G - 2],
                        te = ee.high,
                        re = ee.low,
                        ae =
                          ((te >>> 19) | (re << 13)) ^
                          ((te << 3) | (re >>> 29)) ^
                          (te >>> 6),
                        ne =
                          ((re >>> 19) | (te << 13)) ^
                          ((re << 3) | (te >>> 29)) ^
                          ((re >>> 6) | (te << 26)),
                        se = d[G - 7],
                        ie = se.high,
                        oe = se.low,
                        ce = d[G - 16],
                        de = ce.high,
                        le = ce.low;
                      ($ =
                        ($ =
                          ($ =
                            X + ie + ((z = Z + oe) >>> 0 < Z >>> 0 ? 1 : 0)) +
                          ae +
                          ((z += ne) >>> 0 < ne >>> 0 ? 1 : 0)) +
                        de +
                        ((z += le) >>> 0 < le >>> 0 ? 1 : 0)),
                        (K.high = $),
                        (K.low = z);
                    }
                    var pe,
                      ue = (j & F) ^ (~j & W),
                      he = (B & U) ^ (~B & q),
                      me = (O & x) ^ (O & M) ^ (x & M),
                      fe = (D & I) ^ (D & A) ^ (I & A),
                      ge =
                        ((O >>> 28) | (D << 4)) ^
                        ((O << 30) | (D >>> 2)) ^
                        ((O << 25) | (D >>> 7)),
                      _e =
                        ((D >>> 28) | (O << 4)) ^
                        ((D << 30) | (O >>> 2)) ^
                        ((D << 25) | (O >>> 7)),
                      ve =
                        ((j >>> 14) | (B << 18)) ^
                        ((j >>> 18) | (B << 14)) ^
                        ((j << 23) | (B >>> 9)),
                      be =
                        ((B >>> 14) | (j << 18)) ^
                        ((B >>> 18) | (j << 14)) ^
                        ((B << 23) | (j >>> 9)),
                      ye = c[G],
                      we = ye.high,
                      Se = ye.low,
                      Re = H + ve + ((pe = V + be) >>> 0 < V >>> 0 ? 1 : 0),
                      Ee = _e + fe;
                    (H = W),
                      (V = q),
                      (W = F),
                      (q = U),
                      (F = j),
                      (U = B),
                      (j =
                        (L +
                          (Re =
                            (Re =
                              (Re =
                                Re +
                                ue +
                                ((pe += he) >>> 0 < he >>> 0 ? 1 : 0)) +
                              we +
                              ((pe += Se) >>> 0 < Se >>> 0 ? 1 : 0)) +
                            $ +
                            ((pe += z) >>> 0 < z >>> 0 ? 1 : 0)) +
                          ((B = (N + pe) | 0) >>> 0 < N >>> 0 ? 1 : 0)) |
                        0),
                      (L = M),
                      (N = A),
                      (M = x),
                      (A = I),
                      (x = O),
                      (I = D),
                      (O =
                        (Re +
                          (ge + me + (Ee >>> 0 < _e >>> 0 ? 1 : 0)) +
                          ((D = (pe + Ee) | 0) >>> 0 < pe >>> 0 ? 1 : 0)) |
                        0);
                  }
                  (m = a.low = m + D),
                    (a.high = h + O + (m >>> 0 < D >>> 0 ? 1 : 0)),
                    (g = n.low = g + I),
                    (n.high = f + x + (g >>> 0 < I >>> 0 ? 1 : 0)),
                    (v = s.low = v + A),
                    (s.high = _ + M + (v >>> 0 < A >>> 0 ? 1 : 0)),
                    (y = i.low = y + N),
                    (i.high = b + L + (y >>> 0 < N >>> 0 ? 1 : 0)),
                    (S = o.low = S + B),
                    (o.high = w + j + (S >>> 0 < B >>> 0 ? 1 : 0)),
                    (E = l.low = E + U),
                    (l.high = R + F + (E >>> 0 < U >>> 0 ? 1 : 0)),
                    (T = p.low = T + q),
                    (p.high = k + W + (T >>> 0 < q >>> 0 ? 1 : 0)),
                    (P = u.low = P + V),
                    (u.high = C + H + (P >>> 0 < V >>> 0 ? 1 : 0));
                },
                _doFinalize: function () {
                  var e = this._data,
                    t = e.words,
                    r = 8 * this._nDataBytes,
                    a = 8 * e.sigBytes;
                  return (
                    (t[a >>> 5] |= 128 << (24 - (a % 32))),
                    (t[30 + (((a + 128) >>> 10) << 5)] = Math.floor(
                      r / 4294967296
                    )),
                    (t[31 + (((a + 128) >>> 10) << 5)] = r),
                    (e.sigBytes = 4 * t.length),
                    this._process(),
                    this._hash.toX32()
                  );
                },
                clone: function () {
                  var e = t.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
                blockSize: 32,
              }));
              (e.SHA512 = t._createHelper(l)),
                (e.HmacSHA512 = t._createHmacHelper(l));
            })(),
            a.SHA512);
        },
        7628: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            r(754),
            r(4636),
            r(9506),
            r(7165),
            (function () {
              var e = a,
                t = e.lib,
                r = t.WordArray,
                n = t.BlockCipher,
                s = e.algo,
                i = [
                  57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2,
                  59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39,
                  31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37,
                  29, 21, 13, 5, 28, 20, 12, 4,
                ],
                o = [
                  14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26,
                  8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51,
                  45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32,
                ],
                c = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28],
                d = [
                  {
                    0: 8421888,
                    268435456: 32768,
                    536870912: 8421378,
                    805306368: 2,
                    1073741824: 512,
                    1342177280: 8421890,
                    1610612736: 8389122,
                    1879048192: 8388608,
                    2147483648: 514,
                    2415919104: 8389120,
                    2684354560: 33280,
                    2952790016: 8421376,
                    3221225472: 32770,
                    3489660928: 8388610,
                    3758096384: 0,
                    4026531840: 33282,
                    134217728: 0,
                    402653184: 8421890,
                    671088640: 33282,
                    939524096: 32768,
                    1207959552: 8421888,
                    1476395008: 512,
                    1744830464: 8421378,
                    2013265920: 2,
                    2281701376: 8389120,
                    2550136832: 33280,
                    2818572288: 8421376,
                    3087007744: 8389122,
                    3355443200: 8388610,
                    3623878656: 32770,
                    3892314112: 514,
                    4160749568: 8388608,
                    1: 32768,
                    268435457: 2,
                    536870913: 8421888,
                    805306369: 8388608,
                    1073741825: 8421378,
                    1342177281: 33280,
                    1610612737: 512,
                    1879048193: 8389122,
                    2147483649: 8421890,
                    2415919105: 8421376,
                    2684354561: 8388610,
                    2952790017: 33282,
                    3221225473: 514,
                    3489660929: 8389120,
                    3758096385: 32770,
                    4026531841: 0,
                    134217729: 8421890,
                    402653185: 8421376,
                    671088641: 8388608,
                    939524097: 512,
                    1207959553: 32768,
                    1476395009: 8388610,
                    1744830465: 2,
                    2013265921: 33282,
                    2281701377: 32770,
                    2550136833: 8389122,
                    2818572289: 514,
                    3087007745: 8421888,
                    3355443201: 8389120,
                    3623878657: 0,
                    3892314113: 33280,
                    4160749569: 8421378,
                  },
                  {
                    0: 1074282512,
                    16777216: 16384,
                    33554432: 524288,
                    50331648: 1074266128,
                    67108864: 1073741840,
                    83886080: 1074282496,
                    100663296: 1073758208,
                    117440512: 16,
                    134217728: 540672,
                    150994944: 1073758224,
                    167772160: 1073741824,
                    184549376: 540688,
                    201326592: 524304,
                    218103808: 0,
                    234881024: 16400,
                    251658240: 1074266112,
                    8388608: 1073758208,
                    25165824: 540688,
                    41943040: 16,
                    58720256: 1073758224,
                    75497472: 1074282512,
                    92274688: 1073741824,
                    109051904: 524288,
                    125829120: 1074266128,
                    142606336: 524304,
                    159383552: 0,
                    176160768: 16384,
                    192937984: 1074266112,
                    209715200: 1073741840,
                    226492416: 540672,
                    243269632: 1074282496,
                    260046848: 16400,
                    268435456: 0,
                    285212672: 1074266128,
                    301989888: 1073758224,
                    318767104: 1074282496,
                    335544320: 1074266112,
                    352321536: 16,
                    369098752: 540688,
                    385875968: 16384,
                    402653184: 16400,
                    419430400: 524288,
                    436207616: 524304,
                    452984832: 1073741840,
                    469762048: 540672,
                    486539264: 1073758208,
                    503316480: 1073741824,
                    520093696: 1074282512,
                    276824064: 540688,
                    293601280: 524288,
                    310378496: 1074266112,
                    327155712: 16384,
                    343932928: 1073758208,
                    360710144: 1074282512,
                    377487360: 16,
                    394264576: 1073741824,
                    411041792: 1074282496,
                    427819008: 1073741840,
                    444596224: 1073758224,
                    461373440: 524304,
                    478150656: 0,
                    494927872: 16400,
                    511705088: 1074266128,
                    528482304: 540672,
                  },
                  {
                    0: 260,
                    1048576: 0,
                    2097152: 67109120,
                    3145728: 65796,
                    4194304: 65540,
                    5242880: 67108868,
                    6291456: 67174660,
                    7340032: 67174400,
                    8388608: 67108864,
                    9437184: 67174656,
                    10485760: 65792,
                    11534336: 67174404,
                    12582912: 67109124,
                    13631488: 65536,
                    14680064: 4,
                    15728640: 256,
                    524288: 67174656,
                    1572864: 67174404,
                    2621440: 0,
                    3670016: 67109120,
                    4718592: 67108868,
                    5767168: 65536,
                    6815744: 65540,
                    7864320: 260,
                    8912896: 4,
                    9961472: 256,
                    11010048: 67174400,
                    12058624: 65796,
                    13107200: 65792,
                    14155776: 67109124,
                    15204352: 67174660,
                    16252928: 67108864,
                    16777216: 67174656,
                    17825792: 65540,
                    18874368: 65536,
                    19922944: 67109120,
                    20971520: 256,
                    22020096: 67174660,
                    23068672: 67108868,
                    24117248: 0,
                    25165824: 67109124,
                    26214400: 67108864,
                    27262976: 4,
                    28311552: 65792,
                    29360128: 67174400,
                    30408704: 260,
                    31457280: 65796,
                    32505856: 67174404,
                    17301504: 67108864,
                    18350080: 260,
                    19398656: 67174656,
                    20447232: 0,
                    21495808: 65540,
                    22544384: 67109120,
                    23592960: 256,
                    24641536: 67174404,
                    25690112: 65536,
                    26738688: 67174660,
                    27787264: 65796,
                    28835840: 67108868,
                    29884416: 67109124,
                    30932992: 67174400,
                    31981568: 4,
                    33030144: 65792,
                  },
                  {
                    0: 2151682048,
                    65536: 2147487808,
                    131072: 4198464,
                    196608: 2151677952,
                    262144: 0,
                    327680: 4198400,
                    393216: 2147483712,
                    458752: 4194368,
                    524288: 2147483648,
                    589824: 4194304,
                    655360: 64,
                    720896: 2147487744,
                    786432: 2151678016,
                    851968: 4160,
                    917504: 4096,
                    983040: 2151682112,
                    32768: 2147487808,
                    98304: 64,
                    163840: 2151678016,
                    229376: 2147487744,
                    294912: 4198400,
                    360448: 2151682112,
                    425984: 0,
                    491520: 2151677952,
                    557056: 4096,
                    622592: 2151682048,
                    688128: 4194304,
                    753664: 4160,
                    819200: 2147483648,
                    884736: 4194368,
                    950272: 4198464,
                    1015808: 2147483712,
                    1048576: 4194368,
                    1114112: 4198400,
                    1179648: 2147483712,
                    1245184: 0,
                    1310720: 4160,
                    1376256: 2151678016,
                    1441792: 2151682048,
                    1507328: 2147487808,
                    1572864: 2151682112,
                    1638400: 2147483648,
                    1703936: 2151677952,
                    1769472: 4198464,
                    1835008: 2147487744,
                    1900544: 4194304,
                    1966080: 64,
                    2031616: 4096,
                    1081344: 2151677952,
                    1146880: 2151682112,
                    1212416: 0,
                    1277952: 4198400,
                    1343488: 4194368,
                    1409024: 2147483648,
                    1474560: 2147487808,
                    1540096: 64,
                    1605632: 2147483712,
                    1671168: 4096,
                    1736704: 2147487744,
                    1802240: 2151678016,
                    1867776: 4160,
                    1933312: 2151682048,
                    1998848: 4194304,
                    2064384: 4198464,
                  },
                  {
                    0: 128,
                    4096: 17039360,
                    8192: 262144,
                    12288: 536870912,
                    16384: 537133184,
                    20480: 16777344,
                    24576: 553648256,
                    28672: 262272,
                    32768: 16777216,
                    36864: 537133056,
                    40960: 536871040,
                    45056: 553910400,
                    49152: 553910272,
                    53248: 0,
                    57344: 17039488,
                    61440: 553648128,
                    2048: 17039488,
                    6144: 553648256,
                    10240: 128,
                    14336: 17039360,
                    18432: 262144,
                    22528: 537133184,
                    26624: 553910272,
                    30720: 536870912,
                    34816: 537133056,
                    38912: 0,
                    43008: 553910400,
                    47104: 16777344,
                    51200: 536871040,
                    55296: 553648128,
                    59392: 16777216,
                    63488: 262272,
                    65536: 262144,
                    69632: 128,
                    73728: 536870912,
                    77824: 553648256,
                    81920: 16777344,
                    86016: 553910272,
                    90112: 537133184,
                    94208: 16777216,
                    98304: 553910400,
                    102400: 553648128,
                    106496: 17039360,
                    110592: 537133056,
                    114688: 262272,
                    118784: 536871040,
                    122880: 0,
                    126976: 17039488,
                    67584: 553648256,
                    71680: 16777216,
                    75776: 17039360,
                    79872: 537133184,
                    83968: 536870912,
                    88064: 17039488,
                    92160: 128,
                    96256: 553910272,
                    100352: 262272,
                    104448: 553910400,
                    108544: 0,
                    112640: 553648128,
                    116736: 16777344,
                    120832: 262144,
                    124928: 537133056,
                    129024: 536871040,
                  },
                  {
                    0: 268435464,
                    256: 8192,
                    512: 270532608,
                    768: 270540808,
                    1024: 268443648,
                    1280: 2097152,
                    1536: 2097160,
                    1792: 268435456,
                    2048: 0,
                    2304: 268443656,
                    2560: 2105344,
                    2816: 8,
                    3072: 270532616,
                    3328: 2105352,
                    3584: 8200,
                    3840: 270540800,
                    128: 270532608,
                    384: 270540808,
                    640: 8,
                    896: 2097152,
                    1152: 2105352,
                    1408: 268435464,
                    1664: 268443648,
                    1920: 8200,
                    2176: 2097160,
                    2432: 8192,
                    2688: 268443656,
                    2944: 270532616,
                    3200: 0,
                    3456: 270540800,
                    3712: 2105344,
                    3968: 268435456,
                    4096: 268443648,
                    4352: 270532616,
                    4608: 270540808,
                    4864: 8200,
                    5120: 2097152,
                    5376: 268435456,
                    5632: 268435464,
                    5888: 2105344,
                    6144: 2105352,
                    6400: 0,
                    6656: 8,
                    6912: 270532608,
                    7168: 8192,
                    7424: 268443656,
                    7680: 270540800,
                    7936: 2097160,
                    4224: 8,
                    4480: 2105344,
                    4736: 2097152,
                    4992: 268435464,
                    5248: 268443648,
                    5504: 8200,
                    5760: 270540808,
                    6016: 270532608,
                    6272: 270540800,
                    6528: 270532616,
                    6784: 8192,
                    7040: 2105352,
                    7296: 2097160,
                    7552: 0,
                    7808: 268435456,
                    8064: 268443656,
                  },
                  {
                    0: 1048576,
                    16: 33555457,
                    32: 1024,
                    48: 1049601,
                    64: 34604033,
                    80: 0,
                    96: 1,
                    112: 34603009,
                    128: 33555456,
                    144: 1048577,
                    160: 33554433,
                    176: 34604032,
                    192: 34603008,
                    208: 1025,
                    224: 1049600,
                    240: 33554432,
                    8: 34603009,
                    24: 0,
                    40: 33555457,
                    56: 34604032,
                    72: 1048576,
                    88: 33554433,
                    104: 33554432,
                    120: 1025,
                    136: 1049601,
                    152: 33555456,
                    168: 34603008,
                    184: 1048577,
                    200: 1024,
                    216: 34604033,
                    232: 1,
                    248: 1049600,
                    256: 33554432,
                    272: 1048576,
                    288: 33555457,
                    304: 34603009,
                    320: 1048577,
                    336: 33555456,
                    352: 34604032,
                    368: 1049601,
                    384: 1025,
                    400: 34604033,
                    416: 1049600,
                    432: 1,
                    448: 0,
                    464: 34603008,
                    480: 33554433,
                    496: 1024,
                    264: 1049600,
                    280: 33555457,
                    296: 34603009,
                    312: 1,
                    328: 33554432,
                    344: 1048576,
                    360: 1025,
                    376: 34604032,
                    392: 33554433,
                    408: 34603008,
                    424: 0,
                    440: 34604033,
                    456: 1049601,
                    472: 1024,
                    488: 33555456,
                    504: 1048577,
                  },
                  {
                    0: 134219808,
                    1: 131072,
                    2: 134217728,
                    3: 32,
                    4: 131104,
                    5: 134350880,
                    6: 134350848,
                    7: 2048,
                    8: 134348800,
                    9: 134219776,
                    10: 133120,
                    11: 134348832,
                    12: 2080,
                    13: 0,
                    14: 134217760,
                    15: 133152,
                    2147483648: 2048,
                    2147483649: 134350880,
                    2147483650: 134219808,
                    2147483651: 134217728,
                    2147483652: 134348800,
                    2147483653: 133120,
                    2147483654: 133152,
                    2147483655: 32,
                    2147483656: 134217760,
                    2147483657: 2080,
                    2147483658: 131104,
                    2147483659: 134350848,
                    2147483660: 0,
                    2147483661: 134348832,
                    2147483662: 134219776,
                    2147483663: 131072,
                    16: 133152,
                    17: 134350848,
                    18: 32,
                    19: 2048,
                    20: 134219776,
                    21: 134217760,
                    22: 134348832,
                    23: 131072,
                    24: 0,
                    25: 131104,
                    26: 134348800,
                    27: 134219808,
                    28: 134350880,
                    29: 133120,
                    30: 2080,
                    31: 134217728,
                    2147483664: 131072,
                    2147483665: 2048,
                    2147483666: 134348832,
                    2147483667: 133152,
                    2147483668: 32,
                    2147483669: 134348800,
                    2147483670: 134217728,
                    2147483671: 134219808,
                    2147483672: 134350880,
                    2147483673: 134217760,
                    2147483674: 134219776,
                    2147483675: 0,
                    2147483676: 133120,
                    2147483677: 2080,
                    2147483678: 131104,
                    2147483679: 134350848,
                  },
                ],
                l = [
                  4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504,
                  2147483679,
                ],
                p = (s.DES = n.extend({
                  _doReset: function () {
                    for (var e = this._key.words, t = [], r = 0; r < 56; r++) {
                      var a = i[r] - 1;
                      t[r] = (e[a >>> 5] >>> (31 - (a % 32))) & 1;
                    }
                    for (var n = (this._subKeys = []), s = 0; s < 16; s++) {
                      var d = (n[s] = []),
                        l = c[s];
                      for (r = 0; r < 24; r++)
                        (d[(r / 6) | 0] |=
                          t[(o[r] - 1 + l) % 28] << (31 - (r % 6))),
                          (d[4 + ((r / 6) | 0)] |=
                            t[28 + ((o[r + 24] - 1 + l) % 28)] <<
                            (31 - (r % 6)));
                      for (
                        d[0] = (d[0] << 1) | (d[0] >>> 31), r = 1;
                        r < 7;
                        r++
                      )
                        d[r] = d[r] >>> (4 * (r - 1) + 3);
                      d[7] = (d[7] << 5) | (d[7] >>> 27);
                    }
                    var p = (this._invSubKeys = []);
                    for (r = 0; r < 16; r++) p[r] = n[15 - r];
                  },
                  encryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._subKeys);
                  },
                  decryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._invSubKeys);
                  },
                  _doCryptBlock: function (e, t, r) {
                    (this._lBlock = e[t]),
                      (this._rBlock = e[t + 1]),
                      u.call(this, 4, 252645135),
                      u.call(this, 16, 65535),
                      h.call(this, 2, 858993459),
                      h.call(this, 8, 16711935),
                      u.call(this, 1, 1431655765);
                    for (var a = 0; a < 16; a++) {
                      for (
                        var n = r[a],
                          s = this._lBlock,
                          i = this._rBlock,
                          o = 0,
                          c = 0;
                        c < 8;
                        c++
                      )
                        o |= d[c][((i ^ n[c]) & l[c]) >>> 0];
                      (this._lBlock = i), (this._rBlock = s ^ o);
                    }
                    var p = this._lBlock;
                    (this._lBlock = this._rBlock),
                      (this._rBlock = p),
                      u.call(this, 1, 1431655765),
                      h.call(this, 8, 16711935),
                      h.call(this, 2, 858993459),
                      u.call(this, 16, 65535),
                      u.call(this, 4, 252645135),
                      (e[t] = this._lBlock),
                      (e[t + 1] = this._rBlock);
                  },
                  keySize: 2,
                  ivSize: 2,
                  blockSize: 2,
                }));
              function u(e, t) {
                var r = ((this._lBlock >>> e) ^ this._rBlock) & t;
                (this._rBlock ^= r), (this._lBlock ^= r << e);
              }
              function h(e, t) {
                var r = ((this._rBlock >>> e) ^ this._lBlock) & t;
                (this._lBlock ^= r), (this._rBlock ^= r << e);
              }
              e.DES = n._createHelper(p);
              var m = (s.TripleDES = n.extend({
                _doReset: function () {
                  var e = this._key.words;
                  if (2 !== e.length && 4 !== e.length && e.length < 6)
                    throw new Error(
                      "Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192."
                    );
                  var t = e.slice(0, 2),
                    a = e.length < 4 ? e.slice(0, 2) : e.slice(2, 4),
                    n = e.length < 6 ? e.slice(0, 2) : e.slice(4, 6);
                  (this._des1 = p.createEncryptor(r.create(t))),
                    (this._des2 = p.createEncryptor(r.create(a))),
                    (this._des3 = p.createEncryptor(r.create(n)));
                },
                encryptBlock: function (e, t) {
                  this._des1.encryptBlock(e, t),
                    this._des2.decryptBlock(e, t),
                    this._des3.encryptBlock(e, t);
                },
                decryptBlock: function (e, t) {
                  this._des3.decryptBlock(e, t),
                    this._des2.encryptBlock(e, t),
                    this._des1.decryptBlock(e, t);
                },
                keySize: 6,
                ivSize: 2,
                blockSize: 2,
              }));
              e.TripleDES = n._createHelper(m);
            })(),
            a.TripleDES);
        },
        3240: function (e, t, r) {
          var a;
          e.exports =
            ((a = r(9021)),
            (function (e) {
              var t = a,
                r = t.lib,
                n = r.Base,
                s = r.WordArray,
                i = (t.x64 = {});
              (i.Word = n.extend({
                init: function (e, t) {
                  (this.high = e), (this.low = t);
                },
              })),
                (i.WordArray = n.extend({
                  init: function (t, r) {
                    (t = this.words = t || []),
                      (this.sigBytes = r != e ? r : 8 * t.length);
                  },
                  toX32: function () {
                    for (
                      var e = this.words, t = e.length, r = [], a = 0;
                      a < t;
                      a++
                    ) {
                      var n = e[a];
                      r.push(n.high), r.push(n.low);
                    }
                    return s.create(r, this.sigBytes);
                  },
                  clone: function () {
                    for (
                      var e = n.clone.call(this),
                        t = (e.words = this.words.slice(0)),
                        r = t.length,
                        a = 0;
                      a < r;
                      a++
                    )
                      t[a] = t[a].clone();
                    return e;
                  },
                }));
            })(),
            a);
        },
        7833: (e, t, r) => {
          (t.formatArgs = function (t) {
            if (
              ((t[0] =
                (this.useColors ? "%c" : "") +
                this.namespace +
                (this.useColors ? " %c" : " ") +
                t[0] +
                (this.useColors ? "%c " : " ") +
                "+" +
                e.exports.humanize(this.diff)),
              !this.useColors)
            )
              return;
            const r = "color: " + this.color;
            t.splice(1, 0, r, "color: inherit");
            let a = 0,
              n = 0;
            t[0].replace(/%[a-zA-Z%]/g, (e) => {
              "%%" !== e && (a++, "%c" === e && (n = a));
            }),
              t.splice(n, 0, r);
          }),
            (t.save = function (e) {
              try {
                e
                  ? t.storage.setItem("debug", e)
                  : t.storage.removeItem("debug");
              } catch (e) {}
            }),
            (t.load = function () {
              let e;
              try {
                e = t.storage.getItem("debug");
              } catch (e) {}
              !e &&
                "undefined" != typeof process &&
                "env" in process &&
                (e = process.env.DEBUG);
              return e;
            }),
            (t.useColors = function () {
              if (
                "undefined" != typeof window &&
                window.process &&
                ("renderer" === window.process.type || window.process.__nwjs)
              )
                return !0;
              if (
                "undefined" != typeof navigator &&
                navigator.userAgent &&
                navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
              )
                return !1;
              let e;
              return (
                ("undefined" != typeof document &&
                  document.documentElement &&
                  document.documentElement.style &&
                  document.documentElement.style.WebkitAppearance) ||
                ("undefined" != typeof window &&
                  window.console &&
                  (window.console.firebug ||
                    (window.console.exception && window.console.table))) ||
                ("undefined" != typeof navigator &&
                  navigator.userAgent &&
                  (e = navigator.userAgent
                    .toLowerCase()
                    .match(/firefox\/(\d+)/)) &&
                  parseInt(e[1], 10) >= 31) ||
                ("undefined" != typeof navigator &&
                  navigator.userAgent &&
                  navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
              );
            }),
            (t.storage = (function () {
              try {
                return localStorage;
              } catch (e) {}
            })()),
            (t.destroy = (() => {
              let e = !1;
              return () => {
                e ||
                  ((e = !0),
                  console.warn(
                    "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                  ));
              };
            })()),
            (t.colors = [
              "#0000CC",
              "#0000FF",
              "#0033CC",
              "#0033FF",
              "#0066CC",
              "#0066FF",
              "#0099CC",
              "#0099FF",
              "#00CC00",
              "#00CC33",
              "#00CC66",
              "#00CC99",
              "#00CCCC",
              "#00CCFF",
              "#3300CC",
              "#3300FF",
              "#3333CC",
              "#3333FF",
              "#3366CC",
              "#3366FF",
              "#3399CC",
              "#3399FF",
              "#33CC00",
              "#33CC33",
              "#33CC66",
              "#33CC99",
              "#33CCCC",
              "#33CCFF",
              "#6600CC",
              "#6600FF",
              "#6633CC",
              "#6633FF",
              "#66CC00",
              "#66CC33",
              "#9900CC",
              "#9900FF",
              "#9933CC",
              "#9933FF",
              "#99CC00",
              "#99CC33",
              "#CC0000",
              "#CC0033",
              "#CC0066",
              "#CC0099",
              "#CC00CC",
              "#CC00FF",
              "#CC3300",
              "#CC3333",
              "#CC3366",
              "#CC3399",
              "#CC33CC",
              "#CC33FF",
              "#CC6600",
              "#CC6633",
              "#CC9900",
              "#CC9933",
              "#CCCC00",
              "#CCCC33",
              "#FF0000",
              "#FF0033",
              "#FF0066",
              "#FF0099",
              "#FF00CC",
              "#FF00FF",
              "#FF3300",
              "#FF3333",
              "#FF3366",
              "#FF3399",
              "#FF33CC",
              "#FF33FF",
              "#FF6600",
              "#FF6633",
              "#FF9900",
              "#FF9933",
              "#FFCC00",
              "#FFCC33",
            ]),
            (t.log = console.debug || console.log || (() => {})),
            (e.exports = r(736)(t));
          const { formatters: a } = e.exports;
          a.j = function (e) {
            try {
              return JSON.stringify(e);
            } catch (e) {
              return "[UnexpectedJSONParseError]: " + e.message;
            }
          };
        },
        736: (e, t, r) => {
          e.exports = function (e) {
            function t(e) {
              let r,
                n,
                s,
                i = null;
              function o(...e) {
                if (!o.enabled) return;
                const a = o,
                  n = Number(new Date()),
                  s = n - (r || n);
                (a.diff = s),
                  (a.prev = r),
                  (a.curr = n),
                  (r = n),
                  (e[0] = t.coerce(e[0])),
                  "string" != typeof e[0] && e.unshift("%O");
                let i = 0;
                (e[0] = e[0].replace(/%([a-zA-Z%])/g, (r, n) => {
                  if ("%%" === r) return "%";
                  i++;
                  const s = t.formatters[n];
                  if ("function" == typeof s) {
                    const t = e[i];
                    (r = s.call(a, t)), e.splice(i, 1), i--;
                  }
                  return r;
                })),
                  t.formatArgs.call(a, e);
                (a.log || t.log).apply(a, e);
              }
              return (
                (o.namespace = e),
                (o.useColors = t.useColors()),
                (o.color = t.selectColor(e)),
                (o.extend = a),
                (o.destroy = t.destroy),
                Object.defineProperty(o, "enabled", {
                  enumerable: !0,
                  configurable: !1,
                  get: () =>
                    null !== i
                      ? i
                      : (n !== t.namespaces &&
                          ((n = t.namespaces), (s = t.enabled(e))),
                        s),
                  set: (e) => {
                    i = e;
                  },
                }),
                "function" == typeof t.init && t.init(o),
                o
              );
            }
            function a(e, r) {
              const a = t(this.namespace + (void 0 === r ? ":" : r) + e);
              return (a.log = this.log), a;
            }
            function n(e) {
              return e
                .toString()
                .substring(2, e.toString().length - 2)
                .replace(/\.\*\?$/, "*");
            }
            return (
              (t.debug = t),
              (t.default = t),
              (t.coerce = function (e) {
                if (e instanceof Error) return e.stack || e.message;
                return e;
              }),
              (t.disable = function () {
                const e = [
                  ...t.names.map(n),
                  ...t.skips.map(n).map((e) => "-" + e),
                ].join(",");
                return t.enable(""), e;
              }),
              (t.enable = function (e) {
                let r;
                t.save(e), (t.namespaces = e), (t.names = []), (t.skips = []);
                const a = ("string" == typeof e ? e : "").split(/[\s,]+/),
                  n = a.length;
                for (r = 0; r < n; r++)
                  a[r] &&
                    ("-" === (e = a[r].replace(/\*/g, ".*?"))[0]
                      ? t.skips.push(new RegExp("^" + e.slice(1) + "$"))
                      : t.names.push(new RegExp("^" + e + "$")));
              }),
              (t.enabled = function (e) {
                if ("*" === e[e.length - 1]) return !0;
                let r, a;
                for (r = 0, a = t.skips.length; r < a; r++)
                  if (t.skips[r].test(e)) return !1;
                for (r = 0, a = t.names.length; r < a; r++)
                  if (t.names[r].test(e)) return !0;
                return !1;
              }),
              (t.humanize = r(6585)),
              (t.destroy = function () {
                console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                );
              }),
              Object.keys(e).forEach((r) => {
                t[r] = e[r];
              }),
              (t.names = []),
              (t.skips = []),
              (t.formatters = {}),
              (t.selectColor = function (e) {
                let r = 0;
                for (let t = 0; t < e.length; t++)
                  (r = (r << 5) - r + e.charCodeAt(t)), (r |= 0);
                return t.colors[Math.abs(r) % t.colors.length];
              }),
              t.enable(t.load()),
              t
            );
          };
        },
        4903: (e) => {
          var t = function () {
            if ("object" == typeof self && self) return self;
            if ("object" == typeof window && window) return window;
            throw new Error("Unable to resolve global `this`");
          };
          e.exports = (function () {
            if (this) return this;
            if ("object" == typeof globalThis && globalThis) return globalThis;
            try {
              Object.defineProperty(Object.prototype, "__global__", {
                get: function () {
                  return this;
                },
                configurable: !0,
              });
            } catch (e) {
              return t();
            }
            try {
              return __global__ || t();
            } finally {
              delete Object.prototype.__global__;
            }
          })();
        },
        7007: (e) => {
          "use strict";
          var t,
            r = "object" == typeof Reflect ? Reflect : null,
            a =
              r && "function" == typeof r.apply
                ? r.apply
                : function (e, t, r) {
                    return Function.prototype.apply.call(e, t, r);
                  };
          t =
            r && "function" == typeof r.ownKeys
              ? r.ownKeys
              : Object.getOwnPropertySymbols
              ? function (e) {
                  return Object.getOwnPropertyNames(e).concat(
                    Object.getOwnPropertySymbols(e)
                  );
                }
              : function (e) {
                  return Object.getOwnPropertyNames(e);
                };
          var n =
            Number.isNaN ||
            function (e) {
              return e != e;
            };
          function s() {
            s.init.call(this);
          }
          (e.exports = s),
            (e.exports.once = function (e, t) {
              return new Promise(function (r, a) {
                function n(r) {
                  e.removeListener(t, s), a(r);
                }
                function s() {
                  "function" == typeof e.removeListener &&
                    e.removeListener("error", n),
                    r([].slice.call(arguments));
                }
                f(e, t, s, { once: !0 }),
                  "error" !== t &&
                    (function (e, t, r) {
                      "function" == typeof e.on && f(e, "error", t, r);
                    })(e, n, { once: !0 });
              });
            }),
            (s.EventEmitter = s),
            (s.prototype._events = void 0),
            (s.prototype._eventsCount = 0),
            (s.prototype._maxListeners = void 0);
          var i = 10;
          function o(e) {
            if ("function" != typeof e)
              throw new TypeError(
                'The "listener" argument must be of type Function. Received type ' +
                  typeof e
              );
          }
          function c(e) {
            return void 0 === e._maxListeners
              ? s.defaultMaxListeners
              : e._maxListeners;
          }
          function d(e, t, r, a) {
            var n, s, i, d;
            if (
              (o(r),
              void 0 === (s = e._events)
                ? ((s = e._events = Object.create(null)), (e._eventsCount = 0))
                : (void 0 !== s.newListener &&
                    (e.emit("newListener", t, r.listener ? r.listener : r),
                    (s = e._events)),
                  (i = s[t])),
              void 0 === i)
            )
              (i = s[t] = r), ++e._eventsCount;
            else if (
              ("function" == typeof i
                ? (i = s[t] = a ? [r, i] : [i, r])
                : a
                ? i.unshift(r)
                : i.push(r),
              (n = c(e)) > 0 && i.length > n && !i.warned)
            ) {
              i.warned = !0;
              var l = new Error(
                "Possible EventEmitter memory leak detected. " +
                  i.length +
                  " " +
                  String(t) +
                  " listeners added. Use emitter.setMaxListeners() to increase limit"
              );
              (l.name = "MaxListenersExceededWarning"),
                (l.emitter = e),
                (l.type = t),
                (l.count = i.length),
                (d = l),
                console && console.warn && console.warn(d);
            }
            return e;
          }
          function l() {
            if (!this.fired)
              return (
                this.target.removeListener(this.type, this.wrapFn),
                (this.fired = !0),
                0 === arguments.length
                  ? this.listener.call(this.target)
                  : this.listener.apply(this.target, arguments)
              );
          }
          function p(e, t, r) {
            var a = {
                fired: !1,
                wrapFn: void 0,
                target: e,
                type: t,
                listener: r,
              },
              n = l.bind(a);
            return (n.listener = r), (a.wrapFn = n), n;
          }
          function u(e, t, r) {
            var a = e._events;
            if (void 0 === a) return [];
            var n = a[t];
            return void 0 === n
              ? []
              : "function" == typeof n
              ? r
                ? [n.listener || n]
                : [n]
              : r
              ? (function (e) {
                  for (var t = new Array(e.length), r = 0; r < t.length; ++r)
                    t[r] = e[r].listener || e[r];
                  return t;
                })(n)
              : m(n, n.length);
          }
          function h(e) {
            var t = this._events;
            if (void 0 !== t) {
              var r = t[e];
              if ("function" == typeof r) return 1;
              if (void 0 !== r) return r.length;
            }
            return 0;
          }
          function m(e, t) {
            for (var r = new Array(t), a = 0; a < t; ++a) r[a] = e[a];
            return r;
          }
          function f(e, t, r, a) {
            if ("function" == typeof e.on) a.once ? e.once(t, r) : e.on(t, r);
            else {
              if ("function" != typeof e.addEventListener)
                throw new TypeError(
                  'The "emitter" argument must be of type EventEmitter. Received type ' +
                    typeof e
                );
              e.addEventListener(t, function n(s) {
                a.once && e.removeEventListener(t, n), r(s);
              });
            }
          }
          Object.defineProperty(s, "defaultMaxListeners", {
            enumerable: !0,
            get: function () {
              return i;
            },
            set: function (e) {
              if ("number" != typeof e || e < 0 || n(e))
                throw new RangeError(
                  'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                    e +
                    "."
                );
              i = e;
            },
          }),
            (s.init = function () {
              (void 0 !== this._events &&
                this._events !== Object.getPrototypeOf(this)._events) ||
                ((this._events = Object.create(null)), (this._eventsCount = 0)),
                (this._maxListeners = this._maxListeners || void 0);
            }),
            (s.prototype.setMaxListeners = function (e) {
              if ("number" != typeof e || e < 0 || n(e))
                throw new RangeError(
                  'The value of "n" is out of range. It must be a non-negative number. Received ' +
                    e +
                    "."
                );
              return (this._maxListeners = e), this;
            }),
            (s.prototype.getMaxListeners = function () {
              return c(this);
            }),
            (s.prototype.emit = function (e) {
              for (var t = [], r = 1; r < arguments.length; r++)
                t.push(arguments[r]);
              var n = "error" === e,
                s = this._events;
              if (void 0 !== s) n = n && void 0 === s.error;
              else if (!n) return !1;
              if (n) {
                var i;
                if ((t.length > 0 && (i = t[0]), i instanceof Error)) throw i;
                var o = new Error(
                  "Unhandled error." + (i ? " (" + i.message + ")" : "")
                );
                throw ((o.context = i), o);
              }
              var c = s[e];
              if (void 0 === c) return !1;
              if ("function" == typeof c) a(c, this, t);
              else {
                var d = c.length,
                  l = m(c, d);
                for (r = 0; r < d; ++r) a(l[r], this, t);
              }
              return !0;
            }),
            (s.prototype.addListener = function (e, t) {
              return d(this, e, t, !1);
            }),
            (s.prototype.on = s.prototype.addListener),
            (s.prototype.prependListener = function (e, t) {
              return d(this, e, t, !0);
            }),
            (s.prototype.once = function (e, t) {
              return o(t), this.on(e, p(this, e, t)), this;
            }),
            (s.prototype.prependOnceListener = function (e, t) {
              return o(t), this.prependListener(e, p(this, e, t)), this;
            }),
            (s.prototype.removeListener = function (e, t) {
              var r, a, n, s, i;
              if ((o(t), void 0 === (a = this._events))) return this;
              if (void 0 === (r = a[e])) return this;
              if (r === t || r.listener === t)
                0 == --this._eventsCount
                  ? (this._events = Object.create(null))
                  : (delete a[e],
                    a.removeListener &&
                      this.emit("removeListener", e, r.listener || t));
              else if ("function" != typeof r) {
                for (n = -1, s = r.length - 1; s >= 0; s--)
                  if (r[s] === t || r[s].listener === t) {
                    (i = r[s].listener), (n = s);
                    break;
                  }
                if (n < 0) return this;
                0 === n
                  ? r.shift()
                  : (function (e, t) {
                      for (; t + 1 < e.length; t++) e[t] = e[t + 1];
                      e.pop();
                    })(r, n),
                  1 === r.length && (a[e] = r[0]),
                  void 0 !== a.removeListener &&
                    this.emit("removeListener", e, i || t);
              }
              return this;
            }),
            (s.prototype.off = s.prototype.removeListener),
            (s.prototype.removeAllListeners = function (e) {
              var t, r, a;
              if (void 0 === (r = this._events)) return this;
              if (void 0 === r.removeListener)
                return (
                  0 === arguments.length
                    ? ((this._events = Object.create(null)),
                      (this._eventsCount = 0))
                    : void 0 !== r[e] &&
                      (0 == --this._eventsCount
                        ? (this._events = Object.create(null))
                        : delete r[e]),
                  this
                );
              if (0 === arguments.length) {
                var n,
                  s = Object.keys(r);
                for (a = 0; a < s.length; ++a)
                  "removeListener" !== (n = s[a]) && this.removeAllListeners(n);
                return (
                  this.removeAllListeners("removeListener"),
                  (this._events = Object.create(null)),
                  (this._eventsCount = 0),
                  this
                );
              }
              if ("function" == typeof (t = r[e])) this.removeListener(e, t);
              else if (void 0 !== t)
                for (a = t.length - 1; a >= 0; a--)
                  this.removeListener(e, t[a]);
              return this;
            }),
            (s.prototype.listeners = function (e) {
              return u(this, e, !0);
            }),
            (s.prototype.rawListeners = function (e) {
              return u(this, e, !1);
            }),
            (s.listenerCount = function (e, t) {
              return "function" == typeof e.listenerCount
                ? e.listenerCount(t)
                : h.call(e, t);
            }),
            (s.prototype.listenerCount = h),
            (s.prototype.eventNames = function () {
              return this._eventsCount > 0 ? t(this._events) : [];
            });
        },
        3582: function (e, t, r) {
          "use strict";
          var a =
            (this && this.__importDefault) ||
            function (e) {
              return e && e.__esModule ? e : { default: e };
            };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Logger = void 0);
          const n = a(r(7833)),
            s = "h264-profile-level-id";
          t.Logger = class {
            constructor(e) {
              e
                ? ((this._debug = (0, n.default)(`${s}:${e}`)),
                  (this._warn = (0, n.default)(`${s}:WARN:${e}`)),
                  (this._error = (0, n.default)(`${s}:ERROR:${e}`)))
                : ((this._debug = (0, n.default)(s)),
                  (this._warn = (0, n.default)(`${s}:WARN`)),
                  (this._error = (0, n.default)(`${s}:ERROR`))),
                (this._debug.log = console.info.bind(console)),
                (this._warn.log = console.warn.bind(console)),
                (this._error.log = console.error.bind(console));
            }
            get debug() {
              return this._debug;
            }
            get warn() {
              return this._warn;
            }
            get error() {
              return this._error;
            }
          };
        },
        3200: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.generateProfileLevelIdStringForAnswer =
              t.isSameProfile =
              t.parseSdpProfileLevelId =
              t.levelToString =
              t.profileToString =
              t.profileLevelIdToString =
              t.parseProfileLevelId =
              t.ProfileLevelId =
              t.Level =
              t.Profile =
                void 0);
          const a = new (r(3582).Logger)();
          var n, s;
          !(function (e) {
            (e[(e.ConstrainedBaseline = 1)] = "ConstrainedBaseline"),
              (e[(e.Baseline = 2)] = "Baseline"),
              (e[(e.Main = 3)] = "Main"),
              (e[(e.ConstrainedHigh = 4)] = "ConstrainedHigh"),
              (e[(e.High = 5)] = "High"),
              (e[(e.PredictiveHigh444 = 6)] = "PredictiveHigh444");
          })(n || (t.Profile = n = {})),
            (function (e) {
              (e[(e.L1_b = 0)] = "L1_b"),
                (e[(e.L1 = 10)] = "L1"),
                (e[(e.L1_1 = 11)] = "L1_1"),
                (e[(e.L1_2 = 12)] = "L1_2"),
                (e[(e.L1_3 = 13)] = "L1_3"),
                (e[(e.L2 = 20)] = "L2"),
                (e[(e.L2_1 = 21)] = "L2_1"),
                (e[(e.L2_2 = 22)] = "L2_2"),
                (e[(e.L3 = 30)] = "L3"),
                (e[(e.L3_1 = 31)] = "L3_1"),
                (e[(e.L3_2 = 32)] = "L3_2"),
                (e[(e.L4 = 40)] = "L4"),
                (e[(e.L4_1 = 41)] = "L4_1"),
                (e[(e.L4_2 = 42)] = "L4_2"),
                (e[(e.L5 = 50)] = "L5"),
                (e[(e.L5_1 = 51)] = "L5_1"),
                (e[(e.L5_2 = 52)] = "L5_2");
            })(s || (t.Level = s = {}));
          class i {
            constructor(e, t) {
              (this.profile = e), (this.level = t);
            }
          }
          t.ProfileLevelId = i;
          const o = new i(n.ConstrainedBaseline, s.L3_1);
          class c {
            constructor(e) {
              (this.mask = ~m("x", e)), (this.masked_value = m("1", e));
            }
            isMatch(e) {
              return this.masked_value === (e & this.mask);
            }
          }
          class d {
            constructor(e, t, r) {
              (this.profile_idc = e),
                (this.profile_iop = t),
                (this.profile = r);
            }
          }
          const l = [
            new d(66, new c("x1xx0000"), n.ConstrainedBaseline),
            new d(77, new c("1xxx0000"), n.ConstrainedBaseline),
            new d(88, new c("11xx0000"), n.ConstrainedBaseline),
            new d(66, new c("x0xx0000"), n.Baseline),
            new d(88, new c("10xx0000"), n.Baseline),
            new d(77, new c("0x0x0000"), n.Main),
            new d(100, new c("00000000"), n.High),
            new d(100, new c("00001100"), n.ConstrainedHigh),
            new d(244, new c("00000000"), n.PredictiveHigh444),
          ];
          function p(e) {
            if ("string" != typeof e || 6 !== e.length) return;
            const t = parseInt(e, 16);
            if (0 === t) return;
            const r = 255 & t,
              n = (t >> 8) & 255,
              o = (t >> 16) & 255;
            let c;
            switch (r) {
              case s.L1_1:
                c = 16 & n ? s.L1_b : s.L1_1;
                break;
              case s.L1:
              case s.L1_2:
              case s.L1_3:
              case s.L2:
              case s.L2_1:
              case s.L2_2:
              case s.L3:
              case s.L3_1:
              case s.L3_2:
              case s.L4:
              case s.L4_1:
              case s.L4_2:
              case s.L5:
              case s.L5_1:
              case s.L5_2:
                c = r;
                break;
              default:
                return void a.warn(
                  `parseProfileLevelId() | unrecognized level_idc [str:${e}, level_idc:${r}]`
                );
            }
            for (const e of l)
              if (o === e.profile_idc && e.profile_iop.isMatch(n))
                return new i(e.profile, c);
            a.warn(
              `parseProfileLevelId() | unrecognized profile_idc/profile_iop combination [str:${e}, profile_idc:${o}, profile_iop:${n}]`
            );
          }
          function u(e) {
            if (e.level == s.L1_b)
              switch (e.profile) {
                case n.ConstrainedBaseline:
                  return "42f00b";
                case n.Baseline:
                  return "42100b";
                case n.Main:
                  return "4d100b";
                default:
                  return void a.warn(
                    `profileLevelIdToString() | Level 1_b not is allowed for profile ${e.profile}`
                  );
              }
            let t;
            switch (e.profile) {
              case n.ConstrainedBaseline:
                t = "42e0";
                break;
              case n.Baseline:
                t = "4200";
                break;
              case n.Main:
                t = "4d00";
                break;
              case n.ConstrainedHigh:
                t = "640c";
                break;
              case n.High:
                t = "6400";
                break;
              case n.PredictiveHigh444:
                t = "f400";
                break;
              default:
                return void a.warn(
                  `profileLevelIdToString() | unrecognized profile ${e.profile}`
                );
            }
            let r = e.level.toString(16);
            return 1 === r.length && (r = `0${r}`), `${t}${r}`;
          }
          function h(e = {}) {
            const t = e["profile-level-id"];
            return t ? p(t) : o;
          }
          function m(e, t) {
            return (
              (Number(t[0] === e) << 7) |
              (Number(t[1] === e) << 6) |
              (Number(t[2] === e) << 5) |
              (Number(t[3] === e) << 4) |
              (Number(t[4] === e) << 3) |
              (Number(t[5] === e) << 2) |
              (Number(t[6] === e) << 1) |
              Number(t[7] === e)
            );
          }
          function f(e = {}) {
            const t = e["level-asymmetry-allowed"];
            return !0 === t || 1 === t || "1" === t;
          }
          (t.parseProfileLevelId = p),
            (t.profileLevelIdToString = u),
            (t.profileToString = function (e) {
              switch (e) {
                case n.ConstrainedBaseline:
                  return "ConstrainedBaseline";
                case n.Baseline:
                  return "Baseline";
                case n.Main:
                  return "Main";
                case n.ConstrainedHigh:
                  return "ConstrainedHigh";
                case n.High:
                  return "High";
                case n.PredictiveHigh444:
                  return "PredictiveHigh444";
                default:
                  return void a.warn(
                    `profileToString() | unrecognized profile ${e}`
                  );
              }
            }),
            (t.levelToString = function (e) {
              switch (e) {
                case s.L1_b:
                  return "1b";
                case s.L1:
                  return "1";
                case s.L1_1:
                  return "1.1";
                case s.L1_2:
                  return "1.2";
                case s.L1_3:
                  return "1.3";
                case s.L2:
                  return "2";
                case s.L2_1:
                  return "2.1";
                case s.L2_2:
                  return "2.2";
                case s.L3:
                  return "3";
                case s.L3_1:
                  return "3.1";
                case s.L3_2:
                  return "3.2";
                case s.L4:
                  return "4";
                case s.L4_1:
                  return "4.1";
                case s.L4_2:
                  return "4.2";
                case s.L5:
                  return "5";
                case s.L5_1:
                  return "5.1";
                case s.L5_2:
                  return "5.2";
                default:
                  return void a.warn(
                    `levelToString() | unrecognized level ${e}`
                  );
              }
            }),
            (t.parseSdpProfileLevelId = h),
            (t.isSameProfile = function (e = {}, t = {}) {
              const r = h(e),
                a = h(t);
              return Boolean(r && a && r.profile === a.profile);
            }),
            (t.generateProfileLevelIdStringForAnswer = function (
              e = {},
              t = {}
            ) {
              if (!e["profile-level-id"] && !t["profile-level-id"])
                return void a.warn(
                  "generateProfileLevelIdStringForAnswer() | profile-level-id missing in local and remote params"
                );
              const r = h(e),
                n = h(t);
              if (!r) throw new TypeError("invalid local_profile_level_id");
              if (!n) throw new TypeError("invalid remote_profile_level_id");
              if (r.profile !== n.profile)
                throw new TypeError("H264 Profile mismatch");
              const o = f(e) && f(t),
                c = r.level,
                d = n.level,
                l = (function (e, t) {
                  return e === s.L1_b
                    ? t !== s.L1 && t !== s.L1_b
                    : t === s.L1_b
                    ? e !== s.L1
                    : e < t;
                })((p = c), (m = d))
                  ? p
                  : m;
              var p, m;
              const g = o ? c : l;
              return (
                a.debug(
                  `generateProfileLevelIdStringForAnswer() | result [profile:${r.profile}, level:${g}]`
                ),
                u(new i(r.profile, g))
              );
            });
        },
        328: (e, t, r) => {
          r(8624), (e.exports = self.fetch.bind(self));
        },
        2215: (e, t, r) => {
          var a, n;
          !(function (s) {
            if (
              (void 0 ===
                (n = "function" == typeof (a = s) ? a.call(t, r, t, e) : a) ||
                (e.exports = n),
              (e.exports = s()),
              !!0)
            ) {
              var i = window.Cookies,
                o = (window.Cookies = s());
              o.noConflict = function () {
                return (window.Cookies = i), o;
              };
            }
          })(function () {
            function e() {
              for (var e = 0, t = {}; e < arguments.length; e++) {
                var r = arguments[e];
                for (var a in r) t[a] = r[a];
              }
              return t;
            }
            function t(e) {
              return e.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
            }
            return (function r(a) {
              function n() {}
              function s(t, r, s) {
                if ("undefined" != typeof document) {
                  "number" ==
                    typeof (s = e({ path: "/" }, n.defaults, s)).expires &&
                    (s.expires = new Date(1 * new Date() + 864e5 * s.expires)),
                    (s.expires = s.expires ? s.expires.toUTCString() : "");
                  try {
                    var i = JSON.stringify(r);
                    /^[\{\[]/.test(i) && (r = i);
                  } catch (e) {}
                  (r = a.write
                    ? a.write(r, t)
                    : encodeURIComponent(String(r)).replace(
                        /%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
                        decodeURIComponent
                      )),
                    (t = encodeURIComponent(String(t))
                      .replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
                      .replace(/[\(\)]/g, escape));
                  var o = "";
                  for (var c in s)
                    s[c] &&
                      ((o += "; " + c),
                      !0 !== s[c] && (o += "=" + s[c].split(";")[0]));
                  return (document.cookie = t + "=" + r + o);
                }
              }
              function i(e, r) {
                if ("undefined" != typeof document) {
                  for (
                    var n = {},
                      s = document.cookie ? document.cookie.split("; ") : [],
                      i = 0;
                    i < s.length;
                    i++
                  ) {
                    var o = s[i].split("="),
                      c = o.slice(1).join("=");
                    r || '"' !== c.charAt(0) || (c = c.slice(1, -1));
                    try {
                      var d = t(o[0]);
                      if (((c = (a.read || a)(c, d) || t(c)), r))
                        try {
                          c = JSON.parse(c);
                        } catch (e) {}
                      if (((n[d] = c), e === d)) break;
                    } catch (e) {}
                  }
                  return e ? n[e] : n;
                }
              }
              return (
                (n.set = s),
                (n.get = function (e) {
                  return i(e, !1);
                }),
                (n.getJSON = function (e) {
                  return i(e, !0);
                }),
                (n.remove = function (t, r) {
                  s(t, "", e(r, { expires: -1 }));
                }),
                (n.defaults = {}),
                (n.withConverter = r),
                n
              );
            })(function () {});
          });
        },
        7654: (e, t, r) => {
          var a = "__lodash_hash_undefined__",
            n = "[object Function]",
            s = "[object GeneratorFunction]",
            i = /^\[object .+?Constructor\]$/,
            o = "object" == typeof r.g && r.g && r.g.Object === Object && r.g,
            c =
              "object" == typeof self && self && self.Object === Object && self,
            d = o || c || Function("return this")();
          var l,
            p = Array.prototype,
            u = Function.prototype,
            h = Object.prototype,
            m = d["__core-js_shared__"],
            f = (l = /[^.]+$/.exec((m && m.keys && m.keys.IE_PROTO) || ""))
              ? "Symbol(src)_1." + l
              : "",
            g = u.toString,
            _ = h.hasOwnProperty,
            v = h.toString,
            b = RegExp(
              "^" +
                g
                  .call(_)
                  .replace(/[\\^$.*+?()[\]{}|]/g, "\\$&")
                  .replace(
                    /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                    "$1.*?"
                  ) +
                "$"
            ),
            y = p.splice,
            w = O(d, "Map"),
            S = O(Object, "create");
          function R(e) {
            var t = -1,
              r = e ? e.length : 0;
            for (this.clear(); ++t < r; ) {
              var a = e[t];
              this.set(a[0], a[1]);
            }
          }
          function E(e) {
            var t = -1,
              r = e ? e.length : 0;
            for (this.clear(); ++t < r; ) {
              var a = e[t];
              this.set(a[0], a[1]);
            }
          }
          function k(e) {
            var t = -1,
              r = e ? e.length : 0;
            for (this.clear(); ++t < r; ) {
              var a = e[t];
              this.set(a[0], a[1]);
            }
          }
          function T(e, t) {
            for (var r, a, n = e.length; n--; )
              if ((r = e[n][0]) === (a = t) || (r != r && a != a)) return n;
            return -1;
          }
          function C(e) {
            if (!x(e) || ((t = e), f && f in t)) return !1;
            var t,
              r =
                (function (e) {
                  var t = x(e) ? v.call(e) : "";
                  return t == n || t == s;
                })(e) ||
                (function (e) {
                  var t = !1;
                  if (null != e && "function" != typeof e.toString)
                    try {
                      t = !!(e + "");
                    } catch (e) {}
                  return t;
                })(e)
                  ? b
                  : i;
            return r.test(
              (function (e) {
                if (null != e) {
                  try {
                    return g.call(e);
                  } catch (e) {}
                  try {
                    return e + "";
                  } catch (e) {}
                }
                return "";
              })(e)
            );
          }
          function P(e, t) {
            var r,
              a,
              n = e.__data__;
            return (
              "string" == (a = typeof (r = t)) ||
              "number" == a ||
              "symbol" == a ||
              "boolean" == a
                ? "__proto__" !== r
                : null === r
            )
              ? n["string" == typeof t ? "string" : "hash"]
              : n.map;
          }
          function O(e, t) {
            var r = (function (e, t) {
              return null == e ? void 0 : e[t];
            })(e, t);
            return C(r) ? r : void 0;
          }
          function D(e, t) {
            if ("function" != typeof e || (t && "function" != typeof t))
              throw new TypeError("Expected a function");
            var r = function () {
              var a = arguments,
                n = t ? t.apply(this, a) : a[0],
                s = r.cache;
              if (s.has(n)) return s.get(n);
              var i = e.apply(this, a);
              return (r.cache = s.set(n, i)), i;
            };
            return (r.cache = new (D.Cache || k)()), r;
          }
          function x(e) {
            var t = typeof e;
            return !!e && ("object" == t || "function" == t);
          }
          (R.prototype.clear = function () {
            this.__data__ = S ? S(null) : {};
          }),
            (R.prototype.delete = function (e) {
              return this.has(e) && delete this.__data__[e];
            }),
            (R.prototype.get = function (e) {
              var t = this.__data__;
              if (S) {
                var r = t[e];
                return r === a ? void 0 : r;
              }
              return _.call(t, e) ? t[e] : void 0;
            }),
            (R.prototype.has = function (e) {
              var t = this.__data__;
              return S ? void 0 !== t[e] : _.call(t, e);
            }),
            (R.prototype.set = function (e, t) {
              return (this.__data__[e] = S && void 0 === t ? a : t), this;
            }),
            (E.prototype.clear = function () {
              this.__data__ = [];
            }),
            (E.prototype.delete = function (e) {
              var t = this.__data__,
                r = T(t, e);
              return (
                !(r < 0) && (r == t.length - 1 ? t.pop() : y.call(t, r, 1), !0)
              );
            }),
            (E.prototype.get = function (e) {
              var t = this.__data__,
                r = T(t, e);
              return r < 0 ? void 0 : t[r][1];
            }),
            (E.prototype.has = function (e) {
              return T(this.__data__, e) > -1;
            }),
            (E.prototype.set = function (e, t) {
              var r = this.__data__,
                a = T(r, e);
              return a < 0 ? r.push([e, t]) : (r[a][1] = t), this;
            }),
            (k.prototype.clear = function () {
              this.__data__ = {
                hash: new R(),
                map: new (w || E)(),
                string: new R(),
              };
            }),
            (k.prototype.delete = function (e) {
              return P(this, e).delete(e);
            }),
            (k.prototype.get = function (e) {
              return P(this, e).get(e);
            }),
            (k.prototype.has = function (e) {
              return P(this, e).has(e);
            }),
            (k.prototype.set = function (e, t) {
              return P(this, e).set(e, t), this;
            }),
            (D.Cache = k),
            (e.exports = D);
        },
        3518: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Consumer = void 0);
          const a = r(2994),
            n = r(2010),
            s = r(4893),
            i = new a.Logger("Consumer");
          class o extends n.EnhancedEventEmitter {
            constructor({
              id: e,
              localId: t,
              producerId: r,
              rtpReceiver: a,
              track: s,
              rtpParameters: o,
              appData: c,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new n.EnhancedEventEmitter()),
                i.debug("constructor()"),
                (this._id = e),
                (this._localId = t),
                (this._producerId = r),
                (this._rtpReceiver = a),
                (this._track = s),
                (this._rtpParameters = o),
                (this._paused = !s.enabled),
                (this._appData = c || {}),
                (this.onTrackEnded = this.onTrackEnded.bind(this)),
                this.handleTrack();
            }
            get id() {
              return this._id;
            }
            get localId() {
              return this._localId;
            }
            get producerId() {
              return this._producerId;
            }
            get closed() {
              return this._closed;
            }
            get kind() {
              return this._track.kind;
            }
            get rtpReceiver() {
              return this._rtpReceiver;
            }
            get track() {
              return this._track;
            }
            get rtpParameters() {
              return this._rtpParameters;
            }
            get paused() {
              return this._paused;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              this._appData = e;
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (i.debug("close()"),
                (this._closed = !0),
                this.destroyTrack(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (i.debug("transportClosed()"),
                (this._closed = !0),
                this.destroyTrack(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            async getStats() {
              if (this._closed) throw new s.InvalidStateError("closed");
              return new Promise((e, t) => {
                this.safeEmit("@getstats", e, t);
              });
            }
            pause() {
              i.debug("pause()"),
                this._closed
                  ? i.error("pause() | Consumer closed")
                  : this._paused
                  ? i.debug("pause() | Consumer is already paused")
                  : ((this._paused = !0),
                    (this._track.enabled = !1),
                    this.emit("@pause"),
                    this._observer.safeEmit("pause"));
            }
            resume() {
              i.debug("resume()"),
                this._closed
                  ? i.error("resume() | Consumer closed")
                  : this._paused
                  ? ((this._paused = !1),
                    (this._track.enabled = !0),
                    this.emit("@resume"),
                    this._observer.safeEmit("resume"))
                  : i.debug("resume() | Consumer is already resumed");
            }
            onTrackEnded() {
              i.debug('track "ended" event'),
                this.safeEmit("trackended"),
                this._observer.safeEmit("trackended");
            }
            handleTrack() {
              this._track.addEventListener("ended", this.onTrackEnded);
            }
            destroyTrack() {
              try {
                this._track.removeEventListener("ended", this.onTrackEnded),
                  this._track.stop();
              } catch (e) {}
            }
          }
          t.Consumer = o;
        },
        9166: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.DataConsumer = void 0);
          const a = r(2994),
            n = r(2010),
            s = new a.Logger("DataConsumer");
          class i extends n.EnhancedEventEmitter {
            constructor({
              id: e,
              dataProducerId: t,
              dataChannel: r,
              sctpStreamParameters: a,
              appData: i,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new n.EnhancedEventEmitter()),
                s.debug("constructor()"),
                (this._id = e),
                (this._dataProducerId = t),
                (this._dataChannel = r),
                (this._sctpStreamParameters = a),
                (this._appData = i || {}),
                this.handleDataChannel();
            }
            get id() {
              return this._id;
            }
            get dataProducerId() {
              return this._dataProducerId;
            }
            get closed() {
              return this._closed;
            }
            get sctpStreamParameters() {
              return this._sctpStreamParameters;
            }
            get readyState() {
              return this._dataChannel.readyState;
            }
            get label() {
              return this._dataChannel.label;
            }
            get protocol() {
              return this._dataChannel.protocol;
            }
            get binaryType() {
              return this._dataChannel.binaryType;
            }
            set binaryType(e) {
              this._dataChannel.binaryType = e;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              this._appData = e;
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (s.debug("close()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (s.debug("transportClosed()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            handleDataChannel() {
              this._dataChannel.addEventListener("open", () => {
                this._closed ||
                  (s.debug('DataChannel "open" event'), this.safeEmit("open"));
              }),
                this._dataChannel.addEventListener("error", (e) => {
                  if (this._closed) return;
                  let { error: t } = e;
                  t || (t = new Error("unknown DataChannel error")),
                    "sctp-failure" === t.errorDetail
                      ? s.error(
                          "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                          t.sctpCauseCode,
                          t.message
                        )
                      : s.error('DataChannel "error" event: %o', t),
                    this.safeEmit("error", t);
                }),
                this._dataChannel.addEventListener("close", () => {
                  this._closed ||
                    (s.warn('DataChannel "close" event'),
                    (this._closed = !0),
                    this.emit("@close"),
                    this.safeEmit("close"),
                    this._observer.safeEmit("close"));
                }),
                this._dataChannel.addEventListener("message", (e) => {
                  this._closed || this.safeEmit("message", e.data);
                });
            }
          }
          t.DataConsumer = i;
        },
        7504: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.DataProducer = void 0);
          const a = r(2994),
            n = r(2010),
            s = r(4893),
            i = new a.Logger("DataProducer");
          class o extends n.EnhancedEventEmitter {
            constructor({
              id: e,
              dataChannel: t,
              sctpStreamParameters: r,
              appData: a,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new n.EnhancedEventEmitter()),
                i.debug("constructor()"),
                (this._id = e),
                (this._dataChannel = t),
                (this._sctpStreamParameters = r),
                (this._appData = a || {}),
                this.handleDataChannel();
            }
            get id() {
              return this._id;
            }
            get closed() {
              return this._closed;
            }
            get sctpStreamParameters() {
              return this._sctpStreamParameters;
            }
            get readyState() {
              return this._dataChannel.readyState;
            }
            get label() {
              return this._dataChannel.label;
            }
            get protocol() {
              return this._dataChannel.protocol;
            }
            get bufferedAmount() {
              return this._dataChannel.bufferedAmount;
            }
            get bufferedAmountLowThreshold() {
              return this._dataChannel.bufferedAmountLowThreshold;
            }
            set bufferedAmountLowThreshold(e) {
              this._dataChannel.bufferedAmountLowThreshold = e;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              this._appData = e;
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (i.debug("close()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (i.debug("transportClosed()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            send(e) {
              if ((i.debug("send()"), this._closed))
                throw new s.InvalidStateError("closed");
              this._dataChannel.send(e);
            }
            handleDataChannel() {
              this._dataChannel.addEventListener("open", () => {
                this._closed ||
                  (i.debug('DataChannel "open" event'), this.safeEmit("open"));
              }),
                this._dataChannel.addEventListener("error", (e) => {
                  if (this._closed) return;
                  let { error: t } = e;
                  t || (t = new Error("unknown DataChannel error")),
                    "sctp-failure" === t.errorDetail
                      ? i.error(
                          "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                          t.sctpCauseCode,
                          t.message
                        )
                      : i.error('DataChannel "error" event: %o', t),
                    this.safeEmit("error", t);
                }),
                this._dataChannel.addEventListener("close", () => {
                  this._closed ||
                    (i.warn('DataChannel "close" event'),
                    (this._closed = !0),
                    this.emit("@close"),
                    this.safeEmit("close"),
                    this._observer.safeEmit("close"));
                }),
                this._dataChannel.addEventListener("message", () => {
                  this._closed ||
                    i.warn(
                      'DataChannel "message" event in a DataProducer, message discarded'
                    );
                }),
                this._dataChannel.addEventListener("bufferedamountlow", () => {
                  this._closed || this.safeEmit("bufferedamountlow");
                });
            }
          }
          t.DataProducer = o;
        },
        6004: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Device = t.detectDevice = void 0);
          const i = r(7232),
            o = r(2994),
            c = r(2010),
            d = r(4893),
            l = s(r(1765)),
            p = s(r(8046)),
            u = r(5601),
            h = r(2183),
            m = r(11),
            f = r(5535),
            g = r(8155),
            _ = r(7402),
            v = r(2292),
            b = r(1767),
            y = r(5765),
            w = r(9676),
            S = r(8633),
            R = r(4039),
            E = r(9352),
            k = new o.Logger("Device");
          function T() {
            if (
              "object" == typeof navigator &&
              "ReactNative" === navigator.product
            )
              return (
                k.debug("detectDevice() | React-Native detected"),
                "undefined" == typeof RTCPeerConnection
                  ? void k.warn(
                      "detectDevice() | unsupported react-native-webrtc without RTCPeerConnection, forgot to call registerGlobals()?"
                    )
                  : "undefined" != typeof RTCRtpTransceiver
                  ? (k.debug(
                      "detectDevice() | ReactNative UnifiedPlan handler chosen"
                    ),
                    "ReactNativeUnifiedPlan")
                  : (k.debug(
                      "detectDevice() | ReactNative PlanB handler chosen"
                    ),
                    "ReactNative")
              );
            if (
              "object" != typeof navigator ||
              "string" != typeof navigator.userAgent
            )
              k.warn("detectDevice() | unknown device");
            else {
              const e = navigator.userAgent,
                t = new i.UAParser(e);
              k.debug(
                "detectDevice() | browser detected [ua:%s, parsed:%o]",
                e,
                t.getResult()
              );
              const r = t.getBrowser(),
                a = r.name?.toLowerCase(),
                n = parseInt(r.major ?? "0"),
                s = t.getEngine(),
                o = s.name?.toLowerCase(),
                c = t.getOS(),
                d = c.name?.toLowerCase(),
                l = parseFloat(c.version ?? "0"),
                p = t.getDevice(),
                u = p.model?.toLowerCase(),
                h = "ios" === d || "ipad" === u,
                m =
                  a &&
                  [
                    "chrome",
                    "chromium",
                    "mobile chrome",
                    "chrome webview",
                    "chrome headless",
                  ].includes(a),
                f =
                  a &&
                  ["firefox", "mobile firefox", "mobile focus"].includes(a),
                g = a && ["safari", "mobile safari"].includes(a),
                _ = a && ["edge"].includes(a);
              if ((m || _) && !h && n >= 111) return "Chrome111";
              if ((m && !h && n >= 74) || (_ && !h && n >= 88))
                return "Chrome74";
              if (m && !h && n >= 70) return "Chrome70";
              if (m && !h && n >= 67) return "Chrome67";
              if (m && !h && n >= 55) return "Chrome55";
              if (f && !h && n >= 120) return "Firefox120";
              if (f && !h && n >= 60) return "Firefox60";
              if (f && h && l >= 14.3) return "Safari12";
              if (
                g &&
                n >= 12 &&
                "undefined" != typeof RTCRtpTransceiver &&
                RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection")
              )
                return "Safari12";
              if (g && n >= 11) return "Safari11";
              if (_ && !h && n >= 11 && n <= 18) return "Edge11";
              if (
                "webkit" === o &&
                h &&
                "undefined" != typeof RTCRtpTransceiver &&
                RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection")
              )
                return "Safari12";
              if ("blink" === o) {
                const t = e.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);
                if (t) {
                  const e = Number(t[1]);
                  return e >= 111
                    ? "Chrome111"
                    : e >= 74
                    ? "Chrome74"
                    : e >= 70
                    ? "Chrome70"
                    : e >= 67
                    ? "Chrome67"
                    : "Chrome55";
                }
                return "Chrome111";
              }
              k.warn(
                "detectDevice() | browser not supported [name:%s, version:%s]",
                a,
                n
              );
            }
          }
          t.detectDevice = T;
          t.Device = class {
            constructor({
              handlerName: e,
              handlerFactory: t,
              Handler: r,
            } = {}) {
              if (
                ((this._loaded = !1),
                (this._observer = new c.EnhancedEventEmitter()),
                k.debug("constructor()"),
                r)
              ) {
                if (
                  (k.warn(
                    "constructor() | Handler option is DEPRECATED, use handlerName or handlerFactory instead"
                  ),
                  "string" != typeof r)
                )
                  throw new TypeError(
                    "non string Handler option no longer supported, use handlerFactory instead"
                  );
                e = r;
              }
              if (e && t)
                throw new TypeError(
                  "just one of handlerName or handlerInterface can be given"
                );
              if (t) this._handlerFactory = t;
              else {
                if (e) k.debug("constructor() | handler given: %s", e);
                else {
                  if (!(e = T()))
                    throw new d.UnsupportedError("device not supported");
                  k.debug("constructor() | detected handler: %s", e);
                }
                switch (e) {
                  case "Chrome111":
                    this._handlerFactory = h.Chrome111.createFactory();
                    break;
                  case "Chrome74":
                    this._handlerFactory = m.Chrome74.createFactory();
                    break;
                  case "Chrome70":
                    this._handlerFactory = f.Chrome70.createFactory();
                    break;
                  case "Chrome67":
                    this._handlerFactory = g.Chrome67.createFactory();
                    break;
                  case "Chrome55":
                    this._handlerFactory = _.Chrome55.createFactory();
                    break;
                  case "Firefox120":
                    this._handlerFactory = v.Firefox120.createFactory();
                    break;
                  case "Firefox60":
                    this._handlerFactory = b.Firefox60.createFactory();
                    break;
                  case "Safari12":
                    this._handlerFactory = y.Safari12.createFactory();
                    break;
                  case "Safari11":
                    this._handlerFactory = w.Safari11.createFactory();
                    break;
                  case "Edge11":
                    this._handlerFactory = S.Edge11.createFactory();
                    break;
                  case "ReactNativeUnifiedPlan":
                    this._handlerFactory =
                      R.ReactNativeUnifiedPlan.createFactory();
                    break;
                  case "ReactNative":
                    this._handlerFactory = E.ReactNative.createFactory();
                    break;
                  default:
                    throw new TypeError(`unknown handlerName "${e}"`);
                }
              }
              const a = this._handlerFactory();
              (this._handlerName = a.name),
                a.close(),
                (this._extendedRtpCapabilities = void 0),
                (this._recvRtpCapabilities = void 0),
                (this._canProduceByKind = { audio: !1, video: !1 }),
                (this._sctpCapabilities = void 0);
            }
            get handlerName() {
              return this._handlerName;
            }
            get loaded() {
              return this._loaded;
            }
            get rtpCapabilities() {
              if (!this._loaded) throw new d.InvalidStateError("not loaded");
              return this._recvRtpCapabilities;
            }
            get sctpCapabilities() {
              if (!this._loaded) throw new d.InvalidStateError("not loaded");
              return this._sctpCapabilities;
            }
            get observer() {
              return this._observer;
            }
            async load({ routerRtpCapabilities: e }) {
              let t;
              k.debug("load() [routerRtpCapabilities:%o]", e);
              try {
                if (this._loaded)
                  throw new d.InvalidStateError("already loaded");
                const r = l.clone(e);
                p.validateRtpCapabilities(r), (t = this._handlerFactory());
                const a = await t.getNativeRtpCapabilities();
                k.debug("load() | got native RTP capabilities:%o", a);
                const n = l.clone(a);
                p.validateRtpCapabilities(n),
                  (this._extendedRtpCapabilities = p.getExtendedRtpCapabilities(
                    n,
                    r
                  )),
                  k.debug(
                    "load() | got extended RTP capabilities:%o",
                    this._extendedRtpCapabilities
                  ),
                  (this._canProduceByKind.audio = p.canSend(
                    "audio",
                    this._extendedRtpCapabilities
                  )),
                  (this._canProduceByKind.video = p.canSend(
                    "video",
                    this._extendedRtpCapabilities
                  )),
                  (this._recvRtpCapabilities = p.getRecvRtpCapabilities(
                    this._extendedRtpCapabilities
                  )),
                  p.validateRtpCapabilities(this._recvRtpCapabilities),
                  k.debug(
                    "load() | got receiving RTP capabilities:%o",
                    this._recvRtpCapabilities
                  ),
                  (this._sctpCapabilities =
                    await t.getNativeSctpCapabilities()),
                  k.debug(
                    "load() | got native SCTP capabilities:%o",
                    this._sctpCapabilities
                  ),
                  p.validateSctpCapabilities(this._sctpCapabilities),
                  k.debug("load() succeeded"),
                  (this._loaded = !0),
                  t.close();
              } catch (e) {
                throw (t && t.close(), e);
              }
            }
            canProduce(e) {
              if (!this._loaded) throw new d.InvalidStateError("not loaded");
              if ("audio" !== e && "video" !== e)
                throw new TypeError(`invalid kind "${e}"`);
              return this._canProduceByKind[e];
            }
            createSendTransport({
              id: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              appData: d,
            }) {
              return (
                k.debug("createSendTransport()"),
                this.createTransport({
                  direction: "send",
                  id: e,
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                  iceServers: s,
                  iceTransportPolicy: i,
                  additionalSettings: o,
                  proprietaryConstraints: c,
                  appData: d,
                })
              );
            }
            createRecvTransport({
              id: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              appData: d,
            }) {
              return (
                k.debug("createRecvTransport()"),
                this.createTransport({
                  direction: "recv",
                  id: e,
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                  iceServers: s,
                  iceTransportPolicy: i,
                  additionalSettings: o,
                  proprietaryConstraints: c,
                  appData: d,
                })
              );
            }
            createTransport({
              direction: e,
              id: t,
              iceParameters: r,
              iceCandidates: a,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: o,
              additionalSettings: c,
              proprietaryConstraints: l,
              appData: p,
            }) {
              if (!this._loaded) throw new d.InvalidStateError("not loaded");
              if ("string" != typeof t) throw new TypeError("missing id");
              if ("object" != typeof r)
                throw new TypeError("missing iceParameters");
              if (!Array.isArray(a))
                throw new TypeError("missing iceCandidates");
              if ("object" != typeof n)
                throw new TypeError("missing dtlsParameters");
              if (s && "object" != typeof s)
                throw new TypeError("wrong sctpParameters");
              if (p && "object" != typeof p)
                throw new TypeError("if given, appData must be an object");
              const h = new u.Transport({
                direction: e,
                id: t,
                iceParameters: r,
                iceCandidates: a,
                dtlsParameters: n,
                sctpParameters: s,
                iceServers: i,
                iceTransportPolicy: o,
                additionalSettings: c,
                proprietaryConstraints: l,
                appData: p,
                handlerFactory: this._handlerFactory,
                extendedRtpCapabilities: this._extendedRtpCapabilities,
                canProduceByKind: this._canProduceByKind,
              });
              return this._observer.safeEmit("newtransport", h), h;
            }
          };
        },
        2010: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.EnhancedEventEmitter = void 0);
          const a = r(7007),
            n = new (r(2994).Logger)("EnhancedEventEmitter");
          class s extends a.EventEmitter {
            constructor() {
              super(), this.setMaxListeners(1 / 0);
            }
            emit(e, ...t) {
              return super.emit(e, ...t);
            }
            safeEmit(e, ...t) {
              const r = super.listenerCount(e);
              try {
                return super.emit(e, ...t);
              } catch (t) {
                return (
                  n.error(
                    "safeEmit() | event listener threw an error [eventName:%s]:%o",
                    e,
                    t
                  ),
                  Boolean(r)
                );
              }
            }
            on(e, t) {
              return super.on(e, t), this;
            }
            off(e, t) {
              return super.off(e, t), this;
            }
            addListener(e, t) {
              return super.on(e, t), this;
            }
            prependListener(e, t) {
              return super.prependListener(e, t), this;
            }
            once(e, t) {
              return super.once(e, t), this;
            }
            prependOnceListener(e, t) {
              return super.prependOnceListener(e, t), this;
            }
            removeListener(e, t) {
              return super.off(e, t), this;
            }
            removeAllListeners(e) {
              return super.removeAllListeners(e), this;
            }
            listenerCount(e) {
              return super.listenerCount(e);
            }
            listeners(e) {
              return super.listeners(e);
            }
            rawListeners(e) {
              return super.rawListeners(e);
            }
          }
          t.EnhancedEventEmitter = s;
        },
        2994: function (e, t, r) {
          "use strict";
          var a =
            (this && this.__importDefault) ||
            function (e) {
              return e && e.__esModule ? e : { default: e };
            };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Logger = void 0);
          const n = a(r(7833)),
            s = "mediasoup-client";
          t.Logger = class {
            constructor(e) {
              e
                ? ((this._debug = (0, n.default)(`${s}:${e}`)),
                  (this._warn = (0, n.default)(`${s}:WARN:${e}`)),
                  (this._error = (0, n.default)(`${s}:ERROR:${e}`)))
                : ((this._debug = (0, n.default)(s)),
                  (this._warn = (0, n.default)(`${s}:WARN`)),
                  (this._error = (0, n.default)(`${s}:ERROR`))),
                (this._debug.log = console.info.bind(console)),
                (this._warn.log = console.warn.bind(console)),
                (this._error.log = console.error.bind(console));
            }
            get debug() {
              return this._debug;
            }
            get warn() {
              return this._warn;
            }
            get error() {
              return this._error;
            }
          };
        },
        9792: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Producer = void 0);
          const a = r(2994),
            n = r(2010),
            s = r(4893),
            i = new a.Logger("Producer");
          class o extends n.EnhancedEventEmitter {
            constructor({
              id: e,
              localId: t,
              rtpSender: r,
              track: a,
              rtpParameters: s,
              stopTracks: o,
              disableTrackOnPause: c,
              zeroRtpOnPause: d,
              appData: l,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new n.EnhancedEventEmitter()),
                i.debug("constructor()"),
                (this._id = e),
                (this._localId = t),
                (this._rtpSender = r),
                (this._track = a),
                (this._kind = a.kind),
                (this._rtpParameters = s),
                (this._paused = !!c && !a.enabled),
                (this._maxSpatialLayer = void 0),
                (this._stopTracks = o),
                (this._disableTrackOnPause = c),
                (this._zeroRtpOnPause = d),
                (this._appData = l || {}),
                (this.onTrackEnded = this.onTrackEnded.bind(this)),
                this.handleTrack();
            }
            get id() {
              return this._id;
            }
            get localId() {
              return this._localId;
            }
            get closed() {
              return this._closed;
            }
            get kind() {
              return this._kind;
            }
            get rtpSender() {
              return this._rtpSender;
            }
            get track() {
              return this._track;
            }
            get rtpParameters() {
              return this._rtpParameters;
            }
            get paused() {
              return this._paused;
            }
            get maxSpatialLayer() {
              return this._maxSpatialLayer;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              this._appData = e;
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (i.debug("close()"),
                (this._closed = !0),
                this.destroyTrack(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (i.debug("transportClosed()"),
                (this._closed = !0),
                this.destroyTrack(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            async getStats() {
              if (this._closed) throw new s.InvalidStateError("closed");
              return new Promise((e, t) => {
                this.safeEmit("@getstats", e, t);
              });
            }
            pause() {
              i.debug("pause()"),
                this._closed
                  ? i.error("pause() | Producer closed")
                  : ((this._paused = !0),
                    this._track &&
                      this._disableTrackOnPause &&
                      (this._track.enabled = !1),
                    this._zeroRtpOnPause &&
                      new Promise((e, t) => {
                        this.safeEmit("@pause", e, t);
                      }).catch(() => {}),
                    this._observer.safeEmit("pause"));
            }
            resume() {
              i.debug("resume()"),
                this._closed
                  ? i.error("resume() | Producer closed")
                  : ((this._paused = !1),
                    this._track &&
                      this._disableTrackOnPause &&
                      (this._track.enabled = !0),
                    this._zeroRtpOnPause &&
                      new Promise((e, t) => {
                        this.safeEmit("@resume", e, t);
                      }).catch(() => {}),
                    this._observer.safeEmit("resume"));
            }
            async replaceTrack({ track: e }) {
              if ((i.debug("replaceTrack() [track:%o]", e), this._closed)) {
                if (e && this._stopTracks)
                  try {
                    e.stop();
                  } catch (e) {}
                throw new s.InvalidStateError("closed");
              }
              if (e && "ended" === e.readyState)
                throw new s.InvalidStateError("track ended");
              e !== this._track
                ? (await new Promise((t, r) => {
                    this.safeEmit("@replacetrack", e, t, r);
                  }),
                  this.destroyTrack(),
                  (this._track = e),
                  this._track &&
                    this._disableTrackOnPause &&
                    (this._paused
                      ? this._paused && (this._track.enabled = !1)
                      : (this._track.enabled = !0)),
                  this.handleTrack())
                : i.debug("replaceTrack() | same track, ignored");
            }
            async setMaxSpatialLayer(e) {
              if (this._closed) throw new s.InvalidStateError("closed");
              if ("video" !== this._kind)
                throw new s.UnsupportedError("not a video Producer");
              if ("number" != typeof e)
                throw new TypeError("invalid spatialLayer");
              e !== this._maxSpatialLayer &&
                (await new Promise((t, r) => {
                  this.safeEmit("@setmaxspatiallayer", e, t, r);
                }).catch(() => {}),
                (this._maxSpatialLayer = e));
            }
            async setRtpEncodingParameters(e) {
              if (this._closed) throw new s.InvalidStateError("closed");
              if ("object" != typeof e) throw new TypeError("invalid params");
              await new Promise((t, r) => {
                this.safeEmit("@setrtpencodingparameters", e, t, r);
              });
            }
            onTrackEnded() {
              i.debug('track "ended" event'),
                this.safeEmit("trackended"),
                this._observer.safeEmit("trackended");
            }
            handleTrack() {
              this._track &&
                this._track.addEventListener("ended", this.onTrackEnded);
            }
            destroyTrack() {
              if (this._track)
                try {
                  this._track.removeEventListener("ended", this.onTrackEnded),
                    this._stopTracks && this._track.stop();
                } catch (e) {}
            }
          }
          t.Producer = o;
        },
        5370: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 });
        },
        4160: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 });
        },
        5601: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              },
            i =
              (this && this.__importDefault) ||
              function (e) {
                return e && e.__esModule ? e : { default: e };
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Transport = void 0);
          const o = r(8876),
            c = i(r(9596)),
            d = r(2994),
            l = r(2010),
            p = r(4893),
            u = s(r(1765)),
            h = s(r(8046)),
            m = r(9792),
            f = r(3518),
            g = r(7504),
            _ = r(9166),
            v = new d.Logger("Transport");
          class b {
            constructor(e) {
              (this.consumerOptions = e),
                (this.promise = new Promise((e, t) => {
                  (this.resolve = e), (this.reject = t);
                }));
            }
          }
          class y extends l.EnhancedEventEmitter {
            constructor({
              direction: e,
              id: t,
              iceParameters: r,
              iceCandidates: a,
              dtlsParameters: n,
              sctpParameters: s,
              iceServers: i,
              iceTransportPolicy: c,
              additionalSettings: d,
              proprietaryConstraints: p,
              appData: h,
              handlerFactory: m,
              extendedRtpCapabilities: f,
              canProduceByKind: g,
            }) {
              super(),
                (this._closed = !1),
                (this._iceGatheringState = "new"),
                (this._connectionState = "new"),
                (this._producers = new Map()),
                (this._consumers = new Map()),
                (this._dataProducers = new Map()),
                (this._dataConsumers = new Map()),
                (this._probatorConsumerCreated = !1),
                (this._awaitQueue = new o.AwaitQueue()),
                (this._pendingConsumerTasks = []),
                (this._consumerCreationInProgress = !1),
                (this._pendingPauseConsumers = new Map()),
                (this._consumerPauseInProgress = !1),
                (this._pendingResumeConsumers = new Map()),
                (this._consumerResumeInProgress = !1),
                (this._pendingCloseConsumers = new Map()),
                (this._consumerCloseInProgress = !1),
                (this._observer = new l.EnhancedEventEmitter()),
                v.debug("constructor() [id:%s, direction:%s]", t, e),
                (this._id = t),
                (this._direction = e),
                (this._extendedRtpCapabilities = f),
                (this._canProduceByKind = g),
                (this._maxSctpMessageSize = s ? s.maxMessageSize : null);
              const _ = u.clone(d) || {};
              delete _.iceServers,
                delete _.iceTransportPolicy,
                delete _.bundlePolicy,
                delete _.rtcpMuxPolicy,
                delete _.sdpSemantics,
                (this._handler = m()),
                this._handler.run({
                  direction: e,
                  iceParameters: r,
                  iceCandidates: a,
                  dtlsParameters: n,
                  sctpParameters: s,
                  iceServers: i,
                  iceTransportPolicy: c,
                  additionalSettings: _,
                  proprietaryConstraints: p,
                  extendedRtpCapabilities: f,
                }),
                (this._appData = h || {}),
                this.handleHandler();
            }
            get id() {
              return this._id;
            }
            get closed() {
              return this._closed;
            }
            get direction() {
              return this._direction;
            }
            get handler() {
              return this._handler;
            }
            get iceGatheringState() {
              return this._iceGatheringState;
            }
            get connectionState() {
              return this._connectionState;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              this._appData = e;
            }
            get observer() {
              return this._observer;
            }
            close() {
              if (!this._closed) {
                v.debug("close()"),
                  (this._closed = !0),
                  this._awaitQueue.stop(),
                  this._handler.close(),
                  (this._connectionState = "closed");
                for (const e of this._producers.values()) e.transportClosed();
                this._producers.clear();
                for (const e of this._consumers.values()) e.transportClosed();
                this._consumers.clear();
                for (const e of this._dataProducers.values())
                  e.transportClosed();
                this._dataProducers.clear();
                for (const e of this._dataConsumers.values())
                  e.transportClosed();
                this._dataConsumers.clear(), this._observer.safeEmit("close");
              }
            }
            async getStats() {
              if (this._closed) throw new p.InvalidStateError("closed");
              return this._handler.getTransportStats();
            }
            async restartIce({ iceParameters: e }) {
              if ((v.debug("restartIce()"), this._closed))
                throw new p.InvalidStateError("closed");
              if (!e) throw new TypeError("missing iceParameters");
              return this._awaitQueue.push(
                async () => await this._handler.restartIce(e),
                "transport.restartIce()"
              );
            }
            async updateIceServers({ iceServers: e } = {}) {
              if ((v.debug("updateIceServers()"), this._closed))
                throw new p.InvalidStateError("closed");
              if (!Array.isArray(e)) throw new TypeError("missing iceServers");
              return this._awaitQueue.push(
                async () => this._handler.updateIceServers(e),
                "transport.updateIceServers()"
              );
            }
            async produce({
              track: e,
              encodings: t,
              codecOptions: r,
              codec: a,
              stopTracks: n = !0,
              disableTrackOnPause: s = !0,
              zeroRtpOnPause: i = !1,
              appData: o = {},
            } = {}) {
              if ((v.debug("produce() [track:%o]", e), this._closed))
                throw new p.InvalidStateError("closed");
              if (!e) throw new TypeError("missing track");
              if ("send" !== this._direction)
                throw new p.UnsupportedError("not a sending Transport");
              if (!this._canProduceByKind[e.kind])
                throw new p.UnsupportedError(`cannot produce ${e.kind}`);
              if ("ended" === e.readyState)
                throw new p.InvalidStateError("track ended");
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (0 === this.listenerCount("produce"))
                throw new TypeError(
                  'no "produce" listener set into this transport'
                );
              if (o && "object" != typeof o)
                throw new TypeError("if given, appData must be an object");
              return this._awaitQueue
                .push(async () => {
                  let c;
                  if (t && !Array.isArray(t))
                    throw TypeError("encodings must be an array");
                  t && 0 === t.length
                    ? (c = void 0)
                    : t &&
                      (c = t.map((e) => {
                        const t = { active: !0 };
                        return (
                          !1 === e.active && (t.active = !1),
                          "boolean" == typeof e.dtx && (t.dtx = e.dtx),
                          "string" == typeof e.scalabilityMode &&
                            (t.scalabilityMode = e.scalabilityMode),
                          "number" == typeof e.scaleResolutionDownBy &&
                            (t.scaleResolutionDownBy = e.scaleResolutionDownBy),
                          "number" == typeof e.maxBitrate &&
                            (t.maxBitrate = e.maxBitrate),
                          "number" == typeof e.maxFramerate &&
                            (t.maxFramerate = e.maxFramerate),
                          "boolean" == typeof e.adaptivePtime &&
                            (t.adaptivePtime = e.adaptivePtime),
                          "string" == typeof e.priority &&
                            (t.priority = e.priority),
                          "string" == typeof e.networkPriority &&
                            (t.networkPriority = e.networkPriority),
                          t
                        );
                      }));
                  const {
                    localId: d,
                    rtpParameters: l,
                    rtpSender: p,
                  } = await this._handler.send({
                    track: e,
                    encodings: c,
                    codecOptions: r,
                    codec: a,
                  });
                  try {
                    h.validateRtpParameters(l);
                    const { id: t } = await new Promise((t, r) => {
                        this.safeEmit(
                          "produce",
                          { kind: e.kind, rtpParameters: l, appData: o },
                          t,
                          r
                        );
                      }),
                      r = new m.Producer({
                        id: t,
                        localId: d,
                        rtpSender: p,
                        track: e,
                        rtpParameters: l,
                        stopTracks: n,
                        disableTrackOnPause: s,
                        zeroRtpOnPause: i,
                        appData: o,
                      });
                    return (
                      this._producers.set(r.id, r),
                      this.handleProducer(r),
                      this._observer.safeEmit("newproducer", r),
                      r
                    );
                  } catch (e) {
                    throw (this._handler.stopSending(d).catch(() => {}), e);
                  }
                }, "transport.produce()")
                .catch((t) => {
                  if (n)
                    try {
                      e.stop();
                    } catch (e) {}
                  throw t;
                });
            }
            async consume({
              id: e,
              producerId: t,
              kind: r,
              rtpParameters: a,
              streamId: n,
              appData: s = {},
            }) {
              if ((v.debug("consume()"), this._closed))
                throw new p.InvalidStateError("closed");
              if ("recv" !== this._direction)
                throw new p.UnsupportedError("not a receiving Transport");
              if ("string" != typeof e) throw new TypeError("missing id");
              if ("string" != typeof t)
                throw new TypeError("missing producerId");
              if ("audio" !== r && "video" !== r)
                throw new TypeError(`invalid kind '${r}'`);
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (s && "object" != typeof s)
                throw new TypeError("if given, appData must be an object");
              const i = u.clone(a);
              if (!h.canReceive(i, this._extendedRtpCapabilities))
                throw new p.UnsupportedError("cannot consume this Producer");
              const o = new b({
                id: e,
                producerId: t,
                kind: r,
                rtpParameters: i,
                streamId: n,
                appData: s,
              });
              return (
                this._pendingConsumerTasks.push(o),
                (0, c.default)(() => {
                  this._closed ||
                    (!1 === this._consumerCreationInProgress &&
                      this.createPendingConsumers());
                }),
                o.promise
              );
            }
            async produceData({
              ordered: e = !0,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: a = "",
              protocol: n = "",
              appData: s = {},
            } = {}) {
              if ((v.debug("produceData()"), this._closed))
                throw new p.InvalidStateError("closed");
              if ("send" !== this._direction)
                throw new p.UnsupportedError("not a sending Transport");
              if (!this._maxSctpMessageSize)
                throw new p.UnsupportedError(
                  "SCTP not enabled by remote Transport"
                );
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (0 === this.listenerCount("producedata"))
                throw new TypeError(
                  'no "producedata" listener set into this transport'
                );
              if (s && "object" != typeof s)
                throw new TypeError("if given, appData must be an object");
              return (
                (t || r) && (e = !1),
                this._awaitQueue.push(async () => {
                  const { dataChannel: i, sctpStreamParameters: o } =
                    await this._handler.sendDataChannel({
                      ordered: e,
                      maxPacketLifeTime: t,
                      maxRetransmits: r,
                      label: a,
                      protocol: n,
                    });
                  h.validateSctpStreamParameters(o);
                  const { id: c } = await new Promise((e, t) => {
                      this.safeEmit(
                        "producedata",
                        {
                          sctpStreamParameters: o,
                          label: a,
                          protocol: n,
                          appData: s,
                        },
                        e,
                        t
                      );
                    }),
                    d = new g.DataProducer({
                      id: c,
                      dataChannel: i,
                      sctpStreamParameters: o,
                      appData: s,
                    });
                  return (
                    this._dataProducers.set(d.id, d),
                    this.handleDataProducer(d),
                    this._observer.safeEmit("newdataproducer", d),
                    d
                  );
                }, "transport.produceData()")
              );
            }
            async consumeData({
              id: e,
              dataProducerId: t,
              sctpStreamParameters: r,
              label: a = "",
              protocol: n = "",
              appData: s = {},
            }) {
              if ((v.debug("consumeData()"), this._closed))
                throw new p.InvalidStateError("closed");
              if ("recv" !== this._direction)
                throw new p.UnsupportedError("not a receiving Transport");
              if (!this._maxSctpMessageSize)
                throw new p.UnsupportedError(
                  "SCTP not enabled by remote Transport"
                );
              if ("string" != typeof e) throw new TypeError("missing id");
              if ("string" != typeof t)
                throw new TypeError("missing dataProducerId");
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (s && "object" != typeof s)
                throw new TypeError("if given, appData must be an object");
              const i = u.clone(r);
              return (
                h.validateSctpStreamParameters(i),
                this._awaitQueue.push(async () => {
                  const { dataChannel: r } =
                      await this._handler.receiveDataChannel({
                        sctpStreamParameters: i,
                        label: a,
                        protocol: n,
                      }),
                    o = new _.DataConsumer({
                      id: e,
                      dataProducerId: t,
                      dataChannel: r,
                      sctpStreamParameters: i,
                      appData: s,
                    });
                  return (
                    this._dataConsumers.set(o.id, o),
                    this.handleDataConsumer(o),
                    this._observer.safeEmit("newdataconsumer", o),
                    o
                  );
                }, "transport.consumeData()")
              );
            }
            async createPendingConsumers() {
              (this._consumerCreationInProgress = !0),
                this._awaitQueue
                  .push(async () => {
                    if (0 === this._pendingConsumerTasks.length)
                      return void v.debug(
                        "createPendingConsumers() | there is no Consumer to be created"
                      );
                    const e = [...this._pendingConsumerTasks];
                    let t;
                    this._pendingConsumerTasks = [];
                    const r = [];
                    for (const t of e) {
                      const {
                        id: e,
                        kind: a,
                        rtpParameters: n,
                        streamId: s,
                      } = t.consumerOptions;
                      r.push({
                        trackId: e,
                        kind: a,
                        rtpParameters: n,
                        streamId: s,
                      });
                    }
                    try {
                      const a = await this._handler.receive(r);
                      for (let r = 0; r < a.length; ++r) {
                        const n = e[r],
                          s = a[r],
                          {
                            id: i,
                            producerId: o,
                            kind: c,
                            rtpParameters: d,
                            appData: l,
                          } = n.consumerOptions,
                          { localId: p, rtpReceiver: u, track: h } = s,
                          m = new f.Consumer({
                            id: i,
                            localId: p,
                            producerId: o,
                            rtpReceiver: u,
                            track: h,
                            rtpParameters: d,
                            appData: l,
                          });
                        this._consumers.set(m.id, m),
                          this.handleConsumer(m),
                          this._probatorConsumerCreated ||
                            t ||
                            "video" !== c ||
                            (t = m),
                          this._observer.safeEmit("newconsumer", m),
                          n.resolve(m);
                      }
                    } catch (t) {
                      for (const r of e) r.reject(t);
                    }
                    if (t)
                      try {
                        const e = h.generateProbatorRtpParameters(
                          t.rtpParameters
                        );
                        await this._handler.receive([
                          {
                            trackId: "probator",
                            kind: "video",
                            rtpParameters: e,
                          },
                        ]),
                          v.debug(
                            "createPendingConsumers() | Consumer for RTP probation created"
                          ),
                          (this._probatorConsumerCreated = !0);
                      } catch (e) {
                        v.error(
                          "createPendingConsumers() | failed to create Consumer for RTP probation:%o",
                          e
                        );
                      }
                  }, "transport.createPendingConsumers()")
                  .then(() => {
                    (this._consumerCreationInProgress = !1),
                      this._pendingConsumerTasks.length > 0 &&
                        this.createPendingConsumers();
                  })
                  .catch(() => {});
            }
            pausePendingConsumers() {
              (this._consumerPauseInProgress = !0),
                this._awaitQueue
                  .push(async () => {
                    if (0 === this._pendingPauseConsumers.size)
                      return void v.debug(
                        "pausePendingConsumers() | there is no Consumer to be paused"
                      );
                    const e = Array.from(this._pendingPauseConsumers.values());
                    this._pendingPauseConsumers.clear();
                    try {
                      const t = e.map((e) => e.localId);
                      await this._handler.pauseReceiving(t);
                    } catch (e) {
                      v.error(
                        "pausePendingConsumers() | failed to pause Consumers:",
                        e
                      );
                    }
                  }, "transport.pausePendingConsumers")
                  .then(() => {
                    (this._consumerPauseInProgress = !1),
                      this._pendingPauseConsumers.size > 0 &&
                        this.pausePendingConsumers();
                  })
                  .catch(() => {});
            }
            resumePendingConsumers() {
              (this._consumerResumeInProgress = !0),
                this._awaitQueue
                  .push(async () => {
                    if (0 === this._pendingResumeConsumers.size)
                      return void v.debug(
                        "resumePendingConsumers() | there is no Consumer to be resumed"
                      );
                    const e = Array.from(this._pendingResumeConsumers.values());
                    this._pendingResumeConsumers.clear();
                    try {
                      const t = e.map((e) => e.localId);
                      await this._handler.resumeReceiving(t);
                    } catch (e) {
                      v.error(
                        "resumePendingConsumers() | failed to resume Consumers:",
                        e
                      );
                    }
                  }, "transport.resumePendingConsumers")
                  .then(() => {
                    (this._consumerResumeInProgress = !1),
                      this._pendingResumeConsumers.size > 0 &&
                        this.resumePendingConsumers();
                  })
                  .catch(() => {});
            }
            closePendingConsumers() {
              (this._consumerCloseInProgress = !0),
                this._awaitQueue
                  .push(async () => {
                    if (0 === this._pendingCloseConsumers.size)
                      return void v.debug(
                        "closePendingConsumers() | there is no Consumer to be closed"
                      );
                    const e = Array.from(this._pendingCloseConsumers.values());
                    this._pendingCloseConsumers.clear();
                    try {
                      await this._handler.stopReceiving(
                        e.map((e) => e.localId)
                      );
                    } catch (e) {
                      v.error(
                        "closePendingConsumers() | failed to close Consumers:",
                        e
                      );
                    }
                  }, "transport.closePendingConsumers")
                  .then(() => {
                    (this._consumerCloseInProgress = !1),
                      this._pendingCloseConsumers.size > 0 &&
                        this.closePendingConsumers();
                  })
                  .catch(() => {});
            }
            handleHandler() {
              const e = this._handler;
              e.on("@connect", ({ dtlsParameters: e }, t, r) => {
                this._closed
                  ? r(new p.InvalidStateError("closed"))
                  : this.safeEmit("connect", { dtlsParameters: e }, t, r);
              }),
                e.on("@icegatheringstatechange", (e) => {
                  e !== this._iceGatheringState &&
                    (v.debug("ICE gathering state changed to %s", e),
                    (this._iceGatheringState = e),
                    this._closed ||
                      this.safeEmit("icegatheringstatechange", e));
                }),
                e.on("@connectionstatechange", (e) => {
                  e !== this._connectionState &&
                    (v.debug("connection state changed to %s", e),
                    (this._connectionState = e),
                    this._closed || this.safeEmit("connectionstatechange", e));
                });
            }
            handleProducer(e) {
              e.on("@close", () => {
                this._producers.delete(e.id),
                  this._closed ||
                    this._awaitQueue
                      .push(
                        async () => await this._handler.stopSending(e.localId),
                        "producer @close event"
                      )
                      .catch((e) => v.warn("producer.close() failed:%o", e));
              }),
                e.on("@pause", (t, r) => {
                  this._awaitQueue
                    .push(
                      async () => await this._handler.pauseSending(e.localId),
                      "producer @pause event"
                    )
                    .then(t)
                    .catch(r);
                }),
                e.on("@resume", (t, r) => {
                  this._awaitQueue
                    .push(
                      async () => await this._handler.resumeSending(e.localId),
                      "producer @resume event"
                    )
                    .then(t)
                    .catch(r);
                }),
                e.on("@replacetrack", (t, r, a) => {
                  this._awaitQueue
                    .push(
                      async () =>
                        await this._handler.replaceTrack(e.localId, t),
                      "producer @replacetrack event"
                    )
                    .then(r)
                    .catch(a);
                }),
                e.on("@setmaxspatiallayer", (t, r, a) => {
                  this._awaitQueue
                    .push(
                      async () =>
                        await this._handler.setMaxSpatialLayer(e.localId, t),
                      "producer @setmaxspatiallayer event"
                    )
                    .then(r)
                    .catch(a);
                }),
                e.on("@setrtpencodingparameters", (t, r, a) => {
                  this._awaitQueue
                    .push(
                      async () =>
                        await this._handler.setRtpEncodingParameters(
                          e.localId,
                          t
                        ),
                      "producer @setrtpencodingparameters event"
                    )
                    .then(r)
                    .catch(a);
                }),
                e.on("@getstats", (t, r) => {
                  if (this._closed) return r(new p.InvalidStateError("closed"));
                  this._handler.getSenderStats(e.localId).then(t).catch(r);
                });
            }
            handleConsumer(e) {
              e.on("@close", () => {
                this._consumers.delete(e.id),
                  this._pendingPauseConsumers.delete(e.id),
                  this._pendingResumeConsumers.delete(e.id),
                  this._closed ||
                    (this._pendingCloseConsumers.set(e.id, e),
                    !1 === this._consumerCloseInProgress &&
                      this.closePendingConsumers());
              }),
                e.on("@pause", () => {
                  this._pendingResumeConsumers.has(e.id) &&
                    this._pendingResumeConsumers.delete(e.id),
                    this._pendingPauseConsumers.set(e.id, e),
                    (0, c.default)(() => {
                      this._closed ||
                        (!1 === this._consumerPauseInProgress &&
                          this.pausePendingConsumers());
                    });
                }),
                e.on("@resume", () => {
                  this._pendingPauseConsumers.has(e.id) &&
                    this._pendingPauseConsumers.delete(e.id),
                    this._pendingResumeConsumers.set(e.id, e),
                    (0, c.default)(() => {
                      this._closed ||
                        (!1 === this._consumerResumeInProgress &&
                          this.resumePendingConsumers());
                    });
                }),
                e.on("@getstats", (t, r) => {
                  if (this._closed) return r(new p.InvalidStateError("closed"));
                  this._handler.getReceiverStats(e.localId).then(t).catch(r);
                });
            }
            handleDataProducer(e) {
              e.on("@close", () => {
                this._dataProducers.delete(e.id);
              });
            }
            handleDataConsumer(e) {
              e.on("@close", () => {
                this._dataConsumers.delete(e.id);
              });
            }
          }
          t.Transport = y;
        },
        4893: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.InvalidStateError = t.UnsupportedError = void 0);
          class r extends Error {
            constructor(e) {
              super(e),
                (this.name = "UnsupportedError"),
                Error.hasOwnProperty("captureStackTrace")
                  ? Error.captureStackTrace(this, r)
                  : (this.stack = new Error(e).stack);
            }
          }
          t.UnsupportedError = r;
          class a extends Error {
            constructor(e) {
              super(e),
                (this.name = "InvalidStateError"),
                Error.hasOwnProperty("captureStackTrace")
                  ? Error.captureStackTrace(this, a)
                  : (this.stack = new Error(e).stack);
            }
          }
          t.InvalidStateError = a;
        },
        2183: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome111 = void 0);
          const i = s(r(7363)),
            o = r(2994),
            c = s(r(1765)),
            d = s(r(8046)),
            l = s(r(5544)),
            p = s(r(5938)),
            u = s(r(4256)),
            h = r(4893),
            m = r(521),
            f = r(1305),
            g = r(3303),
            _ = new o.Logger("Chrome111"),
            v = { OS: 1024, MIS: 1024 };
          class b extends m.HandlerInterface {
            static createFactory() {
              return () => new b();
            }
            constructor() {
              super(),
                (this._closed = !1),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Chrome111";
            }
            close() {
              if ((_.debug("close()"), !this._closed)) {
                if (((this._closed = !0), this._pc))
                  try {
                    this._pc.close();
                  } catch (e) {}
                this.emit("@close");
              }
            }
            async getNativeRtpCapabilities() {
              _.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "unified-plan",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = i.parse(t.sdp),
                  a = l.extractRtpCapabilities({ sdpObject: r });
                return u.addNackSuppportForOpus(a), a;
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return _.debug("getNativeSctpCapabilities()"), { numStreams: v };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              this.assertNotClosed(),
                _.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                a.role &&
                  "auto" !== a.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === a.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: s || [],
                    iceTransportPolicy: i || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : (_.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ),
                    this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (this._pc.iceConnectionState) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    ));
            }
            async updateIceServers(e) {
              this.assertNotClosed(), _.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (this.assertNotClosed(),
                _.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this.assertNotClosed(), this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: a }) {
              if (
                (this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t && t.length > 1)
              ) {
                let e = 1;
                for (const r of t) {
                  const t = r.scalabilityMode
                    ? (0, g.parse)(r.scalabilityMode).temporalLayers
                    : 3;
                  t > e && (e = t);
                }
                t.forEach((t, r) => {
                  (t.rid = `r${r}`), (t.scalabilityMode = `L1T${e}`);
                });
              }
              const n = c.clone(this._sendingRtpParametersByKind[e.kind]);
              n.codecs = d.reduceCodecs(n.codecs, a);
              const s = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              s.codecs = d.reduceCodecs(s.codecs, a);
              const o = this._remoteSdp.getNextMediaSectionIdx(),
                u = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t,
                }),
                h = await this._pc.createOffer();
              let m = i.parse(h.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: m,
                })),
                _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  h
                ),
                await this._pc.setLocalDescription(h);
              const f = u.mid;
              (n.mid = f), (m = i.parse(this._pc.localDescription.sdp));
              const v = m.media[o.idx];
              if (((n.rtcp.cname = l.getCname({ offerMediaObject: v })), t))
                if (1 === t.length) {
                  const e = p.getRtpEncodings({ offerMediaObject: v });
                  Object.assign(e[0], t[0]), (n.encodings = e);
                } else n.encodings = t;
              else n.encodings = p.getRtpEncodings({ offerMediaObject: v });
              this._remoteSdp.send({
                offerMediaObject: v,
                reuseMid: o.reuseMid,
                offerRtpParameters: n,
                answerRtpParameters: s,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const b = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  b
                ),
                await this._pc.setRemoteDescription(b),
                this._mapMidTransceiver.set(f, u),
                { localId: f, rtpParameters: n, rtpSender: u.sender }
              );
            }
            async stopSending(e) {
              if (
                (this.assertSendDirection(),
                _.debug("stopSending() [localId:%s]", e),
                this._closed)
              )
                return;
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null), this._pc.removeTrack(t.sender);
              if (this._remoteSdp.closeMediaSection(t.mid))
                try {
                  t.stop();
                } catch (e) {}
              const r = await this._pc.createOffer();
              _.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug("pauseSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "inactive"), this._remoteSdp.pauseMediaSection(e);
              const r = await this._pc.createOffer();
              _.debug(
                "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async resumeSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug("resumeSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if ((this._remoteSdp.resumeSendingMediaSection(e), !t))
                throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "sendonly";
              const r = await this._pc.createOffer();
              _.debug(
                "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async replaceTrack(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                t
                  ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : _.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              _.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                a.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              _.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async getSenderStats(e) {
              this.assertNotClosed(), this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: a,
              protocol: n,
            }) {
              this.assertNotClosed(), this.assertSendDirection();
              const s = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: n,
              };
              _.debug("sendDataChannel() [options:%o]", s);
              const o = this._pc.createDataChannel(a, s);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % v.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = i.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  a
                ),
                  await this._pc.setRemoteDescription(a),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: s.id,
                  ordered: s.ordered,
                  maxPacketLifeTime: s.maxPacketLifeTime,
                  maxRetransmits: s.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: a,
                  rtpParameters: n,
                  streamId: s,
                } = t;
                _.debug("receive() [trackId:%s, kind:%s]", e, a);
                const i = n.mid || String(this._mapMidTransceiver.size);
                r.set(e, i),
                  this._remoteSdp.receive({
                    mid: i,
                    kind: a,
                    offerRtpParameters: n,
                    streamId: s || n.rtcp.cname,
                    trackId: e,
                  });
              }
              const a = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
              let n = await this._pc.createAnswer();
              const s = i.parse(n.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: a } = t,
                  n = r.get(e),
                  i = s.media.find((e) => String(e.mid) === n);
                l.applyCodecParameters({
                  offerRtpParameters: a,
                  answerMediaObject: i,
                });
              }
              (n = { type: "answer", sdp: i.write(s) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: s,
                  })),
                _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n
                ),
                await this._pc.setLocalDescription(n);
              for (const a of e) {
                const { trackId: e } = a,
                  n = r.get(e),
                  s = this._pc.getTransceivers().find((e) => e.mid === n);
                if (!s) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(n, s),
                  t.push({
                    localId: n,
                    track: s.receiver.track,
                    rtpReceiver: s.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              if ((this.assertRecvDirection(), this._closed)) return;
              for (const t of e) {
                _.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              _.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                _.debug("pauseReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "inactive"),
                  this._remoteSdp.pauseMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              _.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async resumeReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                _.debug("resumeReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "recvonly"),
                  this._remoteSdp.resumeReceivingMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              _.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertNotClosed(), this.assertRecvDirection();
              const {
                  streamId: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                  protocol: r,
                };
              _.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = i.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = i.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertNotClosed() {
              if (this._closed)
                throw new h.InvalidStateError(
                  "method called in a closed handler"
                );
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome111 = b;
        },
        7402: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome55 = void 0);
          const i = s(r(7363)),
            o = r(2994),
            c = r(4893),
            d = s(r(1765)),
            l = s(r(8046)),
            p = s(r(5544)),
            u = s(r(4496)),
            h = r(521),
            m = r(1305),
            f = new o.Logger("Chrome55"),
            g = { OS: 1024, MIS: 1024 };
          class _ extends h.HandlerInterface {
            static createFactory() {
              return () => new _();
            }
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdTrack = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Chrome55";
            }
            close() {
              if ((f.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
              this.emit("@close");
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = i.parse(t.sdp);
                return p.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: g };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d),
                  video: l.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d),
                  video: l.getSendingRemoteRtpParameters("video", d),
                }),
                a.role &&
                  "auto" !== a.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === a.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: s || [],
                    iceTransportPolicy: i || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (f.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: a }) {
              this.assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                a &&
                  f.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addStream(this._sendStream);
              let n,
                s = await this._pc.createOffer(),
                o = i.parse(s.sdp);
              const c = d.clone(this._sendingRtpParametersByKind[e.kind]);
              c.codecs = l.reduceCodecs(c.codecs);
              const h = d.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              if (
                ((h.codecs = l.reduceCodecs(h.codecs)),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: o,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (f.debug("send() | enabling simulcast"),
                  (o = i.parse(s.sdp)),
                  (n = o.media.find((e) => "video" === e.type)),
                  u.addLegacySimulcast({
                    offerMediaObject: n,
                    track: e,
                    numStreams: t.length,
                  }),
                  (s = { type: "offer", sdp: i.write(o) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  s
                ),
                await this._pc.setLocalDescription(s),
                (o = i.parse(this._pc.localDescription.sdp)),
                (n = o.media.find((t) => t.type === e.kind)),
                (c.rtcp.cname = p.getCname({ offerMediaObject: n })),
                (c.encodings = u.getRtpEncodings({
                  offerMediaObject: n,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < c.encodings.length; ++e)
                  t[e] && Object.assign(c.encodings[e], t[e]);
              if (
                c.encodings.length > 1 &&
                "video/vp8" === c.codecs[0].mimeType.toLowerCase()
              )
                for (const e of c.encodings) e.scalabilityMode = "L1T3";
              this._remoteSdp.send({
                offerMediaObject: n,
                offerRtpParameters: c,
                answerRtpParameters: h,
                codecOptions: r,
              });
              const m = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                m
              ),
                await this._pc.setRemoteDescription(m);
              const g = String(this._nextSendLocalId);
              return (
                this._nextSendLocalId++,
                this._mapSendLocalIdTrack.set(g, e),
                { localId: g, rtpParameters: c }
              );
            }
            async stopSending(e) {
              this.assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapSendLocalIdTrack.get(e);
              if (!t) throw new Error("track not found");
              this._mapSendLocalIdTrack.delete(e),
                this._sendStream.removeTrack(t),
                this._pc.addStream(this._sendStream);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void f.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async pauseSending(e) {}
            async resumeSending(e) {}
            async replaceTrack(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async setMaxSpatialLayer(e, t) {
              throw new c.UnsupportedError(" not implemented");
            }
            async setRtpEncodingParameters(e, t) {
              throw new c.UnsupportedError("not supported");
            }
            async getSenderStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: a,
              protocol: n,
            }) {
              this.assertSendDirection();
              const s = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: n,
              };
              f.debug("sendDataChannel() [options:%o]", s);
              const o = this._pc.createDataChannel(a, s);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % g.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = i.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  a
                ),
                  await this._pc.setRemoteDescription(a),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: s.id,
                  ordered: s.ordered,
                  maxPacketLifeTime: s.maxPacketLifeTime,
                  maxRetransmits: s.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertRecvDirection();
              const t = [];
              for (const t of e) {
                const {
                  trackId: e,
                  kind: r,
                  rtpParameters: a,
                  streamId: n,
                } = t;
                f.debug("receive() [trackId:%s, kind:%s]", e, r);
                const s = r;
                this._remoteSdp.receive({
                  mid: s,
                  kind: r,
                  offerRtpParameters: a,
                  streamId: n || a.rtcp.cname,
                  trackId: e,
                });
              }
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              let a = await this._pc.createAnswer();
              const n = i.parse(a.sdp);
              for (const t of e) {
                const { kind: e, rtpParameters: r } = t,
                  a = e,
                  s = n.media.find((e) => String(e.mid) === a);
                p.applyCodecParameters({
                  offerRtpParameters: r,
                  answerMediaObject: s,
                });
              }
              (a = { type: "answer", sdp: i.write(n) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: n,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  a
                ),
                await this._pc.setLocalDescription(a);
              for (const r of e) {
                const { kind: e, trackId: a, rtpParameters: n } = r,
                  s = e,
                  i = a,
                  o = r.streamId || n.rtcp.cname,
                  c = this._pc
                    .getRemoteStreams()
                    .find((e) => e.id === o)
                    .getTrackById(i);
                if (!c) throw new Error("remote track not found");
                this._mapRecvLocalIdInfo.set(i, { mid: s, rtpParameters: n }),
                  t.push({ localId: i, track: c });
              }
              return t;
            }
            async stopReceiving(e) {
              this.assertRecvDirection();
              for (const t of e) {
                f.debug("stopReceiving() [localId:%s]", t);
                const { mid: e, rtpParameters: r } =
                  this._mapRecvLocalIdInfo.get(t) || {};
                this._mapRecvLocalIdInfo.delete(t),
                  this._remoteSdp.planBStopReceiving({
                    mid: e,
                    offerRtpParameters: r,
                  });
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertRecvDirection();
              const {
                  streamId: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmitTime: s,
                  maxRetransmits: o,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = i.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = i.parse(this._pc.localDescription.sdp));
              const r = p.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome55 = _;
        },
        8155: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome67 = void 0);
          const i = s(r(7363)),
            o = r(2994),
            c = s(r(1765)),
            d = s(r(8046)),
            l = s(r(5544)),
            p = s(r(4496)),
            u = r(521),
            h = r(1305),
            m = new o.Logger("Chrome67"),
            f = { OS: 1024, MIS: 1024 };
          class g extends u.HandlerInterface {
            static createFactory() {
              return () => new g();
            }
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdRtpSender = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Chrome67";
            }
            close() {
              if ((m.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
              this.emit("@close");
            }
            async getNativeRtpCapabilities() {
              m.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = i.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              m.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                a.role &&
                  "auto" !== a.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === a.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: s || [],
                    iceTransportPolicy: i || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (m.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              m.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (m.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: a }) {
              this.assertSendDirection(),
                m.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                a &&
                  m.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addTrack(e, this._sendStream);
              let n,
                s = await this._pc.createOffer(),
                o = i.parse(s.sdp);
              const u = c.clone(this._sendingRtpParametersByKind[e.kind]);
              u.codecs = d.reduceCodecs(u.codecs);
              const h = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              if (
                ((h.codecs = d.reduceCodecs(h.codecs)),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: o,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (m.debug("send() | enabling simulcast"),
                  (o = i.parse(s.sdp)),
                  (n = o.media.find((e) => "video" === e.type)),
                  p.addLegacySimulcast({
                    offerMediaObject: n,
                    track: e,
                    numStreams: t.length,
                  }),
                  (s = { type: "offer", sdp: i.write(o) })),
                m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  s
                ),
                await this._pc.setLocalDescription(s),
                (o = i.parse(this._pc.localDescription.sdp)),
                (n = o.media.find((t) => t.type === e.kind)),
                (u.rtcp.cname = l.getCname({ offerMediaObject: n })),
                (u.encodings = p.getRtpEncodings({
                  offerMediaObject: n,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < u.encodings.length; ++e)
                  t[e] && Object.assign(u.encodings[e], t[e]);
              if (
                u.encodings.length > 1 &&
                "video/vp8" === u.codecs[0].mimeType.toLowerCase()
              )
                for (const e of u.encodings) e.scalabilityMode = "L1T3";
              this._remoteSdp.send({
                offerMediaObject: n,
                offerRtpParameters: u,
                answerRtpParameters: h,
                codecOptions: r,
              });
              const f = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                f
              ),
                await this._pc.setRemoteDescription(f);
              const g = String(this._nextSendLocalId);
              this._nextSendLocalId++;
              const _ = this._pc.getSenders().find((t) => t.track === e);
              return (
                this._mapSendLocalIdRtpSender.set(g, _),
                { localId: g, rtpParameters: u, rtpSender: _ }
              );
            }
            async stopSending(e) {
              this.assertSendDirection(),
                m.debug("stopSending() [localId:%s]", e);
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              this._pc.removeTrack(t),
                t.track && this._sendStream.removeTrack(t.track),
                this._mapSendLocalIdRtpSender.delete(e);
              const r = await this._pc.createOffer();
              m.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void m.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async pauseSending(e) {}
            async resumeSending(e) {}
            async replaceTrack(e, t) {
              this.assertSendDirection(),
                t
                  ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : m.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const a = r.track;
              await r.replaceTrack(t),
                a && this._sendStream.removeTrack(a),
                t && this._sendStream.addTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertSendDirection(),
                m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const a = r.getParameters();
              a.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.setParameters(a);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertSendDirection(),
                m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const a = r.getParameters();
              a.encodings.forEach((e, r) => {
                a.encodings[r] = { ...e, ...t };
              }),
                await r.setParameters(a);
            }
            async getSenderStats(e) {
              this.assertSendDirection();
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              return t.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: a,
              protocol: n,
            }) {
              this.assertSendDirection();
              const s = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: n,
              };
              m.debug("sendDataChannel() [options:%o]", s);
              const o = this._pc.createDataChannel(a, s);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % f.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = i.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  a
                ),
                  await this._pc.setRemoteDescription(a),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: s.id,
                  ordered: s.ordered,
                  maxPacketLifeTime: s.maxPacketLifeTime,
                  maxRetransmits: s.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertRecvDirection();
              const t = [];
              for (const t of e) {
                const {
                  trackId: e,
                  kind: r,
                  rtpParameters: a,
                  streamId: n,
                } = t;
                m.debug("receive() [trackId:%s, kind:%s]", e, r);
                const s = r;
                this._remoteSdp.receive({
                  mid: s,
                  kind: r,
                  offerRtpParameters: a,
                  streamId: n || a.rtcp.cname,
                  trackId: e,
                });
              }
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              let a = await this._pc.createAnswer();
              const n = i.parse(a.sdp);
              for (const t of e) {
                const { kind: e, rtpParameters: r } = t,
                  a = e,
                  s = n.media.find((e) => String(e.mid) === a);
                l.applyCodecParameters({
                  offerRtpParameters: r,
                  answerMediaObject: s,
                });
              }
              (a = { type: "answer", sdp: i.write(n) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: n,
                  })),
                m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  a
                ),
                await this._pc.setLocalDescription(a);
              for (const r of e) {
                const { kind: e, trackId: a, rtpParameters: n } = r,
                  s = a,
                  i = e,
                  o = this._pc
                    .getReceivers()
                    .find((e) => e.track && e.track.id === s);
                if (!o) throw new Error("new RTCRtpReceiver not");
                this._mapRecvLocalIdInfo.set(s, {
                  mid: i,
                  rtpParameters: n,
                  rtpReceiver: o,
                }),
                  t.push({ localId: s, track: o.track, rtpReceiver: o });
              }
              return t;
            }
            async stopReceiving(e) {
              this.assertRecvDirection();
              for (const t of e) {
                m.debug("stopReceiving() [localId:%s]", t);
                const { mid: e, rtpParameters: r } =
                  this._mapRecvLocalIdInfo.get(t) || {};
                this._mapRecvLocalIdInfo.delete(t),
                  this._remoteSdp.planBStopReceiving({
                    mid: e,
                    offerRtpParameters: r,
                  });
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              m.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              this.assertRecvDirection();
              const { rtpReceiver: t } = this._mapRecvLocalIdInfo.get(e) || {};
              if (!t) throw new Error("associated RTCRtpReceiver not found");
              return t.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertRecvDirection();
              const {
                  streamId: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmitTime: s,
                  maxRetransmits: o,
                  protocol: r,
                };
              m.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = i.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = i.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome67 = g;
        },
        5535: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome70 = void 0);
          const i = s(r(7363)),
            o = r(2994),
            c = s(r(1765)),
            d = s(r(8046)),
            l = s(r(5544)),
            p = s(r(5938)),
            u = r(521),
            h = r(1305),
            m = r(3303),
            f = new o.Logger("Chrome70"),
            g = { OS: 1024, MIS: 1024 };
          class _ extends u.HandlerInterface {
            static createFactory() {
              return () => new _();
            }
            constructor() {
              super(),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Chrome70";
            }
            close() {
              if ((f.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
              this.emit("@close");
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "unified-plan",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = i.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: g };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                a.role &&
                  "auto" !== a.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === a.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: s || [],
                    iceTransportPolicy: i || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (f.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: a }) {
              this.assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id);
              const n = c.clone(this._sendingRtpParametersByKind[e.kind]);
              n.codecs = d.reduceCodecs(n.codecs, a);
              const s = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              s.codecs = d.reduceCodecs(s.codecs, a);
              const o = this._remoteSdp.getNextMediaSectionIdx(),
                u = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                });
              let h,
                g = await this._pc.createOffer(),
                _ = i.parse(g.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: _,
                })),
                t &&
                  t.length > 1 &&
                  (f.debug("send() | enabling legacy simulcast"),
                  (_ = i.parse(g.sdp)),
                  (h = _.media[o.idx]),
                  p.addLegacySimulcast({
                    offerMediaObject: h,
                    numStreams: t.length,
                  }),
                  (g = { type: "offer", sdp: i.write(_) }));
              let v = !1;
              const b = (0, m.parse)((t || [{}])[0].scalabilityMode);
              if (
                (t &&
                  1 === t.length &&
                  b.spatialLayers > 1 &&
                  "video/vp9" === n.codecs[0].mimeType.toLowerCase() &&
                  (f.debug("send() | enabling legacy simulcast for VP9 SVC"),
                  (v = !0),
                  (_ = i.parse(g.sdp)),
                  (h = _.media[o.idx]),
                  p.addLegacySimulcast({
                    offerMediaObject: h,
                    numStreams: b.spatialLayers,
                  }),
                  (g = { type: "offer", sdp: i.write(_) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  g
                ),
                await this._pc.setLocalDescription(g),
                t)
              ) {
                f.debug("send() | applying given encodings");
                const e = u.sender.getParameters();
                for (let r = 0; r < (e.encodings || []).length; ++r) {
                  const a = e.encodings[r],
                    n = t[r];
                  if (!n) break;
                  e.encodings[r] = Object.assign(a, n);
                }
                await u.sender.setParameters(e);
              }
              const y = u.mid;
              if (
                ((n.mid = y),
                (_ = i.parse(this._pc.localDescription.sdp)),
                (h = _.media[o.idx]),
                (n.rtcp.cname = l.getCname({ offerMediaObject: h })),
                (n.encodings = p.getRtpEncodings({ offerMediaObject: h })),
                t)
              )
                for (let e = 0; e < n.encodings.length; ++e)
                  t[e] && Object.assign(n.encodings[e], t[e]);
              if (
                (v && (n.encodings = [n.encodings[0]]),
                n.encodings.length > 1 &&
                  ("video/vp8" === n.codecs[0].mimeType.toLowerCase() ||
                    "video/h264" === n.codecs[0].mimeType.toLowerCase()))
              )
                for (const e of n.encodings) e.scalabilityMode = "L1T3";
              this._remoteSdp.send({
                offerMediaObject: h,
                reuseMid: o.reuseMid,
                offerRtpParameters: n,
                answerRtpParameters: s,
                codecOptions: r,
              });
              const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ),
                await this._pc.setRemoteDescription(w),
                this._mapMidTransceiver.set(y, u),
                { localId: y, rtpParameters: n, rtpSender: u.sender }
              );
            }
            async stopSending(e) {
              this.assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null), this._pc.removeTrack(t.sender);
              if (this._remoteSdp.closeMediaSection(t.mid))
                try {
                  t.stop();
                } catch (e) {}
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {}
            async resumeSending(e) {}
            async replaceTrack(e, t) {
              this.assertSendDirection(),
                t
                  ? f.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : f.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertSendDirection(),
                f.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              f.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertSendDirection(),
                f.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                a.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              f.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async getSenderStats(e) {
              this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: a,
              protocol: n,
            }) {
              this.assertSendDirection();
              const s = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: n,
              };
              f.debug("sendDataChannel() [options:%o]", s);
              const o = this._pc.createDataChannel(a, s);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % g.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = i.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  a
                ),
                  await this._pc.setRemoteDescription(a),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: s.id,
                  ordered: s.ordered,
                  maxPacketLifeTime: s.maxPacketLifeTime,
                  maxRetransmits: s.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: a,
                  rtpParameters: n,
                  streamId: s,
                } = t;
                f.debug("receive() [trackId:%s, kind:%s]", e, a);
                const i = n.mid || String(this._mapMidTransceiver.size);
                r.set(e, i),
                  this._remoteSdp.receive({
                    mid: i,
                    kind: a,
                    offerRtpParameters: n,
                    streamId: s || n.rtcp.cname,
                    trackId: e,
                  });
              }
              const a = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
              let n = await this._pc.createAnswer();
              const s = i.parse(n.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: a } = t,
                  n = r.get(e),
                  i = s.media.find((e) => String(e.mid) === n);
                l.applyCodecParameters({
                  offerRtpParameters: a,
                  answerMediaObject: i,
                });
              }
              (n = { type: "answer", sdp: i.write(s) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: s,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n
                ),
                await this._pc.setLocalDescription(n);
              for (const a of e) {
                const { trackId: e } = a,
                  n = r.get(e),
                  s = this._pc.getTransceivers().find((e) => e.mid === n);
                if (!s) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(n, s),
                  t.push({
                    localId: n,
                    track: s.receiver.track,
                    rtpReceiver: s.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              this.assertRecvDirection();
              for (const t of e) {
                f.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertRecvDirection();
              const {
                  streamId: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmitTime: s,
                  maxRetransmits: o,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = i.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = i.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome70 = _;
        },
        11: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome74 = void 0);
          const i = s(r(7363)),
            o = r(2994),
            c = s(r(1765)),
            d = s(r(8046)),
            l = s(r(5544)),
            p = s(r(5938)),
            u = s(r(4256)),
            h = r(4893),
            m = r(521),
            f = r(1305),
            g = r(3303),
            _ = new o.Logger("Chrome74"),
            v = { OS: 1024, MIS: 1024 };
          class b extends m.HandlerInterface {
            static createFactory() {
              return () => new b();
            }
            constructor() {
              super(),
                (this._closed = !1),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Chrome74";
            }
            close() {
              if ((_.debug("close()"), !this._closed)) {
                if (((this._closed = !0), this._pc))
                  try {
                    this._pc.close();
                  } catch (e) {}
                this.emit("@close");
              }
            }
            async getNativeRtpCapabilities() {
              _.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "unified-plan",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = i.parse(t.sdp),
                  a = l.extractRtpCapabilities({ sdpObject: r });
                return u.addNackSuppportForOpus(a), a;
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return _.debug("getNativeSctpCapabilities()"), { numStreams: v };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              _.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                a.role &&
                  "auto" !== a.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === a.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: s || [],
                    iceTransportPolicy: i || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : (_.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ),
                    this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (this._pc.iceConnectionState) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    ));
            }
            async updateIceServers(e) {
              this.assertNotClosed(), _.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (this.assertNotClosed(),
                _.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this.assertNotClosed(), this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: a }) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t &&
                  t.length > 1 &&
                  t.forEach((e, t) => {
                    e.rid = `r${t}`;
                  });
              const n = c.clone(this._sendingRtpParametersByKind[e.kind]);
              n.codecs = d.reduceCodecs(n.codecs, a);
              const s = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              s.codecs = d.reduceCodecs(s.codecs, a);
              const o = this._remoteSdp.getNextMediaSectionIdx(),
                u = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t,
                });
              let h,
                m = await this._pc.createOffer(),
                f = i.parse(m.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: f,
                }));
              let v = !1;
              const b = (0, g.parse)((t || [{}])[0].scalabilityMode);
              t &&
                1 === t.length &&
                b.spatialLayers > 1 &&
                "video/vp9" === n.codecs[0].mimeType.toLowerCase() &&
                (_.debug("send() | enabling legacy simulcast for VP9 SVC"),
                (v = !0),
                (f = i.parse(m.sdp)),
                (h = f.media[o.idx]),
                p.addLegacySimulcast({
                  offerMediaObject: h,
                  numStreams: b.spatialLayers,
                }),
                (m = { type: "offer", sdp: i.write(f) })),
                _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m
                ),
                await this._pc.setLocalDescription(m);
              const y = u.mid;
              if (
                ((n.mid = y),
                (f = i.parse(this._pc.localDescription.sdp)),
                (h = f.media[o.idx]),
                (n.rtcp.cname = l.getCname({ offerMediaObject: h })),
                t)
              )
                if (1 === t.length) {
                  let e = p.getRtpEncodings({ offerMediaObject: h });
                  Object.assign(e[0], t[0]),
                    v && (e = [e[0]]),
                    (n.encodings = e);
                } else n.encodings = t;
              else n.encodings = p.getRtpEncodings({ offerMediaObject: h });
              if (
                n.encodings.length > 1 &&
                ("video/vp8" === n.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === n.codecs[0].mimeType.toLowerCase())
              )
                for (const e of n.encodings)
                  e.scalabilityMode
                    ? (e.scalabilityMode = `L1T${b.temporalLayers}`)
                    : (e.scalabilityMode = "L1T3");
              this._remoteSdp.send({
                offerMediaObject: h,
                reuseMid: o.reuseMid,
                offerRtpParameters: n,
                answerRtpParameters: s,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ),
                await this._pc.setRemoteDescription(w),
                this._mapMidTransceiver.set(y, u),
                { localId: y, rtpParameters: n, rtpSender: u.sender }
              );
            }
            async stopSending(e) {
              if (
                (this.assertSendDirection(),
                _.debug("stopSending() [localId:%s]", e),
                this._closed)
              )
                return;
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null), this._pc.removeTrack(t.sender);
              if (this._remoteSdp.closeMediaSection(t.mid))
                try {
                  t.stop();
                } catch (e) {}
              const r = await this._pc.createOffer();
              _.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug("pauseSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "inactive"), this._remoteSdp.pauseMediaSection(e);
              const r = await this._pc.createOffer();
              _.debug(
                "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async resumeSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug("resumeSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if ((this._remoteSdp.resumeSendingMediaSection(e), !t))
                throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "sendonly";
              const r = await this._pc.createOffer();
              _.debug(
                "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async replaceTrack(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                t
                  ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : _.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              _.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                a.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              _.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async getSenderStats(e) {
              this.assertNotClosed(), this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: a,
              protocol: n,
            }) {
              this.assertNotClosed(), this.assertSendDirection();
              const s = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: n,
              };
              _.debug("sendDataChannel() [options:%o]", s);
              const o = this._pc.createDataChannel(a, s);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % v.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = i.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  a
                ),
                  await this._pc.setRemoteDescription(a),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: s.id,
                  ordered: s.ordered,
                  maxPacketLifeTime: s.maxPacketLifeTime,
                  maxRetransmits: s.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: a,
                  rtpParameters: n,
                  streamId: s,
                } = t;
                _.debug("receive() [trackId:%s, kind:%s]", e, a);
                const i = n.mid || String(this._mapMidTransceiver.size);
                r.set(e, i),
                  this._remoteSdp.receive({
                    mid: i,
                    kind: a,
                    offerRtpParameters: n,
                    streamId: s || n.rtcp.cname,
                    trackId: e,
                  });
              }
              const a = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
              let n = await this._pc.createAnswer();
              const s = i.parse(n.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: a } = t,
                  n = r.get(e),
                  i = s.media.find((e) => String(e.mid) === n);
                l.applyCodecParameters({
                  offerRtpParameters: a,
                  answerMediaObject: i,
                });
              }
              (n = { type: "answer", sdp: i.write(s) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: s,
                  })),
                _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n
                ),
                await this._pc.setLocalDescription(n);
              for (const a of e) {
                const { trackId: e } = a,
                  n = r.get(e),
                  s = this._pc.getTransceivers().find((e) => e.mid === n);
                if (!s) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(n, s),
                  t.push({
                    localId: n,
                    track: s.receiver.track,
                    rtpReceiver: s.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              if ((this.assertRecvDirection(), this._closed)) return;
              for (const t of e) {
                _.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              _.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                _.debug("pauseReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "inactive"),
                  this._remoteSdp.pauseMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              _.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async resumeReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                _.debug("resumeReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "recvonly"),
                  this._remoteSdp.resumeReceivingMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              _.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertNotClosed(), this.assertRecvDirection();
              const {
                  streamId: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                  protocol: r,
                };
              _.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = i.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = i.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertNotClosed() {
              if (this._closed)
                throw new h.InvalidStateError(
                  "method called in a closed handler"
                );
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome74 = b;
        },
        8633: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Edge11 = void 0);
          const i = r(2994),
            o = r(4893),
            c = s(r(1765)),
            d = s(r(8046)),
            l = s(r(8751)),
            p = r(521),
            u = new i.Logger("Edge11");
          class h extends p.HandlerInterface {
            static createFactory() {
              return () => new h();
            }
            constructor() {
              super(),
                (this._rtpSenders = new Map()),
                (this._rtpReceivers = new Map()),
                (this._nextSendLocalId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Edge11";
            }
            close() {
              u.debug("close()");
              try {
                this._iceGatherer.close();
              } catch (e) {}
              try {
                this._iceTransport.stop();
              } catch (e) {}
              try {
                this._dtlsTransport.stop();
              } catch (e) {}
              for (const e of this._rtpSenders.values())
                try {
                  e.stop();
                } catch (e) {}
              for (const e of this._rtpReceivers.values())
                try {
                  e.stop();
                } catch (e) {}
              this.emit("@close");
            }
            async getNativeRtpCapabilities() {
              return u.debug("getNativeRtpCapabilities()"), l.getCapabilities();
            }
            async getNativeSctpCapabilities() {
              return (
                u.debug("getNativeSctpCapabilities()"),
                { numStreams: { OS: 0, MIS: 0 } }
              );
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: l,
              extendedRtpCapabilities: p,
            }) {
              u.debug("run()"),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", p),
                  video: d.getSendingRtpParameters("video", p),
                }),
                (this._remoteIceParameters = t),
                (this._remoteIceCandidates = r),
                (this._remoteDtlsParameters = a),
                (this._cname = `CNAME-${c.generateRandomNumber()}`),
                this.setIceGatherer({ iceServers: s, iceTransportPolicy: i }),
                this.setIceTransport(),
                this.setDtlsTransport();
            }
            async updateIceServers(e) {
              throw new o.UnsupportedError("not supported");
            }
            async restartIce(e) {
              if (
                (u.debug("restartIce()"),
                (this._remoteIceParameters = e),
                this._transportReady)
              ) {
                u.debug("restartIce() | calling iceTransport.start()"),
                  this._iceTransport.start(this._iceGatherer, e, "controlling");
                for (const e of this._remoteIceCandidates)
                  this._iceTransport.addRemoteCandidate(e);
                this._iceTransport.addRemoteCandidate({});
              }
            }
            async getTransportStats() {
              return this._iceTransport.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: a }) {
              u.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                this._transportReady ||
                  (await this.setupTransport({ localDtlsRole: "server" })),
                u.debug("send() | calling new RTCRtpSender()");
              const n = new RTCRtpSender(e, this._dtlsTransport),
                s = c.clone(this._sendingRtpParametersByKind[e.kind]);
              s.codecs = d.reduceCodecs(s.codecs, a);
              const i = s.codecs.some((e) => /.+\/rtx$/i.test(e.mimeType));
              t || (t = [{}]);
              for (const e of t)
                (e.ssrc = c.generateRandomNumber()),
                  i && (e.rtx = { ssrc: c.generateRandomNumber() });
              (s.encodings = t),
                (s.rtcp = { cname: this._cname, reducedSize: !0, mux: !0 });
              const o = l.mangleRtpParameters(s);
              u.debug("send() | calling rtpSender.send() [params:%o]", o),
                await n.send(o);
              const p = String(this._nextSendLocalId);
              return (
                this._nextSendLocalId++,
                this._rtpSenders.set(p, n),
                { localId: p, rtpParameters: s, rtpSender: n }
              );
            }
            async stopSending(e) {
              u.debug("stopSending() [localId:%s]", e);
              const t = this._rtpSenders.get(e);
              if (!t) throw new Error("RTCRtpSender not found");
              this._rtpSenders.delete(e);
              try {
                u.debug("stopSending() | calling rtpSender.stop()"), t.stop();
              } catch (e) {
                throw (
                  (u.warn("stopSending() | rtpSender.stop() failed:%o", e), e)
                );
              }
            }
            async pauseSending(e) {}
            async resumeSending(e) {}
            async replaceTrack(e, t) {
              t
                ? u.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                : u.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._rtpSenders.get(e);
              if (!r) throw new Error("RTCRtpSender not found");
              r.setTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              u.debug(
                "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                e,
                t
              );
              const r = this._rtpSenders.get(e);
              if (!r) throw new Error("RTCRtpSender not found");
              const a = r.getParameters();
              a.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.setParameters(a);
            }
            async setRtpEncodingParameters(e, t) {
              u.debug(
                "setRtpEncodingParameters() [localId:%s, params:%o]",
                e,
                t
              );
              const r = this._rtpSenders.get(e);
              if (!r) throw new Error("RTCRtpSender not found");
              const a = r.getParameters();
              a.encodings.forEach((e, r) => {
                a.encodings[r] = { ...e, ...t };
              }),
                await r.setParameters(a);
            }
            async getSenderStats(e) {
              const t = this._rtpSenders.get(e);
              if (!t) throw new Error("RTCRtpSender not found");
              return t.getStats();
            }
            async sendDataChannel(e) {
              throw new o.UnsupportedError("not implemented");
            }
            async receive(e) {
              const t = [];
              for (const t of e) {
                const { trackId: e, kind: r } = t;
                u.debug("receive() [trackId:%s, kind:%s]", e, r);
              }
              this._transportReady ||
                (await this.setupTransport({ localDtlsRole: "server" }));
              for (const r of e) {
                const { trackId: e, kind: a, rtpParameters: n } = r;
                u.debug("receive() | calling new RTCRtpReceiver()");
                const s = new RTCRtpReceiver(this._dtlsTransport, a);
                s.addEventListener("error", (e) => {
                  u.error('rtpReceiver "error" event [event:%o]', e);
                });
                const i = l.mangleRtpParameters(n);
                u.debug(
                  "receive() | calling rtpReceiver.receive() [params:%o]",
                  i
                ),
                  await s.receive(i);
                const o = e;
                this._rtpReceivers.set(o, s),
                  t.push({ localId: o, track: s.track, rtpReceiver: s });
              }
              return t;
            }
            async stopReceiving(e) {
              for (const t of e) {
                u.debug("stopReceiving() [localId:%s]", t);
                const e = this._rtpReceivers.get(t);
                if (!e) throw new Error("RTCRtpReceiver not found");
                this._rtpReceivers.delete(t);
                try {
                  u.debug("stopReceiving() | calling rtpReceiver.stop()"),
                    e.stop();
                } catch (e) {
                  u.warn("stopReceiving() | rtpReceiver.stop() failed:%o", e);
                }
              }
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              const t = this._rtpReceivers.get(e);
              if (!t) throw new Error("RTCRtpReceiver not found");
              return t.getStats();
            }
            async receiveDataChannel(e) {
              throw new o.UnsupportedError("not implemented");
            }
            setIceGatherer({ iceServers: e, iceTransportPolicy: t }) {
              const r = new RTCIceGatherer({
                iceServers: e || [],
                gatherPolicy: t || "all",
              });
              r.addEventListener("error", (e) => {
                u.error('iceGatherer "error" event [event:%o]', e);
              });
              try {
                r.gather();
              } catch (e) {
                u.debug(
                  "setIceGatherer() | iceGatherer.gather() failed: %s",
                  e.toString()
                );
              }
              this._iceGatherer = r;
            }
            setIceTransport() {
              const e = new RTCIceTransport(this._iceGatherer);
              e.addEventListener("statechange", () => {
                switch (e.state) {
                  case "checking":
                    this.emit("@connectionstatechange", "connecting");
                    break;
                  case "connected":
                  case "completed":
                    this.emit("@connectionstatechange", "connected");
                    break;
                  case "failed":
                    this.emit("@connectionstatechange", "failed");
                    break;
                  case "disconnected":
                    this.emit("@connectionstatechange", "disconnected");
                    break;
                  case "closed":
                    this.emit("@connectionstatechange", "closed");
                }
              }),
                e.addEventListener("icestatechange", () => {
                  switch (e.state) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                }),
                e.addEventListener("candidatepairchange", (e) => {
                  u.debug(
                    'iceTransport "candidatepairchange" event [pair:%o]',
                    e.pair
                  );
                }),
                (this._iceTransport = e);
            }
            setDtlsTransport() {
              const e = new RTCDtlsTransport(this._iceTransport);
              e.addEventListener("statechange", () => {
                u.debug(
                  'dtlsTransport "statechange" event [state:%s]',
                  e.state
                );
              }),
                e.addEventListener("dtlsstatechange", () => {
                  u.debug(
                    'dtlsTransport "dtlsstatechange" event [state:%s]',
                    e.state
                  ),
                    "closed" === e.state &&
                      this.emit("@connectionstatechange", "closed");
                }),
                e.addEventListener("error", (e) => {
                  u.error('dtlsTransport "error" event [event:%o]', e);
                }),
                (this._dtlsTransport = e);
            }
            async setupTransport({ localDtlsRole: e }) {
              u.debug("setupTransport()");
              const t = this._dtlsTransport.getLocalParameters();
              (t.role = e),
                await new Promise((e, r) => {
                  this.safeEmit("@connect", { dtlsParameters: t }, e, r);
                }),
                this._iceTransport.start(
                  this._iceGatherer,
                  this._remoteIceParameters,
                  "controlling"
                );
              for (const e of this._remoteIceCandidates)
                this._iceTransport.addRemoteCandidate(e);
              this._iceTransport.addRemoteCandidate({}),
                (this._remoteDtlsParameters.fingerprints =
                  this._remoteDtlsParameters.fingerprints.filter(
                    (e) =>
                      "sha-256" === e.algorithm ||
                      "sha-384" === e.algorithm ||
                      "sha-512" === e.algorithm
                  )),
                this._dtlsTransport.start(this._remoteDtlsParameters),
                (this._transportReady = !0);
            }
          }
          t.Edge11 = h;
        },
        2292: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Firefox120 = void 0);
          const i = s(r(7363)),
            o = r(2994),
            c = r(4893),
            d = s(r(1765)),
            l = s(r(8046)),
            p = s(r(5544)),
            u = s(r(5938)),
            h = r(521),
            m = r(1305),
            f = r(3303),
            g = new o.Logger("Firefox120"),
            _ = { OS: 16, MIS: 2048 };
          class v extends h.HandlerInterface {
            static createFactory() {
              return () => new v();
            }
            constructor() {
              super(),
                (this._closed = !1),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Firefox120";
            }
            close() {
              if ((g.debug("close()"), !this._closed)) {
                if (((this._closed = !0), this._pc))
                  try {
                    this._pc.close();
                  } catch (e) {}
                this.emit("@close");
              }
            }
            async getNativeRtpCapabilities() {
              g.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                }),
                t = document.createElement("canvas");
              t.getContext("2d");
              const r = t.captureStream().getVideoTracks()[0];
              try {
                e.addTransceiver("audio", { direction: "sendrecv" }),
                  e.addTransceiver(r, {
                    direction: "sendrecv",
                    sendEncodings: [
                      { rid: "r0", maxBitrate: 1e5 },
                      { rid: "r1", maxBitrate: 5e5 },
                    ],
                  });
                const a = await e.createOffer();
                try {
                  t.remove();
                } catch (e) {}
                try {
                  r.stop();
                } catch (e) {}
                try {
                  e.close();
                } catch (e) {}
                const n = i.parse(a.sdp);
                return p.extractRtpCapabilities({ sdpObject: n });
              } catch (a) {
                try {
                  t.remove();
                } catch (e) {}
                try {
                  r.stop();
                } catch (e) {}
                try {
                  e.close();
                } catch (e) {}
                throw a;
              }
            }
            async getNativeSctpCapabilities() {
              return g.debug("getNativeSctpCapabilities()"), { numStreams: _ };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              this.assertNotClosed(),
                g.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d),
                  video: l.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d),
                  video: l.getSendingRemoteRtpParameters("video", d),
                }),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: s || [],
                    iceTransportPolicy: i || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (g.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              throw (
                (this.assertNotClosed(),
                new c.UnsupportedError("not supported"))
              );
            }
            async restartIce(e) {
              if (
                (this.assertNotClosed(),
                g.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  g.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  g.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this.assertNotClosed(), this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: a }) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t &&
                  t.length > 1 &&
                  t.forEach((e, t) => {
                    e.rid = `r${t}`;
                  });
              const n = d.clone(this._sendingRtpParametersByKind[e.kind]);
              n.codecs = l.reduceCodecs(n.codecs, a);
              const s = d.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              s.codecs = l.reduceCodecs(s.codecs, a);
              const o = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t,
                }),
                c = await this._pc.createOffer();
              let h = i.parse(c.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: h,
                }));
              const m = (0, f.parse)((t || [{}])[0].scalabilityMode);
              g.debug(
                "send() | calling pc.setLocalDescription() [offer:%o]",
                c
              ),
                await this._pc.setLocalDescription(c);
              const _ = o.mid;
              (n.mid = _), (h = i.parse(this._pc.localDescription.sdp));
              const v = h.media[h.media.length - 1];
              if (((n.rtcp.cname = p.getCname({ offerMediaObject: v })), t))
                if (1 === t.length) {
                  const e = u.getRtpEncodings({ offerMediaObject: v });
                  Object.assign(e[0], t[0]), (n.encodings = e);
                } else n.encodings = t;
              else n.encodings = u.getRtpEncodings({ offerMediaObject: v });
              if (
                n.encodings.length > 1 &&
                ("video/vp8" === n.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === n.codecs[0].mimeType.toLowerCase())
              )
                for (const e of n.encodings)
                  e.scalabilityMode
                    ? (e.scalabilityMode = `L1T${m.temporalLayers}`)
                    : (e.scalabilityMode = "L1T3");
              this._remoteSdp.send({
                offerMediaObject: v,
                offerRtpParameters: n,
                answerRtpParameters: s,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const b = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                g.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  b
                ),
                await this._pc.setRemoteDescription(b),
                this._mapMidTransceiver.set(_, o),
                { localId: _, rtpParameters: n, rtpSender: o.sender }
              );
            }
            async stopSending(e) {
              if (
                (this.assertSendDirection(),
                g.debug("stopSending() [localId:%s]", e),
                this._closed)
              )
                return;
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated transceiver not found");
              t.sender.replaceTrack(null),
                this._pc.removeTrack(t.sender),
                this._remoteSdp.disableMediaSection(t.mid);
              const r = await this._pc.createOffer();
              g.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug("pauseSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "inactive"), this._remoteSdp.pauseMediaSection(e);
              const r = await this._pc.createOffer();
              g.debug(
                "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async resumeSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug("resumeSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "sendonly"),
                this._remoteSdp.resumeSendingMediaSection(e);
              const r = await this._pc.createOffer();
              g.debug(
                "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async replaceTrack(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                t
                  ? g.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : g.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated transceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              g.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                a.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              g.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async getSenderStats(e) {
              this.assertNotClosed(), this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: a,
              protocol: n,
            }) {
              this.assertNotClosed(), this.assertSendDirection();
              const s = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: n,
              };
              g.debug("sendDataChannel() [options:%o]", s);
              const o = this._pc.createDataChannel(a, s);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % _.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = i.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: t,
                  })),
                  g.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  a
                ),
                  await this._pc.setRemoteDescription(a),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: s.id,
                  ordered: s.ordered,
                  maxPacketLifeTime: s.maxPacketLifeTime,
                  maxRetransmits: s.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: a,
                  rtpParameters: n,
                  streamId: s,
                } = t;
                g.debug("receive() [trackId:%s, kind:%s]", e, a);
                const i = n.mid || String(this._mapMidTransceiver.size);
                r.set(e, i),
                  this._remoteSdp.receive({
                    mid: i,
                    kind: a,
                    offerRtpParameters: n,
                    streamId: s || n.rtcp.cname,
                    trackId: e,
                  });
              }
              const a = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
              let n = await this._pc.createAnswer();
              const s = i.parse(n.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: a } = t,
                  o = r.get(e),
                  c = s.media.find((e) => String(e.mid) === o);
                p.applyCodecParameters({
                  offerRtpParameters: a,
                  answerMediaObject: c,
                }),
                  (n = { type: "answer", sdp: i.write(s) });
              }
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: s,
                })),
                g.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n
                ),
                await this._pc.setLocalDescription(n);
              for (const a of e) {
                const { trackId: e } = a,
                  n = r.get(e),
                  s = this._pc.getTransceivers().find((e) => e.mid === n);
                if (!s) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(n, s),
                  t.push({
                    localId: n,
                    track: s.receiver.track,
                    rtpReceiver: s.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              if ((this.assertRecvDirection(), this._closed)) return;
              for (const t of e) {
                g.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              g.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                g.debug("pauseReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "inactive"),
                  this._remoteSdp.pauseMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              g.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async resumeReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                g.debug("resumeReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "recvonly"),
                  this._remoteSdp.resumeReceivingMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              g.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertNotClosed(), this.assertRecvDirection();
              const {
                  streamId: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                  protocol: r,
                };
              g.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = i.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: e,
                  });
                }
                g.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = i.parse(this._pc.localDescription.sdp));
              const r = p.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertNotClosed() {
              if (this._closed)
                throw new c.InvalidStateError(
                  "method called in a closed handler"
                );
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Firefox120 = v;
        },
        1767: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Firefox60 = void 0);
          const i = s(r(7363)),
            o = r(2994),
            c = r(4893),
            d = s(r(1765)),
            l = s(r(8046)),
            p = s(r(5544)),
            u = s(r(5938)),
            h = r(521),
            m = r(1305),
            f = r(3303),
            g = new o.Logger("Firefox60"),
            _ = { OS: 16, MIS: 2048 };
          class v extends h.HandlerInterface {
            static createFactory() {
              return () => new v();
            }
            constructor() {
              super(),
                (this._closed = !1),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Firefox60";
            }
            close() {
              if ((g.debug("close()"), !this._closed)) {
                if (((this._closed = !0), this._pc))
                  try {
                    this._pc.close();
                  } catch (e) {}
                this.emit("@close");
              }
            }
            async getNativeRtpCapabilities() {
              g.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                }),
                t = document.createElement("canvas");
              t.getContext("2d");
              const r = t.captureStream().getVideoTracks()[0];
              try {
                e.addTransceiver("audio", { direction: "sendrecv" });
                const a = e.addTransceiver(r, { direction: "sendrecv" }),
                  n = a.sender.getParameters(),
                  s = [
                    { rid: "r0", maxBitrate: 1e5 },
                    { rid: "r1", maxBitrate: 5e5 },
                  ];
                (n.encodings = s), await a.sender.setParameters(n);
                const o = await e.createOffer();
                try {
                  t.remove();
                } catch (e) {}
                try {
                  r.stop();
                } catch (e) {}
                try {
                  e.close();
                } catch (e) {}
                const c = i.parse(o.sdp);
                return p.extractRtpCapabilities({ sdpObject: c });
              } catch (a) {
                try {
                  t.remove();
                } catch (e) {}
                try {
                  r.stop();
                } catch (e) {}
                try {
                  e.close();
                } catch (e) {}
                throw a;
              }
            }
            async getNativeSctpCapabilities() {
              return g.debug("getNativeSctpCapabilities()"), { numStreams: _ };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              this.assertNotClosed(),
                g.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d),
                  video: l.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d),
                  video: l.getSendingRemoteRtpParameters("video", d),
                }),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: s || [],
                    iceTransportPolicy: i || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (g.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              throw (
                (this.assertNotClosed(),
                new c.UnsupportedError("not supported"))
              );
            }
            async restartIce(e) {
              if (
                (this.assertNotClosed(),
                g.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  g.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  g.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this.assertNotClosed(), this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: a }) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t &&
                  (t = d.clone(t)).length > 1 &&
                  (t.forEach((e, t) => {
                    e.rid = `r${t}`;
                  }),
                  t.reverse());
              const n = d.clone(this._sendingRtpParametersByKind[e.kind]);
              n.codecs = l.reduceCodecs(n.codecs, a);
              const s = d.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              s.codecs = l.reduceCodecs(s.codecs, a);
              const o = this._pc.addTransceiver(e, {
                direction: "sendonly",
                streams: [this._sendStream],
              });
              if (t) {
                const e = o.sender.getParameters();
                (e.encodings = t), await o.sender.setParameters(e);
              }
              const c = await this._pc.createOffer();
              let h = i.parse(c.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: h,
                }));
              const m = (0, f.parse)((t || [{}])[0].scalabilityMode);
              g.debug(
                "send() | calling pc.setLocalDescription() [offer:%o]",
                c
              ),
                await this._pc.setLocalDescription(c);
              const _ = o.mid;
              (n.mid = _), (h = i.parse(this._pc.localDescription.sdp));
              const v = h.media[h.media.length - 1];
              if (((n.rtcp.cname = p.getCname({ offerMediaObject: v })), t))
                if (1 === t.length) {
                  const e = u.getRtpEncodings({ offerMediaObject: v });
                  Object.assign(e[0], t[0]), (n.encodings = e);
                } else n.encodings = t.reverse();
              else n.encodings = u.getRtpEncodings({ offerMediaObject: v });
              if (
                n.encodings.length > 1 &&
                ("video/vp8" === n.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === n.codecs[0].mimeType.toLowerCase())
              )
                for (const e of n.encodings)
                  e.scalabilityMode
                    ? (e.scalabilityMode = `L1T${m.temporalLayers}`)
                    : (e.scalabilityMode = "L1T3");
              this._remoteSdp.send({
                offerMediaObject: v,
                offerRtpParameters: n,
                answerRtpParameters: s,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const b = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                g.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  b
                ),
                await this._pc.setRemoteDescription(b),
                this._mapMidTransceiver.set(_, o),
                { localId: _, rtpParameters: n, rtpSender: o.sender }
              );
            }
            async stopSending(e) {
              if (
                (this.assertSendDirection(),
                g.debug("stopSending() [localId:%s]", e),
                this._closed)
              )
                return;
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated transceiver not found");
              t.sender.replaceTrack(null),
                this._pc.removeTrack(t.sender),
                this._remoteSdp.disableMediaSection(t.mid);
              const r = await this._pc.createOffer();
              g.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug("pauseSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "inactive"), this._remoteSdp.pauseMediaSection(e);
              const r = await this._pc.createOffer();
              g.debug(
                "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async resumeSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug("resumeSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "sendonly"),
                this._remoteSdp.resumeSendingMediaSection(e);
              const r = await this._pc.createOffer();
              g.debug(
                "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async replaceTrack(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                t
                  ? g.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : g.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated transceiver not found");
              const a = r.sender.getParameters();
              (t = a.encodings.length - 1 - t),
                a.encodings.forEach((e, r) => {
                  e.active = r >= t;
                }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              g.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                g.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                a.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              g.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async getSenderStats(e) {
              this.assertNotClosed(), this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: a,
              protocol: n,
            }) {
              this.assertNotClosed(), this.assertSendDirection();
              const s = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: n,
              };
              g.debug("sendDataChannel() [options:%o]", s);
              const o = this._pc.createDataChannel(a, s);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % _.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = i.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: t,
                  })),
                  g.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  a
                ),
                  await this._pc.setRemoteDescription(a),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: s.id,
                  ordered: s.ordered,
                  maxPacketLifeTime: s.maxPacketLifeTime,
                  maxRetransmits: s.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: a,
                  rtpParameters: n,
                  streamId: s,
                } = t;
                g.debug("receive() [trackId:%s, kind:%s]", e, a);
                const i = n.mid || String(this._mapMidTransceiver.size);
                r.set(e, i),
                  this._remoteSdp.receive({
                    mid: i,
                    kind: a,
                    offerRtpParameters: n,
                    streamId: s || n.rtcp.cname,
                    trackId: e,
                  });
              }
              const a = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
              let n = await this._pc.createAnswer();
              const s = i.parse(n.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: a } = t,
                  o = r.get(e),
                  c = s.media.find((e) => String(e.mid) === o);
                p.applyCodecParameters({
                  offerRtpParameters: a,
                  answerMediaObject: c,
                }),
                  (n = { type: "answer", sdp: i.write(s) });
              }
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: s,
                })),
                g.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n
                ),
                await this._pc.setLocalDescription(n);
              for (const a of e) {
                const { trackId: e } = a,
                  n = r.get(e),
                  s = this._pc.getTransceivers().find((e) => e.mid === n);
                if (!s) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(n, s),
                  t.push({
                    localId: n,
                    track: s.receiver.track,
                    rtpReceiver: s.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              if ((this.assertRecvDirection(), this._closed)) return;
              for (const t of e) {
                g.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              g.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                g.debug("pauseReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "inactive"),
                  this._remoteSdp.pauseMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              g.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async resumeReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                g.debug("resumeReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "recvonly"),
                  this._remoteSdp.resumeReceivingMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              g.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              g.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertNotClosed(), this.assertRecvDirection();
              const {
                  streamId: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                  protocol: r,
                };
              g.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = i.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: e,
                  });
                }
                g.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = i.parse(this._pc.localDescription.sdp));
              const r = p.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertNotClosed() {
              if (this._closed)
                throw new c.InvalidStateError(
                  "method called in a closed handler"
                );
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Firefox60 = v;
        },
        521: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.HandlerInterface = void 0);
          const a = r(2010);
          class n extends a.EnhancedEventEmitter {
            constructor() {
              super();
            }
          }
          t.HandlerInterface = n;
        },
        9352: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.ReactNative = void 0);
          const i = s(r(7363)),
            o = r(2994),
            c = r(4893),
            d = s(r(1765)),
            l = s(r(8046)),
            p = s(r(5544)),
            u = s(r(4496)),
            h = r(521),
            m = r(1305),
            f = new o.Logger("ReactNative"),
            g = { OS: 1024, MIS: 1024 };
          class _ extends h.HandlerInterface {
            static createFactory() {
              return () => new _();
            }
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdTrack = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "ReactNative";
            }
            close() {
              if ((f.debug("close()"), this._sendStream.release(!1), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
              this.emit("@close");
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = i.parse(t.sdp);
                return p.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: g };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d),
                  video: l.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d),
                  video: l.getSendingRemoteRtpParameters("video", d),
                }),
                a.role &&
                  "auto" !== a.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === a.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: s || [],
                    iceTransportPolicy: i || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (f.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: a }) {
              this.assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                a &&
                  f.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addStream(this._sendStream);
              let n,
                s = await this._pc.createOffer(),
                o = i.parse(s.sdp);
              const c = d.clone(this._sendingRtpParametersByKind[e.kind]);
              c.codecs = l.reduceCodecs(c.codecs);
              const h = d.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              if (
                ((h.codecs = l.reduceCodecs(h.codecs)),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: o,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (f.debug("send() | enabling simulcast"),
                  (o = i.parse(s.sdp)),
                  (n = o.media.find((e) => "video" === e.type)),
                  u.addLegacySimulcast({
                    offerMediaObject: n,
                    track: e,
                    numStreams: t.length,
                  }),
                  (s = { type: "offer", sdp: i.write(o) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  s
                ),
                await this._pc.setLocalDescription(s),
                (o = i.parse(this._pc.localDescription.sdp)),
                (n = o.media.find((t) => t.type === e.kind)),
                (c.rtcp.cname = p.getCname({ offerMediaObject: n })),
                (c.encodings = u.getRtpEncodings({
                  offerMediaObject: n,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < c.encodings.length; ++e)
                  t[e] && Object.assign(c.encodings[e], t[e]);
              if (
                c.encodings.length > 1 &&
                ("video/vp8" === c.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === c.codecs[0].mimeType.toLowerCase())
              )
                for (const e of c.encodings) e.scalabilityMode = "L1T3";
              this._remoteSdp.send({
                offerMediaObject: n,
                offerRtpParameters: c,
                answerRtpParameters: h,
                codecOptions: r,
              });
              const m = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                m
              ),
                await this._pc.setRemoteDescription(m);
              const g = String(this._nextSendLocalId);
              return (
                this._nextSendLocalId++,
                this._mapSendLocalIdTrack.set(g, e),
                { localId: g, rtpParameters: c }
              );
            }
            async stopSending(e) {
              this.assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapSendLocalIdTrack.get(e);
              if (!t) throw new Error("track not found");
              this._mapSendLocalIdTrack.delete(e),
                this._sendStream.removeTrack(t),
                this._pc.addStream(this._sendStream);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void f.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async pauseSending(e) {}
            async resumeSending(e) {}
            async replaceTrack(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async setMaxSpatialLayer(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async setRtpEncodingParameters(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async getSenderStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: a,
              protocol: n,
            }) {
              this.assertSendDirection();
              const s = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: n,
              };
              f.debug("sendDataChannel() [options:%o]", s);
              const o = this._pc.createDataChannel(a, s);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % g.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = i.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  a
                ),
                  await this._pc.setRemoteDescription(a),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: s.id,
                  ordered: s.ordered,
                  maxPacketLifeTime: s.maxPacketLifeTime,
                  maxRetransmits: s.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const { trackId: e, kind: a, rtpParameters: n } = t;
                f.debug("receive() [trackId:%s, kind:%s]", e, a);
                const s = a;
                let i = t.streamId || n.rtcp.cname;
                f.debug(
                  "receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc"
                ),
                  (i += `-hack-${d.generateRandomNumber()}`),
                  r.set(e, i),
                  this._remoteSdp.receive({
                    mid: s,
                    kind: a,
                    offerRtpParameters: n,
                    streamId: i,
                    trackId: e,
                  });
              }
              const a = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
              let n = await this._pc.createAnswer();
              const s = i.parse(n.sdp);
              for (const t of e) {
                const { kind: e, rtpParameters: r } = t,
                  a = e,
                  n = s.media.find((e) => String(e.mid) === a);
                p.applyCodecParameters({
                  offerRtpParameters: r,
                  answerMediaObject: n,
                });
              }
              (n = { type: "answer", sdp: i.write(s) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: s,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n
                ),
                await this._pc.setLocalDescription(n);
              for (const a of e) {
                const { kind: e, trackId: n, rtpParameters: s } = a,
                  i = n,
                  o = e,
                  c = r.get(n),
                  d = this._pc
                    .getRemoteStreams()
                    .find((e) => e.id === c)
                    .getTrackById(i);
                if (!d) throw new Error("remote track not found");
                this._mapRecvLocalIdInfo.set(i, { mid: o, rtpParameters: s }),
                  t.push({ localId: i, track: d });
              }
              return t;
            }
            async stopReceiving(e) {
              this.assertRecvDirection();
              for (const t of e) {
                f.debug("stopReceiving() [localId:%s]", t);
                const { mid: e, rtpParameters: r } =
                  this._mapRecvLocalIdInfo.get(t) || {};
                this._mapRecvLocalIdInfo.delete(t),
                  this._remoteSdp.planBStopReceiving({
                    mid: e,
                    offerRtpParameters: r,
                  });
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertRecvDirection();
              const {
                  streamId: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmitTime: s,
                  maxRetransmits: o,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = i.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = i.parse(this._pc.localDescription.sdp));
              const r = p.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.ReactNative = _;
        },
        4039: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.ReactNativeUnifiedPlan = void 0);
          const i = s(r(7363)),
            o = r(2994),
            c = s(r(1765)),
            d = s(r(8046)),
            l = s(r(5544)),
            p = s(r(5938)),
            u = s(r(4256)),
            h = r(4893),
            m = r(521),
            f = r(1305),
            g = r(3303),
            _ = new o.Logger("ReactNativeUnifiedPlan"),
            v = { OS: 1024, MIS: 1024 };
          class b extends m.HandlerInterface {
            static createFactory() {
              return () => new b();
            }
            constructor() {
              super(),
                (this._closed = !1),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "ReactNativeUnifiedPlan";
            }
            close() {
              if ((_.debug("close()"), !this._closed)) {
                if (
                  ((this._closed = !0), this._sendStream.release(!1), this._pc)
                )
                  try {
                    this._pc.close();
                  } catch (e) {}
                this.emit("@close");
              }
            }
            async getNativeRtpCapabilities() {
              _.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "unified-plan",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = i.parse(t.sdp),
                  a = l.extractRtpCapabilities({ sdpObject: r });
                return u.addNackSuppportForOpus(a), a;
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return _.debug("getNativeSctpCapabilities()"), { numStreams: v };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              this.assertNotClosed(),
                _.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                a.role &&
                  "auto" !== a.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === a.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: s || [],
                    iceTransportPolicy: i || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (_.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              this.assertNotClosed(), _.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (this.assertNotClosed(),
                _.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this.assertNotClosed(), this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: a }) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t &&
                  t.length > 1 &&
                  t.forEach((e, t) => {
                    e.rid = `r${t}`;
                  });
              const n = c.clone(this._sendingRtpParametersByKind[e.kind]);
              n.codecs = d.reduceCodecs(n.codecs, a);
              const s = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              s.codecs = d.reduceCodecs(s.codecs, a);
              const o = this._remoteSdp.getNextMediaSectionIdx(),
                u = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t,
                });
              let h,
                m = await this._pc.createOffer(),
                f = i.parse(m.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: f,
                }));
              let v = !1;
              const b = (0, g.parse)((t || [{}])[0].scalabilityMode);
              t &&
                1 === t.length &&
                b.spatialLayers > 1 &&
                "video/vp9" === n.codecs[0].mimeType.toLowerCase() &&
                (_.debug("send() | enabling legacy simulcast for VP9 SVC"),
                (v = !0),
                (f = i.parse(m.sdp)),
                (h = f.media[o.idx]),
                p.addLegacySimulcast({
                  offerMediaObject: h,
                  numStreams: b.spatialLayers,
                }),
                (m = { type: "offer", sdp: i.write(f) })),
                _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m
                ),
                await this._pc.setLocalDescription(m);
              let y = u.mid ?? void 0;
              if (
                (y ||
                  _.warn(
                    "send() | missing transceiver.mid (bug in react-native-webrtc, using a workaround"
                  ),
                (n.mid = y),
                (f = i.parse(this._pc.localDescription.sdp)),
                (h = f.media[o.idx]),
                (n.rtcp.cname = l.getCname({ offerMediaObject: h })),
                t)
              )
                if (1 === t.length) {
                  let e = p.getRtpEncodings({ offerMediaObject: h });
                  Object.assign(e[0], t[0]),
                    v && (e = [e[0]]),
                    (n.encodings = e);
                } else n.encodings = t;
              else n.encodings = p.getRtpEncodings({ offerMediaObject: h });
              if (
                n.encodings.length > 1 &&
                ("video/vp8" === n.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === n.codecs[0].mimeType.toLowerCase())
              )
                for (const e of n.encodings)
                  e.scalabilityMode
                    ? (e.scalabilityMode = `L1T${b.temporalLayers}`)
                    : (e.scalabilityMode = "L1T3");
              this._remoteSdp.send({
                offerMediaObject: h,
                reuseMid: o.reuseMid,
                offerRtpParameters: n,
                answerRtpParameters: s,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ),
                await this._pc.setRemoteDescription(w),
                y || ((y = u.mid), (n.mid = y)),
                this._mapMidTransceiver.set(y, u),
                { localId: y, rtpParameters: n, rtpSender: u.sender }
              );
            }
            async stopSending(e) {
              if ((this.assertSendDirection(), this._closed)) return;
              _.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null), this._pc.removeTrack(t.sender);
              if (this._remoteSdp.closeMediaSection(t.mid))
                try {
                  t.stop();
                } catch (e) {}
              const r = await this._pc.createOffer();
              _.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug("pauseSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "inactive"), this._remoteSdp.pauseMediaSection(e);
              const r = await this._pc.createOffer();
              _.debug(
                "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async resumeSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug("resumeSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if ((this._remoteSdp.resumeSendingMediaSection(e), !t))
                throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "sendonly";
              const r = await this._pc.createOffer();
              _.debug(
                "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async replaceTrack(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                t
                  ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : _.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              _.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                a.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              _.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async getSenderStats(e) {
              this.assertNotClosed(), this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: a,
              protocol: n,
            }) {
              this.assertNotClosed(), this.assertSendDirection();
              const s = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: n,
              };
              _.debug("sendDataChannel() [options:%o]", s);
              const o = this._pc.createDataChannel(a, s);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % v.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = i.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  a
                ),
                  await this._pc.setRemoteDescription(a),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: s.id,
                  ordered: s.ordered,
                  maxPacketLifeTime: s.maxPacketLifeTime,
                  maxRetransmits: s.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: a,
                  rtpParameters: n,
                  streamId: s,
                } = t;
                _.debug("receive() [trackId:%s, kind:%s]", e, a);
                const i = n.mid || String(this._mapMidTransceiver.size);
                r.set(e, i),
                  this._remoteSdp.receive({
                    mid: i,
                    kind: a,
                    offerRtpParameters: n,
                    streamId: s || n.rtcp.cname,
                    trackId: e,
                  });
              }
              const a = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
              let n = await this._pc.createAnswer();
              const s = i.parse(n.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: a } = t,
                  n = r.get(e),
                  i = s.media.find((e) => String(e.mid) === n);
                l.applyCodecParameters({
                  offerRtpParameters: a,
                  answerMediaObject: i,
                });
              }
              (n = { type: "answer", sdp: i.write(s) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: s,
                  })),
                _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n
                ),
                await this._pc.setLocalDescription(n);
              for (const a of e) {
                const { trackId: e } = a,
                  n = r.get(e),
                  s = this._pc.getTransceivers().find((e) => e.mid === n);
                if (!s) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(n, s),
                  t.push({
                    localId: n,
                    track: s.receiver.track,
                    rtpReceiver: s.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              if ((this.assertRecvDirection(), this._closed)) return;
              for (const t of e) {
                _.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              _.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                _.debug("pauseReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "inactive"),
                  this._remoteSdp.pauseMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              _.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async resumeReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                _.debug("resumeReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "recvonly"),
                  this._remoteSdp.resumeReceivingMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              _.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertNotClosed(), this.assertRecvDirection();
              const {
                  streamId: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                  protocol: r,
                };
              _.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = i.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = i.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertNotClosed() {
              if (this._closed)
                throw new h.InvalidStateError(
                  "method called in a closed handler"
                );
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.ReactNativeUnifiedPlan = b;
        },
        9676: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Safari11 = void 0);
          const i = s(r(7363)),
            o = r(2994),
            c = s(r(1765)),
            d = s(r(8046)),
            l = s(r(5544)),
            p = s(r(4496)),
            u = r(521),
            h = r(1305),
            m = new o.Logger("Safari11"),
            f = { OS: 1024, MIS: 1024 };
          class g extends u.HandlerInterface {
            static createFactory() {
              return () => new g();
            }
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdRtpSender = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Safari11";
            }
            close() {
              if ((m.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
              this.emit("@close");
            }
            async getNativeRtpCapabilities() {
              m.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = i.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              m.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                a.role &&
                  "auto" !== a.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === a.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: s || [],
                    iceTransportPolicy: i || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (m.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              m.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (m.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  m.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: a }) {
              this.assertSendDirection(),
                m.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                a &&
                  m.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addTrack(e, this._sendStream);
              let n,
                s = await this._pc.createOffer(),
                o = i.parse(s.sdp);
              const u = c.clone(this._sendingRtpParametersByKind[e.kind]);
              u.codecs = d.reduceCodecs(u.codecs);
              const h = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              if (
                ((h.codecs = d.reduceCodecs(h.codecs)),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: o,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (m.debug("send() | enabling simulcast"),
                  (o = i.parse(s.sdp)),
                  (n = o.media.find((e) => "video" === e.type)),
                  p.addLegacySimulcast({
                    offerMediaObject: n,
                    track: e,
                    numStreams: t.length,
                  }),
                  (s = { type: "offer", sdp: i.write(o) })),
                m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  s
                ),
                await this._pc.setLocalDescription(s),
                (o = i.parse(this._pc.localDescription.sdp)),
                (n = o.media.find((t) => t.type === e.kind)),
                (u.rtcp.cname = l.getCname({ offerMediaObject: n })),
                (u.encodings = p.getRtpEncodings({
                  offerMediaObject: n,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < u.encodings.length; ++e)
                  t[e] && Object.assign(u.encodings[e], t[e]);
              if (
                u.encodings.length > 1 &&
                "video/vp8" === u.codecs[0].mimeType.toLowerCase()
              )
                for (const e of u.encodings) e.scalabilityMode = "L1T3";
              this._remoteSdp.send({
                offerMediaObject: n,
                offerRtpParameters: u,
                answerRtpParameters: h,
                codecOptions: r,
              });
              const f = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                f
              ),
                await this._pc.setRemoteDescription(f);
              const g = String(this._nextSendLocalId);
              this._nextSendLocalId++;
              const _ = this._pc.getSenders().find((t) => t.track === e);
              return (
                this._mapSendLocalIdRtpSender.set(g, _),
                { localId: g, rtpParameters: u, rtpSender: _ }
              );
            }
            async stopSending(e) {
              this.assertSendDirection();
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              t.track && this._sendStream.removeTrack(t.track),
                this._mapSendLocalIdRtpSender.delete(e);
              const r = await this._pc.createOffer();
              m.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void m.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async pauseSending(e) {}
            async resumeSending(e) {}
            async replaceTrack(e, t) {
              this.assertSendDirection(),
                t
                  ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : m.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const a = r.track;
              await r.replaceTrack(t),
                a && this._sendStream.removeTrack(a),
                t && this._sendStream.addTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertSendDirection(),
                m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const a = r.getParameters();
              a.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.setParameters(a);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertSendDirection(),
                m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const a = r.getParameters();
              a.encodings.forEach((e, r) => {
                a.encodings[r] = { ...e, ...t };
              }),
                await r.setParameters(a);
            }
            async getSenderStats(e) {
              this.assertSendDirection();
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              return t.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: a,
              protocol: n,
            }) {
              this.assertSendDirection();
              const s = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: n,
              };
              m.debug("sendDataChannel() [options:%o]", s);
              const o = this._pc.createDataChannel(a, s);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % f.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = i.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  a
                ),
                  await this._pc.setRemoteDescription(a),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: s.id,
                  ordered: s.ordered,
                  maxPacketLifeTime: s.maxPacketLifeTime,
                  maxRetransmits: s.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertRecvDirection();
              const t = [];
              for (const t of e) {
                const {
                  trackId: e,
                  kind: r,
                  rtpParameters: a,
                  streamId: n,
                } = t;
                m.debug("receive() [trackId:%s, kind:%s]", e, r);
                const s = r;
                this._remoteSdp.receive({
                  mid: s,
                  kind: r,
                  offerRtpParameters: a,
                  streamId: n || a.rtcp.cname,
                  trackId: e,
                });
              }
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              let a = await this._pc.createAnswer();
              const n = i.parse(a.sdp);
              for (const t of e) {
                const { kind: e, rtpParameters: r } = t,
                  a = e,
                  s = n.media.find((e) => String(e.mid) === a);
                l.applyCodecParameters({
                  offerRtpParameters: r,
                  answerMediaObject: s,
                });
              }
              (a = { type: "answer", sdp: i.write(n) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: n,
                  })),
                m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  a
                ),
                await this._pc.setLocalDescription(a);
              for (const r of e) {
                const { kind: e, trackId: a, rtpParameters: n } = r,
                  s = e,
                  i = a,
                  o = this._pc
                    .getReceivers()
                    .find((e) => e.track && e.track.id === i);
                if (!o) throw new Error("new RTCRtpReceiver not");
                this._mapRecvLocalIdInfo.set(i, {
                  mid: s,
                  rtpParameters: n,
                  rtpReceiver: o,
                }),
                  t.push({ localId: i, track: o.track, rtpReceiver: o });
              }
              return t;
            }
            async stopReceiving(e) {
              this.assertRecvDirection();
              for (const t of e) {
                m.debug("stopReceiving() [localId:%s]", t);
                const { mid: e, rtpParameters: r } =
                  this._mapRecvLocalIdInfo.get(t) || {};
                this._mapRecvLocalIdInfo.delete(t),
                  this._remoteSdp.planBStopReceiving({
                    mid: e,
                    offerRtpParameters: r,
                  });
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              m.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              m.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertRecvDirection();
              const { rtpReceiver: t } = this._mapRecvLocalIdInfo.get(e) || {};
              if (!t) throw new Error("associated RTCRtpReceiver not found");
              return t.getStats();
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertRecvDirection();
              const {
                  streamId: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                  protocol: r,
                };
              m.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = i.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                m.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = i.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Safari11 = g;
        },
        5765: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Safari12 = void 0);
          const i = s(r(7363)),
            o = r(2994),
            c = s(r(1765)),
            d = s(r(8046)),
            l = s(r(5544)),
            p = s(r(5938)),
            u = s(r(4256)),
            h = r(4893),
            m = r(521),
            f = r(1305),
            g = r(3303),
            _ = new o.Logger("Safari12"),
            v = { OS: 1024, MIS: 1024 };
          class b extends m.HandlerInterface {
            static createFactory() {
              return () => new b();
            }
            constructor() {
              super(),
                (this._closed = !1),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            get name() {
              return "Safari12";
            }
            close() {
              if ((_.debug("close()"), !this._closed)) {
                if (((this._closed = !0), this._pc))
                  try {
                    this._pc.close();
                  } catch (e) {}
                this.emit("@close");
              }
            }
            async getNativeRtpCapabilities() {
              _.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = i.parse(t.sdp),
                  a = l.extractRtpCapabilities({ sdpObject: r });
                return u.addNackSuppportForOpus(a), a;
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return _.debug("getNativeSctpCapabilities()"), { numStreams: v };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: a,
              sctpParameters: n,
              iceServers: s,
              iceTransportPolicy: i,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: l,
            }) {
              this.assertNotClosed(),
                _.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: a,
                  sctpParameters: n,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l),
                  video: d.getSendingRemoteRtpParameters("video", l),
                }),
                a.role &&
                  "auto" !== a.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === a.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: s || [],
                    iceTransportPolicy: i || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }),
                this._pc.connectionState
                  ? this._pc.addEventListener("connectionstatechange", () => {
                      this.emit(
                        "@connectionstatechange",
                        this._pc.connectionState
                      );
                    })
                  : this._pc.addEventListener(
                      "iceconnectionstatechange",
                      () => {
                        switch (
                          (_.warn(
                            "run() | pc.connectionState not supported, using pc.iceConnectionState"
                          ),
                          this._pc.iceConnectionState)
                        ) {
                          case "checking":
                            this.emit("@connectionstatechange", "connecting");
                            break;
                          case "connected":
                          case "completed":
                            this.emit("@connectionstatechange", "connected");
                            break;
                          case "failed":
                            this.emit("@connectionstatechange", "failed");
                            break;
                          case "disconnected":
                            this.emit("@connectionstatechange", "disconnected");
                            break;
                          case "closed":
                            this.emit("@connectionstatechange", "closed");
                        }
                      }
                    );
            }
            async updateIceServers(e) {
              this.assertNotClosed(), _.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (this.assertNotClosed(),
                _.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this.assertNotClosed(), this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: a }) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug("send() [kind:%s, track.id:%s]", e.kind, e.id);
              const n = c.clone(this._sendingRtpParametersByKind[e.kind]);
              n.codecs = d.reduceCodecs(n.codecs, a);
              const s = c.clone(this._sendingRemoteRtpParametersByKind[e.kind]);
              s.codecs = d.reduceCodecs(s.codecs, a);
              const o = this._remoteSdp.getNextMediaSectionIdx(),
                u = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                });
              let h,
                m = await this._pc.createOffer(),
                f = i.parse(m.sdp);
              this._transportReady ||
                (await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: f,
                }));
              const v = (0, g.parse)((t || [{}])[0].scalabilityMode);
              t &&
                t.length > 1 &&
                (_.debug("send() | enabling legacy simulcast"),
                (f = i.parse(m.sdp)),
                (h = f.media[o.idx]),
                p.addLegacySimulcast({
                  offerMediaObject: h,
                  numStreams: t.length,
                }),
                (m = { type: "offer", sdp: i.write(f) })),
                _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m
                ),
                await this._pc.setLocalDescription(m);
              const b = u.mid;
              if (
                ((n.mid = b),
                (f = i.parse(this._pc.localDescription.sdp)),
                (h = f.media[o.idx]),
                (n.rtcp.cname = l.getCname({ offerMediaObject: h })),
                (n.encodings = p.getRtpEncodings({ offerMediaObject: h })),
                t)
              )
                for (let e = 0; e < n.encodings.length; ++e)
                  t[e] && Object.assign(n.encodings[e], t[e]);
              if (
                n.encodings.length > 1 &&
                ("video/vp8" === n.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === n.codecs[0].mimeType.toLowerCase())
              )
                for (const e of n.encodings)
                  e.scalabilityMode
                    ? (e.scalabilityMode = `L1T${v.temporalLayers}`)
                    : (e.scalabilityMode = "L1T3");
              this._remoteSdp.send({
                offerMediaObject: h,
                reuseMid: o.reuseMid,
                offerRtpParameters: n,
                answerRtpParameters: s,
                codecOptions: r,
              });
              const y = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  y
                ),
                await this._pc.setRemoteDescription(y),
                this._mapMidTransceiver.set(b, u),
                { localId: b, rtpParameters: n, rtpSender: u.sender }
              );
            }
            async stopSending(e) {
              if ((this.assertSendDirection(), this._closed)) return;
              _.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null), this._pc.removeTrack(t.sender);
              if (this._remoteSdp.closeMediaSection(t.mid))
                try {
                  t.stop();
                } catch (e) {}
              const r = await this._pc.createOffer();
              _.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a),
                this._mapMidTransceiver.delete(e);
            }
            async pauseSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug("pauseSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "inactive"), this._remoteSdp.pauseMediaSection(e);
              const r = await this._pc.createOffer();
              _.debug(
                "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async resumeSending(e) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug("resumeSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              (t.direction = "sendonly"),
                this._remoteSdp.resumeSendingMediaSection(e);
              const r = await this._pc.createOffer();
              _.debug(
                "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
            }
            async replaceTrack(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                t
                  ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : _.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              _.debug(
                "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async setRtpEncodingParameters(e, t) {
              this.assertNotClosed(),
                this.assertSendDirection(),
                _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const a = r.sender.getParameters();
              a.encodings.forEach((e, r) => {
                a.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(a),
                this._remoteSdp.muxMediaSectionSimulcast(e, a.encodings);
              const n = await this._pc.createOffer();
              _.debug(
                "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
              const s = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                s
              ),
                await this._pc.setRemoteDescription(s);
            }
            async getSenderStats(e) {
              this.assertNotClosed(), this.assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: a,
              protocol: n,
            }) {
              this.assertNotClosed(), this.assertSendDirection();
              const s = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: n,
              };
              _.debug("sendDataChannel() [options:%o]", s);
              const o = this._pc.createDataChannel(a, s);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % v.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = i.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t,
                  })),
                  _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const a = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  a
                ),
                  await this._pc.setRemoteDescription(a),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: s.id,
                  ordered: s.ordered,
                  maxPacketLifeTime: s.maxPacketLifeTime,
                  maxRetransmits: s.maxRetransmits,
                },
              };
            }
            async receive(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = [],
                r = new Map();
              for (const t of e) {
                const {
                  trackId: e,
                  kind: a,
                  rtpParameters: n,
                  streamId: s,
                } = t;
                _.debug("receive() [trackId:%s, kind:%s]", e, a);
                const i = n.mid || String(this._mapMidTransceiver.size);
                r.set(e, i),
                  this._remoteSdp.receive({
                    mid: i,
                    kind: a,
                    offerRtpParameters: n,
                    streamId: s || n.rtcp.cname,
                    trackId: e,
                  });
              }
              const a = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
              let n = await this._pc.createAnswer();
              const s = i.parse(n.sdp);
              for (const t of e) {
                const { trackId: e, rtpParameters: a } = t,
                  n = r.get(e),
                  i = s.media.find((e) => String(e.mid) === n);
                l.applyCodecParameters({
                  offerRtpParameters: a,
                  answerMediaObject: i,
                });
              }
              (n = { type: "answer", sdp: i.write(s) }),
                this._transportReady ||
                  (await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: s,
                  })),
                _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n
                ),
                await this._pc.setLocalDescription(n);
              for (const a of e) {
                const { trackId: e } = a,
                  n = r.get(e),
                  s = this._pc.getTransceivers().find((e) => e.mid === n);
                if (!s) throw new Error("new RTCRtpTransceiver not found");
                this._mapMidTransceiver.set(n, s),
                  t.push({
                    localId: n,
                    track: s.receiver.track,
                    rtpReceiver: s.receiver,
                  });
              }
              return t;
            }
            async stopReceiving(e) {
              if ((this.assertRecvDirection(), this._closed)) return;
              for (const t of e) {
                _.debug("stopReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                this._remoteSdp.closeMediaSection(e.mid);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              _.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              for (const t of e) this._mapMidTransceiver.delete(t);
            }
            async pauseReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                _.debug("pauseReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "inactive"),
                  this._remoteSdp.pauseMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              _.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async resumeReceiving(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              for (const t of e) {
                _.debug("resumeReceiving() [localId:%s]", t);
                const e = this._mapMidTransceiver.get(t);
                if (!e)
                  throw new Error("associated RTCRtpTransceiver not found");
                (e.direction = "recvonly"),
                  this._remoteSdp.resumeReceivingMediaSection(t);
              }
              const t = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                t
              ),
                await this._pc.setRemoteDescription(t);
              const r = await this._pc.createAnswer();
              _.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
            }
            async getReceiverStats(e) {
              this.assertNotClosed(), this.assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this.assertNotClosed(), this.assertRecvDirection();
              const {
                  streamId: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: a,
                  ordered: n,
                  maxPacketLifeTime: s,
                  maxRetransmits: o,
                  protocol: r,
                };
              _.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = i.parse(t.sdp);
                  await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: e,
                  });
                }
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = i.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await new Promise((e, t) => {
                  this.safeEmit("@connect", { dtlsParameters: r }, e, t);
                }),
                (this._transportReady = !0);
            }
            assertNotClosed() {
              if (this._closed)
                throw new h.InvalidStateError(
                  "method called in a closed handler"
                );
            }
            assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Safari12 = b;
        },
        8751: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.mangleRtpParameters = t.getCapabilities = void 0);
          const i = s(r(1765));
          (t.getCapabilities = function () {
            const e = RTCRtpReceiver.getCapabilities(),
              t = i.clone(e);
            for (const e of t.codecs ?? []) {
              if (
                ((e.channels = e.numChannels),
                delete e.numChannels,
                (e.mimeType = e.mimeType || `${e.kind}/${e.name}`),
                e.parameters)
              ) {
                const t = e.parameters;
                t.apt && (t.apt = Number(t.apt)),
                  t["packetization-mode"] &&
                    (t["packetization-mode"] = Number(t["packetization-mode"]));
              }
              for (const t of e.rtcpFeedback || [])
                t.parameter || (t.parameter = "");
            }
            return t;
          }),
            (t.mangleRtpParameters = function (e) {
              const t = i.clone(e);
              t.mid && ((t.muxId = t.mid), delete t.mid);
              for (const e of t.codecs)
                e.channels && ((e.numChannels = e.channels), delete e.channels),
                  e.mimeType && !e.name && (e.name = e.mimeType.split("/")[1]),
                  delete e.mimeType;
              return t;
            });
        },
        4256: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.addNackSuppportForOpus = void 0),
            (t.addNackSuppportForOpus = function (e) {
              for (const t of e.codecs || [])
                ("audio/opus" !== t.mimeType.toLowerCase() &&
                  "audio/multiopus" !== t.mimeType.toLowerCase()) ||
                  t.rtcpFeedback?.some(
                    (e) => "nack" === e.type && !e.parameter
                  ) ||
                  (t.rtcpFeedback || (t.rtcpFeedback = []),
                  t.rtcpFeedback.push({ type: "nack" }));
            });
        },
        3471: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.OfferMediaSection =
              t.AnswerMediaSection =
              t.MediaSection =
                void 0);
          const i = s(r(7363)),
            o = s(r(1765));
          class c {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              planB: a = !1,
            }) {
              if (
                ((this._mediaObject = {}),
                (this._planB = a),
                e && this.setIceParameters(e),
                t)
              ) {
                this._mediaObject.candidates = [];
                for (const e of t) {
                  const t = { component: 1 };
                  (t.foundation = e.foundation),
                    (t.ip = e.address ?? e.ip),
                    (t.port = e.port),
                    (t.priority = e.priority),
                    (t.transport = e.protocol),
                    (t.type = e.type),
                    e.tcpType && (t.tcptype = e.tcpType),
                    this._mediaObject.candidates.push(t);
                }
                (this._mediaObject.endOfCandidates = "end-of-candidates"),
                  (this._mediaObject.iceOptions = "renomination");
              }
              r && this.setDtlsRole(r.role);
            }
            get mid() {
              return String(this._mediaObject.mid);
            }
            get closed() {
              return 0 === this._mediaObject.port;
            }
            getObject() {
              return this._mediaObject;
            }
            setIceParameters(e) {
              (this._mediaObject.iceUfrag = e.usernameFragment),
                (this._mediaObject.icePwd = e.password);
            }
            pause() {
              this._mediaObject.direction = "inactive";
            }
            disable() {
              this.pause(),
                delete this._mediaObject.ext,
                delete this._mediaObject.ssrcs,
                delete this._mediaObject.ssrcGroups,
                delete this._mediaObject.simulcast,
                delete this._mediaObject.simulcast_03,
                delete this._mediaObject.rids,
                delete this._mediaObject.extmapAllowMixed;
            }
            close() {
              this.disable(), (this._mediaObject.port = 0);
            }
          }
          t.MediaSection = c;
          t.AnswerMediaSection = class extends c {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              sctpParameters: a,
              plainRtpParameters: n,
              planB: s = !1,
              offerMediaObject: i,
              offerRtpParameters: c,
              answerRtpParameters: l,
              codecOptions: p,
              extmapAllowMixed: u = !1,
            }) {
              switch (
                (super({
                  iceParameters: e,
                  iceCandidates: t,
                  dtlsParameters: r,
                  planB: s,
                }),
                (this._mediaObject.mid = String(i.mid)),
                (this._mediaObject.type = i.type),
                (this._mediaObject.protocol = i.protocol),
                n
                  ? ((this._mediaObject.connection = {
                      ip: n.ip,
                      version: n.ipVersion,
                    }),
                    (this._mediaObject.port = n.port))
                  : ((this._mediaObject.connection = {
                      ip: "127.0.0.1",
                      version: 4,
                    }),
                    (this._mediaObject.port = 7)),
                i.type)
              ) {
                case "audio":
                case "video":
                  (this._mediaObject.direction = "recvonly"),
                    (this._mediaObject.rtp = []),
                    (this._mediaObject.rtcpFb = []),
                    (this._mediaObject.fmtp = []);
                  for (const e of l.codecs) {
                    const t = {
                      payload: e.payloadType,
                      codec: d(e),
                      rate: e.clockRate,
                    };
                    e.channels > 1 && (t.encoding = e.channels),
                      this._mediaObject.rtp.push(t);
                    const r = o.clone(e.parameters) ?? {};
                    let a = o.clone(e.rtcpFeedback) ?? [];
                    if (p) {
                      const {
                          opusStereo: t,
                          opusFec: n,
                          opusDtx: s,
                          opusMaxPlaybackRate: i,
                          opusMaxAverageBitrate: o,
                          opusPtime: d,
                          opusNack: l,
                          videoGoogleStartBitrate: u,
                          videoGoogleMaxBitrate: h,
                          videoGoogleMinBitrate: m,
                        } = p,
                        f = c.codecs.find(
                          (t) => t.payloadType === e.payloadType
                        );
                      switch (e.mimeType.toLowerCase()) {
                        case "audio/opus":
                        case "audio/multiopus":
                          void 0 !== t &&
                            ((f.parameters["sprop-stereo"] = t ? 1 : 0),
                            (r.stereo = t ? 1 : 0)),
                            void 0 !== n &&
                              ((f.parameters.useinbandfec = n ? 1 : 0),
                              (r.useinbandfec = n ? 1 : 0)),
                            void 0 !== s &&
                              ((f.parameters.usedtx = s ? 1 : 0),
                              (r.usedtx = s ? 1 : 0)),
                            void 0 !== i && (r.maxplaybackrate = i),
                            void 0 !== o && (r.maxaveragebitrate = o),
                            void 0 !== d &&
                              ((f.parameters.ptime = d), (r.ptime = d)),
                            l ||
                              ((f.rtcpFeedback = f.rtcpFeedback.filter(
                                (e) => "nack" !== e.type || e.parameter
                              )),
                              (a = a.filter(
                                (e) => "nack" !== e.type || e.parameter
                              )));
                          break;
                        case "video/vp8":
                        case "video/vp9":
                        case "video/h264":
                        case "video/h265":
                          void 0 !== u && (r["x-google-start-bitrate"] = u),
                            void 0 !== h && (r["x-google-max-bitrate"] = h),
                            void 0 !== m && (r["x-google-min-bitrate"] = m);
                      }
                    }
                    const n = { payload: e.payloadType, config: "" };
                    for (const e of Object.keys(r))
                      n.config && (n.config += ";"),
                        (n.config += `${e}=${r[e]}`);
                    n.config && this._mediaObject.fmtp.push(n);
                    for (const t of a)
                      this._mediaObject.rtcpFb.push({
                        payload: e.payloadType,
                        type: t.type,
                        subtype: t.parameter,
                      });
                  }
                  (this._mediaObject.payloads = l.codecs
                    .map((e) => e.payloadType)
                    .join(" ")),
                    (this._mediaObject.ext = []);
                  for (const e of l.headerExtensions) {
                    (i.ext || []).some((t) => t.uri === e.uri) &&
                      this._mediaObject.ext.push({ uri: e.uri, value: e.id });
                  }
                  if (
                    (u &&
                      "extmap-allow-mixed" === i.extmapAllowMixed &&
                      (this._mediaObject.extmapAllowMixed =
                        "extmap-allow-mixed"),
                    i.simulcast)
                  ) {
                    (this._mediaObject.simulcast = {
                      dir1: "recv",
                      list1: i.simulcast.list1,
                    }),
                      (this._mediaObject.rids = []);
                    for (const e of i.rids || [])
                      "send" === e.direction &&
                        this._mediaObject.rids.push({
                          id: e.id,
                          direction: "recv",
                        });
                  } else if (i.simulcast_03) {
                    (this._mediaObject.simulcast_03 = {
                      value: i.simulcast_03.value.replace(/send/g, "recv"),
                    }),
                      (this._mediaObject.rids = []);
                    for (const e of i.rids || [])
                      "send" === e.direction &&
                        this._mediaObject.rids.push({
                          id: e.id,
                          direction: "recv",
                        });
                  }
                  (this._mediaObject.rtcpMux = "rtcp-mux"),
                    (this._mediaObject.rtcpRsize = "rtcp-rsize"),
                    this._planB &&
                      "video" === this._mediaObject.type &&
                      (this._mediaObject.xGoogleFlag = "conference");
                  break;
                case "application":
                  "number" == typeof i.sctpPort
                    ? ((this._mediaObject.payloads = "webrtc-datachannel"),
                      (this._mediaObject.sctpPort = a.port),
                      (this._mediaObject.maxMessageSize = a.maxMessageSize))
                    : i.sctpmap &&
                      ((this._mediaObject.payloads = a.port),
                      (this._mediaObject.sctpmap = {
                        app: "webrtc-datachannel",
                        sctpmapNumber: a.port,
                        maxMessageSize: a.maxMessageSize,
                      }));
              }
            }
            setDtlsRole(e) {
              switch (e) {
                case "client":
                  this._mediaObject.setup = "active";
                  break;
                case "server":
                  this._mediaObject.setup = "passive";
                  break;
                case "auto":
                  this._mediaObject.setup = "actpass";
              }
            }
            resume() {
              this._mediaObject.direction = "recvonly";
            }
            muxSimulcastStreams(e) {
              if (
                !this._mediaObject.simulcast ||
                !this._mediaObject.simulcast.list1
              )
                return;
              const t = {};
              for (const r of e) r.rid && (t[r.rid] = r);
              const r = this._mediaObject.simulcast.list1,
                a = i.parseSimulcastStreamList(r);
              for (const e of a)
                for (const r of e) r.paused = !t[r.scid]?.active;
              this._mediaObject.simulcast.list1 = a
                .map((e) =>
                  e.map((e) => `${e.paused ? "~" : ""}${e.scid}`).join(",")
                )
                .join(";");
            }
          };
          function d(e) {
            const t = new RegExp("^(audio|video)/(.+)", "i").exec(e.mimeType);
            if (!t) throw new TypeError("invalid codec.mimeType");
            return t[2];
          }
          t.OfferMediaSection = class extends c {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              sctpParameters: a,
              plainRtpParameters: n,
              planB: s = !1,
              mid: i,
              kind: o,
              offerRtpParameters: c,
              streamId: l,
              trackId: p,
              oldDataChannelSpec: u = !1,
            }) {
              switch (
                (super({
                  iceParameters: e,
                  iceCandidates: t,
                  dtlsParameters: r,
                  planB: s,
                }),
                (this._mediaObject.mid = String(i)),
                (this._mediaObject.type = o),
                n
                  ? ((this._mediaObject.connection = {
                      ip: n.ip,
                      version: n.ipVersion,
                    }),
                    (this._mediaObject.protocol = "RTP/AVP"),
                    (this._mediaObject.port = n.port))
                  : ((this._mediaObject.connection = {
                      ip: "127.0.0.1",
                      version: 4,
                    }),
                    (this._mediaObject.protocol = a
                      ? "UDP/DTLS/SCTP"
                      : "UDP/TLS/RTP/SAVPF"),
                    (this._mediaObject.port = 7)),
                o)
              ) {
                case "audio":
                case "video": {
                  (this._mediaObject.direction = "sendonly"),
                    (this._mediaObject.rtp = []),
                    (this._mediaObject.rtcpFb = []),
                    (this._mediaObject.fmtp = []),
                    this._planB ||
                      (this._mediaObject.msid = `${l || "-"} ${p}`);
                  for (const e of c.codecs) {
                    const t = {
                      payload: e.payloadType,
                      codec: d(e),
                      rate: e.clockRate,
                    };
                    e.channels > 1 && (t.encoding = e.channels),
                      this._mediaObject.rtp.push(t);
                    const r = { payload: e.payloadType, config: "" };
                    for (const t of Object.keys(e.parameters))
                      r.config && (r.config += ";"),
                        (r.config += `${t}=${e.parameters[t]}`);
                    r.config && this._mediaObject.fmtp.push(r);
                    for (const t of e.rtcpFeedback)
                      this._mediaObject.rtcpFb.push({
                        payload: e.payloadType,
                        type: t.type,
                        subtype: t.parameter,
                      });
                  }
                  (this._mediaObject.payloads = c.codecs
                    .map((e) => e.payloadType)
                    .join(" ")),
                    (this._mediaObject.ext = []);
                  for (const e of c.headerExtensions)
                    this._mediaObject.ext.push({ uri: e.uri, value: e.id });
                  (this._mediaObject.rtcpMux = "rtcp-mux"),
                    (this._mediaObject.rtcpRsize = "rtcp-rsize");
                  const e = c.encodings[0],
                    t = e.ssrc,
                    r = e.rtx && e.rtx.ssrc ? e.rtx.ssrc : void 0;
                  (this._mediaObject.ssrcs = []),
                    (this._mediaObject.ssrcGroups = []),
                    c.rtcp.cname &&
                      this._mediaObject.ssrcs.push({
                        id: t,
                        attribute: "cname",
                        value: c.rtcp.cname,
                      }),
                    this._planB &&
                      this._mediaObject.ssrcs.push({
                        id: t,
                        attribute: "msid",
                        value: `${l || "-"} ${p}`,
                      }),
                    r &&
                      (c.rtcp.cname &&
                        this._mediaObject.ssrcs.push({
                          id: r,
                          attribute: "cname",
                          value: c.rtcp.cname,
                        }),
                      this._planB &&
                        this._mediaObject.ssrcs.push({
                          id: r,
                          attribute: "msid",
                          value: `${l || "-"} ${p}`,
                        }),
                      this._mediaObject.ssrcGroups.push({
                        semantics: "FID",
                        ssrcs: `${t} ${r}`,
                      }));
                  break;
                }
                case "application":
                  u
                    ? ((this._mediaObject.payloads = a.port),
                      (this._mediaObject.sctpmap = {
                        app: "webrtc-datachannel",
                        sctpmapNumber: a.port,
                        maxMessageSize: a.maxMessageSize,
                      }))
                    : ((this._mediaObject.payloads = "webrtc-datachannel"),
                      (this._mediaObject.sctpPort = a.port),
                      (this._mediaObject.maxMessageSize = a.maxMessageSize));
              }
            }
            setDtlsRole(e) {
              this._mediaObject.setup = "actpass";
            }
            resume() {
              this._mediaObject.direction = "sendonly";
            }
            planBReceive({ offerRtpParameters: e, streamId: t, trackId: r }) {
              const a = e.encodings[0],
                n = a.ssrc,
                s = a.rtx && a.rtx.ssrc ? a.rtx.ssrc : void 0,
                i = this._mediaObject.payloads.split(" ");
              for (const t of e.codecs) {
                if (i.includes(String(t.payloadType))) continue;
                const e = {
                  payload: t.payloadType,
                  codec: d(t),
                  rate: t.clockRate,
                };
                t.channels > 1 && (e.encoding = t.channels),
                  this._mediaObject.rtp.push(e);
                const r = { payload: t.payloadType, config: "" };
                for (const e of Object.keys(t.parameters))
                  r.config && (r.config += ";"),
                    (r.config += `${e}=${t.parameters[e]}`);
                r.config && this._mediaObject.fmtp.push(r);
                for (const e of t.rtcpFeedback)
                  this._mediaObject.rtcpFb.push({
                    payload: t.payloadType,
                    type: e.type,
                    subtype: e.parameter,
                  });
              }
              (this._mediaObject.payloads += ` ${e.codecs
                .filter(
                  (e) => !this._mediaObject.payloads.includes(e.payloadType)
                )
                .map((e) => e.payloadType)
                .join(" ")}`),
                (this._mediaObject.payloads =
                  this._mediaObject.payloads.trim()),
                e.rtcp.cname &&
                  this._mediaObject.ssrcs.push({
                    id: n,
                    attribute: "cname",
                    value: e.rtcp.cname,
                  }),
                this._mediaObject.ssrcs.push({
                  id: n,
                  attribute: "msid",
                  value: `${t || "-"} ${r}`,
                }),
                s &&
                  (e.rtcp.cname &&
                    this._mediaObject.ssrcs.push({
                      id: s,
                      attribute: "cname",
                      value: e.rtcp.cname,
                    }),
                  this._mediaObject.ssrcs.push({
                    id: s,
                    attribute: "msid",
                    value: `${t || "-"} ${r}`,
                  }),
                  this._mediaObject.ssrcGroups.push({
                    semantics: "FID",
                    ssrcs: `${n} ${s}`,
                  }));
            }
            planBStopReceiving({ offerRtpParameters: e }) {
              const t = e.encodings[0],
                r = t.ssrc,
                a = t.rtx && t.rtx.ssrc ? t.rtx.ssrc : void 0;
              (this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter(
                (e) => e.id !== r && e.id !== a
              )),
                a &&
                  (this._mediaObject.ssrcGroups =
                    this._mediaObject.ssrcGroups.filter(
                      (e) => e.ssrcs !== `${r} ${a}`
                    ));
            }
          };
        },
        1305: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.RemoteSdp = void 0);
          const i = s(r(7363)),
            o = r(2994),
            c = r(3471),
            d = new o.Logger("RemoteSdp");
          t.RemoteSdp = class {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              sctpParameters: a,
              plainRtpParameters: n,
              planB: s = !1,
            }) {
              if (
                ((this._mediaSections = []),
                (this._midToIndex = new Map()),
                (this._iceParameters = e),
                (this._iceCandidates = t),
                (this._dtlsParameters = r),
                (this._sctpParameters = a),
                (this._plainRtpParameters = n),
                (this._planB = s),
                (this._sdpObject = {
                  version: 0,
                  origin: {
                    address: "0.0.0.0",
                    ipVer: 4,
                    netType: "IN",
                    sessionId: 1e4,
                    sessionVersion: 0,
                    username: "mediasoup-client",
                  },
                  name: "-",
                  timing: { start: 0, stop: 0 },
                  media: [],
                }),
                e && e.iceLite && (this._sdpObject.icelite = "ice-lite"),
                r)
              ) {
                this._sdpObject.msidSemantic = { semantic: "WMS", token: "*" };
                const e = this._dtlsParameters.fingerprints.length;
                (this._sdpObject.fingerprint = {
                  type: r.fingerprints[e - 1].algorithm,
                  hash: r.fingerprints[e - 1].value,
                }),
                  (this._sdpObject.groups = [{ type: "BUNDLE", mids: "" }]);
              }
              n &&
                ((this._sdpObject.origin.address = n.ip),
                (this._sdpObject.origin.ipVer = n.ipVersion));
            }
            updateIceParameters(e) {
              d.debug("updateIceParameters() [iceParameters:%o]", e),
                (this._iceParameters = e),
                (this._sdpObject.icelite = e.iceLite ? "ice-lite" : void 0);
              for (const t of this._mediaSections) t.setIceParameters(e);
            }
            updateDtlsRole(e) {
              d.debug("updateDtlsRole() [role:%s]", e),
                (this._dtlsParameters.role = e);
              for (const t of this._mediaSections) t.setDtlsRole(e);
            }
            getNextMediaSectionIdx() {
              for (let e = 0; e < this._mediaSections.length; ++e) {
                const t = this._mediaSections[e];
                if (t.closed) return { idx: e, reuseMid: t.mid };
              }
              return { idx: this._mediaSections.length };
            }
            send({
              offerMediaObject: e,
              reuseMid: t,
              offerRtpParameters: r,
              answerRtpParameters: a,
              codecOptions: n,
              extmapAllowMixed: s = !1,
            }) {
              const i = new c.AnswerMediaSection({
                iceParameters: this._iceParameters,
                iceCandidates: this._iceCandidates,
                dtlsParameters: this._dtlsParameters,
                plainRtpParameters: this._plainRtpParameters,
                planB: this._planB,
                offerMediaObject: e,
                offerRtpParameters: r,
                answerRtpParameters: a,
                codecOptions: n,
                extmapAllowMixed: s,
              });
              t
                ? this._replaceMediaSection(i, t)
                : this._midToIndex.has(i.mid)
                ? this._replaceMediaSection(i)
                : this._addMediaSection(i);
            }
            receive({
              mid: e,
              kind: t,
              offerRtpParameters: r,
              streamId: a,
              trackId: n,
            }) {
              const s = this._midToIndex.get(e);
              let i;
              if ((void 0 !== s && (i = this._mediaSections[s]), i))
                i.planBReceive({
                  offerRtpParameters: r,
                  streamId: a,
                  trackId: n,
                }),
                  this._replaceMediaSection(i);
              else {
                i = new c.OfferMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  planB: this._planB,
                  mid: e,
                  kind: t,
                  offerRtpParameters: r,
                  streamId: a,
                  trackId: n,
                });
                const s = this._mediaSections.find((e) => e.closed);
                s
                  ? this._replaceMediaSection(i, s.mid)
                  : this._addMediaSection(i);
              }
            }
            pauseMediaSection(e) {
              this._findMediaSection(e).pause();
            }
            resumeSendingMediaSection(e) {
              this._findMediaSection(e).resume();
            }
            resumeReceivingMediaSection(e) {
              this._findMediaSection(e).resume();
            }
            disableMediaSection(e) {
              this._findMediaSection(e).disable();
            }
            closeMediaSection(e) {
              const t = this._findMediaSection(e);
              return e === this._firstMid
                ? (d.debug(
                    "closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]",
                    e
                  ),
                  this.disableMediaSection(e),
                  !1)
                : (t.close(), this._regenerateBundleMids(), !0);
            }
            muxMediaSectionSimulcast(e, t) {
              const r = this._findMediaSection(e);
              r.muxSimulcastStreams(t), this._replaceMediaSection(r);
            }
            planBStopReceiving({ mid: e, offerRtpParameters: t }) {
              const r = this._findMediaSection(e);
              r.planBStopReceiving({ offerRtpParameters: t }),
                this._replaceMediaSection(r);
            }
            sendSctpAssociation({ offerMediaObject: e }) {
              const t = new c.AnswerMediaSection({
                iceParameters: this._iceParameters,
                iceCandidates: this._iceCandidates,
                dtlsParameters: this._dtlsParameters,
                sctpParameters: this._sctpParameters,
                plainRtpParameters: this._plainRtpParameters,
                offerMediaObject: e,
              });
              this._addMediaSection(t);
            }
            receiveSctpAssociation({ oldDataChannelSpec: e = !1 } = {}) {
              const t = new c.OfferMediaSection({
                iceParameters: this._iceParameters,
                iceCandidates: this._iceCandidates,
                dtlsParameters: this._dtlsParameters,
                sctpParameters: this._sctpParameters,
                plainRtpParameters: this._plainRtpParameters,
                mid: "datachannel",
                kind: "application",
                oldDataChannelSpec: e,
              });
              this._addMediaSection(t);
            }
            getSdp() {
              return (
                this._sdpObject.origin.sessionVersion++,
                i.write(this._sdpObject)
              );
            }
            _addMediaSection(e) {
              this._firstMid || (this._firstMid = e.mid),
                this._mediaSections.push(e),
                this._midToIndex.set(e.mid, this._mediaSections.length - 1),
                this._sdpObject.media.push(e.getObject()),
                this._regenerateBundleMids();
            }
            _replaceMediaSection(e, t) {
              if ("string" == typeof t) {
                const r = this._midToIndex.get(t);
                if (void 0 === r)
                  throw new Error(`no media section found for reuseMid '${t}'`);
                const a = this._mediaSections[r];
                (this._mediaSections[r] = e),
                  this._midToIndex.delete(a.mid),
                  this._midToIndex.set(e.mid, r),
                  (this._sdpObject.media[r] = e.getObject()),
                  this._regenerateBundleMids();
              } else {
                const t = this._midToIndex.get(e.mid);
                if (void 0 === t)
                  throw new Error(`no media section found with mid '${e.mid}'`);
                (this._mediaSections[t] = e),
                  (this._sdpObject.media[t] = e.getObject());
              }
            }
            _findMediaSection(e) {
              const t = this._midToIndex.get(e);
              if (void 0 === t)
                throw new Error(`no media section found with mid '${e}'`);
              return this._mediaSections[t];
            }
            _regenerateBundleMids() {
              this._dtlsParameters &&
                (this._sdpObject.groups[0].mids = this._mediaSections
                  .filter((e) => !e.closed)
                  .map((e) => e.mid)
                  .join(" "));
            }
          };
        },
        5544: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.applyCodecParameters =
              t.getCname =
              t.extractDtlsParameters =
              t.extractRtpCapabilities =
                void 0);
          const i = s(r(7363));
          (t.extractRtpCapabilities = function ({ sdpObject: e }) {
            const t = new Map(),
              r = [];
            let a = !1,
              n = !1;
            for (const s of e.media) {
              const e = s.type;
              switch (e) {
                case "audio":
                  if (a) continue;
                  a = !0;
                  break;
                case "video":
                  if (n) continue;
                  n = !0;
                  break;
                default:
                  continue;
              }
              for (const r of s.rtp) {
                const a = {
                  kind: e,
                  mimeType: `${e}/${r.codec}`,
                  preferredPayloadType: r.payload,
                  clockRate: r.rate,
                  channels: r.encoding,
                  parameters: {},
                  rtcpFeedback: [],
                };
                t.set(a.preferredPayloadType, a);
              }
              for (const e of s.fmtp || []) {
                const r = i.parseParams(e.config),
                  a = t.get(e.payload);
                a &&
                  (r &&
                    r.hasOwnProperty("profile-level-id") &&
                    (r["profile-level-id"] = String(r["profile-level-id"])),
                  (a.parameters = r));
              }
              for (const r of s.rtcpFb || []) {
                const a = { type: r.type, parameter: r.subtype };
                if ((a.parameter || delete a.parameter, "*" !== r.payload)) {
                  const e = t.get(r.payload);
                  if (!e) continue;
                  e.rtcpFeedback.push(a);
                } else
                  for (const r of t.values())
                    r.kind !== e ||
                      /.+\/rtx$/i.test(r.mimeType) ||
                      r.rtcpFeedback.push(a);
              }
              for (const t of s.ext || []) {
                if (t["encrypt-uri"]) continue;
                const a = { kind: e, uri: t.uri, preferredId: t.value };
                r.push(a);
              }
            }
            return { codecs: Array.from(t.values()), headerExtensions: r };
          }),
            (t.extractDtlsParameters = function ({ sdpObject: e }) {
              let t,
                r = e.setup,
                a = e.fingerprint;
              if (!r || !a) {
                const t = (e.media || []).find((e) => 0 !== e.port);
                t && (r ?? (r = t.setup), a ?? (a = t.fingerprint));
              }
              if (!r)
                throw new Error(
                  "no a=setup found at SDP session or media level"
                );
              if (!a)
                throw new Error(
                  "no a=fingerprint found at SDP session or media level"
                );
              switch (r) {
                case "active":
                  t = "client";
                  break;
                case "passive":
                  t = "server";
                  break;
                case "actpass":
                  t = "auto";
              }
              return {
                role: t,
                fingerprints: [{ algorithm: a.type, value: a.hash }],
              };
            }),
            (t.getCname = function ({ offerMediaObject: e }) {
              const t = (e.ssrcs || []).find((e) => "cname" === e.attribute);
              return t ? t.value : "";
            }),
            (t.applyCodecParameters = function ({
              offerRtpParameters: e,
              answerMediaObject: t,
            }) {
              for (const r of e.codecs) {
                const e = r.mimeType.toLowerCase();
                if ("audio/opus" !== e) continue;
                if (!(t.rtp || []).find((e) => e.payload === r.payloadType))
                  continue;
                t.fmtp = t.fmtp || [];
                let a = t.fmtp.find((e) => e.payload === r.payloadType);
                a ||
                  ((a = { payload: r.payloadType, config: "" }),
                  t.fmtp.push(a));
                const n = i.parseParams(a.config);
                switch (e) {
                  case "audio/opus": {
                    const e = r.parameters["sprop-stereo"];
                    void 0 !== e && (n.stereo = e ? 1 : 0);
                    break;
                  }
                }
                a.config = "";
                for (const e of Object.keys(n))
                  a.config && (a.config += ";"), (a.config += `${e}=${n[e]}`);
              }
            });
        },
        4496: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.addLegacySimulcast = t.getRtpEncodings = void 0),
            (t.getRtpEncodings = function ({ offerMediaObject: e, track: t }) {
              let r;
              const a = new Set();
              for (const n of e.ssrcs || []) {
                if ("msid" !== n.attribute) continue;
                if (n.value.split(" ")[1] === t.id) {
                  const e = n.id;
                  a.add(e), r || (r = e);
                }
              }
              if (0 === a.size)
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t.id}]`
                );
              const n = new Map();
              for (const t of e.ssrcGroups || []) {
                if ("FID" !== t.semantics) continue;
                let [e, r] = t.ssrcs.split(/\s+/);
                (e = Number(e)),
                  (r = Number(r)),
                  a.has(e) && (a.delete(e), a.delete(r), n.set(e, r));
              }
              for (const e of a) n.set(e, null);
              const s = [];
              for (const [e, t] of n) {
                const r = { ssrc: e };
                t && (r.rtx = { ssrc: t }), s.push(r);
              }
              return s;
            }),
            (t.addLegacySimulcast = function ({
              offerMediaObject: e,
              track: t,
              numStreams: r,
            }) {
              if (r <= 1)
                throw new TypeError("numStreams must be greater than 1");
              let a, n, s;
              if (
                !(e.ssrcs || []).find((e) => {
                  if ("msid" !== e.attribute) return !1;
                  return (
                    e.value.split(" ")[1] === t.id &&
                    ((a = e.id), (s = e.value.split(" ")[0]), !0)
                  );
                })
              )
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t.id}]`
                );
              (e.ssrcGroups || []).some((e) => {
                if ("FID" !== e.semantics) return !1;
                const t = e.ssrcs.split(/\s+/);
                return Number(t[0]) === a && ((n = Number(t[1])), !0);
              });
              const i = e.ssrcs.find(
                (e) => "cname" === e.attribute && e.id === a
              );
              if (!i)
                throw new Error(
                  `a=ssrc line with cname information not found [track.id:${t.id}]`
                );
              const o = i.value,
                c = [],
                d = [];
              for (let e = 0; e < r; ++e) c.push(a + e), n && d.push(n + e);
              (e.ssrcGroups = e.ssrcGroups || []),
                (e.ssrcs = e.ssrcs || []),
                e.ssrcGroups.push({ semantics: "SIM", ssrcs: c.join(" ") });
              for (let r = 0; r < c.length; ++r) {
                const a = c[r];
                e.ssrcs.push({ id: a, attribute: "cname", value: o }),
                  e.ssrcs.push({
                    id: a,
                    attribute: "msid",
                    value: `${s} ${t.id}`,
                  });
              }
              for (let r = 0; r < d.length; ++r) {
                const a = c[r],
                  n = d[r];
                e.ssrcs.push({ id: n, attribute: "cname", value: o }),
                  e.ssrcs.push({
                    id: n,
                    attribute: "msid",
                    value: `${s} ${t.id}`,
                  }),
                  e.ssrcGroups.push({ semantics: "FID", ssrcs: `${a} ${n}` });
              }
            });
        },
        5938: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.addLegacySimulcast = t.getRtpEncodings = void 0),
            (t.getRtpEncodings = function ({ offerMediaObject: e }) {
              const t = new Set();
              for (const r of e.ssrcs || []) {
                const e = r.id;
                t.add(e);
              }
              if (0 === t.size) throw new Error("no a=ssrc lines found");
              const r = new Map();
              for (const a of e.ssrcGroups || []) {
                if ("FID" !== a.semantics) continue;
                let [e, n] = a.ssrcs.split(/\s+/);
                (e = Number(e)),
                  (n = Number(n)),
                  t.has(e) && (t.delete(e), t.delete(n), r.set(e, n));
              }
              for (const e of t) r.set(e, null);
              const a = [];
              for (const [e, t] of r) {
                const r = { ssrc: e };
                t && (r.rtx = { ssrc: t }), a.push(r);
              }
              return a;
            }),
            (t.addLegacySimulcast = function ({
              offerMediaObject: e,
              numStreams: t,
            }) {
              if (t <= 1)
                throw new TypeError("numStreams must be greater than 1");
              const r = (e.ssrcs || []).find((e) => "msid" === e.attribute);
              if (!r)
                throw new Error("a=ssrc line with msid information not found");
              const [a, n] = r.value.split(" "),
                s = r.id;
              let i;
              (e.ssrcGroups || []).some((e) => {
                if ("FID" !== e.semantics) return !1;
                const t = e.ssrcs.split(/\s+/);
                return Number(t[0]) === s && ((i = Number(t[1])), !0);
              });
              const o = e.ssrcs.find((e) => "cname" === e.attribute);
              if (!o)
                throw new Error("a=ssrc line with cname information not found");
              const c = o.value,
                d = [],
                l = [];
              for (let e = 0; e < t; ++e) d.push(s + e), i && l.push(i + e);
              (e.ssrcGroups = []),
                (e.ssrcs = []),
                e.ssrcGroups.push({ semantics: "SIM", ssrcs: d.join(" ") });
              for (let t = 0; t < d.length; ++t) {
                const r = d[t];
                e.ssrcs.push({ id: r, attribute: "cname", value: c }),
                  e.ssrcs.push({
                    id: r,
                    attribute: "msid",
                    value: `${a} ${n}`,
                  });
              }
              for (let t = 0; t < l.length; ++t) {
                const r = d[t],
                  s = l[t];
                e.ssrcs.push({ id: s, attribute: "cname", value: c }),
                  e.ssrcs.push({
                    id: s,
                    attribute: "msid",
                    value: `${a} ${n}`,
                  }),
                  e.ssrcGroups.push({ semantics: "FID", ssrcs: `${r} ${s}` });
              }
            });
        },
        76: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              },
            i =
              (this && this.__importDefault) ||
              function (e) {
                return e && e.__esModule ? e : { default: e };
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.debug =
              t.parseScalabilityMode =
              t.detectDevice =
              t.Device =
              t.version =
              t.types =
                void 0);
          const o = i(r(7833));
          t.debug = o.default;
          const c = r(6004);
          Object.defineProperty(t, "Device", {
            enumerable: !0,
            get: function () {
              return c.Device;
            },
          }),
            Object.defineProperty(t, "detectDevice", {
              enumerable: !0,
              get: function () {
                return c.detectDevice;
              },
            });
          const d = s(r(8057));
          (t.types = d), (t.version = "3.7.7");
          var l = r(3303);
          Object.defineProperty(t, "parseScalabilityMode", {
            enumerable: !0,
            get: function () {
              return l.parse;
            },
          });
        },
        8046: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            s =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      a(t, e, r);
                return n(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.canReceive =
              t.canSend =
              t.generateProbatorRtpParameters =
              t.reduceCodecs =
              t.getSendingRemoteRtpParameters =
              t.getSendingRtpParameters =
              t.getRecvRtpCapabilities =
              t.getExtendedRtpCapabilities =
              t.validateSctpCapabilities =
              t.validateSctpStreamParameters =
              t.validateRtpParameters =
              t.validateRtpCapabilities =
                void 0);
          const i = s(r(3200)),
            o = s(r(1765));
          function c(e) {
            if ("object" != typeof e)
              throw new TypeError("params is not an object");
            if (e.mid && "string" != typeof e.mid)
              throw new TypeError("params.mid is not a string");
            if (!Array.isArray(e.codecs))
              throw new TypeError("missing params.codecs");
            for (const t of e.codecs) u(t);
            if (e.headerExtensions && !Array.isArray(e.headerExtensions))
              throw new TypeError("params.headerExtensions is not an array");
            e.headerExtensions || (e.headerExtensions = []);
            for (const t of e.headerExtensions) h(t);
            if (e.encodings && !Array.isArray(e.encodings))
              throw new TypeError("params.encodings is not an array");
            e.encodings || (e.encodings = []);
            for (const t of e.encodings) m(t);
            if (e.rtcp && "object" != typeof e.rtcp)
              throw new TypeError("params.rtcp is not an object");
            e.rtcp || (e.rtcp = {}),
              (function (e) {
                if ("object" != typeof e)
                  throw new TypeError("rtcp is not an object");
                if (e.cname && "string" != typeof e.cname)
                  throw new TypeError("invalid rtcp.cname");
                (e.reducedSize && "boolean" == typeof e.reducedSize) ||
                  (e.reducedSize = !0);
              })(e.rtcp);
          }
          function d(e) {
            const t = new RegExp("^(audio|video)/(.+)", "i");
            if ("object" != typeof e)
              throw new TypeError("codec is not an object");
            if (!e.mimeType || "string" != typeof e.mimeType)
              throw new TypeError("missing codec.mimeType");
            const r = t.exec(e.mimeType);
            if (!r) throw new TypeError("invalid codec.mimeType");
            if (
              ((e.kind = r[1].toLowerCase()),
              e.preferredPayloadType &&
                "number" != typeof e.preferredPayloadType)
            )
              throw new TypeError("invalid codec.preferredPayloadType");
            if ("number" != typeof e.clockRate)
              throw new TypeError("missing codec.clockRate");
            "audio" === e.kind
              ? "number" != typeof e.channels && (e.channels = 1)
              : delete e.channels,
              (e.parameters && "object" == typeof e.parameters) ||
                (e.parameters = {});
            for (const t of Object.keys(e.parameters)) {
              let r = e.parameters[t];
              if (
                (void 0 === r && ((e.parameters[t] = ""), (r = "")),
                "string" != typeof r && "number" != typeof r)
              )
                throw new TypeError(
                  `invalid codec parameter [key:${t}s, value:${r}]`
                );
              if ("apt" === t && "number" != typeof r)
                throw new TypeError("invalid codec apt parameter");
            }
            (e.rtcpFeedback && Array.isArray(e.rtcpFeedback)) ||
              (e.rtcpFeedback = []);
            for (const t of e.rtcpFeedback) l(t);
          }
          function l(e) {
            if ("object" != typeof e)
              throw new TypeError("fb is not an object");
            if (!e.type || "string" != typeof e.type)
              throw new TypeError("missing fb.type");
            (e.parameter && "string" == typeof e.parameter) ||
              (e.parameter = "");
          }
          function p(e) {
            if ("object" != typeof e)
              throw new TypeError("ext is not an object");
            if ("audio" !== e.kind && "video" !== e.kind)
              throw new TypeError("invalid ext.kind");
            if (!e.uri || "string" != typeof e.uri)
              throw new TypeError("missing ext.uri");
            if ("number" != typeof e.preferredId)
              throw new TypeError("missing ext.preferredId");
            if (e.preferredEncrypt && "boolean" != typeof e.preferredEncrypt)
              throw new TypeError("invalid ext.preferredEncrypt");
            if (
              (e.preferredEncrypt || (e.preferredEncrypt = !1),
              e.direction && "string" != typeof e.direction)
            )
              throw new TypeError("invalid ext.direction");
            e.direction || (e.direction = "sendrecv");
          }
          function u(e) {
            const t = new RegExp("^(audio|video)/(.+)", "i");
            if ("object" != typeof e)
              throw new TypeError("codec is not an object");
            if (!e.mimeType || "string" != typeof e.mimeType)
              throw new TypeError("missing codec.mimeType");
            const r = t.exec(e.mimeType);
            if (!r) throw new TypeError("invalid codec.mimeType");
            if ("number" != typeof e.payloadType)
              throw new TypeError("missing codec.payloadType");
            if ("number" != typeof e.clockRate)
              throw new TypeError("missing codec.clockRate");
            "audio" === r[1].toLowerCase()
              ? "number" != typeof e.channels && (e.channels = 1)
              : delete e.channels,
              (e.parameters && "object" == typeof e.parameters) ||
                (e.parameters = {});
            for (const t of Object.keys(e.parameters)) {
              let r = e.parameters[t];
              if (
                (void 0 === r && ((e.parameters[t] = ""), (r = "")),
                "string" != typeof r && "number" != typeof r)
              )
                throw new TypeError(
                  `invalid codec parameter [key:${t}s, value:${r}]`
                );
              if ("apt" === t && "number" != typeof r)
                throw new TypeError("invalid codec apt parameter");
            }
            (e.rtcpFeedback && Array.isArray(e.rtcpFeedback)) ||
              (e.rtcpFeedback = []);
            for (const t of e.rtcpFeedback) l(t);
          }
          function h(e) {
            if ("object" != typeof e)
              throw new TypeError("ext is not an object");
            if (!e.uri || "string" != typeof e.uri)
              throw new TypeError("missing ext.uri");
            if ("number" != typeof e.id) throw new TypeError("missing ext.id");
            if (e.encrypt && "boolean" != typeof e.encrypt)
              throw new TypeError("invalid ext.encrypt");
            e.encrypt || (e.encrypt = !1),
              (e.parameters && "object" == typeof e.parameters) ||
                (e.parameters = {});
            for (const t of Object.keys(e.parameters)) {
              let r = e.parameters[t];
              if (
                (void 0 === r && ((e.parameters[t] = ""), (r = "")),
                "string" != typeof r && "number" != typeof r)
              )
                throw new TypeError("invalid header extension parameter");
            }
          }
          function m(e) {
            if ("object" != typeof e)
              throw new TypeError("encoding is not an object");
            if (e.ssrc && "number" != typeof e.ssrc)
              throw new TypeError("invalid encoding.ssrc");
            if (e.rid && "string" != typeof e.rid)
              throw new TypeError("invalid encoding.rid");
            if (e.rtx && "object" != typeof e.rtx)
              throw new TypeError("invalid encoding.rtx");
            if (e.rtx && "number" != typeof e.rtx.ssrc)
              throw new TypeError("missing encoding.rtx.ssrc");
            if (
              ((e.dtx && "boolean" == typeof e.dtx) || (e.dtx = !1),
              e.scalabilityMode && "string" != typeof e.scalabilityMode)
            )
              throw new TypeError("invalid encoding.scalabilityMode");
          }
          function f(e) {
            return !!e && /.+\/rtx$/i.test(e.mimeType);
          }
          function g(e, t, { strict: r = !1, modify: a = !1 } = {}) {
            const n = e.mimeType.toLowerCase();
            if (n !== t.mimeType.toLowerCase()) return !1;
            if (e.clockRate !== t.clockRate) return !1;
            if (e.channels !== t.channels) return !1;
            switch (n) {
              case "video/h264":
                if (r) {
                  if (
                    (e.parameters["packetization-mode"] || 0) !==
                    (t.parameters["packetization-mode"] || 0)
                  )
                    return !1;
                  if (!i.isSameProfile(e.parameters, t.parameters)) return !1;
                  let r;
                  try {
                    r = i.generateProfileLevelIdStringForAnswer(
                      e.parameters,
                      t.parameters
                    );
                  } catch (e) {
                    return !1;
                  }
                  a &&
                    (r
                      ? ((e.parameters["profile-level-id"] = r),
                        (t.parameters["profile-level-id"] = r))
                      : (delete e.parameters["profile-level-id"],
                        delete t.parameters["profile-level-id"]));
                }
                break;
              case "video/vp9":
                if (r) {
                  if (
                    (e.parameters["profile-id"] || 0) !==
                    (t.parameters["profile-id"] || 0)
                  )
                    return !1;
                }
            }
            return !0;
          }
          function _(e, t) {
            return (!e.kind || !t.kind || e.kind === t.kind) && e.uri === t.uri;
          }
          function v(e, t) {
            const r = [];
            for (const a of e.rtcpFeedback || []) {
              const e = (t.rtcpFeedback || []).find(
                (e) =>
                  e.type === a.type &&
                  (e.parameter === a.parameter ||
                    (!e.parameter && !a.parameter))
              );
              e && r.push(e);
            }
            return r;
          }
          (t.validateRtpCapabilities = function (e) {
            if ("object" != typeof e)
              throw new TypeError("caps is not an object");
            if (e.codecs && !Array.isArray(e.codecs))
              throw new TypeError("caps.codecs is not an array");
            e.codecs || (e.codecs = []);
            for (const t of e.codecs) d(t);
            if (e.headerExtensions && !Array.isArray(e.headerExtensions))
              throw new TypeError("caps.headerExtensions is not an array");
            e.headerExtensions || (e.headerExtensions = []);
            for (const t of e.headerExtensions) p(t);
          }),
            (t.validateRtpParameters = c),
            (t.validateSctpStreamParameters = function (e) {
              if ("object" != typeof e)
                throw new TypeError("params is not an object");
              if ("number" != typeof e.streamId)
                throw new TypeError("missing params.streamId");
              let t = !1;
              if (
                ("boolean" == typeof e.ordered ? (t = !0) : (e.ordered = !0),
                e.maxPacketLifeTime && "number" != typeof e.maxPacketLifeTime)
              )
                throw new TypeError("invalid params.maxPacketLifeTime");
              if (e.maxRetransmits && "number" != typeof e.maxRetransmits)
                throw new TypeError("invalid params.maxRetransmits");
              if (e.maxPacketLifeTime && e.maxRetransmits)
                throw new TypeError(
                  "cannot provide both maxPacketLifeTime and maxRetransmits"
                );
              if (t && e.ordered && (e.maxPacketLifeTime || e.maxRetransmits))
                throw new TypeError(
                  "cannot be ordered with maxPacketLifeTime or maxRetransmits"
                );
              if (
                (t ||
                  (!e.maxPacketLifeTime && !e.maxRetransmits) ||
                  (e.ordered = !1),
                e.label && "string" != typeof e.label)
              )
                throw new TypeError("invalid params.label");
              if (e.protocol && "string" != typeof e.protocol)
                throw new TypeError("invalid params.protocol");
            }),
            (t.validateSctpCapabilities = function (e) {
              if ("object" != typeof e)
                throw new TypeError("caps is not an object");
              if (!e.numStreams || "object" != typeof e.numStreams)
                throw new TypeError("missing caps.numStreams");
              !(function (e) {
                if ("object" != typeof e)
                  throw new TypeError("numStreams is not an object");
                if ("number" != typeof e.OS)
                  throw new TypeError("missing numStreams.OS");
                if ("number" != typeof e.MIS)
                  throw new TypeError("missing numStreams.MIS");
              })(e.numStreams);
            }),
            (t.getExtendedRtpCapabilities = function (e, t) {
              const r = { codecs: [], headerExtensions: [] };
              for (const a of t.codecs || []) {
                if (f(a)) continue;
                const t = (e.codecs || []).find((e) =>
                  g(e, a, { strict: !0, modify: !0 })
                );
                if (!t) continue;
                const n = {
                  mimeType: t.mimeType,
                  kind: t.kind,
                  clockRate: t.clockRate,
                  channels: t.channels,
                  localPayloadType: t.preferredPayloadType,
                  localRtxPayloadType: void 0,
                  remotePayloadType: a.preferredPayloadType,
                  remoteRtxPayloadType: void 0,
                  localParameters: t.parameters,
                  remoteParameters: a.parameters,
                  rtcpFeedback: v(t, a),
                };
                r.codecs.push(n);
              }
              for (const a of r.codecs) {
                const r = e.codecs.find(
                    (e) => f(e) && e.parameters.apt === a.localPayloadType
                  ),
                  n = t.codecs.find(
                    (e) => f(e) && e.parameters.apt === a.remotePayloadType
                  );
                r &&
                  n &&
                  ((a.localRtxPayloadType = r.preferredPayloadType),
                  (a.remoteRtxPayloadType = n.preferredPayloadType));
              }
              for (const a of t.headerExtensions) {
                const t = e.headerExtensions.find((e) => _(e, a));
                if (!t) continue;
                const n = {
                  kind: a.kind,
                  uri: a.uri,
                  sendId: t.preferredId,
                  recvId: a.preferredId,
                  encrypt: t.preferredEncrypt,
                  direction: "sendrecv",
                };
                switch (a.direction) {
                  case "sendrecv":
                    n.direction = "sendrecv";
                    break;
                  case "recvonly":
                    n.direction = "sendonly";
                    break;
                  case "sendonly":
                    n.direction = "recvonly";
                    break;
                  case "inactive":
                    n.direction = "inactive";
                }
                r.headerExtensions.push(n);
              }
              return r;
            }),
            (t.getRecvRtpCapabilities = function (e) {
              const t = { codecs: [], headerExtensions: [] };
              for (const r of e.codecs) {
                const e = {
                  mimeType: r.mimeType,
                  kind: r.kind,
                  preferredPayloadType: r.remotePayloadType,
                  clockRate: r.clockRate,
                  channels: r.channels,
                  parameters: r.localParameters,
                  rtcpFeedback: r.rtcpFeedback,
                };
                if ((t.codecs.push(e), !r.remoteRtxPayloadType)) continue;
                const a = {
                  mimeType: `${r.kind}/rtx`,
                  kind: r.kind,
                  preferredPayloadType: r.remoteRtxPayloadType,
                  clockRate: r.clockRate,
                  parameters: { apt: r.remotePayloadType },
                  rtcpFeedback: [],
                };
                t.codecs.push(a);
              }
              for (const r of e.headerExtensions) {
                if ("sendrecv" !== r.direction && "recvonly" !== r.direction)
                  continue;
                const e = {
                  kind: r.kind,
                  uri: r.uri,
                  preferredId: r.recvId,
                  preferredEncrypt: r.encrypt,
                  direction: r.direction,
                };
                t.headerExtensions.push(e);
              }
              return t;
            }),
            (t.getSendingRtpParameters = function (e, t) {
              const r = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {},
              };
              for (const a of t.codecs) {
                if (a.kind !== e) continue;
                const t = {
                  mimeType: a.mimeType,
                  payloadType: a.localPayloadType,
                  clockRate: a.clockRate,
                  channels: a.channels,
                  parameters: a.localParameters,
                  rtcpFeedback: a.rtcpFeedback,
                };
                if ((r.codecs.push(t), a.localRtxPayloadType)) {
                  const e = {
                    mimeType: `${a.kind}/rtx`,
                    payloadType: a.localRtxPayloadType,
                    clockRate: a.clockRate,
                    parameters: { apt: a.localPayloadType },
                    rtcpFeedback: [],
                  };
                  r.codecs.push(e);
                }
              }
              for (const a of t.headerExtensions) {
                if (
                  (a.kind && a.kind !== e) ||
                  ("sendrecv" !== a.direction && "sendonly" !== a.direction)
                )
                  continue;
                const t = {
                  uri: a.uri,
                  id: a.sendId,
                  encrypt: a.encrypt,
                  parameters: {},
                };
                r.headerExtensions.push(t);
              }
              return r;
            }),
            (t.getSendingRemoteRtpParameters = function (e, t) {
              const r = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {},
              };
              for (const a of t.codecs) {
                if (a.kind !== e) continue;
                const t = {
                  mimeType: a.mimeType,
                  payloadType: a.localPayloadType,
                  clockRate: a.clockRate,
                  channels: a.channels,
                  parameters: a.remoteParameters,
                  rtcpFeedback: a.rtcpFeedback,
                };
                if ((r.codecs.push(t), a.localRtxPayloadType)) {
                  const e = {
                    mimeType: `${a.kind}/rtx`,
                    payloadType: a.localRtxPayloadType,
                    clockRate: a.clockRate,
                    parameters: { apt: a.localPayloadType },
                    rtcpFeedback: [],
                  };
                  r.codecs.push(e);
                }
              }
              for (const a of t.headerExtensions) {
                if (
                  (a.kind && a.kind !== e) ||
                  ("sendrecv" !== a.direction && "sendonly" !== a.direction)
                )
                  continue;
                const t = {
                  uri: a.uri,
                  id: a.sendId,
                  encrypt: a.encrypt,
                  parameters: {},
                };
                r.headerExtensions.push(t);
              }
              if (
                r.headerExtensions.some(
                  (e) =>
                    "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" ===
                    e.uri
                )
              )
                for (const e of r.codecs)
                  e.rtcpFeedback = (e.rtcpFeedback || []).filter(
                    (e) => "goog-remb" !== e.type
                  );
              else if (
                r.headerExtensions.some(
                  (e) =>
                    "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" ===
                    e.uri
                )
              )
                for (const e of r.codecs)
                  e.rtcpFeedback = (e.rtcpFeedback || []).filter(
                    (e) => "transport-cc" !== e.type
                  );
              else
                for (const e of r.codecs)
                  e.rtcpFeedback = (e.rtcpFeedback || []).filter(
                    (e) => "transport-cc" !== e.type && "goog-remb" !== e.type
                  );
              return r;
            }),
            (t.reduceCodecs = function (e, t) {
              const r = [];
              if (t) {
                for (let a = 0; a < e.length; ++a)
                  if (g(e[a], t, { strict: !0 })) {
                    r.push(e[a]), f(e[a + 1]) && r.push(e[a + 1]);
                    break;
                  }
                if (0 === r.length)
                  throw new TypeError("no matching codec found");
              } else r.push(e[0]), f(e[1]) && r.push(e[1]);
              return r;
            }),
            (t.generateProbatorRtpParameters = function (e) {
              c((e = o.clone(e)));
              const t = {
                mid: "probator",
                codecs: [],
                headerExtensions: [],
                encodings: [{ ssrc: 1234 }],
                rtcp: { cname: "probator" },
              };
              return (
                t.codecs.push(e.codecs[0]),
                (t.codecs[0].payloadType = 127),
                (t.headerExtensions = e.headerExtensions),
                t
              );
            }),
            (t.canSend = function (e, t) {
              return t.codecs.some((t) => t.kind === e);
            }),
            (t.canReceive = function (e, t) {
              if ((c(e), 0 === e.codecs.length)) return !1;
              const r = e.codecs[0];
              return t.codecs.some(
                (e) => e.remotePayloadType === r.payloadType
              );
            });
        },
        3303: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.parse = void 0);
          const r = new RegExp("^[LS]([1-9]\\d{0,1})T([1-9]\\d{0,1})");
          t.parse = function (e) {
            const t = r.exec(e || "");
            return t
              ? { spatialLayers: Number(t[1]), temporalLayers: Number(t[2]) }
              : { spatialLayers: 1, temporalLayers: 1 };
          };
        },
        8057: function (e, t, r) {
          "use strict";
          var a =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, a) {
                    void 0 === a && (a = r);
                    var n = Object.getOwnPropertyDescriptor(t, r);
                    (n &&
                      !("get" in n
                        ? !t.__esModule
                        : n.writable || n.configurable)) ||
                      (n = {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      }),
                      Object.defineProperty(e, a, n);
                  }
                : function (e, t, r, a) {
                    void 0 === a && (a = r), (e[a] = t[r]);
                  }),
            n =
              (this && this.__exportStar) ||
              function (e, t) {
                for (var r in e)
                  "default" === r ||
                    Object.prototype.hasOwnProperty.call(t, r) ||
                    a(t, e, r);
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            n(r(6004), t),
            n(r(5601), t),
            n(r(9792), t),
            n(r(3518), t),
            n(r(7504), t),
            n(r(9166), t),
            n(r(5370), t),
            n(r(4160), t),
            n(r(521), t),
            n(r(4893), t);
        },
        1765: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.deepFreeze = t.generateRandomNumber = t.clone = void 0),
            (t.clone = function (e) {
              return void 0 === e
                ? void 0
                : Number.isNaN(e)
                ? NaN
                : "function" == typeof structuredClone
                ? structuredClone(e)
                : JSON.parse(JSON.stringify(e));
            }),
            (t.generateRandomNumber = function () {
              return Math.round(1e7 * Math.random());
            }),
            (t.deepFreeze = function e(t) {
              const r = Reflect.ownKeys(t);
              for (const a of r) {
                const r = t[a];
                ((r && "object" == typeof r) || "function" == typeof r) && e(r);
              }
              return Object.freeze(t);
            });
        },
        6585: (e) => {
          var t = 1e3,
            r = 60 * t,
            a = 60 * r,
            n = 24 * a,
            s = 7 * n,
            i = 365.25 * n;
          function o(e, t, r, a) {
            var n = t >= 1.5 * r;
            return Math.round(e / r) + " " + a + (n ? "s" : "");
          }
          e.exports = function (e, c) {
            c = c || {};
            var d = typeof e;
            if ("string" === d && e.length > 0)
              return (function (e) {
                if ((e = String(e)).length > 100) return;
                var o =
                  /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
                    e
                  );
                if (!o) return;
                var c = parseFloat(o[1]);
                switch ((o[2] || "ms").toLowerCase()) {
                  case "years":
                  case "year":
                  case "yrs":
                  case "yr":
                  case "y":
                    return c * i;
                  case "weeks":
                  case "week":
                  case "w":
                    return c * s;
                  case "days":
                  case "day":
                  case "d":
                    return c * n;
                  case "hours":
                  case "hour":
                  case "hrs":
                  case "hr":
                  case "h":
                    return c * a;
                  case "minutes":
                  case "minute":
                  case "mins":
                  case "min":
                  case "m":
                    return c * r;
                  case "seconds":
                  case "second":
                  case "secs":
                  case "sec":
                  case "s":
                    return c * t;
                  case "milliseconds":
                  case "millisecond":
                  case "msecs":
                  case "msec":
                  case "ms":
                    return c;
                  default:
                    return;
                }
              })(e);
            if ("number" === d && isFinite(e))
              return c.long
                ? (function (e) {
                    var s = Math.abs(e);
                    if (s >= n) return o(e, s, n, "day");
                    if (s >= a) return o(e, s, a, "hour");
                    if (s >= r) return o(e, s, r, "minute");
                    if (s >= t) return o(e, s, t, "second");
                    return e + " ms";
                  })(e)
                : (function (e) {
                    var s = Math.abs(e);
                    if (s >= n) return Math.round(e / n) + "d";
                    if (s >= a) return Math.round(e / a) + "h";
                    if (s >= r) return Math.round(e / r) + "m";
                    if (s >= t) return Math.round(e / t) + "s";
                    return e + "ms";
                  })(e);
            throw new Error(
              "val is not a non-empty string or a valid number. val=" +
                JSON.stringify(e)
            );
          };
        },
        4252: (e, t, r) => {
          const { EventEmitter: a } = r(7007),
            n = r(3612);
          e.exports = class extends a {
            constructor(e) {
              super(),
                this.setMaxListeners(1 / 0),
                (this._logger = e || new n("EnhancedEventEmitter"));
            }
            safeEmit(e, ...t) {
              try {
                this.emit(e, ...t);
              } catch (t) {
                this._logger.error(
                  "safeEmit() | event listener threw an error [event:%s]:%o",
                  e,
                  t
                );
              }
            }
            async safeEmitAsPromise(e, ...t) {
              return new Promise((r, a) => {
                this.safeEmit(e, ...t, r, a);
              });
            }
          };
        },
        3612: (e, t, r) => {
          const a = r(7833),
            n = "protoo-client";
          e.exports = class {
            constructor(e) {
              e
                ? ((this._debug = a(`${n}:${e}`)),
                  (this._warn = a(`${n}:WARN:${e}`)),
                  (this._error = a(`${n}:ERROR:${e}`)))
                : ((this._debug = a(n)),
                  (this._warn = a(`${n}:WARN`)),
                  (this._error = a(`${n}:ERROR`))),
                (this._debug.log = console.info.bind(console)),
                (this._warn.log = console.warn.bind(console)),
                (this._error.log = console.error.bind(console));
            }
            get debug() {
              return this._debug;
            }
            get warn() {
              return this._warn;
            }
            get error() {
              return this._error;
            }
          };
        },
        3241: (e, t, r) => {
          const a = r(3612),
            { generateRandomNumber: n } = r(9007),
            s = new a("Message");
          e.exports = class {
            static parse(e) {
              let t;
              const r = {};
              try {
                t = JSON.parse(e);
              } catch (e) {
                return void s.error("parse() | invalid JSON: %s", e);
              }
              if ("object" == typeof t && !Array.isArray(t)) {
                if (t.request) {
                  if (((r.request = !0), "string" != typeof t.method))
                    return void s.error(
                      "parse() | missing/invalid method field"
                    );
                  if ("number" != typeof t.id)
                    return void s.error("parse() | missing/invalid id field");
                  (r.id = t.id), (r.method = t.method), (r.data = t.data || {});
                } else if (t.response) {
                  if (((r.response = !0), "number" != typeof t.id))
                    return void s.error("parse() | missing/invalid id field");
                  (r.id = t.id),
                    t.ok
                      ? ((r.ok = !0), (r.data = t.data || {}))
                      : ((r.ok = !1),
                        (r.errorCode = t.errorCode),
                        (r.errorReason = t.errorReason));
                } else {
                  if (!t.notification)
                    return void s.error(
                      "parse() | missing request/response field"
                    );
                  if (((r.notification = !0), "string" != typeof t.method))
                    return void s.error(
                      "parse() | missing/invalid method field"
                    );
                  (r.method = t.method), (r.data = t.data || {});
                }
                return r;
              }
              s.error("parse() | not an object");
            }
            static createRequest(e, t) {
              return { request: !0, id: n(), method: e, data: t || {} };
            }
            static createSuccessResponse(e, t) {
              return { response: !0, id: e.id, ok: !0, data: t || {} };
            }
            static createErrorResponse(e, t, r) {
              return {
                response: !0,
                id: e.id,
                ok: !1,
                errorCode: t,
                errorReason: r,
              };
            }
            static createNotification(e, t) {
              return { notification: !0, method: e, data: t || {} };
            }
          };
        },
        7204: (e, t, r) => {
          const a = r(3612),
            n = r(4252),
            s = r(3241),
            i = new a("Peer");
          e.exports = class extends n {
            constructor(e) {
              super(i),
                i.debug("constructor()"),
                (this._closed = !1),
                (this._transport = e),
                (this._connected = !1),
                (this._data = {}),
                (this._sents = new Map()),
                this._handleTransport();
            }
            get closed() {
              return this._closed;
            }
            get connected() {
              return this._connected;
            }
            get data() {
              return this._data;
            }
            set data(e) {
              throw new Error("cannot override data object");
            }
            close() {
              if (!this._closed) {
                i.debug("close()"),
                  (this._closed = !0),
                  (this._connected = !1),
                  this._transport.close();
                for (const e of this._sents.values()) e.close();
                this.safeEmit("close");
              }
            }
            async request(e, t = void 0) {
              const r = s.createRequest(e, t);
              return (
                this._logger.debug("request() [method:%s, id:%s]", e, r.id),
                await this._transport.send(r),
                new Promise((e, t) => {
                  const a = 1500 * (15 + 0.1 * this._sents.size),
                    n = {
                      id: r.id,
                      method: r.method,
                      resolve: (t) => {
                        this._sents.delete(r.id) &&
                          (clearTimeout(n.timer), e(t));
                      },
                      reject: (e) => {
                        this._sents.delete(r.id) &&
                          (clearTimeout(n.timer), t(e));
                      },
                      timer: setTimeout(() => {
                        this._sents.delete(r.id) &&
                          t(new Error("request timeout"));
                      }, a),
                      close: () => {
                        clearTimeout(n.timer), t(new Error("peer closed"));
                      },
                    };
                  this._sents.set(r.id, n);
                })
              );
            }
            async notify(e, t = void 0) {
              const r = s.createNotification(e, t);
              this._logger.debug("notify() [method:%s]", e),
                await this._transport.send(r);
            }
            _handleTransport() {
              if (this._transport.closed)
                return (
                  (this._closed = !0),
                  void setTimeout(() => {
                    this._closed ||
                      ((this._connected = !1), this.safeEmit("close"));
                  })
                );
              this._transport.on("open", () => {
                this._closed ||
                  (i.debug('emit "open"'),
                  (this._connected = !0),
                  this.safeEmit("open"));
              }),
                this._transport.on("disconnected", () => {
                  this._closed ||
                    (i.debug('emit "disconnected"'),
                    (this._connected = !1),
                    this.safeEmit("disconnected"));
                }),
                this._transport.on("failed", (e) => {
                  this._closed ||
                    (i.debug('emit "failed" [currentAttempt:%s]', e),
                    (this._connected = !1),
                    this.safeEmit("failed", e));
                }),
                this._transport.on("close", () => {
                  this._closed ||
                    ((this._closed = !0),
                    i.debug('emit "close"'),
                    (this._connected = !1),
                    this.safeEmit("close"));
                }),
                this._transport.on("message", (e) => {
                  e.request
                    ? this._handleRequest(e)
                    : e.response
                    ? this._handleResponse(e)
                    : e.notification && this._handleNotification(e);
                });
            }
            _handleRequest(e) {
              try {
                this.emit(
                  "request",
                  e,
                  (t) => {
                    const r = s.createSuccessResponse(e, t);
                    this._transport.send(r).catch(() => {});
                  },
                  (t, r) => {
                    t instanceof Error
                      ? ((r = t.message), (t = 500))
                      : "number" == typeof t &&
                        r instanceof Error &&
                        (r = r.message);
                    const a = s.createErrorResponse(e, t, r);
                    this._transport.send(a).catch(() => {});
                  }
                );
              } catch (t) {
                const r = s.createErrorResponse(e, 500, String(t));
                this._transport.send(r).catch(() => {});
              }
            }
            _handleResponse(e) {
              const t = this._sents.get(e.id);
              if (t)
                if (e.ok) t.resolve(e.data);
                else {
                  const r = new Error(e.errorReason);
                  (r.code = e.errorCode), t.reject(r);
                }
              else
                i.error(
                  "received response does not match any sent request [id:%s]",
                  e.id
                );
            }
            _handleNotification(e) {
              this.safeEmit("notification", e);
            }
          };
        },
        9566: (e, t, r) => {
          const { version: a } = r(7949),
            n = r(7204),
            s = r(3545);
          (t.xM = n), (t.TJ = s);
        },
        3545: (e, t, r) => {
          const a = r(952).w3cwebsocket,
            n = r(5617),
            s = r(3612),
            i = r(4252),
            o = r(3241),
            c = { retries: 10, factor: 2, minTimeout: 1e3, maxTimeout: 8e3 },
            d = new s("WebSocketTransport");
          e.exports = class extends i {
            constructor(e, t) {
              super(d),
                d.debug("constructor() [url:%s, options:%o]", e, t),
                (this._closed = !1),
                (this._url = e),
                (this._options = t || {}),
                (this._ws = null),
                this._runWebSocket();
            }
            get closed() {
              return this._closed;
            }
            close() {
              if (!this._closed) {
                d.debug("close()"), (this._closed = !0), this.safeEmit("close");
                try {
                  (this._ws.onopen = null),
                    (this._ws.onclose = null),
                    (this._ws.onerror = null),
                    (this._ws.onmessage = null),
                    this._ws.close();
                } catch (e) {
                  d.error("close() | error closing the WebSocket: %o", e);
                }
              }
            }
            async send(e) {
              if (this._closed) throw new Error("transport closed");
              try {
                this._ws.send(JSON.stringify(e));
              } catch (e) {
                throw (d.warn("send() failed:%o", e), e);
              }
            }
            _runWebSocket() {
              const e = n.operation(this._options.retry || c);
              let t = !1;
              e.attempt((r) => {
                this._closed
                  ? e.stop()
                  : (d.debug("_runWebSocket() [currentAttempt:%s]", r),
                    (this._ws = new a(
                      this._url,
                      "protoo",
                      this._options.origin,
                      this._options.headers,
                      this._options.requestOptions,
                      this._options.clientConfig
                    )),
                    (this._ws.onopen = () => {
                      this._closed || ((t = !0), this.safeEmit("open"));
                    }),
                    (this._ws.onclose = (a) => {
                      if (!this._closed) {
                        if (
                          (d.warn(
                            'WebSocket "close" event [wasClean:%s, code:%s, reason:"%s"]',
                            a.wasClean,
                            a.code,
                            a.reason
                          ),
                          4e3 !== a.code)
                        ) {
                          if (t) {
                            if (
                              (e.stop(),
                              this.safeEmit("disconnected"),
                              this._closed)
                            )
                              return;
                            return void this._runWebSocket();
                          }
                          if ((this.safeEmit("failed", r), this._closed))
                            return;
                          if (e.retry(!0)) return;
                        }
                        (this._closed = !0), this.safeEmit("close");
                      }
                    }),
                    (this._ws.onerror = () => {
                      this._closed || d.error('WebSocket "error" event');
                    }),
                    (this._ws.onmessage = (e) => {
                      if (this._closed) return;
                      const t = o.parse(e.data);
                      t &&
                        (0 !== this.listenerCount("message")
                          ? this.safeEmit("message", t)
                          : d.error(
                              'no listeners for WebSocket "message" event, ignoring received message'
                            ));
                    }));
              });
            }
          };
        },
        9007: (e, t) => {
          t.generateRandomNumber = function () {
            return Math.round(1e7 * Math.random());
          };
        },
        9596: (e, t, r) => {
          let a;
          e.exports =
            "function" == typeof queueMicrotask
              ? queueMicrotask.bind("undefined" != typeof window ? window : r.g)
              : (e) =>
                  (a || (a = Promise.resolve())).then(e).catch((e) =>
                    setTimeout(() => {
                      throw e;
                    }, 0)
                  );
        },
        2211: (e) => {
          "use strict";
          e.exports = function (e) {
            var t,
              r,
              a = "",
              n = (e = (function (e) {
                return (
                  e || (e = {}),
                  {
                    length: e.length || 8,
                    numeric: "boolean" != typeof e.numeric || e.numeric,
                    letters: "boolean" != typeof e.letters || e.letters,
                    special: "boolean" == typeof e.special && e.special,
                    exclude: Array.isArray(e.exclude) ? e.exclude : [],
                  }
                );
              })(e)).length,
              s =
                (e.exclude,
                (function (e) {
                  var t = "";
                  e.numeric && (t += "0123456789"),
                    e.letters &&
                      (t +=
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"),
                    e.special && (t += "!$%^&*()_+|~-=`{}[]:;<>?,./");
                  for (var r = 0; r <= e.exclude.length; r++)
                    t = t.replace(e.exclude[r], "");
                  return t;
                })(e));
            for (t = 1; t <= n; t++)
              a += s.substring(
                (r = Math.floor(Math.random() * s.length)),
                r + 1
              );
            return a;
          };
        },
        5617: (e, t, r) => {
          e.exports = r(8303);
        },
        8303: (e, t, r) => {
          var a = r(3961);
          (t.operation = function (e) {
            var r = t.timeouts(e);
            return new a(r, {
              forever: e && e.forever,
              unref: e && e.unref,
              maxRetryTime: e && e.maxRetryTime,
            });
          }),
            (t.timeouts = function (e) {
              if (e instanceof Array) return [].concat(e);
              var t = {
                retries: 10,
                factor: 2,
                minTimeout: 1e3,
                maxTimeout: 1 / 0,
                randomize: !1,
              };
              for (var r in e) t[r] = e[r];
              if (t.minTimeout > t.maxTimeout)
                throw new Error("minTimeout is greater than maxTimeout");
              for (var a = [], n = 0; n < t.retries; n++)
                a.push(this.createTimeout(n, t));
              return (
                e && e.forever && !a.length && a.push(this.createTimeout(n, t)),
                a.sort(function (e, t) {
                  return e - t;
                }),
                a
              );
            }),
            (t.createTimeout = function (e, t) {
              var r = t.randomize ? Math.random() + 1 : 1,
                a = Math.round(r * t.minTimeout * Math.pow(t.factor, e));
              return (a = Math.min(a, t.maxTimeout));
            }),
            (t.wrap = function (e, r, a) {
              if ((r instanceof Array && ((a = r), (r = null)), !a))
                for (var n in ((a = []), e))
                  "function" == typeof e[n] && a.push(n);
              for (var s = 0; s < a.length; s++) {
                var i = a[s],
                  o = e[i];
                (e[i] = function (a) {
                  var n = t.operation(r),
                    s = Array.prototype.slice.call(arguments, 1),
                    i = s.pop();
                  s.push(function (e) {
                    n.retry(e) ||
                      (e && (arguments[0] = n.mainError()),
                      i.apply(this, arguments));
                  }),
                    n.attempt(function () {
                      a.apply(e, s);
                    });
                }.bind(e, o)),
                  (e[i].options = r);
              }
            });
        },
        3961: (e) => {
          function t(e, t) {
            "boolean" == typeof t && (t = { forever: t }),
              (this._originalTimeouts = JSON.parse(JSON.stringify(e))),
              (this._timeouts = e),
              (this._options = t || {}),
              (this._maxRetryTime = (t && t.maxRetryTime) || 1 / 0),
              (this._fn = null),
              (this._errors = []),
              (this._attempts = 1),
              (this._operationTimeout = null),
              (this._operationTimeoutCb = null),
              (this._timeout = null),
              (this._operationStart = null),
              this._options.forever &&
                (this._cachedTimeouts = this._timeouts.slice(0));
          }
          (e.exports = t),
            (t.prototype.reset = function () {
              (this._attempts = 1), (this._timeouts = this._originalTimeouts);
            }),
            (t.prototype.stop = function () {
              this._timeout && clearTimeout(this._timeout),
                (this._timeouts = []),
                (this._cachedTimeouts = null);
            }),
            (t.prototype.retry = function (e) {
              if ((this._timeout && clearTimeout(this._timeout), !e)) return !1;
              var t = new Date().getTime();
              if (e && t - this._operationStart >= this._maxRetryTime)
                return (
                  this._errors.unshift(
                    new Error("RetryOperation timeout occurred")
                  ),
                  !1
                );
              this._errors.push(e);
              var r = this._timeouts.shift();
              if (void 0 === r) {
                if (!this._cachedTimeouts) return !1;
                this._errors.splice(
                  this._errors.length - 1,
                  this._errors.length
                ),
                  (this._timeouts = this._cachedTimeouts.slice(0)),
                  (r = this._timeouts.shift());
              }
              var a = this,
                n = setTimeout(function () {
                  a._attempts++,
                    a._operationTimeoutCb &&
                      ((a._timeout = setTimeout(function () {
                        a._operationTimeoutCb(a._attempts);
                      }, a._operationTimeout)),
                      a._options.unref && a._timeout.unref()),
                    a._fn(a._attempts);
                }, r);
              return this._options.unref && n.unref(), !0;
            }),
            (t.prototype.attempt = function (e, t) {
              (this._fn = e),
                t &&
                  (t.timeout && (this._operationTimeout = t.timeout),
                  t.cb && (this._operationTimeoutCb = t.cb));
              var r = this;
              this._operationTimeoutCb &&
                (this._timeout = setTimeout(function () {
                  r._operationTimeoutCb();
                }, r._operationTimeout)),
                (this._operationStart = new Date().getTime()),
                this._fn(this._attempts);
            }),
            (t.prototype.try = function (e) {
              console.log("Using RetryOperation.try() is deprecated"),
                this.attempt(e);
            }),
            (t.prototype.start = function (e) {
              console.log("Using RetryOperation.start() is deprecated"),
                this.attempt(e);
            }),
            (t.prototype.start = t.prototype.try),
            (t.prototype.errors = function () {
              return this._errors;
            }),
            (t.prototype.attempts = function () {
              return this._attempts;
            }),
            (t.prototype.mainError = function () {
              if (0 === this._errors.length) return null;
              for (
                var e = {}, t = null, r = 0, a = 0;
                a < this._errors.length;
                a++
              ) {
                var n = this._errors[a],
                  s = n.message,
                  i = (e[s] || 0) + 1;
                (e[s] = i), i >= r && ((t = n), (r = i));
              }
              return t;
            });
        },
        5602: (e) => {
          var t = (e.exports = {
            v: [{ name: "version", reg: /^(\d*)$/ }],
            o: [
              {
                name: "origin",
                reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
                names: [
                  "username",
                  "sessionId",
                  "sessionVersion",
                  "netType",
                  "ipVer",
                  "address",
                ],
                format: "%s %s %d %s IP%d %s",
              },
            ],
            s: [{ name: "name" }],
            i: [{ name: "description" }],
            u: [{ name: "uri" }],
            e: [{ name: "email" }],
            p: [{ name: "phone" }],
            z: [{ name: "timezones" }],
            r: [{ name: "repeats" }],
            t: [
              {
                name: "timing",
                reg: /^(\d*) (\d*)/,
                names: ["start", "stop"],
                format: "%d %d",
              },
            ],
            c: [
              {
                name: "connection",
                reg: /^IN IP(\d) (\S*)/,
                names: ["version", "ip"],
                format: "IN IP%d %s",
              },
            ],
            b: [
              {
                push: "bandwidth",
                reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
                names: ["type", "limit"],
                format: "%s:%s",
              },
            ],
            m: [
              {
                reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
                names: ["type", "port", "protocol", "payloads"],
                format: "%s %d %s %s",
              },
            ],
            a: [
              {
                push: "rtp",
                reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
                names: ["payload", "codec", "rate", "encoding"],
                format: function (e) {
                  return e.encoding
                    ? "rtpmap:%d %s/%s/%s"
                    : e.rate
                    ? "rtpmap:%d %s/%s"
                    : "rtpmap:%d %s";
                },
              },
              {
                push: "fmtp",
                reg: /^fmtp:(\d*) ([\S| ]*)/,
                names: ["payload", "config"],
                format: "fmtp:%d %s",
              },
              { name: "control", reg: /^control:(.*)/, format: "control:%s" },
              {
                name: "rtcp",
                reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
                names: ["port", "netType", "ipVer", "address"],
                format: function (e) {
                  return null != e.address ? "rtcp:%d %s IP%d %s" : "rtcp:%d";
                },
              },
              {
                push: "rtcpFbTrrInt",
                reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
                names: ["payload", "value"],
                format: "rtcp-fb:%s trr-int %d",
              },
              {
                push: "rtcpFb",
                reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
                names: ["payload", "type", "subtype"],
                format: function (e) {
                  return null != e.subtype
                    ? "rtcp-fb:%s %s %s"
                    : "rtcp-fb:%s %s";
                },
              },
              {
                push: "ext",
                reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
                names: ["value", "direction", "encrypt-uri", "uri", "config"],
                format: function (e) {
                  return (
                    "extmap:%d" +
                    (e.direction ? "/%s" : "%v") +
                    (e["encrypt-uri"] ? " %s" : "%v") +
                    " %s" +
                    (e.config ? " %s" : "")
                  );
                },
              },
              { name: "extmapAllowMixed", reg: /^(extmap-allow-mixed)/ },
              {
                push: "crypto",
                reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
                names: ["id", "suite", "config", "sessionConfig"],
                format: function (e) {
                  return null != e.sessionConfig
                    ? "crypto:%d %s %s %s"
                    : "crypto:%d %s %s";
                },
              },
              { name: "setup", reg: /^setup:(\w*)/, format: "setup:%s" },
              {
                name: "connectionType",
                reg: /^connection:(new|existing)/,
                format: "connection:%s",
              },
              { name: "mid", reg: /^mid:([^\s]*)/, format: "mid:%s" },
              { name: "msid", reg: /^msid:(.*)/, format: "msid:%s" },
              {
                name: "ptime",
                reg: /^ptime:(\d*(?:\.\d*)*)/,
                format: "ptime:%d",
              },
              {
                name: "maxptime",
                reg: /^maxptime:(\d*(?:\.\d*)*)/,
                format: "maxptime:%d",
              },
              {
                name: "direction",
                reg: /^(sendrecv|recvonly|sendonly|inactive)/,
              },
              { name: "icelite", reg: /^(ice-lite)/ },
              {
                name: "iceUfrag",
                reg: /^ice-ufrag:(\S*)/,
                format: "ice-ufrag:%s",
              },
              { name: "icePwd", reg: /^ice-pwd:(\S*)/, format: "ice-pwd:%s" },
              {
                name: "fingerprint",
                reg: /^fingerprint:(\S*) (\S*)/,
                names: ["type", "hash"],
                format: "fingerprint:%s %s",
              },
              {
                push: "candidates",
                reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
                names: [
                  "foundation",
                  "component",
                  "transport",
                  "priority",
                  "ip",
                  "port",
                  "type",
                  "raddr",
                  "rport",
                  "tcptype",
                  "generation",
                  "network-id",
                  "network-cost",
                ],
                format: function (e) {
                  var t = "candidate:%s %d %s %d %s %d typ %s";
                  return (
                    (t += null != e.raddr ? " raddr %s rport %d" : "%v%v"),
                    (t += null != e.tcptype ? " tcptype %s" : "%v"),
                    null != e.generation && (t += " generation %d"),
                    (t += null != e["network-id"] ? " network-id %d" : "%v"),
                    (t += null != e["network-cost"] ? " network-cost %d" : "%v")
                  );
                },
              },
              { name: "endOfCandidates", reg: /^(end-of-candidates)/ },
              {
                name: "remoteCandidates",
                reg: /^remote-candidates:(.*)/,
                format: "remote-candidates:%s",
              },
              {
                name: "iceOptions",
                reg: /^ice-options:(\S*)/,
                format: "ice-options:%s",
              },
              {
                push: "ssrcs",
                reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
                names: ["id", "attribute", "value"],
                format: function (e) {
                  var t = "ssrc:%d";
                  return (
                    null != e.attribute &&
                      ((t += " %s"), null != e.value && (t += ":%s")),
                    t
                  );
                },
              },
              {
                push: "ssrcGroups",
                reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
                names: ["semantics", "ssrcs"],
                format: "ssrc-group:%s %s",
              },
              {
                name: "msidSemantic",
                reg: /^msid-semantic:\s?(\w*) (\S*)/,
                names: ["semantic", "token"],
                format: "msid-semantic: %s %s",
              },
              {
                push: "groups",
                reg: /^group:(\w*) (.*)/,
                names: ["type", "mids"],
                format: "group:%s %s",
              },
              { name: "rtcpMux", reg: /^(rtcp-mux)/ },
              { name: "rtcpRsize", reg: /^(rtcp-rsize)/ },
              {
                name: "sctpmap",
                reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
                names: ["sctpmapNumber", "app", "maxMessageSize"],
                format: function (e) {
                  return null != e.maxMessageSize
                    ? "sctpmap:%s %s %s"
                    : "sctpmap:%s %s";
                },
              },
              {
                name: "xGoogleFlag",
                reg: /^x-google-flag:([^\s]*)/,
                format: "x-google-flag:%s",
              },
              {
                push: "rids",
                reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
                names: ["id", "direction", "params"],
                format: function (e) {
                  return e.params ? "rid:%s %s %s" : "rid:%s %s";
                },
              },
              {
                push: "imageattrs",
                reg: new RegExp(
                  "^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"
                ),
                names: ["pt", "dir1", "attrs1", "dir2", "attrs2"],
                format: function (e) {
                  return "imageattr:%s %s %s" + (e.dir2 ? " %s %s" : "");
                },
              },
              {
                name: "simulcast",
                reg: new RegExp(
                  "^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"
                ),
                names: ["dir1", "list1", "dir2", "list2"],
                format: function (e) {
                  return "simulcast:%s %s" + (e.dir2 ? " %s %s" : "");
                },
              },
              {
                name: "simulcast_03",
                reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
                names: ["value"],
                format: "simulcast: %s",
              },
              {
                name: "framerate",
                reg: /^framerate:(\d+(?:$|\.\d+))/,
                format: "framerate:%s",
              },
              {
                name: "sourceFilter",
                reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
                names: [
                  "filterMode",
                  "netType",
                  "addressTypes",
                  "destAddress",
                  "srcList",
                ],
                format: "source-filter: %s %s %s %s %s",
              },
              { name: "bundleOnly", reg: /^(bundle-only)/ },
              { name: "label", reg: /^label:(.+)/, format: "label:%s" },
              {
                name: "sctpPort",
                reg: /^sctp-port:(\d+)$/,
                format: "sctp-port:%s",
              },
              {
                name: "maxMessageSize",
                reg: /^max-message-size:(\d+)$/,
                format: "max-message-size:%s",
              },
              {
                push: "tsRefClocks",
                reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
                names: ["clksrc", "clksrcExt"],
                format: function (e) {
                  return "ts-refclk:%s" + (null != e.clksrcExt ? "=%s" : "");
                },
              },
              {
                name: "mediaClk",
                reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
                names: [
                  "id",
                  "mediaClockName",
                  "mediaClockValue",
                  "rateNumerator",
                  "rateDenominator",
                ],
                format: function (e) {
                  var t = "mediaclk:";
                  return (
                    (t += null != e.id ? "id=%s %s" : "%v%s"),
                    (t += null != e.mediaClockValue ? "=%s" : ""),
                    (t += null != e.rateNumerator ? " rate=%s" : ""),
                    (t += null != e.rateDenominator ? "/%s" : "")
                  );
                },
              },
              { name: "keywords", reg: /^keywds:(.+)$/, format: "keywds:%s" },
              { name: "content", reg: /^content:(.+)/, format: "content:%s" },
              {
                name: "bfcpFloorCtrl",
                reg: /^floorctrl:(c-only|s-only|c-s)/,
                format: "floorctrl:%s",
              },
              { name: "bfcpConfId", reg: /^confid:(\d+)/, format: "confid:%s" },
              { name: "bfcpUserId", reg: /^userid:(\d+)/, format: "userid:%s" },
              {
                name: "bfcpFloorId",
                reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
                names: ["id", "mStream"],
                format: "floorid:%s mstrm:%s",
              },
              { push: "invalid", names: ["value"] },
            ],
          });
          Object.keys(t).forEach(function (e) {
            t[e].forEach(function (e) {
              e.reg || (e.reg = /(.*)/), e.format || (e.format = "%s");
            });
          });
        },
        7363: (e, t, r) => {
          var a = r(5020),
            n = r(3804);
          (t.write = n),
            (t.parse = a.parse),
            (t.parseParams = a.parseParams),
            (t.parseFmtpConfig = a.parseFmtpConfig),
            (t.parsePayloads = a.parsePayloads),
            (t.parseRemoteCandidates = a.parseRemoteCandidates),
            (t.parseImageAttributes = a.parseImageAttributes),
            (t.parseSimulcastStreamList = a.parseSimulcastStreamList);
        },
        5020: (e, t, r) => {
          var a = function (e) {
              return String(Number(e)) === e ? Number(e) : e;
            },
            n = function (e, t, r) {
              var n = e.name && e.names;
              e.push && !t[e.push]
                ? (t[e.push] = [])
                : n && !t[e.name] && (t[e.name] = {});
              var s = e.push ? {} : n ? t[e.name] : t;
              !(function (e, t, r, n) {
                if (n && !r) t[n] = a(e[1]);
                else
                  for (var s = 0; s < r.length; s += 1)
                    null != e[s + 1] && (t[r[s]] = a(e[s + 1]));
              })(r.match(e.reg), s, e.names, e.name),
                e.push && t[e.push].push(s);
            },
            s = r(5602),
            i = RegExp.prototype.test.bind(/^([a-z])=(.*)/);
          t.parse = function (e) {
            var t = {},
              r = [],
              a = t;
            return (
              e
                .split(/(\r\n|\r|\n)/)
                .filter(i)
                .forEach(function (e) {
                  var t = e[0],
                    i = e.slice(2);
                  "m" === t &&
                    (r.push({ rtp: [], fmtp: [] }), (a = r[r.length - 1]));
                  for (var o = 0; o < (s[t] || []).length; o += 1) {
                    var c = s[t][o];
                    if (c.reg.test(i)) return n(c, a, i);
                  }
                }),
              (t.media = r),
              t
            );
          };
          var o = function (e, t) {
            var r = t.split(/=(.+)/, 2);
            return (
              2 === r.length
                ? (e[r[0]] = a(r[1]))
                : 1 === r.length && t.length > 1 && (e[r[0]] = void 0),
              e
            );
          };
          (t.parseParams = function (e) {
            return e.split(/;\s?/).reduce(o, {});
          }),
            (t.parseFmtpConfig = t.parseParams),
            (t.parsePayloads = function (e) {
              return e.toString().split(" ").map(Number);
            }),
            (t.parseRemoteCandidates = function (e) {
              for (
                var t = [], r = e.split(" ").map(a), n = 0;
                n < r.length;
                n += 3
              )
                t.push({ component: r[n], ip: r[n + 1], port: r[n + 2] });
              return t;
            }),
            (t.parseImageAttributes = function (e) {
              return e.split(" ").map(function (e) {
                return e
                  .substring(1, e.length - 1)
                  .split(",")
                  .reduce(o, {});
              });
            }),
            (t.parseSimulcastStreamList = function (e) {
              return e.split(";").map(function (e) {
                return e.split(",").map(function (e) {
                  var t,
                    r = !1;
                  return (
                    "~" !== e[0]
                      ? (t = a(e))
                      : ((t = a(e.substring(1, e.length))), (r = !0)),
                    { scid: t, paused: r }
                  );
                });
              });
            });
        },
        3804: (e, t, r) => {
          var a = r(5602),
            n = /%[sdv%]/g,
            s = function (e) {
              var t = 1,
                r = arguments,
                a = r.length;
              return e.replace(n, function (e) {
                if (t >= a) return e;
                var n = r[t];
                switch (((t += 1), e)) {
                  case "%%":
                    return "%";
                  case "%s":
                    return String(n);
                  case "%d":
                    return Number(n);
                  case "%v":
                    return "";
                }
              });
            },
            i = function (e, t, r) {
              var a = [
                e +
                  "=" +
                  (t.format instanceof Function
                    ? t.format(t.push ? r : r[t.name])
                    : t.format),
              ];
              if (t.names)
                for (var n = 0; n < t.names.length; n += 1) {
                  var i = t.names[n];
                  t.name ? a.push(r[t.name][i]) : a.push(r[t.names[n]]);
                }
              else a.push(r[t.name]);
              return s.apply(null, a);
            },
            o = [
              "v",
              "o",
              "s",
              "i",
              "u",
              "e",
              "p",
              "c",
              "b",
              "t",
              "r",
              "z",
              "a",
            ],
            c = ["i", "c", "b", "a"];
          e.exports = function (e, t) {
            (t = t || {}),
              null == e.version && (e.version = 0),
              null == e.name && (e.name = " "),
              e.media.forEach(function (e) {
                null == e.payloads && (e.payloads = "");
              });
            var r = t.outerOrder || o,
              n = t.innerOrder || c,
              s = [];
            return (
              r.forEach(function (t) {
                a[t].forEach(function (r) {
                  r.name in e && null != e[r.name]
                    ? s.push(i(t, r, e))
                    : r.push in e &&
                      null != e[r.push] &&
                      e[r.push].forEach(function (e) {
                        s.push(i(t, r, e));
                      });
                });
              }),
              e.media.forEach(function (e) {
                s.push(i("m", a.m[0], e)),
                  n.forEach(function (t) {
                    a[t].forEach(function (r) {
                      r.name in e && null != e[r.name]
                        ? s.push(i(t, r, e))
                        : r.push in e &&
                          null != e[r.push] &&
                          e[r.push].forEach(function (e) {
                            s.push(i(t, r, e));
                          });
                    });
                  });
              }),
              s.join("\r\n") + "\r\n"
            );
          };
        },
        7232: function (e, t, r) {
          var a;
          !(function (n, s) {
            "use strict";
            var i = "function",
              o = "undefined",
              c = "object",
              d = "string",
              l = "major",
              p = "model",
              u = "name",
              h = "type",
              m = "vendor",
              f = "version",
              g = "architecture",
              _ = "console",
              v = "mobile",
              b = "tablet",
              y = "smarttv",
              w = "wearable",
              S = "embedded",
              R = "Amazon",
              E = "Apple",
              k = "ASUS",
              T = "BlackBerry",
              C = "Browser",
              P = "Chrome",
              O = "Firefox",
              D = "Google",
              x = "Huawei",
              I = "LG",
              M = "Microsoft",
              A = "Motorola",
              L = "Opera",
              N = "Samsung",
              j = "Sharp",
              B = "Sony",
              F = "Xiaomi",
              U = "Zebra",
              W = "Facebook",
              q = "Chromium OS",
              H = "Mac OS",
              V = function (e) {
                for (var t = {}, r = 0; r < e.length; r++)
                  t[e[r].toUpperCase()] = e[r];
                return t;
              },
              G = function (e, t) {
                return typeof e === d && -1 !== z(t).indexOf(z(e));
              },
              z = function (e) {
                return e.toLowerCase();
              },
              $ = function (e, t) {
                if (typeof e === d)
                  return (
                    (e = e.replace(/^\s\s*/, "")),
                    typeof t === o ? e : e.substring(0, 500)
                  );
              },
              K = function (e, t) {
                for (var r, a, n, o, d, l, p = 0; p < t.length && !d; ) {
                  var u = t[p],
                    h = t[p + 1];
                  for (r = a = 0; r < u.length && !d && u[r]; )
                    if ((d = u[r++].exec(e)))
                      for (n = 0; n < h.length; n++)
                        (l = d[++a]),
                          typeof (o = h[n]) === c && o.length > 0
                            ? 2 === o.length
                              ? typeof o[1] == i
                                ? (this[o[0]] = o[1].call(this, l))
                                : (this[o[0]] = o[1])
                              : 3 === o.length
                              ? typeof o[1] !== i || (o[1].exec && o[1].test)
                                ? (this[o[0]] = l ? l.replace(o[1], o[2]) : s)
                                : (this[o[0]] = l
                                    ? o[1].call(this, l, o[2])
                                    : s)
                              : 4 === o.length &&
                                (this[o[0]] = l
                                  ? o[3].call(this, l.replace(o[1], o[2]))
                                  : s)
                            : (this[o] = l || s);
                  p += 2;
                }
              },
              J = function (e, t) {
                for (var r in t)
                  if (typeof t[r] === c && t[r].length > 0) {
                    for (var a = 0; a < t[r].length; a++)
                      if (G(t[r][a], e)) return "?" === r ? s : r;
                  } else if (G(t[r], e)) return "?" === r ? s : r;
                return e;
              },
              Q = {
                ME: "4.90",
                "NT 3.11": "NT3.51",
                "NT 4.0": "NT4.0",
                2e3: "NT 5.0",
                XP: ["NT 5.1", "NT 5.2"],
                Vista: "NT 6.0",
                7: "NT 6.1",
                8: "NT 6.2",
                8.1: "NT 6.3",
                10: ["NT 6.4", "NT 10.0"],
                RT: "ARM",
              },
              Y = {
                browser: [
                  [/\b(?:crmo|crios)\/([\w\.]+)/i],
                  [f, [u, "Chrome"]],
                  [/edg(?:e|ios|a)?\/([\w\.]+)/i],
                  [f, [u, "Edge"]],
                  [
                    /(opera mini)\/([-\w\.]+)/i,
                    /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
                    /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i,
                  ],
                  [u, f],
                  [/opios[\/ ]+([\w\.]+)/i],
                  [f, [u, L + " Mini"]],
                  [/\bop(?:rg)?x\/([\w\.]+)/i],
                  [f, [u, L + " GX"]],
                  [/\bopr\/([\w\.]+)/i],
                  [f, [u, L]],
                  [/\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i],
                  [f, [u, "Baidu"]],
                  [
                    /(kindle)\/([\w\.]+)/i,
                    /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
                    /(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i,
                    /(?:ms|\()(ie) ([\w\.]+)/i,
                    /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
                    /(heytap|ovi)browser\/([\d\.]+)/i,
                    /(weibo)__([\d\.]+)/i,
                  ],
                  [u, f],
                  [/\bddg\/([\w\.]+)/i],
                  [f, [u, "DuckDuckGo"]],
                  [/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],
                  [f, [u, "UC" + C]],
                  [
                    /microm.+\bqbcore\/([\w\.]+)/i,
                    /\bqbcore\/([\w\.]+).+microm/i,
                    /micromessenger\/([\w\.]+)/i,
                  ],
                  [f, [u, "WeChat"]],
                  [/konqueror\/([\w\.]+)/i],
                  [f, [u, "Konqueror"]],
                  [/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],
                  [f, [u, "IE"]],
                  [/ya(?:search)?browser\/([\w\.]+)/i],
                  [f, [u, "Yandex"]],
                  [/slbrowser\/([\w\.]+)/i],
                  [f, [u, "Smart Lenovo " + C]],
                  [/(avast|avg)\/([\w\.]+)/i],
                  [[u, /(.+)/, "$1 Secure " + C], f],
                  [/\bfocus\/([\w\.]+)/i],
                  [f, [u, O + " Focus"]],
                  [/\bopt\/([\w\.]+)/i],
                  [f, [u, L + " Touch"]],
                  [/coc_coc\w+\/([\w\.]+)/i],
                  [f, [u, "Coc Coc"]],
                  [/dolfin\/([\w\.]+)/i],
                  [f, [u, "Dolphin"]],
                  [/coast\/([\w\.]+)/i],
                  [f, [u, L + " Coast"]],
                  [/miuibrowser\/([\w\.]+)/i],
                  [f, [u, "MIUI " + C]],
                  [/fxios\/([-\w\.]+)/i],
                  [f, [u, O]],
                  [/\bqihu|(qi?ho?o?|360)browser/i],
                  [[u, "360 " + C]],
                  [/(oculus|sailfish|huawei|vivo)browser\/([\w\.]+)/i],
                  [[u, /(.+)/, "$1 " + C], f],
                  [/samsungbrowser\/([\w\.]+)/i],
                  [f, [u, N + " Internet"]],
                  [/(comodo_dragon)\/([\w\.]+)/i],
                  [[u, /_/g, " "], f],
                  [/metasr[\/ ]?([\d\.]+)/i],
                  [f, [u, "Sogou Explorer"]],
                  [/(sogou)mo\w+\/([\d\.]+)/i],
                  [[u, "Sogou Mobile"], f],
                  [
                    /(electron)\/([\w\.]+) safari/i,
                    /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
                    /m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i,
                  ],
                  [u, f],
                  [/(lbbrowser)/i, /\[(linkedin)app\]/i],
                  [u],
                  [
                    /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i,
                  ],
                  [[u, W], f],
                  [
                    /(Klarna)\/([\w\.]+)/i,
                    /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
                    /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
                    /safari (line)\/([\w\.]+)/i,
                    /\b(line)\/([\w\.]+)\/iab/i,
                    /(alipay)client\/([\w\.]+)/i,
                    /(twitter)(?:and| f.+e\/([\w\.]+))/i,
                    /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i,
                  ],
                  [u, f],
                  [/\bgsa\/([\w\.]+) .*safari\//i],
                  [f, [u, "GSA"]],
                  [/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i],
                  [f, [u, "TikTok"]],
                  [/headlesschrome(?:\/([\w\.]+)| )/i],
                  [f, [u, P + " Headless"]],
                  [/ wv\).+(chrome)\/([\w\.]+)/i],
                  [[u, P + " WebView"], f],
                  [/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],
                  [f, [u, "Android " + C]],
                  [
                    /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i,
                  ],
                  [u, f],
                  [/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],
                  [f, [u, "Mobile Safari"]],
                  [/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],
                  [f, u],
                  [/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],
                  [
                    u,
                    [
                      f,
                      J,
                      {
                        "1.0": "/8",
                        1.2: "/1",
                        1.3: "/3",
                        "2.0": "/412",
                        "2.0.2": "/416",
                        "2.0.3": "/417",
                        "2.0.4": "/419",
                        "?": "/",
                      },
                    ],
                  ],
                  [/(webkit|khtml)\/([\w\.]+)/i],
                  [u, f],
                  [/(navigator|netscape\d?)\/([-\w\.]+)/i],
                  [[u, "Netscape"], f],
                  [/mobile vr; rv:([\w\.]+)\).+firefox/i],
                  [f, [u, O + " Reality"]],
                  [
                    /ekiohf.+(flow)\/([\w\.]+)/i,
                    /(swiftfox)/i,
                    /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
                    /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                    /(firefox)\/([\w\.]+)/i,
                    /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
                    /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                    /(links) \(([\w\.]+)/i,
                    /panasonic;(viera)/i,
                  ],
                  [u, f],
                  [/(cobalt)\/([\w\.]+)/i],
                  [u, [f, /master.|lts./, ""]],
                ],
                cpu: [
                  [/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],
                  [[g, "amd64"]],
                  [/(ia32(?=;))/i],
                  [[g, z]],
                  [/((?:i[346]|x)86)[;\)]/i],
                  [[g, "ia32"]],
                  [/\b(aarch64|arm(v?8e?l?|_?64))\b/i],
                  [[g, "arm64"]],
                  [/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],
                  [[g, "armhf"]],
                  [/windows (ce|mobile); ppc;/i],
                  [[g, "arm"]],
                  [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],
                  [[g, /ower/, "", z]],
                  [/(sun4\w)[;\)]/i],
                  [[g, "sparc"]],
                  [
                    /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i,
                  ],
                  [[g, z]],
                ],
                device: [
                  [
                    /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i,
                  ],
                  [p, [m, N], [h, b]],
                  [
                    /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
                    /samsung[- ]([-\w]+)/i,
                    /sec-(sgh\w+)/i,
                  ],
                  [p, [m, N], [h, v]],
                  [/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i],
                  [p, [m, E], [h, v]],
                  [
                    /\((ipad);[-\w\),; ]+apple/i,
                    /applecoremedia\/[\w\.]+ \((ipad)/i,
                    /\b(ipad)\d\d?,\d\d?[;\]].+ios/i,
                  ],
                  [p, [m, E], [h, b]],
                  [/(macintosh);/i],
                  [p, [m, E]],
                  [/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],
                  [p, [m, j], [h, v]],
                  [
                    /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i,
                  ],
                  [p, [m, x], [h, b]],
                  [
                    /(?:huawei|honor)([-\w ]+)[;\)]/i,
                    /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i,
                  ],
                  [p, [m, x], [h, v]],
                  [
                    /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,
                    /\b; (\w+) build\/hm\1/i,
                    /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
                    /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
                    /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,
                    /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i,
                  ],
                  [
                    [p, /_/g, " "],
                    [m, F],
                    [h, v],
                  ],
                  [
                    /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,
                    /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i,
                  ],
                  [
                    [p, /_/g, " "],
                    [m, F],
                    [h, b],
                  ],
                  [
                    /; (\w+) bui.+ oppo/i,
                    /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i,
                  ],
                  [p, [m, "OPPO"], [h, v]],
                  [/\b(opd2\d{3}a?) bui/i],
                  [p, [m, "OPPO"], [h, b]],
                  [
                    /vivo (\w+)(?: bui|\))/i,
                    /\b(v[12]\d{3}\w?[at])(?: bui|;)/i,
                  ],
                  [p, [m, "Vivo"], [h, v]],
                  [/\b(rmx[1-3]\d{3})(?: bui|;|\))/i],
                  [p, [m, "Realme"], [h, v]],
                  [
                    /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
                    /\bmot(?:orola)?[- ](\w*)/i,
                    /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i,
                  ],
                  [p, [m, A], [h, v]],
                  [/\b(mz60\d|xoom[2 ]{0,2}) build\//i],
                  [p, [m, A], [h, b]],
                  [
                    /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i,
                  ],
                  [p, [m, I], [h, b]],
                  [
                    /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
                    /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
                    /\blg-?([\d\w]+) bui/i,
                  ],
                  [p, [m, I], [h, v]],
                  [
                    /(ideatab[-\w ]+)/i,
                    /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i,
                  ],
                  [p, [m, "Lenovo"], [h, b]],
                  [
                    /(?:maemo|nokia).*(n900|lumia \d+)/i,
                    /nokia[-_ ]?([-\w\.]*)/i,
                  ],
                  [
                    [p, /_/g, " "],
                    [m, "Nokia"],
                    [h, v],
                  ],
                  [/(pixel c)\b/i],
                  [p, [m, D], [h, b]],
                  [/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],
                  [p, [m, D], [h, v]],
                  [
                    /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i,
                  ],
                  [p, [m, B], [h, v]],
                  [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i],
                  [
                    [p, "Xperia Tablet"],
                    [m, B],
                    [h, b],
                  ],
                  [
                    / (kb2005|in20[12]5|be20[12][59])\b/i,
                    /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i,
                  ],
                  [p, [m, "OnePlus"], [h, v]],
                  [
                    /(alexa)webm/i,
                    /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,
                    /(kf[a-z]+)( bui|\)).+silk\//i,
                  ],
                  [p, [m, R], [h, b]],
                  [/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],
                  [
                    [p, /(.+)/g, "Fire Phone $1"],
                    [m, R],
                    [h, v],
                  ],
                  [/(playbook);[-\w\),; ]+(rim)/i],
                  [p, m, [h, b]],
                  [/\b((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10; (\w+)/i],
                  [p, [m, T], [h, v]],
                  [
                    /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i,
                  ],
                  [p, [m, k], [h, b]],
                  [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],
                  [p, [m, k], [h, v]],
                  [/(nexus 9)/i],
                  [p, [m, "HTC"], [h, b]],
                  [
                    /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
                    /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
                    /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i,
                  ],
                  [m, [p, /_/g, " "], [h, v]],
                  [/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],
                  [p, [m, "Acer"], [h, b]],
                  [/droid.+; (m[1-5] note) bui/i, /\bmz-([-\w]{2,})/i],
                  [p, [m, "Meizu"], [h, v]],
                  [/; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i],
                  [p, [m, "Ulefone"], [h, v]],
                  [
                    /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,
                    /(hp) ([\w ]+\w)/i,
                    /(asus)-?(\w+)/i,
                    /(microsoft); (lumia[\w ]+)/i,
                    /(lenovo)[-_ ]?([-\w]+)/i,
                    /(jolla)/i,
                    /(oppo) ?([\w ]+) bui/i,
                  ],
                  [m, p, [h, v]],
                  [
                    /(kobo)\s(ereader|touch)/i,
                    /(archos) (gamepad2?)/i,
                    /(hp).+(touchpad(?!.+tablet)|tablet)/i,
                    /(kindle)\/([\w\.]+)/i,
                    /(nook)[\w ]+build\/(\w+)/i,
                    /(dell) (strea[kpr\d ]*[\dko])/i,
                    /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
                    /(trinity)[- ]*(t\d{3}) bui/i,
                    /(gigaset)[- ]+(q\w{1,9}) bui/i,
                    /(vodafone) ([\w ]+)(?:\)| bui)/i,
                  ],
                  [m, p, [h, b]],
                  [/(surface duo)/i],
                  [p, [m, M], [h, b]],
                  [/droid [\d\.]+; (fp\du?)(?: b|\))/i],
                  [p, [m, "Fairphone"], [h, v]],
                  [/(u304aa)/i],
                  [p, [m, "AT&T"], [h, v]],
                  [/\bsie-(\w*)/i],
                  [p, [m, "Siemens"], [h, v]],
                  [/\b(rct\w+) b/i],
                  [p, [m, "RCA"], [h, b]],
                  [/\b(venue[\d ]{2,7}) b/i],
                  [p, [m, "Dell"], [h, b]],
                  [/\b(q(?:mv|ta)\w+) b/i],
                  [p, [m, "Verizon"], [h, b]],
                  [/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],
                  [p, [m, "Barnes & Noble"], [h, b]],
                  [/\b(tm\d{3}\w+) b/i],
                  [p, [m, "NuVision"], [h, b]],
                  [/\b(k88) b/i],
                  [p, [m, "ZTE"], [h, b]],
                  [/\b(nx\d{3}j) b/i],
                  [p, [m, "ZTE"], [h, v]],
                  [/\b(gen\d{3}) b.+49h/i],
                  [p, [m, "Swiss"], [h, v]],
                  [/\b(zur\d{3}) b/i],
                  [p, [m, "Swiss"], [h, b]],
                  [/\b((zeki)?tb.*\b) b/i],
                  [p, [m, "Zeki"], [h, b]],
                  [/\b([yr]\d{2}) b/i, /\b(dragon[- ]+touch |dt)(\w{5}) b/i],
                  [[m, "Dragon Touch"], p, [h, b]],
                  [/\b(ns-?\w{0,9}) b/i],
                  [p, [m, "Insignia"], [h, b]],
                  [/\b((nxa|next)-?\w{0,9}) b/i],
                  [p, [m, "NextBook"], [h, b]],
                  [/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],
                  [[m, "Voice"], p, [h, v]],
                  [/\b(lvtel\-)?(v1[12]) b/i],
                  [[m, "LvTel"], p, [h, v]],
                  [/\b(ph-1) /i],
                  [p, [m, "Essential"], [h, v]],
                  [/\b(v(100md|700na|7011|917g).*\b) b/i],
                  [p, [m, "Envizen"], [h, b]],
                  [/\b(trio[-\w\. ]+) b/i],
                  [p, [m, "MachSpeed"], [h, b]],
                  [/\btu_(1491) b/i],
                  [p, [m, "Rotor"], [h, b]],
                  [/(shield[\w ]+) b/i],
                  [p, [m, "Nvidia"], [h, b]],
                  [/(sprint) (\w+)/i],
                  [m, p, [h, v]],
                  [/(kin\.[onetw]{3})/i],
                  [
                    [p, /\./g, " "],
                    [m, M],
                    [h, v],
                  ],
                  [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],
                  [p, [m, U], [h, b]],
                  [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],
                  [p, [m, U], [h, v]],
                  [/smart-tv.+(samsung)/i],
                  [m, [h, y]],
                  [/hbbtv.+maple;(\d+)/i],
                  [
                    [p, /^/, "SmartTV"],
                    [m, N],
                    [h, y],
                  ],
                  [
                    /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i,
                  ],
                  [
                    [m, I],
                    [h, y],
                  ],
                  [/(apple) ?tv/i],
                  [m, [p, E + " TV"], [h, y]],
                  [/crkey/i],
                  [
                    [p, P + "cast"],
                    [m, D],
                    [h, y],
                  ],
                  [/droid.+aft(\w+)( bui|\))/i],
                  [p, [m, R], [h, y]],
                  [/\(dtv[\);].+(aquos)/i, /(aquos-tv[\w ]+)\)/i],
                  [p, [m, j], [h, y]],
                  [/(bravia[\w ]+)( bui|\))/i],
                  [p, [m, B], [h, y]],
                  [/(mitv-\w{5}) bui/i],
                  [p, [m, F], [h, y]],
                  [/Hbbtv.*(technisat) (.*);/i],
                  [m, p, [h, y]],
                  [
                    /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
                    /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i,
                  ],
                  [
                    [m, $],
                    [p, $],
                    [h, y],
                  ],
                  [/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],
                  [[h, y]],
                  [/(ouya)/i, /(nintendo) ([wids3utch]+)/i],
                  [m, p, [h, _]],
                  [/droid.+; (shield) bui/i],
                  [p, [m, "Nvidia"], [h, _]],
                  [/(playstation [345portablevi]+)/i],
                  [p, [m, B], [h, _]],
                  [/\b(xbox(?: one)?(?!; xbox))[\); ]/i],
                  [p, [m, M], [h, _]],
                  [/((pebble))app/i],
                  [m, p, [h, w]],
                  [/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i],
                  [p, [m, E], [h, w]],
                  [/droid.+; (glass) \d/i],
                  [p, [m, D], [h, w]],
                  [/droid.+; (wt63?0{2,3})\)/i],
                  [p, [m, U], [h, w]],
                  [/(quest( \d| pro)?)/i],
                  [p, [m, W], [h, w]],
                  [/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],
                  [m, [h, S]],
                  [/(aeobc)\b/i],
                  [p, [m, R], [h, S]],
                  [
                    /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i,
                  ],
                  [p, [h, v]],
                  [
                    /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i,
                  ],
                  [p, [h, b]],
                  [/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],
                  [[h, b]],
                  [
                    /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i,
                  ],
                  [[h, v]],
                  [/(android[-\w\. ]{0,9});.+buil/i],
                  [p, [m, "Generic"]],
                ],
                engine: [
                  [/windows.+ edge\/([\w\.]+)/i],
                  [f, [u, "EdgeHTML"]],
                  [/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],
                  [f, [u, "Blink"]],
                  [
                    /(presto)\/([\w\.]+)/i,
                    /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
                    /ekioh(flow)\/([\w\.]+)/i,
                    /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
                    /(icab)[\/ ]([23]\.[\d\.]+)/i,
                    /\b(libweb)/i,
                  ],
                  [u, f],
                  [/rv\:([\w\.]{1,9})\b.+(gecko)/i],
                  [f, u],
                ],
                os: [
                  [/microsoft (windows) (vista|xp)/i],
                  [u, f],
                  [/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i],
                  [u, [f, J, Q]],
                  [
                    /windows nt 6\.2; (arm)/i,
                    /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
                    /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i,
                  ],
                  [
                    [f, J, Q],
                    [u, "Windows"],
                  ],
                  [
                    /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
                    /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
                    /cfnetwork\/.+darwin/i,
                  ],
                  [
                    [f, /_/g, "."],
                    [u, "iOS"],
                  ],
                  [
                    /(mac os x) ?([\w\. ]*)/i,
                    /(macintosh|mac_powerpc\b)(?!.+haiku)/i,
                  ],
                  [
                    [u, H],
                    [f, /_/g, "."],
                  ],
                  [/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],
                  [f, u],
                  [
                    /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
                    /(blackberry)\w*\/([\w\.]*)/i,
                    /(tizen|kaios)[\/ ]([\w\.]+)/i,
                    /\((series40);/i,
                  ],
                  [u, f],
                  [/\(bb(10);/i],
                  [f, [u, T]],
                  [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],
                  [f, [u, "Symbian"]],
                  [
                    /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i,
                  ],
                  [f, [u, O + " OS"]],
                  [/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],
                  [f, [u, "webOS"]],
                  [/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i],
                  [f, [u, "watchOS"]],
                  [/crkey\/([\d\.]+)/i],
                  [f, [u, P + "cast"]],
                  [/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i],
                  [[u, q], f],
                  [
                    /panasonic;(viera)/i,
                    /(netrange)mmh/i,
                    /(nettv)\/(\d+\.[\w\.]+)/i,
                    /(nintendo|playstation) ([wids345portablevuch]+)/i,
                    /(xbox); +xbox ([^\);]+)/i,
                    /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
                    /(mint)[\/\(\) ]?(\w*)/i,
                    /(mageia|vectorlinux)[; ]/i,
                    /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                    /(hurd|linux) ?([\w\.]*)/i,
                    /(gnu) ?([\w\.]*)/i,
                    /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
                    /(haiku) (\w+)/i,
                  ],
                  [u, f],
                  [/(sunos) ?([\w\.\d]*)/i],
                  [[u, "Solaris"], f],
                  [
                    /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
                    /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
                    /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
                    /(unix) ?([\w\.]*)/i,
                  ],
                  [u, f],
                ],
              },
              X = function (e, t) {
                if (
                  (typeof e === c && ((t = e), (e = s)), !(this instanceof X))
                )
                  return new X(e, t).getResult();
                var r = typeof n !== o && n.navigator ? n.navigator : s,
                  a = e || (r && r.userAgent ? r.userAgent : ""),
                  _ = r && r.userAgentData ? r.userAgentData : s,
                  y = t
                    ? (function (e, t) {
                        var r = {};
                        for (var a in e)
                          t[a] && t[a].length % 2 == 0
                            ? (r[a] = t[a].concat(e[a]))
                            : (r[a] = e[a]);
                        return r;
                      })(Y, t)
                    : Y,
                  w = r && r.userAgent == a;
                return (
                  (this.getBrowser = function () {
                    var e,
                      t = {};
                    return (
                      (t[u] = s),
                      (t[f] = s),
                      K.call(t, a, y.browser),
                      (t[l] =
                        typeof (e = t[f]) === d
                          ? e.replace(/[^\d\.]/g, "").split(".")[0]
                          : s),
                      w &&
                        r &&
                        r.brave &&
                        typeof r.brave.isBrave == i &&
                        (t[u] = "Brave"),
                      t
                    );
                  }),
                  (this.getCPU = function () {
                    var e = {};
                    return (e[g] = s), K.call(e, a, y.cpu), e;
                  }),
                  (this.getDevice = function () {
                    var e = {};
                    return (
                      (e[m] = s),
                      (e[p] = s),
                      (e[h] = s),
                      K.call(e, a, y.device),
                      w && !e[h] && _ && _.mobile && (e[h] = v),
                      w &&
                        "Macintosh" == e[p] &&
                        r &&
                        typeof r.standalone !== o &&
                        r.maxTouchPoints &&
                        r.maxTouchPoints > 2 &&
                        ((e[p] = "iPad"), (e[h] = b)),
                      e
                    );
                  }),
                  (this.getEngine = function () {
                    var e = {};
                    return (e[u] = s), (e[f] = s), K.call(e, a, y.engine), e;
                  }),
                  (this.getOS = function () {
                    var e = {};
                    return (
                      (e[u] = s),
                      (e[f] = s),
                      K.call(e, a, y.os),
                      w &&
                        !e[u] &&
                        _ &&
                        _.platform &&
                        "Unknown" != _.platform &&
                        (e[u] = _.platform
                          .replace(/chrome os/i, q)
                          .replace(/macos/i, H)),
                      e
                    );
                  }),
                  (this.getResult = function () {
                    return {
                      ua: this.getUA(),
                      browser: this.getBrowser(),
                      engine: this.getEngine(),
                      os: this.getOS(),
                      device: this.getDevice(),
                      cpu: this.getCPU(),
                    };
                  }),
                  (this.getUA = function () {
                    return a;
                  }),
                  (this.setUA = function (e) {
                    return (
                      (a = typeof e === d && e.length > 500 ? $(e, 500) : e),
                      this
                    );
                  }),
                  this.setUA(a),
                  this
                );
              };
            (X.VERSION = "1.0.38"),
              (X.BROWSER = V([u, f, l])),
              (X.CPU = V([g])),
              (X.DEVICE = V([p, m, h, _, v, y, b, w, S])),
              (X.ENGINE = X.OS = V([u, f])),
              typeof t !== o
                ? (e.exports && (t = e.exports = X), (t.UAParser = X))
                : r.amdO
                ? (a = function () {
                    return X;
                  }.call(t, r, t, e)) === s || (e.exports = a)
                : typeof n !== o && (n.UAParser = X);
            var Z = typeof n !== o && (n.jQuery || n.Zepto);
            if (Z && !Z.ua) {
              var ee = new X();
              (Z.ua = ee.getResult()),
                (Z.ua.get = function () {
                  return ee.getUA();
                }),
                (Z.ua.set = function (e) {
                  ee.setUA(e);
                  var t = ee.getResult();
                  for (var r in t) Z.ua[r] = t[r];
                });
            }
          })("object" == typeof window ? window : this);
        },
        952: (e, t, r) => {
          var a;
          if ("object" == typeof globalThis) a = globalThis;
          else
            try {
              a = r(4903);
            } catch (e) {
            } finally {
              if ((a || "undefined" == typeof window || (a = window), !a))
                throw new Error("Could not determine global this");
            }
          var n = a.WebSocket || a.MozWebSocket,
            s = r(9840);
          function i(e, t) {
            return t ? new n(e, t) : new n(e);
          }
          n &&
            ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function (e) {
              Object.defineProperty(i, e, {
                get: function () {
                  return n[e];
                },
              });
            }),
            (e.exports = { w3cwebsocket: n ? i : null, version: s });
        },
        9840: (e, t, r) => {
          e.exports = r(9003).version;
        },
        8624: (e, t, r) => {
          "use strict";
          r.r(t),
            r.d(t, {
              DOMException: () => w,
              Headers: () => l,
              Request: () => _,
              Response: () => b,
              fetch: () => S,
            });
          var a =
              ("undefined" != typeof globalThis && globalThis) ||
              ("undefined" != typeof self && self) ||
              (void 0 !== r.g && r.g) ||
              {},
            n = {
              searchParams: "URLSearchParams" in a,
              iterable: "Symbol" in a && "iterator" in Symbol,
              blob:
                "FileReader" in a &&
                "Blob" in a &&
                (function () {
                  try {
                    return new Blob(), !0;
                  } catch (e) {
                    return !1;
                  }
                })(),
              formData: "FormData" in a,
              arrayBuffer: "ArrayBuffer" in a,
            };
          if (n.arrayBuffer)
            var s = [
                "[object Int8Array]",
                "[object Uint8Array]",
                "[object Uint8ClampedArray]",
                "[object Int16Array]",
                "[object Uint16Array]",
                "[object Int32Array]",
                "[object Uint32Array]",
                "[object Float32Array]",
                "[object Float64Array]",
              ],
              i =
                ArrayBuffer.isView ||
                function (e) {
                  return e && s.indexOf(Object.prototype.toString.call(e)) > -1;
                };
          function o(e) {
            if (
              ("string" != typeof e && (e = String(e)),
              /[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(e) || "" === e)
            )
              throw new TypeError(
                'Invalid character in header field name: "' + e + '"'
              );
            return e.toLowerCase();
          }
          function c(e) {
            return "string" != typeof e && (e = String(e)), e;
          }
          function d(e) {
            var t = {
              next: function () {
                var t = e.shift();
                return { done: void 0 === t, value: t };
              },
            };
            return (
              n.iterable &&
                (t[Symbol.iterator] = function () {
                  return t;
                }),
              t
            );
          }
          function l(e) {
            (this.map = {}),
              e instanceof l
                ? e.forEach(function (e, t) {
                    this.append(t, e);
                  }, this)
                : Array.isArray(e)
                ? e.forEach(function (e) {
                    if (2 != e.length)
                      throw new TypeError(
                        "Headers constructor: expected name/value pair to be length 2, found" +
                          e.length
                      );
                    this.append(e[0], e[1]);
                  }, this)
                : e &&
                  Object.getOwnPropertyNames(e).forEach(function (t) {
                    this.append(t, e[t]);
                  }, this);
          }
          function p(e) {
            if (!e._noBody)
              return e.bodyUsed
                ? Promise.reject(new TypeError("Already read"))
                : void (e.bodyUsed = !0);
          }
          function u(e) {
            return new Promise(function (t, r) {
              (e.onload = function () {
                t(e.result);
              }),
                (e.onerror = function () {
                  r(e.error);
                });
            });
          }
          function h(e) {
            var t = new FileReader(),
              r = u(t);
            return t.readAsArrayBuffer(e), r;
          }
          function m(e) {
            if (e.slice) return e.slice(0);
            var t = new Uint8Array(e.byteLength);
            return t.set(new Uint8Array(e)), t.buffer;
          }
          function f() {
            return (
              (this.bodyUsed = !1),
              (this._initBody = function (e) {
                var t;
                (this.bodyUsed = this.bodyUsed),
                  (this._bodyInit = e),
                  e
                    ? "string" == typeof e
                      ? (this._bodyText = e)
                      : n.blob && Blob.prototype.isPrototypeOf(e)
                      ? (this._bodyBlob = e)
                      : n.formData && FormData.prototype.isPrototypeOf(e)
                      ? (this._bodyFormData = e)
                      : n.searchParams &&
                        URLSearchParams.prototype.isPrototypeOf(e)
                      ? (this._bodyText = e.toString())
                      : n.arrayBuffer &&
                        n.blob &&
                        (t = e) &&
                        DataView.prototype.isPrototypeOf(t)
                      ? ((this._bodyArrayBuffer = m(e.buffer)),
                        (this._bodyInit = new Blob([this._bodyArrayBuffer])))
                      : n.arrayBuffer &&
                        (ArrayBuffer.prototype.isPrototypeOf(e) || i(e))
                      ? (this._bodyArrayBuffer = m(e))
                      : (this._bodyText = e = Object.prototype.toString.call(e))
                    : ((this._noBody = !0), (this._bodyText = "")),
                  this.headers.get("content-type") ||
                    ("string" == typeof e
                      ? this.headers.set(
                          "content-type",
                          "text/plain;charset=UTF-8"
                        )
                      : this._bodyBlob && this._bodyBlob.type
                      ? this.headers.set("content-type", this._bodyBlob.type)
                      : n.searchParams &&
                        URLSearchParams.prototype.isPrototypeOf(e) &&
                        this.headers.set(
                          "content-type",
                          "application/x-www-form-urlencoded;charset=UTF-8"
                        ));
              }),
              n.blob &&
                (this.blob = function () {
                  var e = p(this);
                  if (e) return e;
                  if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                  if (this._bodyArrayBuffer)
                    return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                  if (this._bodyFormData)
                    throw new Error("could not read FormData body as blob");
                  return Promise.resolve(new Blob([this._bodyText]));
                }),
              (this.arrayBuffer = function () {
                if (this._bodyArrayBuffer) {
                  var e = p(this);
                  return (
                    e ||
                    (ArrayBuffer.isView(this._bodyArrayBuffer)
                      ? Promise.resolve(
                          this._bodyArrayBuffer.buffer.slice(
                            this._bodyArrayBuffer.byteOffset,
                            this._bodyArrayBuffer.byteOffset +
                              this._bodyArrayBuffer.byteLength
                          )
                        )
                      : Promise.resolve(this._bodyArrayBuffer))
                  );
                }
                if (n.blob) return this.blob().then(h);
                throw new Error("could not read as ArrayBuffer");
              }),
              (this.text = function () {
                var e,
                  t,
                  r,
                  a,
                  n,
                  s = p(this);
                if (s) return s;
                if (this._bodyBlob)
                  return (
                    (e = this._bodyBlob),
                    (t = new FileReader()),
                    (r = u(t)),
                    (a = /charset=([A-Za-z0-9_-]+)/.exec(e.type)),
                    (n = a ? a[1] : "utf-8"),
                    t.readAsText(e, n),
                    r
                  );
                if (this._bodyArrayBuffer)
                  return Promise.resolve(
                    (function (e) {
                      for (
                        var t = new Uint8Array(e),
                          r = new Array(t.length),
                          a = 0;
                        a < t.length;
                        a++
                      )
                        r[a] = String.fromCharCode(t[a]);
                      return r.join("");
                    })(this._bodyArrayBuffer)
                  );
                if (this._bodyFormData)
                  throw new Error("could not read FormData body as text");
                return Promise.resolve(this._bodyText);
              }),
              n.formData &&
                (this.formData = function () {
                  return this.text().then(v);
                }),
              (this.json = function () {
                return this.text().then(JSON.parse);
              }),
              this
            );
          }
          (l.prototype.append = function (e, t) {
            (e = o(e)), (t = c(t));
            var r = this.map[e];
            this.map[e] = r ? r + ", " + t : t;
          }),
            (l.prototype.delete = function (e) {
              delete this.map[o(e)];
            }),
            (l.prototype.get = function (e) {
              return (e = o(e)), this.has(e) ? this.map[e] : null;
            }),
            (l.prototype.has = function (e) {
              return this.map.hasOwnProperty(o(e));
            }),
            (l.prototype.set = function (e, t) {
              this.map[o(e)] = c(t);
            }),
            (l.prototype.forEach = function (e, t) {
              for (var r in this.map)
                this.map.hasOwnProperty(r) && e.call(t, this.map[r], r, this);
            }),
            (l.prototype.keys = function () {
              var e = [];
              return (
                this.forEach(function (t, r) {
                  e.push(r);
                }),
                d(e)
              );
            }),
            (l.prototype.values = function () {
              var e = [];
              return (
                this.forEach(function (t) {
                  e.push(t);
                }),
                d(e)
              );
            }),
            (l.prototype.entries = function () {
              var e = [];
              return (
                this.forEach(function (t, r) {
                  e.push([r, t]);
                }),
                d(e)
              );
            }),
            n.iterable && (l.prototype[Symbol.iterator] = l.prototype.entries);
          var g = [
            "CONNECT",
            "DELETE",
            "GET",
            "HEAD",
            "OPTIONS",
            "PATCH",
            "POST",
            "PUT",
            "TRACE",
          ];
          function _(e, t) {
            if (!(this instanceof _))
              throw new TypeError(
                'Please use the "new" operator, this DOM object constructor cannot be called as a function.'
              );
            var r,
              n,
              s = (t = t || {}).body;
            if (e instanceof _) {
              if (e.bodyUsed) throw new TypeError("Already read");
              (this.url = e.url),
                (this.credentials = e.credentials),
                t.headers || (this.headers = new l(e.headers)),
                (this.method = e.method),
                (this.mode = e.mode),
                (this.signal = e.signal),
                s ||
                  null == e._bodyInit ||
                  ((s = e._bodyInit), (e.bodyUsed = !0));
            } else this.url = String(e);
            if (
              ((this.credentials =
                t.credentials || this.credentials || "same-origin"),
              (!t.headers && this.headers) || (this.headers = new l(t.headers)),
              (this.method =
                ((r = t.method || this.method || "GET"),
                (n = r.toUpperCase()),
                g.indexOf(n) > -1 ? n : r)),
              (this.mode = t.mode || this.mode || null),
              (this.signal =
                t.signal ||
                this.signal ||
                (function () {
                  if ("AbortController" in a)
                    return new AbortController().signal;
                })()),
              (this.referrer = null),
              ("GET" === this.method || "HEAD" === this.method) && s)
            )
              throw new TypeError("Body not allowed for GET or HEAD requests");
            if (
              (this._initBody(s),
              !(
                ("GET" !== this.method && "HEAD" !== this.method) ||
                ("no-store" !== t.cache && "no-cache" !== t.cache)
              ))
            ) {
              var i = /([?&])_=[^&]*/;
              if (i.test(this.url))
                this.url = this.url.replace(i, "$1_=" + new Date().getTime());
              else {
                this.url +=
                  (/\?/.test(this.url) ? "&" : "?") +
                  "_=" +
                  new Date().getTime();
              }
            }
          }
          function v(e) {
            var t = new FormData();
            return (
              e
                .trim()
                .split("&")
                .forEach(function (e) {
                  if (e) {
                    var r = e.split("="),
                      a = r.shift().replace(/\+/g, " "),
                      n = r.join("=").replace(/\+/g, " ");
                    t.append(decodeURIComponent(a), decodeURIComponent(n));
                  }
                }),
              t
            );
          }
          function b(e, t) {
            if (!(this instanceof b))
              throw new TypeError(
                'Please use the "new" operator, this DOM object constructor cannot be called as a function.'
              );
            if (
              (t || (t = {}),
              (this.type = "default"),
              (this.status = void 0 === t.status ? 200 : t.status),
              this.status < 200 || this.status > 599)
            )
              throw new RangeError(
                "Failed to construct 'Response': The status provided (0) is outside the range [200, 599]."
              );
            (this.ok = this.status >= 200 && this.status < 300),
              (this.statusText =
                void 0 === t.statusText ? "" : "" + t.statusText),
              (this.headers = new l(t.headers)),
              (this.url = t.url || ""),
              this._initBody(e);
          }
          (_.prototype.clone = function () {
            return new _(this, { body: this._bodyInit });
          }),
            f.call(_.prototype),
            f.call(b.prototype),
            (b.prototype.clone = function () {
              return new b(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new l(this.headers),
                url: this.url,
              });
            }),
            (b.error = function () {
              var e = new b(null, { status: 200, statusText: "" });
              return (e.ok = !1), (e.status = 0), (e.type = "error"), e;
            });
          var y = [301, 302, 303, 307, 308];
          b.redirect = function (e, t) {
            if (-1 === y.indexOf(t))
              throw new RangeError("Invalid status code");
            return new b(null, { status: t, headers: { location: e } });
          };
          var w = a.DOMException;
          try {
            new w();
          } catch (e) {
            ((w = function (e, t) {
              (this.message = e), (this.name = t);
              var r = Error(e);
              this.stack = r.stack;
            }).prototype = Object.create(Error.prototype)),
              (w.prototype.constructor = w);
          }
          function S(e, t) {
            return new Promise(function (r, s) {
              var i = new _(e, t);
              if (i.signal && i.signal.aborted)
                return s(new w("Aborted", "AbortError"));
              var d = new XMLHttpRequest();
              function p() {
                d.abort();
              }
              if (
                ((d.onload = function () {
                  var e,
                    t,
                    a = {
                      statusText: d.statusText,
                      headers:
                        ((e = d.getAllResponseHeaders() || ""),
                        (t = new l()),
                        e
                          .replace(/\r?\n[\t ]+/g, " ")
                          .split("\r")
                          .map(function (e) {
                            return 0 === e.indexOf("\n")
                              ? e.substr(1, e.length)
                              : e;
                          })
                          .forEach(function (e) {
                            var r = e.split(":"),
                              a = r.shift().trim();
                            if (a) {
                              var n = r.join(":").trim();
                              try {
                                t.append(a, n);
                              } catch (e) {
                                console.warn("Response " + e.message);
                              }
                            }
                          }),
                        t),
                    };
                  0 === i.url.indexOf("file://") &&
                  (d.status < 200 || d.status > 599)
                    ? (a.status = 200)
                    : (a.status = d.status),
                    (a.url =
                      "responseURL" in d
                        ? d.responseURL
                        : a.headers.get("X-Request-URL"));
                  var n = "response" in d ? d.response : d.responseText;
                  setTimeout(function () {
                    r(new b(n, a));
                  }, 0);
                }),
                (d.onerror = function () {
                  setTimeout(function () {
                    s(new TypeError("Network request failed"));
                  }, 0);
                }),
                (d.ontimeout = function () {
                  setTimeout(function () {
                    s(new TypeError("Network request timed out"));
                  }, 0);
                }),
                (d.onabort = function () {
                  setTimeout(function () {
                    s(new w("Aborted", "AbortError"));
                  }, 0);
                }),
                d.open(
                  i.method,
                  (function (e) {
                    try {
                      return "" === e && a.location.href ? a.location.href : e;
                    } catch (t) {
                      return e;
                    }
                  })(i.url),
                  !0
                ),
                "include" === i.credentials
                  ? (d.withCredentials = !0)
                  : "omit" === i.credentials && (d.withCredentials = !1),
                "responseType" in d &&
                  (n.blob
                    ? (d.responseType = "blob")
                    : n.arrayBuffer && (d.responseType = "arraybuffer")),
                t &&
                  "object" == typeof t.headers &&
                  !(
                    t.headers instanceof l ||
                    (a.Headers && t.headers instanceof a.Headers)
                  ))
              ) {
                var u = [];
                Object.getOwnPropertyNames(t.headers).forEach(function (e) {
                  u.push(o(e)), d.setRequestHeader(e, c(t.headers[e]));
                }),
                  i.headers.forEach(function (e, t) {
                    -1 === u.indexOf(t) && d.setRequestHeader(t, e);
                  });
              } else
                i.headers.forEach(function (e, t) {
                  d.setRequestHeader(t, e);
                });
              i.signal &&
                (i.signal.addEventListener("abort", p),
                (d.onreadystatechange = function () {
                  4 === d.readyState &&
                    i.signal.removeEventListener("abort", p);
                })),
                d.send(void 0 === i._bodyInit ? null : i._bodyInit);
            });
          }
          (S.polyfill = !0),
            a.fetch ||
              ((a.fetch = S),
              (a.Headers = l),
              (a.Request = _),
              (a.Response = b));
        },
        477: () => {},
        4633: (e, t, r) => {
          var a = r(3738).default;
          function n() {
            "use strict";
            (e.exports = n =
              function () {
                return r;
              }),
              (e.exports.__esModule = !0),
              (e.exports.default = e.exports);
            var t,
              r = {},
              s = Object.prototype,
              i = s.hasOwnProperty,
              o =
                Object.defineProperty ||
                function (e, t, r) {
                  e[t] = r.value;
                },
              c = "function" == typeof Symbol ? Symbol : {},
              d = c.iterator || "@@iterator",
              l = c.asyncIterator || "@@asyncIterator",
              p = c.toStringTag || "@@toStringTag";
            function u(e, t, r) {
              return (
                Object.defineProperty(e, t, {
                  value: r,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                }),
                e[t]
              );
            }
            try {
              u({}, "");
            } catch (t) {
              u = function (e, t, r) {
                return (e[t] = r);
              };
            }
            function h(e, t, r, a) {
              var n = t && t.prototype instanceof y ? t : y,
                s = Object.create(n.prototype),
                i = new M(a || []);
              return o(s, "_invoke", { value: O(e, r, i) }), s;
            }
            function m(e, t, r) {
              try {
                return { type: "normal", arg: e.call(t, r) };
              } catch (e) {
                return { type: "throw", arg: e };
              }
            }
            r.wrap = h;
            var f = "suspendedStart",
              g = "suspendedYield",
              _ = "executing",
              v = "completed",
              b = {};
            function y() {}
            function w() {}
            function S() {}
            var R = {};
            u(R, d, function () {
              return this;
            });
            var E = Object.getPrototypeOf,
              k = E && E(E(A([])));
            k && k !== s && i.call(k, d) && (R = k);
            var T = (S.prototype = y.prototype = Object.create(R));
            function C(e) {
              ["next", "throw", "return"].forEach(function (t) {
                u(e, t, function (e) {
                  return this._invoke(t, e);
                });
              });
            }
            function P(e, t) {
              function r(n, s, o, c) {
                var d = m(e[n], e, s);
                if ("throw" !== d.type) {
                  var l = d.arg,
                    p = l.value;
                  return p && "object" == a(p) && i.call(p, "__await")
                    ? t.resolve(p.__await).then(
                        function (e) {
                          r("next", e, o, c);
                        },
                        function (e) {
                          r("throw", e, o, c);
                        }
                      )
                    : t.resolve(p).then(
                        function (e) {
                          (l.value = e), o(l);
                        },
                        function (e) {
                          return r("throw", e, o, c);
                        }
                      );
                }
                c(d.arg);
              }
              var n;
              o(this, "_invoke", {
                value: function (e, a) {
                  function s() {
                    return new t(function (t, n) {
                      r(e, a, t, n);
                    });
                  }
                  return (n = n ? n.then(s, s) : s());
                },
              });
            }
            function O(e, r, a) {
              var n = f;
              return function (s, i) {
                if (n === _) throw Error("Generator is already running");
                if (n === v) {
                  if ("throw" === s) throw i;
                  return { value: t, done: !0 };
                }
                for (a.method = s, a.arg = i; ; ) {
                  var o = a.delegate;
                  if (o) {
                    var c = D(o, a);
                    if (c) {
                      if (c === b) continue;
                      return c;
                    }
                  }
                  if ("next" === a.method) a.sent = a._sent = a.arg;
                  else if ("throw" === a.method) {
                    if (n === f) throw ((n = v), a.arg);
                    a.dispatchException(a.arg);
                  } else "return" === a.method && a.abrupt("return", a.arg);
                  n = _;
                  var d = m(e, r, a);
                  if ("normal" === d.type) {
                    if (((n = a.done ? v : g), d.arg === b)) continue;
                    return { value: d.arg, done: a.done };
                  }
                  "throw" === d.type &&
                    ((n = v), (a.method = "throw"), (a.arg = d.arg));
                }
              };
            }
            function D(e, r) {
              var a = r.method,
                n = e.iterator[a];
              if (n === t)
                return (
                  (r.delegate = null),
                  ("throw" === a &&
                    e.iterator.return &&
                    ((r.method = "return"),
                    (r.arg = t),
                    D(e, r),
                    "throw" === r.method)) ||
                    ("return" !== a &&
                      ((r.method = "throw"),
                      (r.arg = new TypeError(
                        "The iterator does not provide a '" + a + "' method"
                      )))),
                  b
                );
              var s = m(n, e.iterator, r.arg);
              if ("throw" === s.type)
                return (
                  (r.method = "throw"), (r.arg = s.arg), (r.delegate = null), b
                );
              var i = s.arg;
              return i
                ? i.done
                  ? ((r[e.resultName] = i.value),
                    (r.next = e.nextLoc),
                    "return" !== r.method && ((r.method = "next"), (r.arg = t)),
                    (r.delegate = null),
                    b)
                  : i
                : ((r.method = "throw"),
                  (r.arg = new TypeError("iterator result is not an object")),
                  (r.delegate = null),
                  b);
            }
            function x(e) {
              var t = { tryLoc: e[0] };
              1 in e && (t.catchLoc = e[1]),
                2 in e && ((t.finallyLoc = e[2]), (t.afterLoc = e[3])),
                this.tryEntries.push(t);
            }
            function I(e) {
              var t = e.completion || {};
              (t.type = "normal"), delete t.arg, (e.completion = t);
            }
            function M(e) {
              (this.tryEntries = [{ tryLoc: "root" }]),
                e.forEach(x, this),
                this.reset(!0);
            }
            function A(e) {
              if (e || "" === e) {
                var r = e[d];
                if (r) return r.call(e);
                if ("function" == typeof e.next) return e;
                if (!isNaN(e.length)) {
                  var n = -1,
                    s = function r() {
                      for (; ++n < e.length; )
                        if (i.call(e, n))
                          return (r.value = e[n]), (r.done = !1), r;
                      return (r.value = t), (r.done = !0), r;
                    };
                  return (s.next = s);
                }
              }
              throw new TypeError(a(e) + " is not iterable");
            }
            return (
              (w.prototype = S),
              o(T, "constructor", { value: S, configurable: !0 }),
              o(S, "constructor", { value: w, configurable: !0 }),
              (w.displayName = u(S, p, "GeneratorFunction")),
              (r.isGeneratorFunction = function (e) {
                var t = "function" == typeof e && e.constructor;
                return (
                  !!t &&
                  (t === w || "GeneratorFunction" === (t.displayName || t.name))
                );
              }),
              (r.mark = function (e) {
                return (
                  Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, S)
                    : ((e.__proto__ = S), u(e, p, "GeneratorFunction")),
                  (e.prototype = Object.create(T)),
                  e
                );
              }),
              (r.awrap = function (e) {
                return { __await: e };
              }),
              C(P.prototype),
              u(P.prototype, l, function () {
                return this;
              }),
              (r.AsyncIterator = P),
              (r.async = function (e, t, a, n, s) {
                void 0 === s && (s = Promise);
                var i = new P(h(e, t, a, n), s);
                return r.isGeneratorFunction(t)
                  ? i
                  : i.next().then(function (e) {
                      return e.done ? e.value : i.next();
                    });
              }),
              C(T),
              u(T, p, "Generator"),
              u(T, d, function () {
                return this;
              }),
              u(T, "toString", function () {
                return "[object Generator]";
              }),
              (r.keys = function (e) {
                var t = Object(e),
                  r = [];
                for (var a in t) r.push(a);
                return (
                  r.reverse(),
                  function e() {
                    for (; r.length; ) {
                      var a = r.pop();
                      if (a in t) return (e.value = a), (e.done = !1), e;
                    }
                    return (e.done = !0), e;
                  }
                );
              }),
              (r.values = A),
              (M.prototype = {
                constructor: M,
                reset: function (e) {
                  if (
                    ((this.prev = 0),
                    (this.next = 0),
                    (this.sent = this._sent = t),
                    (this.done = !1),
                    (this.delegate = null),
                    (this.method = "next"),
                    (this.arg = t),
                    this.tryEntries.forEach(I),
                    !e)
                  )
                    for (var r in this)
                      "t" === r.charAt(0) &&
                        i.call(this, r) &&
                        !isNaN(+r.slice(1)) &&
                        (this[r] = t);
                },
                stop: function () {
                  this.done = !0;
                  var e = this.tryEntries[0].completion;
                  if ("throw" === e.type) throw e.arg;
                  return this.rval;
                },
                dispatchException: function (e) {
                  if (this.done) throw e;
                  var r = this;
                  function a(a, n) {
                    return (
                      (o.type = "throw"),
                      (o.arg = e),
                      (r.next = a),
                      n && ((r.method = "next"), (r.arg = t)),
                      !!n
                    );
                  }
                  for (var n = this.tryEntries.length - 1; n >= 0; --n) {
                    var s = this.tryEntries[n],
                      o = s.completion;
                    if ("root" === s.tryLoc) return a("end");
                    if (s.tryLoc <= this.prev) {
                      var c = i.call(s, "catchLoc"),
                        d = i.call(s, "finallyLoc");
                      if (c && d) {
                        if (this.prev < s.catchLoc) return a(s.catchLoc, !0);
                        if (this.prev < s.finallyLoc) return a(s.finallyLoc);
                      } else if (c) {
                        if (this.prev < s.catchLoc) return a(s.catchLoc, !0);
                      } else {
                        if (!d)
                          throw Error("try statement without catch or finally");
                        if (this.prev < s.finallyLoc) return a(s.finallyLoc);
                      }
                    }
                  }
                },
                abrupt: function (e, t) {
                  for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                    var a = this.tryEntries[r];
                    if (
                      a.tryLoc <= this.prev &&
                      i.call(a, "finallyLoc") &&
                      this.prev < a.finallyLoc
                    ) {
                      var n = a;
                      break;
                    }
                  }
                  n &&
                    ("break" === e || "continue" === e) &&
                    n.tryLoc <= t &&
                    t <= n.finallyLoc &&
                    (n = null);
                  var s = n ? n.completion : {};
                  return (
                    (s.type = e),
                    (s.arg = t),
                    n
                      ? ((this.method = "next"), (this.next = n.finallyLoc), b)
                      : this.complete(s)
                  );
                },
                complete: function (e, t) {
                  if ("throw" === e.type) throw e.arg;
                  return (
                    "break" === e.type || "continue" === e.type
                      ? (this.next = e.arg)
                      : "return" === e.type
                      ? ((this.rval = this.arg = e.arg),
                        (this.method = "return"),
                        (this.next = "end"))
                      : "normal" === e.type && t && (this.next = t),
                    b
                  );
                },
                finish: function (e) {
                  for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                    var r = this.tryEntries[t];
                    if (r.finallyLoc === e)
                      return this.complete(r.completion, r.afterLoc), I(r), b;
                  }
                },
                catch: function (e) {
                  for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                    var r = this.tryEntries[t];
                    if (r.tryLoc === e) {
                      var a = r.completion;
                      if ("throw" === a.type) {
                        var n = a.arg;
                        I(r);
                      }
                      return n;
                    }
                  }
                  throw Error("illegal catch attempt");
                },
                delegateYield: function (e, r, a) {
                  return (
                    (this.delegate = {
                      iterator: A(e),
                      resultName: r,
                      nextLoc: a,
                    }),
                    "next" === this.method && (this.arg = t),
                    b
                  );
                },
              }),
              r
            );
          }
          (e.exports = n),
            (e.exports.__esModule = !0),
            (e.exports.default = e.exports);
        },
        3738: (e) => {
          function t(r) {
            return (
              (e.exports = t =
                "function" == typeof Symbol &&
                "symbol" == typeof Symbol.iterator
                  ? function (e) {
                      return typeof e;
                    }
                  : function (e) {
                      return e &&
                        "function" == typeof Symbol &&
                        e.constructor === Symbol &&
                        e !== Symbol.prototype
                        ? "symbol"
                        : typeof e;
                    }),
              (e.exports.__esModule = !0),
              (e.exports.default = e.exports),
              t(r)
            );
          }
          (e.exports = t),
            (e.exports.__esModule = !0),
            (e.exports.default = e.exports);
        },
        4756: (e, t, r) => {
          var a = r(4633)();
          e.exports = a;
          try {
            regeneratorRuntime = a;
          } catch (e) {
            "object" == typeof globalThis
              ? (globalThis.regeneratorRuntime = a)
              : Function("r", "regeneratorRuntime = r")(a);
          }
        },
        3145: (e, t, r) => {
          "use strict";
          function a(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, a = Array(t); r < t; r++) a[r] = e[r];
            return a;
          }
          r.d(t, { A: () => a });
        },
        467: (e, t, r) => {
          "use strict";
          function a(e, t, r, a, n, s, i) {
            try {
              var o = e[s](i),
                c = o.value;
            } catch (e) {
              return void r(e);
            }
            o.done ? t(c) : Promise.resolve(c).then(a, n);
          }
          function n(e) {
            return function () {
              var t = this,
                r = arguments;
              return new Promise(function (n, s) {
                var i = e.apply(t, r);
                function o(e) {
                  a(i, n, s, o, c, "next", e);
                }
                function c(e) {
                  a(i, n, s, o, c, "throw", e);
                }
                o(void 0);
              });
            };
          }
          r.d(t, { A: () => n });
        },
        3029: (e, t, r) => {
          "use strict";
          function a(e, t) {
            if (!(e instanceof t))
              throw new TypeError("Cannot call a class as a function");
          }
          r.d(t, { A: () => a });
        },
        2901: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => s });
          var a = r(816);
          function n(e, t) {
            for (var r = 0; r < t.length; r++) {
              var n = t[r];
              (n.enumerable = n.enumerable || !1),
                (n.configurable = !0),
                "value" in n && (n.writable = !0),
                Object.defineProperty(e, (0, a.A)(n.key), n);
            }
          }
          function s(e, t, r) {
            return (
              t && n(e.prototype, t),
              r && n(e, r),
              Object.defineProperty(e, "prototype", { writable: !1 }),
              e
            );
          }
        },
        4467: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => n });
          var a = r(816);
          function n(e, t, r) {
            return (
              (t = (0, a.A)(t)) in e
                ? Object.defineProperty(e, t, {
                    value: r,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (e[t] = r),
              e
            );
          }
        },
        296: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => n });
          var a = r(7800);
          function n(e, t) {
            return (
              (function (e) {
                if (Array.isArray(e)) return e;
              })(e) ||
              (function (e, t) {
                var r =
                  null == e
                    ? null
                    : ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
                      e["@@iterator"];
                if (null != r) {
                  var a,
                    n,
                    s,
                    i,
                    o = [],
                    c = !0,
                    d = !1;
                  try {
                    if (((s = (r = r.call(e)).next), 0 === t)) {
                      if (Object(r) !== r) return;
                      c = !1;
                    } else
                      for (
                        ;
                        !(c = (a = s.call(r)).done) &&
                        (o.push(a.value), o.length !== t);
                        c = !0
                      );
                  } catch (e) {
                    (d = !0), (n = e);
                  } finally {
                    try {
                      if (
                        !c &&
                        null != r.return &&
                        ((i = r.return()), Object(i) !== i)
                      )
                        return;
                    } finally {
                      if (d) throw n;
                    }
                  }
                  return o;
                }
              })(e, t) ||
              (0, a.A)(e, t) ||
              (function () {
                throw new TypeError(
                  "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              })()
            );
          }
        },
        5458: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => s });
          var a = r(3145);
          var n = r(7800);
          function s(e) {
            return (
              (function (e) {
                if (Array.isArray(e)) return (0, a.A)(e);
              })(e) ||
              (function (e) {
                if (
                  ("undefined" != typeof Symbol &&
                    null != e[Symbol.iterator]) ||
                  null != e["@@iterator"]
                )
                  return Array.from(e);
              })(e) ||
              (0, n.A)(e) ||
              (function () {
                throw new TypeError(
                  "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              })()
            );
          }
        },
        816: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => n });
          var a = r(2284);
          function n(e) {
            var t = (function (e, t) {
              if ("object" != (0, a.A)(e) || !e) return e;
              var r = e[Symbol.toPrimitive];
              if (void 0 !== r) {
                var n = r.call(e, t || "default");
                if ("object" != (0, a.A)(n)) return n;
                throw new TypeError(
                  "@@toPrimitive must return a primitive value."
                );
              }
              return ("string" === t ? String : Number)(e);
            })(e, "string");
            return "symbol" == (0, a.A)(t) ? t : t + "";
          }
        },
        2284: (e, t, r) => {
          "use strict";
          function a(e) {
            return (
              (a =
                "function" == typeof Symbol &&
                "symbol" == typeof Symbol.iterator
                  ? function (e) {
                      return typeof e;
                    }
                  : function (e) {
                      return e &&
                        "function" == typeof Symbol &&
                        e.constructor === Symbol &&
                        e !== Symbol.prototype
                        ? "symbol"
                        : typeof e;
                    }),
              a(e)
            );
          }
          r.d(t, { A: () => a });
        },
        7800: (e, t, r) => {
          "use strict";
          r.d(t, { A: () => n });
          var a = r(3145);
          function n(e, t) {
            if (e) {
              if ("string" == typeof e) return (0, a.A)(e, t);
              var r = {}.toString.call(e).slice(8, -1);
              return (
                "Object" === r && e.constructor && (r = e.constructor.name),
                "Map" === r || "Set" === r
                  ? Array.from(e)
                  : "Arguments" === r ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                  ? (0, a.A)(e, t)
                  : void 0
              );
            }
          }
        },
        7949: (e) => {
          "use strict";
          e.exports = JSON.parse(
            '{"name":"protoo-client","version":"4.0.6","description":"protoo JavaScript client module","author":"Iñaki Baz Castillo <ibc@aliax.net>","homepage":"https://protoo.versatica.com","license":"MIT","repository":{"type":"git","url":"https://github.com/ibc/protoo.git"},"main":"lib/index.js","keywords":["nodejs","browser","websocket"],"engines":{"node":">=8.0.0"},"scripts":{"lint":"eslint -c .eslintrc.js lib"},"dependencies":{"debug":"^4.3.1","events":"^3.2.0","retry":"^0.12.0"},"devDependencies":{"eslint":"^5.16.0"},"optionalDependencies":{"websocket":"^1.0.33"}}'
          );
        },
        9003: (e) => {
          "use strict";
          e.exports = { version: "1.0.35" };
        },
      },
      t = {};
    function r(a) {
      var n = t[a];
      if (void 0 !== n) return n.exports;
      var s = (t[a] = { exports: {} });
      return e[a].call(s.exports, s, s.exports, r), s.exports;
    }
    (r.amdO = {}),
      (r.n = (e) => {
        var t = e && e.__esModule ? () => e.default : () => e;
        return r.d(t, { a: t }), t;
      }),
      (r.d = (e, t) => {
        for (var a in t)
          r.o(t, a) &&
            !r.o(e, a) &&
            Object.defineProperty(e, a, { enumerable: !0, get: t[a] });
      }),
      (r.g = (function () {
        if ("object" == typeof globalThis) return globalThis;
        try {
          return this || new Function("return this")();
        } catch (e) {
          if ("object" == typeof window) return window;
        }
      })()),
      (r.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
      (r.r = (e) => {
        "undefined" != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
          Object.defineProperty(e, "__esModule", { value: !0 });
      });
    var a = {};
    return (
      (() => {
        "use strict";
        r.r(a),
          r.d(a, {
            CameraDeviceInfo: () => er,
            DeviceInfo: () => Zt,
            MicrophoneDeviceInfo: () => tr,
            VideoSDK: () => Ds,
            ZujoSDK: () => Ms,
          });
        var e = r(2284),
          t = r(467),
          n = r(3029),
          s = r(2901),
          i = r(4467),
          o = r(4756),
          c = r.n(o),
          d = r(6880),
          l = r.n(d);
        function p(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var a = Object.getOwnPropertySymbols(e);
            t &&
              (a = a.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, a);
          }
          return r;
        }
        function u(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? p(Object(r), !0).forEach(function (t) {
                  (0, i.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : p(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        function h(e) {
          return (
            "Minified Redux error #" +
            e +
            "; visit https://redux.js.org/Errors?code=" +
            e +
            " for the full message or use the non-minified dev environment for full errors. "
          );
        }
        var m =
            ("function" == typeof Symbol && Symbol.observable) ||
            "@@observable",
          f = function () {
            return Math.random().toString(36).substring(7).split("").join(".");
          },
          g = {
            INIT: "@@redux/INIT" + f(),
            REPLACE: "@@redux/REPLACE" + f(),
            PROBE_UNKNOWN_ACTION: function () {
              return "@@redux/PROBE_UNKNOWN_ACTION" + f();
            },
          };
        function _(e) {
          if ("object" != typeof e || null === e) return !1;
          for (var t = e; null !== Object.getPrototypeOf(t); )
            t = Object.getPrototypeOf(t);
          return Object.getPrototypeOf(e) === t;
        }
        function v(e, t, r) {
          var a;
          if (
            ("function" == typeof t && "function" == typeof r) ||
            ("function" == typeof r && "function" == typeof arguments[3])
          )
            throw new Error(h(0));
          if (
            ("function" == typeof t && void 0 === r && ((r = t), (t = void 0)),
            void 0 !== r)
          ) {
            if ("function" != typeof r) throw new Error(h(1));
            return r(v)(e, t);
          }
          if ("function" != typeof e) throw new Error(h(2));
          var n = e,
            s = t,
            i = [],
            o = i,
            c = !1;
          function d() {
            o === i && (o = i.slice());
          }
          function l() {
            if (c) throw new Error(h(3));
            return s;
          }
          function p(e) {
            if ("function" != typeof e) throw new Error(h(4));
            if (c) throw new Error(h(5));
            var t = !0;
            return (
              d(),
              o.push(e),
              function () {
                if (t) {
                  if (c) throw new Error(h(6));
                  (t = !1), d();
                  var r = o.indexOf(e);
                  o.splice(r, 1), (i = null);
                }
              }
            );
          }
          function u(e) {
            if (!_(e)) throw new Error(h(7));
            if (void 0 === e.type) throw new Error(h(8));
            if (c) throw new Error(h(9));
            try {
              (c = !0), (s = n(s, e));
            } finally {
              c = !1;
            }
            for (var t = (i = o), r = 0; r < t.length; r++) {
              (0, t[r])();
            }
            return e;
          }
          return (
            u({ type: g.INIT }),
            ((a = {
              dispatch: u,
              subscribe: p,
              getState: l,
              replaceReducer: function (e) {
                if ("function" != typeof e) throw new Error(h(10));
                (n = e), u({ type: g.REPLACE });
              },
            })[m] = function () {
              var e,
                t = p;
              return (
                ((e = {
                  subscribe: function (e) {
                    if ("object" != typeof e || null === e)
                      throw new Error(h(11));
                    function r() {
                      e.next && e.next(l());
                    }
                    return r(), { unsubscribe: t(r) };
                  },
                })[m] = function () {
                  return this;
                }),
                e
              );
            }),
            a
          );
        }
        function b() {
          for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
            t[r] = arguments[r];
          return 0 === t.length
            ? function (e) {
                return e;
              }
            : 1 === t.length
            ? t[0]
            : t.reduce(function (e, t) {
                return function () {
                  return e(t.apply(void 0, arguments));
                };
              });
        }
        function y() {
          for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
            t[r] = arguments[r];
          return function (e) {
            return function () {
              var r = e.apply(void 0, arguments),
                a = function () {
                  throw new Error(h(15));
                },
                n = {
                  getState: r.getState,
                  dispatch: function () {
                    return a.apply(void 0, arguments);
                  },
                },
                s = t.map(function (e) {
                  return e(n);
                });
              return (
                (a = b.apply(void 0, s)(r.dispatch)),
                u(u({}, r), {}, { dispatch: a })
              );
            };
          };
        }
        function w(e) {
          return function (t) {
            var r = t.dispatch,
              a = t.getState;
            return function (t) {
              return function (n) {
                return "function" == typeof n ? n(r, a, e) : t(n);
              };
            };
          };
        }
        var S = w();
        S.withExtraArgument = w;
        const R = S;
        var E = r(2211),
          k = r.n(E);
        function T(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var a = Object.getOwnPropertySymbols(e);
            t &&
              (a = a.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, a);
          }
          return r;
        }
        function C(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? T(Object(r), !0).forEach(function (t) {
                  (0, i.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : T(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var P = {
          url: null,
          state: "new",
          activeSpeakerId: null,
          statsPeerId: null,
          faceDetection: !1,
        };
        const O = function () {
          var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : P,
            t = arguments.length > 1 ? arguments[1] : void 0;
          switch (t.type) {
            case "SET_ROOM_URL":
              var r = t.payload.url;
              return C(C({}, e), {}, { url: r });
            case "SET_ROOM_STATE":
              var a = t.payload.state;
              return C(
                C({}, e),
                {},
                "connected" === a
                  ? { state: a }
                  : { state: a, activeSpeakerId: null, statsPeerId: null }
              );
            case "SET_ROOM_ACTIVE_SPEAKER":
              var n = t.payload.peerId;
              return C(C({}, e), {}, { activeSpeakerId: n });
            case "SET_ROOM_STATS_PEER_ID":
              var s = t.payload.peerId;
              return e.statsPeerId === s
                ? C(C({}, e), {}, { statsPeerId: null })
                : C(C({}, e), {}, { statsPeerId: s });
            case "SET_FACE_DETECTION":
              var i = t.payload;
              return C(C({}, e), {}, { faceDetection: i });
            case "REMOVE_PEER":
              var o = t.payload.peerId,
                c = C({}, e);
              return (
                o && o === e.activeSpeakerId && (c.activeSpeakerId = null),
                o && o === e.statsPeerId && (c.statsPeerId = null),
                c
              );
            default:
              return e;
          }
        };
        function D(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var a = Object.getOwnPropertySymbols(e);
            t &&
              (a = a.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, a);
          }
          return r;
        }
        function x(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? D(Object(r), !0).forEach(function (t) {
                  (0, i.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : D(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var I = {
          id: null,
          displayName: null,
          displayNameSet: !1,
          device: null,
          canSendMic: !1,
          canSendWebcam: !1,
          canChangeWebcam: !1,
          webcamInProgress: !1,
          shareInProgress: !1,
          audioOnly: !1,
          audioOnlyInProgress: !1,
          audioMuted: !1,
          restartIceInProgress: !1,
        };
        const M = function () {
          var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : I,
            t = arguments.length > 1 ? arguments[1] : void 0;
          switch (t.type) {
            case "SET_ROOM_STATE":
              return "closed" === t.payload.state
                ? x(
                    x({}, e),
                    {},
                    {
                      webcamInProgress: !1,
                      shareInProgress: !1,
                      audioOnly: !1,
                      audioOnlyInProgress: !1,
                      audioMuted: !1,
                      restartIceInProgress: !1,
                    }
                  )
                : e;
            case "SET_ME":
              var r = t.payload,
                a = r.peerId,
                n = r.displayName,
                s = r.displayNameSet,
                i = r.device;
              return x(
                x({}, e),
                {},
                { id: a, displayName: n, displayNameSet: s, device: i }
              );
            case "SET_MEDIA_CAPABILITIES":
              var o = t.payload,
                c = o.canSendMic,
                d = o.canSendWebcam;
              return x(x({}, e), {}, { canSendMic: c, canSendWebcam: d });
            case "SET_CAN_CHANGE_WEBCAM":
              var l = t.payload;
              return x(x({}, e), {}, { canChangeWebcam: l });
            case "SET_WEBCAM_IN_PROGRESS":
              var p = t.payload.flag;
              return x(x({}, e), {}, { webcamInProgress: p });
            case "SET_SHARE_IN_PROGRESS":
              var u = t.payload.flag;
              return x(x({}, e), {}, { shareInProgress: u });
            case "SET_DISPLAY_NAME":
              var h = t.payload.displayName;
              return (
                h || (h = e.displayName),
                x(x({}, e), {}, { displayName: h, displayNameSet: !0 })
              );
            case "SET_AUDIO_ONLY_STATE":
              var m = t.payload.enabled;
              return x(x({}, e), {}, { audioOnly: m });
            case "SET_AUDIO_ONLY_IN_PROGRESS":
              var f = t.payload.flag;
              return x(x({}, e), {}, { audioOnlyInProgress: f });
            case "SET_AUDIO_MUTED_STATE":
              var g = t.payload.enabled;
              return x(x({}, e), {}, { audioMuted: g });
            case "SET_RESTART_ICE_IN_PROGRESS":
              var _ = t.payload.flag;
              return x(x({}, e), {}, { restartIceInProgress: _ });
            default:
              return e;
          }
        };
        function A(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var a = Object.getOwnPropertySymbols(e);
            t &&
              (a = a.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, a);
          }
          return r;
        }
        function L(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? A(Object(r), !0).forEach(function (t) {
                  (0, i.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : A(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var N = {};
        const j = function () {
          var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : N,
            t = arguments.length > 1 ? arguments[1] : void 0;
          switch (t.type) {
            case "SET_ROOM_STATE":
              return "closed" === t.payload.state ? {} : e;
            case "ADD_PRODUCER":
              var r = t.payload.producer;
              return L(L({}, e), {}, (0, i.A)({}, r.id, r));
            case "REMOVE_PRODUCER":
              var a = t.payload.producerId,
                n = L({}, e);
              return delete n[a], n;
            case "SET_PRODUCER_PAUSED":
              var s = t.payload.producerId,
                o = L(L({}, e[s]), {}, { paused: !0 });
              return L(L({}, e), {}, (0, i.A)({}, s, o));
            case "SET_PRODUCER_RESUMED":
              var c = t.payload.producerId,
                d = L(L({}, e[c]), {}, { paused: !1 });
              return L(L({}, e), {}, (0, i.A)({}, c, d));
            case "SET_PRODUCER_TRACK":
              var l = t.payload,
                p = l.producerId,
                u = l.track,
                h = L(L({}, e[p]), {}, { track: u });
              return L(L({}, e), {}, (0, i.A)({}, p, h));
            case "SET_PRODUCER_SCORE":
              var m = t.payload,
                f = m.producerId,
                g = m.score,
                _ = e[f];
              if (!_) return e;
              var v = L(L({}, _), {}, { score: g });
              return L(L({}, e), {}, (0, i.A)({}, f, v));
            default:
              return e;
          }
        };
        function B(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var a = Object.getOwnPropertySymbols(e);
            t &&
              (a = a.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, a);
          }
          return r;
        }
        function F(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? B(Object(r), !0).forEach(function (t) {
                  (0, i.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : B(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var U = {};
        const W = function () {
          var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : U,
            t = arguments.length > 1 ? arguments[1] : void 0;
          switch (t.type) {
            case "SET_ROOM_STATE":
              return "closed" === t.payload.state ? {} : e;
            case "ADD_DATA_PRODUCER":
              var r = t.payload.dataProducer;
              return F(F({}, e), {}, (0, i.A)({}, r.id, r));
            case "REMOVE_DATA_PRODUCER":
              var a = t.payload.dataProducerId,
                n = F({}, e);
              return delete n[a], n;
            default:
              return e;
          }
        };
        var q = r(5458);
        function H(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var a = Object.getOwnPropertySymbols(e);
            t &&
              (a = a.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, a);
          }
          return r;
        }
        function V(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? H(Object(r), !0).forEach(function (t) {
                  (0, i.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : H(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var G = {};
        function z(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var a = Object.getOwnPropertySymbols(e);
            t &&
              (a = a.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, a);
          }
          return r;
        }
        function $(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? z(Object(r), !0).forEach(function (t) {
                  (0, i.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : z(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var K = {};
        function J(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var a = Object.getOwnPropertySymbols(e);
            t &&
              (a = a.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, a);
          }
          return r;
        }
        function Q(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? J(Object(r), !0).forEach(function (t) {
                  (0, i.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : J(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        var Y = {};
        var X = [];
        const Z = (function (e) {
          for (var t = Object.keys(e), r = {}, a = 0; a < t.length; a++) {
            var n = t[a];
            0, "function" == typeof e[n] && (r[n] = e[n]);
          }
          var s,
            i = Object.keys(r);
          try {
            !(function (e) {
              Object.keys(e).forEach(function (t) {
                var r = e[t];
                if (void 0 === r(void 0, { type: g.INIT }))
                  throw new Error(h(12));
                if (void 0 === r(void 0, { type: g.PROBE_UNKNOWN_ACTION() }))
                  throw new Error(h(13));
              });
            })(r);
          } catch (e) {
            s = e;
          }
          return function (e, t) {
            if ((void 0 === e && (e = {}), s)) throw s;
            for (var a = !1, n = {}, o = 0; o < i.length; o++) {
              var c = i[o],
                d = r[c],
                l = e[c],
                p = d(l, t);
              if (void 0 === p) {
                t && t.type;
                throw new Error(h(14));
              }
              (n[c] = p), (a = a || p !== l);
            }
            return (a = a || i.length !== Object.keys(e).length) ? n : e;
          };
        })({
          room: O,
          me: M,
          producers: j,
          dataProducers: W,
          peers: function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : G,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_STATE":
                return "closed" === t.payload.state ? {} : e;
              case "ADD_PEER":
                var r = t.payload.peer;
                return V(V({}, e), {}, (0, i.A)({}, r.id, r));
              case "REMOVE_PEER":
                var a = t.payload.peerId,
                  n = V({}, e);
                return delete n[a], n;
              case "SET_PEER_DISPLAY_NAME":
                var s = t.payload,
                  o = s.displayName,
                  c = e[s.peerId];
                if (!c) throw new Error("no Peer found");
                var d = V(V({}, c), {}, { displayName: o });
                return V(V({}, e), {}, (0, i.A)({}, d.id, d));
              case "ADD_CONSUMER":
                var l = t.payload,
                  p = l.consumer,
                  u = e[l.peerId];
                if (!u) throw new Error("no Peer found for new Consumer");
                var h = [].concat((0, q.A)(u.consumers), [p.id]),
                  m = V(V({}, u), {}, { consumers: h });
                return V(V({}, e), {}, (0, i.A)({}, m.id, m));
              case "REMOVE_CONSUMER":
                var f = t.payload,
                  g = f.consumerId,
                  _ = e[f.peerId];
                if (!_) return e;
                var v = _.consumers.indexOf(g);
                if (-1 === v) throw new Error("Consumer not found");
                var b = _.consumers.slice();
                b.splice(v, 1);
                var y = V(V({}, _), {}, { consumers: b });
                return V(V({}, e), {}, (0, i.A)({}, y.id, y));
              case "ADD_DATA_CONSUMER":
                var w = t.payload,
                  S = w.dataConsumer,
                  R = w.peerId;
                if (!R) return e;
                var E = e[R];
                if (!E) throw new Error("no Peer found for new DataConsumer");
                var k = [].concat((0, q.A)(E.dataConsumers), [S.id]),
                  T = V(V({}, E), {}, { dataConsumers: k });
                return V(V({}, e), {}, (0, i.A)({}, T.id, T));
              case "REMOVE_DATA_CONSUMER":
                var C = t.payload,
                  P = C.dataConsumerId,
                  O = C.peerId;
                if (!O) return e;
                var D = e[O];
                if (!D) return e;
                var x = D.dataConsumers.indexOf(P);
                if (-1 === x) throw new Error("DataConsumer not found");
                var I = D.dataConsumers.slice();
                I.splice(x, 1);
                var M = V(V({}, D), {}, { dataConsumers: I });
                return V(V({}, e), {}, (0, i.A)({}, M.id, M));
              default:
                return e;
            }
          },
          consumers: function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : K,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_STATE":
                return "closed" === t.payload.state ? {} : e;
              case "ADD_CONSUMER":
                var r = t.payload.consumer;
                return $($({}, e), {}, (0, i.A)({}, r.id, r));
              case "REMOVE_CONSUMER":
                var a = t.payload.consumerId,
                  n = $({}, e);
                return delete n[a], n;
              case "SET_CONSUMER_PAUSED":
                var s,
                  o = t.payload,
                  c = o.consumerId,
                  d = o.originator,
                  l = e[c];
                return (
                  (s = $(
                    $({}, l),
                    {},
                    "local" === d
                      ? { locallyPaused: !0 }
                      : { remotelyPaused: !0 }
                  )),
                  $($({}, e), {}, (0, i.A)({}, c, s))
                );
              case "SET_CONSUMER_RESUMED":
                var p,
                  u = t.payload,
                  h = u.consumerId,
                  m = u.originator,
                  f = e[h];
                return (
                  (p = $(
                    $({}, f),
                    {},
                    "local" === m
                      ? { locallyPaused: !1 }
                      : { remotelyPaused: !1 }
                  )),
                  $($({}, e), {}, (0, i.A)({}, h, p))
                );
              case "SET_CONSUMER_CURRENT_LAYERS":
                var g = t.payload,
                  _ = g.consumerId,
                  v = g.spatialLayer,
                  b = g.temporalLayer,
                  y = $(
                    $({}, e[_]),
                    {},
                    { currentSpatialLayer: v, currentTemporalLayer: b }
                  );
                return $($({}, e), {}, (0, i.A)({}, _, y));
              case "SET_CONSUMER_PREFERRED_LAYERS":
                var w = t.payload,
                  S = w.consumerId,
                  R = w.spatialLayer,
                  E = w.temporalLayer,
                  k = $(
                    $({}, e[S]),
                    {},
                    { preferredSpatialLayer: R, preferredTemporalLayer: E }
                  );
                return $($({}, e), {}, (0, i.A)({}, S, k));
              case "SET_CONSUMER_PRIORITY":
                var T = t.payload,
                  C = T.consumerId,
                  P = T.priority,
                  O = $($({}, e[C]), {}, { priority: P });
                return $($({}, e), {}, (0, i.A)({}, C, O));
              case "SET_CONSUMER_TRACK":
                var D = t.payload,
                  x = D.consumerId,
                  I = D.track,
                  M = $($({}, e[x]), {}, { track: I });
                return $($({}, e), {}, (0, i.A)({}, x, M));
              case "SET_CONSUMER_SCORE":
                var A = t.payload,
                  L = A.consumerId,
                  N = A.score,
                  j = e[L];
                if (!j) return e;
                var B = $($({}, j), {}, { score: N });
                return $($({}, e), {}, (0, i.A)({}, L, B));
              default:
                return e;
            }
          },
          dataConsumers: function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : Y,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_STATE":
                return "closed" === t.payload.state ? {} : e;
              case "ADD_DATA_CONSUMER":
                var r = t.payload.dataConsumer;
                return Q(Q({}, e), {}, (0, i.A)({}, r.id, r));
              case "REMOVE_DATA_CONSUMER":
                var a = t.payload.dataConsumerId,
                  n = Q({}, e);
                return delete n[a], n;
              default:
                return e;
            }
          },
          notifications: function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : X,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "ADD_NOTIFICATION":
                var r = t.payload.notification;
                return [].concat((0, q.A)(e), [r]);
              case "REMOVE_NOTIFICATION":
                var a = t.payload.notificationId;
                return e.filter(function (e) {
                  return e.id !== a;
                });
              case "REMOVE_ALL_NOTIFICATIONS":
                return [];
              default:
                return e;
            }
          },
        });
        var ee = r(2487);
        var te = r(7007),
          re = r(296),
          ae =
            (r(2487).default,
            (0, s.A)(function e() {
              (0, n.A)(this, e), (this.roomClient = null);
            })),
          ne = new ((function () {
            function e() {
              (0, n.A)(this, e), e.instance || (e.instance = new ae());
            }
            return (0, s.A)(e, [
              {
                key: "getInstance",
                value: function () {
                  return e.instance;
                },
              },
            ]);
          })())();
        Object.freeze(ne);
        var se = ne.getInstance(),
          ie = (function () {
            return (0, s.A)(
              function e(t) {
                (0, n.A)(this, e),
                  (this.id = t.id),
                  (this.kind = t.track.kind),
                  (this.codec = t.codec),
                  (this.track = t.track),
                  (this.producerOrConsumer = t.instance),
                  t.appData &&
                    !0 === t.appData.share &&
                    "video" === t.track.kind &&
                    (this.kind = "share"),
                  t.appData &&
                    !0 === t.appData.share &&
                    "audio" === t.track.kind &&
                    (this.kind = "shareAudio");
              },
              [
                {
                  key: "pause",
                  value: function () {
                    se.roomClient._pauseConsumer(this.producerOrConsumer);
                  },
                },
                {
                  key: "resume",
                  value: function () {
                    se.roomClient._resumeConsumer(this.producerOrConsumer);
                  },
                },
                {
                  key: "paused",
                  get: function () {
                    return this.producerOrConsumer.paused;
                  },
                },
              ]
            );
          })();
        function oe(e, t) {
          var r =
            ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
            e["@@iterator"];
          if (!r) {
            if (
              Array.isArray(e) ||
              (r = (function (e, t) {
                if (e) {
                  if ("string" == typeof e) return ce(e, t);
                  var r = {}.toString.call(e).slice(8, -1);
                  return (
                    "Object" === r && e.constructor && (r = e.constructor.name),
                    "Map" === r || "Set" === r
                      ? Array.from(e)
                      : "Arguments" === r ||
                        /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                      ? ce(e, t)
                      : void 0
                  );
                }
              })(e)) ||
              (t && e && "number" == typeof e.length)
            ) {
              r && (e = r);
              var a = 0,
                n = function () {};
              return {
                s: n,
                n: function () {
                  return a >= e.length
                    ? { done: !0 }
                    : { done: !1, value: e[a++] };
                },
                e: function (e) {
                  throw e;
                },
                f: n,
              };
            }
            throw new TypeError(
              "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
            );
          }
          var s,
            i = !0,
            o = !1;
          return {
            s: function () {
              r = r.call(e);
            },
            n: function () {
              var e = r.next();
              return (i = e.done), e;
            },
            e: function (e) {
              (o = !0), (s = e);
            },
            f: function () {
              try {
                i || null == r.return || r.return();
              } finally {
                if (o) throw s;
              }
            },
          };
        }
        function ce(e, t) {
          (null == t || t > e.length) && (t = e.length);
          for (var r = 0, a = Array(t); r < t; r++) a[r] = e[r];
          return a;
        }
        var de = "stream-enabled",
          le = "stream-disabled",
          pe = "media-status-changed",
          ue = "video-quality-changed",
          he = (function () {
            return (0, s.A)(
              function e(r) {
                var a = this;
                (0, n.A)(this, e),
                  (0, i.A)(
                    this,
                    "captureImage",
                    (0, t.A)(
                      c().mark(function e() {
                        var r,
                          n,
                          s,
                          i,
                          o,
                          d,
                          l,
                          p,
                          u = arguments;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  (n = (r =
                                    u.length > 0 && void 0 !== u[0] ? u[0] : {})
                                    .height),
                                    (s = r.width),
                                    (e.prev = 1),
                                    (i = (0, q.A)(a.streams.values())),
                                    (o = oe(i)),
                                    (e.prev = 4),
                                    (l = c().mark(function e() {
                                      var r, a, i, o, l;
                                      return c().wrap(
                                        function (e) {
                                          for (;;)
                                            switch ((e.prev = e.next)) {
                                              case 0:
                                                if (
                                                  "video" != (r = d.value).kind
                                                ) {
                                                  e.next = 19;
                                                  break;
                                                }
                                                return (
                                                  (e.prev = 2),
                                                  (a =
                                                    new MediaStream()).addTrack(
                                                    r.track
                                                  ),
                                                  ((i =
                                                    document.createElement(
                                                      "video"
                                                    )).srcObject = a),
                                                  (i.playsInline = !0),
                                                  ((o =
                                                    document.createElement(
                                                      "canvas"
                                                    )).id = "canvasId"),
                                                  (e.next = 12),
                                                  new Promise(function (e, r) {
                                                    i.addEventListener(
                                                      "loadeddata",
                                                      (0, t.A)(
                                                        c().mark(function t() {
                                                          var a, d, l, p, u, h;
                                                          return c().wrap(
                                                            function (t) {
                                                              for (;;)
                                                                switch (
                                                                  (t.prev =
                                                                    t.next)
                                                                ) {
                                                                  case 0:
                                                                    return (
                                                                      (a =
                                                                        i.videoWidth),
                                                                      (d =
                                                                        i.videoHeight),
                                                                      (l =
                                                                        16 / 9),
                                                                      null ==
                                                                        n &&
                                                                        null ==
                                                                          s &&
                                                                        ((n =
                                                                          d),
                                                                        (s =
                                                                          a)),
                                                                      (null ==
                                                                        n &&
                                                                        null ==
                                                                          n) ||
                                                                        ((n <=
                                                                          0 ||
                                                                          n >
                                                                            d) &&
                                                                          (n =
                                                                            d)),
                                                                      (null ==
                                                                        s &&
                                                                        null ==
                                                                          s) ||
                                                                        ((s <=
                                                                          0 ||
                                                                          s >
                                                                            a) &&
                                                                          (s =
                                                                            a)),
                                                                      null ==
                                                                        n &&
                                                                        (n =
                                                                          s /
                                                                          l),
                                                                      null ==
                                                                        s &&
                                                                        (s =
                                                                          n *
                                                                          l),
                                                                      (o.width =
                                                                        s),
                                                                      (o.height =
                                                                        n),
                                                                      (t.prev = 9),
                                                                      (t.next = 12),
                                                                      i.play()
                                                                    );
                                                                  case 12:
                                                                    document.body.appendChild(
                                                                      i
                                                                    ),
                                                                      (p =
                                                                        (o.width -
                                                                          a *
                                                                            l) /
                                                                        2),
                                                                      (u =
                                                                        (o.height -
                                                                          d *
                                                                            l) /
                                                                        2),
                                                                      o
                                                                        .getContext(
                                                                          "2d"
                                                                        )
                                                                        .clearRect(
                                                                          0,
                                                                          0,
                                                                          p / 2,
                                                                          u / 2
                                                                        ),
                                                                      o
                                                                        .getContext(
                                                                          "2d"
                                                                        )
                                                                        .drawImage(
                                                                          i,
                                                                          0,
                                                                          0
                                                                        ),
                                                                      (h = o
                                                                        .toDataURL(
                                                                          "image/jpeg"
                                                                        )
                                                                        .split(
                                                                          ";base64,"
                                                                        )[1]),
                                                                      document.body.appendChild(
                                                                        o
                                                                      ),
                                                                      document.body.removeChild(
                                                                        o
                                                                      ),
                                                                      document.body.removeChild(
                                                                        i
                                                                      ),
                                                                      e(h),
                                                                      (t.next = 28);
                                                                    break;
                                                                  case 24:
                                                                    (t.prev = 24),
                                                                      (t.t0 =
                                                                        t.catch(
                                                                          9
                                                                        )),
                                                                      r(t.t0),
                                                                      console.log(
                                                                        "error in video",
                                                                        t.t0
                                                                      );
                                                                  case 28:
                                                                  case "end":
                                                                    return t.stop();
                                                                }
                                                            },
                                                            t,
                                                            null,
                                                            [[9, 24]]
                                                          );
                                                        })
                                                      )
                                                    );
                                                  })
                                                );
                                              case 12:
                                                return (
                                                  (l = e.sent),
                                                  e.abrupt("return", { v: l })
                                                );
                                              case 16:
                                                (e.prev = 16),
                                                  (e.t0 = e.catch(2)),
                                                  console.error(
                                                    "err on image capture",
                                                    e.t0
                                                  );
                                              case 19:
                                              case "end":
                                                return e.stop();
                                            }
                                        },
                                        e,
                                        null,
                                        [[2, 16]]
                                      );
                                    })),
                                    o.s();
                                case 7:
                                  if ((d = o.n()).done) {
                                    e.next = 14;
                                    break;
                                  }
                                  return e.delegateYield(l(), "t0", 9);
                                case 9:
                                  if (!(p = e.t0)) {
                                    e.next = 12;
                                    break;
                                  }
                                  return e.abrupt("return", p.v);
                                case 12:
                                  e.next = 7;
                                  break;
                                case 14:
                                  e.next = 19;
                                  break;
                                case 16:
                                  (e.prev = 16), (e.t1 = e.catch(4)), o.e(e.t1);
                                case 19:
                                  return (e.prev = 19), o.f(), e.finish(19);
                                case 22:
                                  throw new Error(
                                    "Camera must be on to capture an image"
                                  );
                                case 25:
                                  (e.prev = 25),
                                    (e.t2 = e.catch(1)),
                                    console.error(
                                      "Error in captureImage::",
                                      e.t2
                                    ),
                                    se.roomClient._videosdkLogs &&
                                      se.roomClient._videosdkLogs.pushLogs({
                                        logText: "Error on image capture",
                                        logType: "ERROR",
                                        attributes: { error: e.t2.message },
                                      });
                                case 29:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [
                            [1, 25],
                            [4, 16, 19, 22],
                          ]
                        );
                      })
                    )
                  ),
                  (this.id = r.id),
                  (this.displayName = r.displayName),
                  (this.streams = new Map()),
                  (this.quality = "low"),
                  (this.local = r.local || !1),
                  (this.pinState = { cam: !1, share: !1 }),
                  (this.webcamOn = !1),
                  (this.micOn = !1),
                  (this.mode = r.mode),
                  (this.metaData = r.metaData),
                  (this.eventEmitter = new te.EventEmitter());
              },
              [
                {
                  key: "_setPinState",
                  value: function (e) {
                    null != e.cam && (this.pinState.cam = e.cam),
                      null != e.share && (this.pinState.share = e.share);
                  },
                },
                {
                  key: "remove",
                  value: function () {
                    se.roomClient.removePeer(this.id);
                  },
                },
                {
                  key: "enableMic",
                  value: function () {
                    se.roomClient.enablePeerMic(this.id);
                  },
                },
                {
                  key: "disableMic",
                  value: function () {
                    se.roomClient.disablePeerMic(this.id);
                  },
                },
                {
                  key: "enableWebcam",
                  value: function () {
                    se.roomClient.enablePeerWebcam(this.id);
                  },
                },
                {
                  key: "disableWebcam",
                  value: function () {
                    se.roomClient.disablePeerWebcam(this.id);
                  },
                },
                {
                  key: "addStream",
                  value: function (e) {
                    this.streams.set(e.id, e),
                      "video" !== e.kind ||
                        this.local ||
                        se.roomClient.setConsumerQuality(e.id, this.quality),
                      this.eventEmitter.emit(de, e);
                  },
                },
                {
                  key: "updateStream",
                  value: function (e) {
                    this.streams.set(e.id, e), this.eventEmitter.emit(de, e);
                  },
                },
                {
                  key: "deleteStream",
                  value: function (e) {
                    var t = this.streams.get(e);
                    if (null != t)
                      return (
                        this.streams.delete(e), this.eventEmitter.emit(le, t), t
                      );
                  },
                },
                {
                  key: "updateParticipantMediaState",
                  value: function (e, t) {
                    "audio" == e
                      ? (this.micOn = t)
                      : "video" == e && (this.webcamOn = t),
                      this.eventEmitter.emit(pe, {
                        peerId: this.id,
                        kind: e,
                        newStatus: t,
                      });
                  },
                },
                {
                  key: "videoQualityChanged",
                  value: function (e, t) {
                    this.eventEmitter.emit(ue, {
                      peerId: this.id,
                      prevQuality: e,
                      currentQuality: t,
                    });
                  },
                },
                {
                  key: "setQuality",
                  value: function (e) {
                    this.quality === e ||
                      this.local ||
                      ((this.quality = e),
                      (0, q.A)(this.streams.entries()).forEach(function (t) {
                        var r = t[1];
                        "video" === r.kind &&
                          se.roomClient.setConsumerQuality(r.id, e);
                      }));
                  },
                },
                {
                  key: "setViewPort",
                  value: function (e, t) {
                    (0, q.A)(this.streams.entries()).forEach(function (r) {
                      var a = r[1];
                      "video" === a.kind &&
                        se.roomClient.setViewPort(a.producerOrConsumer, e, t);
                    });
                  },
                },
                {
                  key: "pin",
                  value: function (e) {
                    switch (e) {
                      case "SHARE_AND_CAM":
                      case void 0:
                        this._setPinState({ cam: !0, share: !0 });
                        break;
                      case "CAM":
                        this._setPinState({ cam: !0 });
                        break;
                      case "SHARE":
                        this._setPinState({ share: !0 });
                        break;
                      default:
                        throw new Error("Unknown pin type");
                    }
                    se.roomClient.pinStateChange({
                      peerId: this.id,
                      state: this.pinState,
                    });
                  },
                },
                {
                  key: "unpin",
                  value: function (e) {
                    switch (e) {
                      case "SHARE_AND_CAM":
                      case void 0:
                        this._setPinState({ cam: !1, share: !1 });
                        break;
                      case "CAM":
                        this._setPinState({ cam: !1 });
                        break;
                      case "SHARE":
                        this._setPinState({ share: !1 });
                        break;
                      default:
                        throw new Error("Unknown unpin type");
                    }
                    se.roomClient.pinStateChange({
                      peerId: this.id,
                      state: this.pinState,
                    });
                  },
                },
                {
                  key: "switchTo",
                  value:
                    ((d = (0, t.A)(
                      c().mark(function e(t) {
                        var r, a, n;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.meetingId),
                                    (a = t.payload),
                                    (n = t.token),
                                    (e.next = 3),
                                    se.roomClient.switchPeerRoom({
                                      peerId: this.id,
                                      roomId: r,
                                      payload: a,
                                      token: n,
                                    })
                                  );
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (e) {
                      return d.apply(this, arguments);
                    }),
                },
                {
                  key: "getVideoStats",
                  value:
                    ((o = (0, t.A)(
                      c().mark(function e() {
                        var t, r, a, n, s;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (!this.local) {
                                    e.next = 6;
                                    break;
                                  }
                                  return (
                                    (e.next = 3),
                                    se.roomClient.getVideoRemoteStats()
                                  );
                                case 3:
                                  return e.abrupt("return", e.sent);
                                case 6:
                                  (t = (0, q.A)(this.streams.entries())),
                                    (r = oe(t)),
                                    (e.prev = 8),
                                    r.s();
                                case 10:
                                  if ((a = r.n()).done) {
                                    e.next = 18;
                                    break;
                                  }
                                  if (
                                    ((n = (0, re.A)(a.value, 2)),
                                    (s = n[0]),
                                    "video" != n[1].kind)
                                  ) {
                                    e.next = 16;
                                    break;
                                  }
                                  return (
                                    (e.next = 15),
                                    se.roomClient.getConsumerRemoteStats(s)
                                  );
                                case 15:
                                  return e.abrupt("return", e.sent);
                                case 16:
                                  e.next = 10;
                                  break;
                                case 18:
                                  e.next = 23;
                                  break;
                                case 20:
                                  (e.prev = 20), (e.t0 = e.catch(8)), r.e(e.t0);
                                case 23:
                                  return (e.prev = 23), r.f(), e.finish(23);
                                case 26:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this,
                          [[8, 20, 23, 26]]
                        );
                      })
                    )),
                    function () {
                      return o.apply(this, arguments);
                    }),
                },
                {
                  key: "getShareStats",
                  value:
                    ((a = (0, t.A)(
                      c().mark(function e() {
                        var t, r, a, n, s;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (!this.local) {
                                    e.next = 6;
                                    break;
                                  }
                                  return (
                                    (e.next = 3),
                                    se.roomClient.getShareRemoteStats()
                                  );
                                case 3:
                                  return e.abrupt("return", e.sent);
                                case 6:
                                  (t = (0, q.A)(this.streams.entries())),
                                    (r = oe(t)),
                                    (e.prev = 8),
                                    r.s();
                                case 10:
                                  if ((a = r.n()).done) {
                                    e.next = 18;
                                    break;
                                  }
                                  if (
                                    ((n = (0, re.A)(a.value, 2)),
                                    (s = n[0]),
                                    "share" != n[1].kind)
                                  ) {
                                    e.next = 16;
                                    break;
                                  }
                                  return (
                                    (e.next = 15),
                                    se.roomClient.getConsumerRemoteStats(s)
                                  );
                                case 15:
                                  return e.abrupt("return", e.sent);
                                case 16:
                                  e.next = 10;
                                  break;
                                case 18:
                                  e.next = 23;
                                  break;
                                case 20:
                                  (e.prev = 20), (e.t0 = e.catch(8)), r.e(e.t0);
                                case 23:
                                  return (e.prev = 23), r.f(), e.finish(23);
                                case 26:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this,
                          [[8, 20, 23, 26]]
                        );
                      })
                    )),
                    function () {
                      return a.apply(this, arguments);
                    }),
                },
                {
                  key: "getShareAudioStats",
                  value:
                    ((r = (0, t.A)(
                      c().mark(function e() {
                        var t, r, a, n, s;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (!this.local) {
                                    e.next = 6;
                                    break;
                                  }
                                  return (
                                    (e.next = 3),
                                    se.roomClient.getShareAudioRemoteStats()
                                  );
                                case 3:
                                  return e.abrupt("return", e.sent);
                                case 6:
                                  (t = (0, q.A)(this.streams.entries())),
                                    (r = oe(t)),
                                    (e.prev = 8),
                                    r.s();
                                case 10:
                                  if ((a = r.n()).done) {
                                    e.next = 18;
                                    break;
                                  }
                                  if (
                                    ((n = (0, re.A)(a.value, 2)),
                                    (s = n[0]),
                                    "shareAudio" != n[1].kind)
                                  ) {
                                    e.next = 16;
                                    break;
                                  }
                                  return (
                                    (e.next = 15),
                                    se.roomClient.getConsumerRemoteStats(s)
                                  );
                                case 15:
                                  return e.abrupt("return", e.sent);
                                case 16:
                                  e.next = 10;
                                  break;
                                case 18:
                                  e.next = 23;
                                  break;
                                case 20:
                                  (e.prev = 20), (e.t0 = e.catch(8)), r.e(e.t0);
                                case 23:
                                  return (e.prev = 23), r.f(), e.finish(23);
                                case 26:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this,
                          [[8, 20, 23, 26]]
                        );
                      })
                    )),
                    function () {
                      return r.apply(this, arguments);
                    }),
                },
                {
                  key: "getAudioStats",
                  value:
                    ((e = (0, t.A)(
                      c().mark(function e() {
                        var t, r, a, n, s;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (this.micOn) {
                                    e.next = 2;
                                    break;
                                  }
                                  return e.abrupt("return", []);
                                case 2:
                                  if (!this.local) {
                                    e.next = 8;
                                    break;
                                  }
                                  return (
                                    (e.next = 5),
                                    se.roomClient.getAudioRemoteStats()
                                  );
                                case 5:
                                  return e.abrupt("return", e.sent);
                                case 8:
                                  (t = (0, q.A)(this.streams.entries())),
                                    (r = oe(t)),
                                    (e.prev = 10),
                                    r.s();
                                case 12:
                                  if ((a = r.n()).done) {
                                    e.next = 20;
                                    break;
                                  }
                                  if (
                                    ((n = (0, re.A)(a.value, 2)),
                                    (s = n[0]),
                                    "audio" != n[1].kind)
                                  ) {
                                    e.next = 18;
                                    break;
                                  }
                                  return (
                                    (e.next = 17),
                                    se.roomClient.getConsumerRemoteStats(s)
                                  );
                                case 17:
                                  return e.abrupt("return", e.sent);
                                case 18:
                                  e.next = 12;
                                  break;
                                case 20:
                                  e.next = 25;
                                  break;
                                case 22:
                                  (e.prev = 22),
                                    (e.t0 = e.catch(10)),
                                    r.e(e.t0);
                                case 25:
                                  return (e.prev = 25), r.f(), e.finish(25);
                                case 28:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this,
                          [[10, 22, 25, 28]]
                        );
                      })
                    )),
                    function () {
                      return e.apply(this, arguments);
                    }),
                },
                {
                  key: "consumeMicStreams",
                  value: function () {
                    se.roomClient.consumeMicStreams(this.id);
                  },
                },
                {
                  key: "consumeWebcamStreams",
                  value: function () {
                    se.roomClient.consumeWebcamStreams(this.id);
                  },
                },
                {
                  key: "stopConsumingWebcamStreams",
                  value: function () {
                    se.roomClient.stopConsumingWebcamStreams(this.id);
                  },
                },
                {
                  key: "stopConsumingMicStreams",
                  value: function () {
                    se.roomClient.stopConsumingMicStreams(this.id);
                  },
                },
                {
                  key: "on",
                  value: function (e, t) {
                    switch (e) {
                      case de:
                      case le:
                      case pe:
                      case ue:
                        this.eventEmitter.on(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  },
                },
                {
                  key: "off",
                  value: function (e, t) {
                    switch (e) {
                      case de:
                      case le:
                      case pe:
                      case ue:
                        this.eventEmitter.off(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  },
                },
              ]
            );
            var e, r, a, o, d;
          })();
        function me(t, r) {
          if (r && ("object" == (0, e.A)(r) || "function" == typeof r))
            return r;
          if (void 0 !== r)
            throw new TypeError(
              "Derived constructors may only return object or undefined"
            );
          return (function (e) {
            if (void 0 === e)
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            return e;
          })(t);
        }
        function fe(e) {
          return (
            (fe = Object.setPrototypeOf
              ? Object.getPrototypeOf.bind()
              : function (e) {
                  return e.__proto__ || Object.getPrototypeOf(e);
                }),
            fe(e)
          );
        }
        function ge(e, t) {
          return (
            (ge = Object.setPrototypeOf
              ? Object.setPrototypeOf.bind()
              : function (e, t) {
                  return (e.__proto__ = t), e;
                }),
            ge(e, t)
          );
        }
        function _e(e, t) {
          if ("function" != typeof t && null !== t)
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          (e.prototype = Object.create(t && t.prototype, {
            constructor: { value: e, writable: !0, configurable: !0 },
          })),
            Object.defineProperty(e, "prototype", { writable: !1 }),
            t && ge(e, t);
        }
        var ve = {
          CHARACTER_SPEAKING: "CHARACTER_SPEAKING",
          CHARACTER_THINKING: "CHARACTER_THINKING",
          CHARACTER_LISTENING: "CHARACTER_LISTENING",
        };
        function be(e, t, r) {
          return (
            (t = fe(t)),
            me(
              e,
              ye()
                ? Reflect.construct(t, r || [], fe(e).constructor)
                : t.apply(e, r)
            )
          );
        }
        function ye() {
          try {
            var e = !Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function () {})
            );
          } catch (e) {}
          return (ye = function () {
            return !!e;
          })();
        }
        function we(e, t, r) {
          Se(e, t), t.set(e, r);
        }
        function Se(e, t) {
          if (t.has(e))
            throw new TypeError(
              "Cannot initialize the same private elements twice on an object"
            );
        }
        function Re(e, t) {
          return e.get(ke(e, t));
        }
        function Ee(e, t, r) {
          return e.set(ke(e, t), r), r;
        }
        function ke(e, t, r) {
          if ("function" == typeof e ? e === t : e.has(t))
            return arguments.length < 3 ? t : r;
          throw new TypeError("Private element is not present on this object");
        }
        var Te = "stream-enabled",
          Ce = "stream-disabled",
          Pe = "character-joined",
          Oe = "character-left",
          De = "media-status-changed",
          xe = "video-quality-changed",
          Ie = "character-state-changed",
          Me = "character-message",
          Ae = new WeakMap(),
          Le = new WeakMap(),
          Ne = new WeakMap(),
          je = new WeakMap(),
          Be = new WeakMap(),
          Fe = new WeakMap(),
          Ue = new WeakSet(),
          We = (function (e) {
            function r(e) {
              var a, s, o;
              return (
                (0, n.A)(this, r),
                (a = be(this, r, [
                  { id: e.id, displayName: e.displayName, mode: "CONFERENCE" },
                ])),
                Se((s = a), (o = Ue)),
                o.add(s),
                we(a, Ae, void 0),
                we(a, Le, void 0),
                we(a, Ne, void 0),
                we(a, je, void 0),
                we(a, Be, void 0),
                we(a, Fe, void 0),
                (0, i.A)(
                  a,
                  "captureImage",
                  (0, t.A)(
                    c().mark(function e() {
                      var t,
                        r = arguments;
                      return c().wrap(function (e) {
                        for (;;)
                          switch ((e.prev = e.next)) {
                            case 0:
                              throw (
                                ((t =
                                  r.length > 0 && void 0 !== r[0] ? r[0] : {})
                                  .height,
                                t.width,
                                new Error(
                                  "captureImage method is not supported on character"
                                ))
                              );
                            case 2:
                            case "end":
                              return e.stop();
                          }
                      }, e);
                    })
                  )
                ),
                Ee(je, a, e.interactionId || null),
                (a.id = e.id || null),
                Ee(Ae, a, e.characterRole),
                Ee(Le, a, e.characterMode),
                Ee(Ne, a, e.knowledgeBases || []),
                (a.displayName = e.displayName),
                Ee(Be, a, e.state || ve.CHARACTER_LISTENING),
                Ee(Fe, a, e.roomClient),
                a
              );
            }
            return (
              _e(r, e),
              (0, s.A)(r, [
                {
                  key: "join",
                  value:
                    ((u = (0, t.A)(
                      c().mark(function e() {
                        var t;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    Re(Fe, this).joinCharacter({
                                      interactionId: Re(je, this),
                                      characterId: this.id,
                                      characterRole: Re(Ae, this),
                                      displayName: this.displayName,
                                      characterMode: Re(Le, this),
                                      knowledgeBases: Re(Ne, this),
                                    })
                                  );
                                case 2:
                                  (t = e.sent) &&
                                    ((this.id = t.characterId),
                                    (this.displayName = t.displayName),
                                    Ee(Le, this, t.characterMode),
                                    Ee(Ae, this, t.characterRole),
                                    Ee(je, this, t.interactionId),
                                    Ee(Ne, this, t.knowledgeBases),
                                    Re(Fe, this)._eventEmitter.emit(
                                      "INIT_CHARACTER",
                                      this
                                    ));
                                case 4:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return u.apply(this, arguments);
                    }),
                },
                {
                  key: "leave",
                  value:
                    ((p = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2), Re(Fe, this).removeCharacter()
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return p.apply(this, arguments);
                    }),
                },
                {
                  key: "remove",
                  value:
                    ((l = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(function (e) {
                          for (;;)
                            switch ((e.prev = e.next)) {
                              case 0:
                                throw new Error(
                                  "remove method is not supported on character"
                                );
                              case 1:
                              case "end":
                                return e.stop();
                            }
                        }, e);
                      })
                    )),
                    function () {
                      return l.apply(this, arguments);
                    }),
                },
                {
                  key: "sendMessage",
                  value:
                    ((d = (0, t.A)(
                      c().mark(function e(t) {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    Re(Fe, this).sendCharacterMessage({
                                      interactionId: Re(je, this),
                                      text: t,
                                    })
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (e) {
                      return d.apply(this, arguments);
                    }),
                },
                {
                  key: "handleCharacterStateChanged",
                  value: function (e) {
                    Object.keys(ve).includes(e.status) &&
                      (ke(Ue, this, qe).call(this, e.status),
                      this.eventEmitter.emit(Ie, e));
                  },
                },
                {
                  key: "handleCharacterMessage",
                  value: function (e) {
                    this.eventEmitter.emit(Me, e);
                  },
                },
                {
                  key: "interrupt",
                  value:
                    ((o = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    Re(Fe, this).interruptCharacter({
                                      interactionId: Re(je, this),
                                    })
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return o.apply(this, arguments);
                    }),
                },
                {
                  key: "enableMic",
                  value: function () {
                    Re(Fe, this).enablePeerMic(this.id);
                  },
                },
                {
                  key: "disableMic",
                  value: function () {
                    Re(Fe, this).disablePeerMic(this.id);
                  },
                },
                {
                  key: "enableWebcam",
                  value: function () {
                    Re(Fe, this).enablePeerWebcam(this.id);
                  },
                },
                {
                  key: "disableWebcam",
                  value: function () {
                    Re(Fe, this).disablePeerWebcam(this.id);
                  },
                },
                {
                  key: "updateStream",
                  value: function (e) {
                    throw new Error(
                      "updateStream method is not supported on character"
                    );
                  },
                },
                {
                  key: "switchTo",
                  value:
                    ((a = (0, t.A)(
                      c().mark(function e(t) {
                        return c().wrap(function (e) {
                          for (;;)
                            switch ((e.prev = e.next)) {
                              case 0:
                                throw (
                                  (t.meetingId,
                                  t.payload,
                                  t.token,
                                  new Error(
                                    "switchTo method is not supported on character"
                                  ))
                                );
                              case 2:
                              case "end":
                                return e.stop();
                            }
                        }, e);
                      })
                    )),
                    function (e) {
                      return a.apply(this, arguments);
                    }),
                },
                {
                  key: "on",
                  value: function (e, t) {
                    switch (e) {
                      case Te:
                      case Ce:
                      case Pe:
                      case Oe:
                      case De:
                      case xe:
                      case Ie:
                      case Me:
                        this.eventEmitter.on(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  },
                },
                {
                  key: "off",
                  value: function (e, t) {
                    switch (e) {
                      case Te:
                      case Ce:
                      case Pe:
                      case Oe:
                      case De:
                      case xe:
                      case Ie:
                      case Me:
                        this.eventEmitter.off(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  },
                },
                {
                  key: "state",
                  get: function () {
                    return Re(Be, this);
                  },
                },
                {
                  key: "knowledgeBases",
                  get: function () {
                    return Re(Ne, this);
                  },
                },
                {
                  key: "characterMode",
                  get: function () {
                    return Re(Le, this);
                  },
                },
                {
                  key: "characterRole",
                  get: function () {
                    return Re(Ae, this);
                  },
                },
                {
                  key: "interactionId",
                  get: function () {
                    return Re(je, this);
                  },
                },
              ])
            );
            var a, o, d, l, p, u;
          })(he);
        function qe(e) {
          Ee(Be, this, e);
        }
        function He(e, t, r) {
          (function (e, t) {
            if (t.has(e))
              throw new TypeError(
                "Cannot initialize the same private elements twice on an object"
              );
          })(e, t),
            t.set(e, r);
        }
        function Ve(e, t, r) {
          if ("function" == typeof e ? e === t : e.has(t))
            return arguments.length < 3 ? t : r;
          throw new TypeError("Private element is not present on this object");
        }
        var Ge = new WeakMap(),
          ze = (function () {
            return (0, s.A)(
              function e(t, r) {
                var a,
                  s,
                  i,
                  o = t.id,
                  c = t.displayName;
                (0, n.A)(this, e),
                  He(this, Ge, void 0),
                  (this.id = o),
                  (this.displayName = c),
                  (s = this),
                  (i = r),
                  (a = Ge).set(Ve(a, s), i);
              },
              [
                {
                  key: "switchTo",
                  value:
                    ((e = (0, t.A)(
                      c().mark(function e(t) {
                        var r, a, n;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.meetingId),
                                    (a = t.payload),
                                    (n = t.token),
                                    (e.next = 3),
                                    se.roomClient.connectionSwitchPeerRoom({
                                      roomId: r,
                                      connectionRoomId:
                                        ((s = Ge), (i = this), s.get(Ve(s, i))),
                                      payload: a,
                                      peerId: this.id,
                                      token: n,
                                    })
                                  );
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                            var s, i;
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (t) {
                      return e.apply(this, arguments);
                    }),
                },
              ]
            );
            var e;
          })(),
          $e = "participant-joined",
          Ke = "participant-left",
          Je = "chat-message",
          Qe = (function () {
            return (0, s.A)(
              function e(t, r) {
                var a = this;
                (0, n.A)(this, e),
                  (this.eventEmitter = new te.EventEmitter()),
                  (this.id = t),
                  (this.participants = new Map()),
                  r.forEach(function (e) {
                    a.participants.set(e.id, new ze(e, a.id));
                  });
              },
              [
                {
                  key: "participantJoin",
                  value: function (e) {
                    var t = new ze(e, this.id);
                    this.participants.set(e.id, t),
                      this.eventEmitter.emit($e, t);
                  },
                },
                {
                  key: "participantLeft",
                  value: function (e) {
                    this.participants.delete(e), this.eventEmitter.emit(Ke, e);
                  },
                },
                {
                  key: "sendChatMessage",
                  value: function (e) {
                    se.roomClient.connectionSendChatMessage({
                      roomId: this.id,
                      message: e,
                    });
                  },
                },
                {
                  key: "sendChatMessageEvent",
                  value: function (e) {
                    var t = e.participantId,
                      r = e.message;
                    this.eventEmitter.emit(Je, {
                      participantId: t,
                      message: r,
                    });
                  },
                },
                {
                  key: "end",
                  value:
                    ((e = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    se.roomClient.connectionEndMeeting({
                                      roomId: this.id,
                                    })
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return e.apply(this, arguments);
                    }),
                },
                {
                  key: "on",
                  value: function (e, t) {
                    switch (e) {
                      case $e:
                      case Ke:
                      case Je:
                        this.eventEmitter.on(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  },
                },
                {
                  key: "off",
                  value: function (e, t) {
                    switch (e) {
                      case $e:
                      case Ke:
                      case Je:
                        this.eventEmitter.off(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  },
                },
              ]
            );
            var e;
          })(),
          Ye = (function () {
            return (0, s.A)(
              function e(t) {
                var r = t.roomId,
                  a = t.peers,
                  s = t.payload;
                (0, n.A)(this, e),
                  (this.id = r),
                  (this.payload = s),
                  (this.meeting = new Qe(r, a));
              },
              [
                {
                  key: "close",
                  value: function () {
                    se.roomClient.closeConnection(this.id);
                  },
                },
              ]
            );
          })();
        function Xe(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var a = Object.getOwnPropertySymbols(e);
            t &&
              (a = a.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, a);
          }
          return r;
        }
        function Ze(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? Xe(Object(r), !0).forEach(function (t) {
                  (0, i.A)(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : Xe(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        function et(e, t) {
          if (t.has(e))
            throw new TypeError(
              "Cannot initialize the same private elements twice on an object"
            );
        }
        function tt(e, t) {
          return e.get(rt(e, t));
        }
        function rt(e, t, r) {
          if ("function" == typeof e ? e === t : e.has(t))
            return arguments.length < 3 ? t : r;
          throw new TypeError("Private element is not present on this object");
        }
        var at = "error",
          nt = "meeting-joined",
          st = "meeting-left",
          it = "participant-mode-changed",
          ot = "participant-joined",
          ct = "participant-left",
          dt = "speaker-changed",
          lt = "presenter-changed",
          pt = "main-participant-changed",
          ut = "chat-message",
          ht = "entry-requested",
          mt = "entry-responded",
          ft = "recording-state-changed",
          gt = "recording-started",
          _t = "recording-stopped",
          vt = "livestream-state-changed",
          bt = "livestream-started",
          yt = "livestream-stopped",
          wt = "hls-state-changed",
          St = "hls-started",
          Rt = "hls-stopped",
          Et = "whiteboard-started",
          kt = "whiteboard-stopped",
          Tt = "video-state-changed",
          Ct = "video-seeked",
          Pt = "mic-requested",
          Ot = "webcam-requested",
          Dt = "stream-enabled",
          xt = "stream-disabled",
          It = "pin-state-changed",
          Mt = "connection-open",
          At = "connection-close",
          Lt = "switch-meeting",
          Nt = "meeting-state-changed",
          jt = "transcription-state-changed",
          Bt = "transcription-text",
          Ft = "character-joined",
          Ut = "character-left",
          Wt = new WeakMap(),
          qt = new WeakSet(),
          Ht = (function () {
            return (0, s.A)(
              function r(a, s, o) {
                var d,
                  l,
                  p,
                  u,
                  h,
                  m = this;
                (0, n.A)(this, r),
                  et((d = this), (l = qt)),
                  l.add(d),
                  (function (e, t, r) {
                    et(e, t), t.set(e, r);
                  })(this, Wt, void 0),
                  (0, i.A)(this, "pubSub", {
                    publish:
                      ((h = (0, t.A)(
                        c().mark(function t(r, a, n, s) {
                          return c().wrap(function (t) {
                            for (;;)
                              switch ((t.prev = t.next)) {
                                case 0:
                                  if (null == s) {
                                    t.next = 3;
                                    break;
                                  }
                                  if ("object" == (0, e.A)(s)) {
                                    t.next = 3;
                                    break;
                                  }
                                  throw new Error(
                                    '"payload" can only be object.'
                                  );
                                case 3:
                                  return (
                                    (t.next = 5),
                                    m.roomClient.pubsubPublish(r, a, n, s)
                                  );
                                case 5:
                                case "end":
                                  return t.stop();
                              }
                          }, t);
                        })
                      )),
                      function (e, t, r, a) {
                        return h.apply(this, arguments);
                      }),
                    subscribe:
                      ((u = (0, t.A)(
                        c().mark(function e(t, r) {
                          var a;
                          return c().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (!tt(Wt, m).listeners(t).includes(r)) {
                                    e.next = 2;
                                    break;
                                  }
                                  return e.abrupt("return");
                                case 2:
                                  return (
                                    (e.next = 4),
                                    m.roomClient.pubsubSubscribe(t)
                                  );
                                case 4:
                                  return (
                                    (a = e.sent),
                                    tt(Wt, m).on(t, r),
                                    e.abrupt("return", a)
                                  );
                                case 7:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e, t) {
                        return u.apply(this, arguments);
                      }),
                    unsubscribe:
                      ((p = (0, t.A)(
                        c().mark(function e(t, r) {
                          return c().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    (tt(Wt, m).off(t, r),
                                    0 != tt(Wt, m).listeners(t).length)
                                  ) {
                                    e.next = 4;
                                    break;
                                  }
                                  return (
                                    (e.next = 4),
                                    m.roomClient.pubsubUnsubscribe(t)
                                  );
                                case 4:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e, t) {
                        return p.apply(this, arguments);
                      }),
                  }),
                  (0, i.A)(
                    this,
                    "uploadBase64File",
                    (function () {
                      var e = (0, t.A)(
                        c().mark(function e(t) {
                          var r, a, n, s, i, o, d;
                          return c().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((r = t.base64Data),
                                      (a = t.token),
                                      (n = t.fileName),
                                      (e.prev = 1),
                                      r && a && n)
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    throw new Error(
                                      "please provide base64Data, token and fileName"
                                    );
                                  case 4:
                                    return (
                                      (s = "https://"
                                        .concat(
                                          m.baseUrl,
                                          "/base64-upload?roomId="
                                        )
                                        .concat(m.id)),
                                      (i = { fileName: n, base64Data: r }),
                                      (e.next = 8),
                                      fetch(s, {
                                        method: "POST",
                                        body: JSON.stringify(i),
                                        headers: {
                                          "Content-Type": "application/json",
                                          Authorization: a,
                                        },
                                      })
                                    );
                                  case 8:
                                    return (
                                      (o = e.sent), (e.next = 11), o.json()
                                    );
                                  case 11:
                                    return (
                                      (d = e.sent), e.abrupt("return", d.url)
                                    );
                                  case 15:
                                    (e.prev = 15),
                                      (e.t0 = e.catch(1)),
                                      console.error(
                                        "Error while Uploading Base64 File::",
                                        e.t0
                                      ),
                                      m.roomClient._videosdkLogs &&
                                        m.roomClient._videosdkLogs.pushLogs({
                                          logText:
                                            "Error while Uploading Base64 File",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 19:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            null,
                            [[1, 15]]
                          );
                        })
                      );
                      return function (t) {
                        return e.apply(this, arguments);
                      };
                    })()
                  ),
                  (0, i.A)(
                    this,
                    "fetchBase64File",
                    (function () {
                      var e = (0, t.A)(
                        c().mark(function e(t) {
                          var r, a, n, s, i;
                          return c().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((r = t.url),
                                      (a = t.token),
                                      (e.prev = 1),
                                      r && a)
                                    ) {
                                      e.next = 4;
                                      break;
                                    }
                                    throw new Error(
                                      "please provide url and token"
                                    );
                                  case 4:
                                    return (
                                      (e.next = 6),
                                      fetch(r, {
                                        headers: { Authorization: a },
                                      })
                                    );
                                  case 6:
                                    return (
                                      (n = e.sent),
                                      (e.next = 9),
                                      n.arrayBuffer()
                                    );
                                  case 9:
                                    return (
                                      (s = e.sent),
                                      (i = window.btoa(
                                        new Uint8Array(s).reduce(function (
                                          e,
                                          t
                                        ) {
                                          return e + String.fromCharCode(t);
                                        },
                                        "")
                                      )),
                                      e.abrupt("return", i)
                                    );
                                  case 14:
                                    (e.prev = 14),
                                      (e.t0 = e.catch(1)),
                                      console.error(
                                        "Error while fetching Base64 File::",
                                        e.t0
                                      ),
                                      m.roomClient._videosdkLogs &&
                                        m.roomClient._videosdkLogs.pushLogs({
                                          logText:
                                            "Error while fetching Base64 File",
                                          logType: "ERROR",
                                          attributes: { error: e.t0.message },
                                        });
                                  case 18:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            null,
                            [[1, 14]]
                          );
                        })
                      );
                      return function (t) {
                        return e.apply(this, arguments);
                      };
                    })()
                  ),
                  (this.id = a),
                  (this.roomClient = o),
                  (this.activeSpeakerId = null),
                  (this.activePresenterId = null),
                  (this.mainParticipantId = null),
                  (this.connections = new Map()),
                  (this.localParticipant = s),
                  (this.participants = new Map()),
                  (this.characters = new Map()),
                  (this.baseUrl = null),
                  (this.livestreamState = "LIVESTREAM_STOPPED"),
                  (this.recordingState = "RECORDING_STOPPED"),
                  (this.hlsState = "HLS_STOPPED"),
                  (this.transcriptionState = "TRANSCRIPTION_STOPPED"),
                  (this.hlsUrls = {
                    downstreamUrl: null,
                    playbackHlsUrl: null,
                    livestreamUrl: null,
                  }),
                  (this.messages = []),
                  (this.eventEmitter = new te.EventEmitter()),
                  (function (e, t, r) {
                    e.set(rt(e, t), r);
                  })(Wt, this, new te.EventEmitter()),
                  this.eventEmitter.setMaxListeners(9999),
                  tt(Wt, this).setMaxListeners(9999),
                  this.roomClient.on("ERROR", function (e) {
                    return m.handleError(e);
                  }),
                  this.roomClient.on("ADD_PEER", function (e) {
                    return m.handlePeerAdd(e);
                  }),
                  this.roomClient.on("REMOVE_PEER", function (e) {
                    return m.handlePeerRemove(e);
                  }),
                  this.roomClient.on("ADD_PRODUCER", function (e) {
                    return m.handleProducerAdd(e);
                  }),
                  this.roomClient.on("UPDATE_PRODUCER", function (e) {
                    return m.handleUpdateProducer(e);
                  }),
                  this.roomClient.on("REMOVE_PRODUCER", function (e) {
                    return m.handleProducerRemove(e);
                  }),
                  this.roomClient.on("ADD_CONSUMER", function (e) {
                    return m.handleConsumerAdd(e);
                  }),
                  this.roomClient.on("REMOVE_CONSUMER", function (e) {
                    return m.handleConsumerRemove(e);
                  }),
                  this.roomClient.on(
                    "PARTICIPANT_MEDIA_STATE_CHANGED",
                    function (e) {
                      return m.handleParticipantMediaStateChanged(e);
                    }
                  ),
                  this.roomClient.on("CHAT_MESSAGE", function (e) {
                    return m.handleNewChatMessage(e);
                  }),
                  this.roomClient.on("SET_ROOM_ACTIVE_SPEAKER", function (e) {
                    return m.handleSpeakerChange(e);
                  }),
                  this.roomClient.on("ENTRY_REQUESTED", function (e) {
                    return m.handleEntryRequested(e);
                  }),
                  this.roomClient.on("ENTRY_RESPONDED", function (e) {
                    return m.handleEntryResponded(e);
                  }),
                  this.roomClient.on("MEETING_JOINED", function (e) {
                    return m.handleMeetingJoined(e);
                  }),
                  this.roomClient.on("MEETING_LEFT", function (e) {
                    return m.handleMeetingLeft(e);
                  }),
                  this.roomClient.on("RECORDING_STATE_CHANGED", function (e) {
                    m.handleRecordingStateChanged(e);
                  }),
                  this.roomClient.on("RECORDING_STARTED", function (e) {
                    return m.handleRecordingStarted(e);
                  }),
                  this.roomClient.on("RECORDING_STOPPED", function (e) {
                    return m.handleRecordingStopped(e);
                  }),
                  this.roomClient.on("LIVESTREAM_STATE_CHANGED", function (e) {
                    m.handleLivestreamStateChanged(e);
                  }),
                  this.roomClient.on("LIVESTREAM_STARTED", function (e) {
                    return m.handleLivestreamStarted(e);
                  }),
                  this.roomClient.on("LIVESTREAM_STOPPED", function (e) {
                    return m.handleLivestreamStopped(e);
                  }),
                  this.roomClient.on("HLS_STATE_CHANGED", function (e) {
                    m.handleHlsStateChanged(e);
                  }),
                  this.roomClient.on("HLS_STARTED", function (e) {
                    m.handleHlsStarted(e);
                  }),
                  this.roomClient.on("HLS_STOPPED", function (e) {
                    m.handleHlsStopped(e);
                  }),
                  this.roomClient.on(
                    "TRANSCRIPTION_STATE_CHANGED",
                    function (e) {
                      m.handleTranscriptionStateChanged(e);
                    }
                  ),
                  this.roomClient.on("TRANSCRIPTION_TEXT", function (e) {
                    m.handleTranscriptionText(e);
                  }),
                  this.roomClient.on("WHITEBOARD_STARTED", function (e) {
                    return m.handleWhiteboardStarted(e);
                  }),
                  this.roomClient.on("WHITEBOARD_STOPPED", function (e) {
                    return m.handleWhiteboardStopped(e);
                  }),
                  this.roomClient.on("VIDEO_STATE_CHANGED", function (e) {
                    return m.handleVideoStateChanged(e);
                  }),
                  this.roomClient.on("VIDEO_SEEKED", function (e) {
                    return m.handleVideoSeeked(e);
                  }),
                  this.roomClient.on("PIN_STATE_CHANGED", function (e) {
                    m.handlePinStateChanged(e);
                  }),
                  this.roomClient.on("MIC_REQUESTED", function (e) {
                    return m.handleMicRequested(e);
                  }),
                  this.roomClient.on("WEBCAM_REQUESTED", function (e) {
                    return m.handleWebcamRequested(e);
                  }),
                  this.roomClient.on("CONNECTION_OPEN", function (e) {
                    return m.handleConnectionOpen(e);
                  }),
                  this.roomClient.on("CONNECTION_CLOSE", function (e) {
                    return m.handleConnectionClose(e);
                  }),
                  this.roomClient.on(
                    "CONNECTION_PARTICIPANT_JOIN",
                    function (e) {
                      return m.handleConnectionParticipantJoin(e);
                    }
                  ),
                  this.roomClient.on("SWITCH_ROOM", function (e) {
                    return m.handleSwitchMeeting(e);
                  }),
                  this.roomClient.on("CONNECTION_CHAT_MESSAGE", function (e) {
                    return m.handleConnectionChatMessage(e);
                  }),
                  this.roomClient.on(
                    "CONNECTION_PARTICIPANT_LEFT",
                    function (e) {
                      m.handleConnectionParticipantLeft(e);
                    }
                  ),
                  this.roomClient.on("PUBSUB_MESSAGE", function (e) {
                    return rt(qt, m, Vt).call(m, e);
                  }),
                  this.roomClient.on("PEER_MODE_CHANGED", function (e) {
                    return rt(qt, m, Gt).call(m, e);
                  }),
                  this.updateMainParticipant(this.localParticipant.id),
                  this.roomClient.on("MEETING_STATE_CHANGED", function (e) {
                    return m.handleMeetingStateChanged(e);
                  }),
                  this.roomClient.on("VIDEO_QUALITY_CHANGED", function (e) {
                    return m.handleVideoQualityChanged(e);
                  }),
                  this.roomClient.on("ADD_CHARACTER", function (e) {
                    return m.handleAddCharacter(e);
                  }),
                  this.roomClient.on("INIT_CHARACTER", function (e) {
                    return m.handleInitCharacter(e);
                  }),
                  this.roomClient.on("REMOVE_CHARACTER", function (e) {
                    return m.handleRemoveCharacter(e);
                  }),
                  this.roomClient.on("CHARACTER_STATE_CHANGED", function (e) {
                    return m.handleCharacterStateChanged(e);
                  }),
                  this.roomClient.on("CHARACTER_MESSAGE", function (e) {
                    return m.handleCharacterMessage(e);
                  });
              },
              [
                {
                  key: "handleError",
                  value: function (e) {
                    this.eventEmitter.listenerCount(at) > 0 &&
                      this.eventEmitter.emit(at, e);
                  },
                },
                {
                  key: "join",
                  value: function () {
                    this.roomClient.join();
                  },
                },
                {
                  key: "changeMode",
                  value: function (e) {
                    this.roomClient.changeMode(e);
                  },
                },
                {
                  key: "leave",
                  value: function () {
                    this.roomClient.close({ sendLeft: !0 });
                  },
                },
                {
                  key: "end",
                  value: function () {
                    this.roomClient.closeRoom();
                  },
                },
                {
                  key: "respondEntry",
                  value: function (e, t) {
                    this.roomClient.respondEntry(e, t);
                  },
                },
                {
                  key: "pinnedParticipants",
                  get: function () {
                    return this.roomClient._pinnedParticipants;
                  },
                },
                {
                  key: "muteMic",
                  value: function () {
                    this.roomClient.disableMic();
                  },
                },
                {
                  key: "unmuteMic",
                  value: function () {
                    var e =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : void 0;
                    this.roomClient.enableMic(e);
                  },
                },
                {
                  key: "publishAudio",
                  value:
                    ((h = (0, t.A)(
                      c().mark(function e() {
                        var t,
                          r = arguments;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (t =
                                      r.length > 0 && void 0 !== r[0]
                                        ? r[0]
                                        : void 0),
                                    (e.next = 3),
                                    this.roomClient.enableMic(t)
                                  );
                                case 3:
                                  return e.abrupt("return");
                                case 4:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return h.apply(this, arguments);
                    }),
                },
                {
                  key: "unpublishAudio",
                  value:
                    ((u = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2), this.roomClient.disableMic()
                                  );
                                case 2:
                                  return e.abrupt("return");
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return u.apply(this, arguments);
                    }),
                },
                {
                  key: "disableWebcam",
                  value: function () {
                    this.roomClient.disableWebcam();
                  },
                },
                {
                  key: "enableWebcam",
                  value: function () {
                    var e =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : void 0;
                    this.roomClient.enableWebcam(e);
                  },
                },
                {
                  key: "publishVideo",
                  value:
                    ((p = (0, t.A)(
                      c().mark(function e() {
                        var t,
                          r = arguments;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (t =
                                      r.length > 0 && void 0 !== r[0]
                                        ? r[0]
                                        : void 0),
                                    this.roomClient.enableWebcam(t),
                                    e.abrupt("return")
                                  );
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return p.apply(this, arguments);
                    }),
                },
                {
                  key: "unpublishVideo",
                  value:
                    ((l = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    this.roomClient.disableWebcam(),
                                    e.abrupt("return")
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return l.apply(this, arguments);
                    }),
                },
                {
                  key: "disableScreenShare",
                  value: function () {
                    this.roomClient.disableShare();
                  },
                },
                {
                  key: "enableScreenShare",
                  value: function () {
                    var e =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : void 0;
                    this.roomClient.enableShare(e);
                  },
                },
                {
                  key: "pubblishScreenShare",
                  value: function () {
                    var e =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : void 0;
                    this.roomClient.enableShare(e);
                  },
                },
                {
                  key: "unpublishScreenShare",
                  value: function () {
                    this.roomClient.disableShare();
                  },
                },
                {
                  key: "sendChatMessage",
                  value: function (e) {
                    this.roomClient.sendChatMessage(e);
                    var t = {
                      text: e,
                      timestamp: new Date().getTime(),
                      senderId: this.localParticipant.id,
                      senderName: this.localParticipant.displayName,
                    };
                    this.handleNewChatMessage(t);
                  },
                },
                {
                  key: "startRecording",
                  value: function (e, t, r, a) {
                    this.roomClient.startRecording(e, t, r, a);
                  },
                },
                {
                  key: "stopRecording",
                  value: function () {
                    this.roomClient.stopRecording();
                  },
                },
                {
                  key: "startTranscription",
                  value: function (e) {
                    this.roomClient.startTranscription(e);
                  },
                },
                {
                  key: "stopTranscription",
                  value: function () {
                    this.roomClient.stopTranscription();
                  },
                },
                {
                  key: "startLivestream",
                  value: function (e, t) {
                    this.roomClient.startLivestream(e, t);
                  },
                },
                {
                  key: "stopLivestream",
                  value: function () {
                    this.roomClient.stopLivestream();
                  },
                },
                {
                  key: "startHls",
                  value:
                    ((d = (0, t.A)(
                      c().mark(function e(t, r) {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2), this.roomClient.startHls(t, r)
                                  );
                                case 2:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (e, t) {
                      return d.apply(this, arguments);
                    }),
                },
                {
                  key: "stopHls",
                  value: function () {
                    this.roomClient.stopHls();
                  },
                },
                {
                  key: "createCharacter",
                  value: function (e) {
                    if (!e.interactionId && !e.id)
                      throw new Error("InteractionId or id is required");
                    return new We(
                      Ze(Ze({}, e), {}, { roomClient: this.roomClient })
                    );
                  },
                },
                {
                  key: "getMics",
                  value:
                    ((o = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2), this.roomClient.getMics()
                                  );
                                case 2:
                                  return e.abrupt("return", e.sent);
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return o.apply(this, arguments);
                    }),
                },
                {
                  key: "getWebcams",
                  value:
                    ((a = (0, t.A)(
                      c().mark(function e() {
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2), this.roomClient.getWebcams()
                                  );
                                case 2:
                                  return e.abrupt("return", e.sent);
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return a.apply(this, arguments);
                    }),
                },
                {
                  key: "changeMic",
                  value: function (e) {
                    this.roomClient.changeMic(e);
                  },
                },
                {
                  key: "changeWebcam",
                  value: function (e) {
                    this.roomClient.changeWebcam(e);
                  },
                },
                {
                  key: "replaceWebcamStream",
                  value: function (e) {
                    this.roomClient.replaceWebcamStream(e);
                  },
                },
                {
                  key: "setWebcamQuality",
                  value: function (e) {
                    this.roomClient.setWebcamQuality(e);
                  },
                },
                {
                  key: "startWhiteboard",
                  value: function () {
                    this.roomClient.startWhiteboard();
                  },
                },
                {
                  key: "stopWhiteboard",
                  value: function () {
                    this.roomClient.stopWhiteboard();
                  },
                },
                {
                  key: "startVideo",
                  value: function (e) {
                    var t = e.link;
                    this.roomClient.startVideo({ link: t });
                  },
                },
                {
                  key: "stopVideo",
                  value: function () {
                    this.roomClient.stopVideo();
                  },
                },
                {
                  key: "resumeVideo",
                  value: function () {
                    this.roomClient.resumeVideo();
                  },
                },
                {
                  key: "refreshConnection",
                  value: function () {
                    this.roomClient.restartIce();
                  },
                },
                {
                  key: "pauseVideo",
                  value: function (e) {
                    var t = e.currentTime;
                    this.roomClient.pauseVideo(t);
                  },
                },
                {
                  key: "seekVideo",
                  value: function (e) {
                    var t = e.currentTime;
                    this.roomClient.seekVideo(t);
                  },
                },
                {
                  key: "handlePeerAdd",
                  value: function (e) {
                    var t = e.peer,
                      r = new he(t);
                    this.participants.set(r.id, r),
                      this.eventEmitter.emit(ot, r),
                      1 === this.participants.size &&
                        this.updateMainParticipant(r.id);
                  },
                },
                {
                  key: "handlePeerRemove",
                  value: function (e) {
                    var t = e.peerId,
                      r = this.participants.get(t);
                    null != r &&
                      (this.participants.delete(t),
                      this.eventEmitter.emit(ct, r),
                      this.activePresenterId === r.id &&
                        ((this.activePresenterId = null),
                        this.eventEmitter.emit(lt, this.activePresenterId)),
                      this.mainParticipantId === r.id &&
                        (this.participants.size > 0
                          ? this.updateMainParticipant(
                              this.participants.entries().next().value[1].id
                            )
                          : this.updateMainParticipant(
                              this.localParticipant.id
                            )));
                  },
                },
                {
                  key: "handleProducerAdd",
                  value: function (e) {
                    var t = e.producer,
                      r = new ie(t);
                    this.localParticipant.addStream(r),
                      "share" === r.kind &&
                        ((this.activePresenterId = this.localParticipant.id),
                        this.eventEmitter.emit(lt, this.activePresenterId),
                        this.updateMainParticipant(this.localParticipant.id));
                  },
                },
                {
                  key: "handleUpdateProducer",
                  value: function (e) {
                    var t = e.producer,
                      r = new ie(t);
                    this.localParticipant.updateStream(r);
                  },
                },
                {
                  key: "handleProducerRemove",
                  value: function (e) {
                    var t = e.producerId,
                      r = this.localParticipant.deleteStream(t);
                    if (r && "share" === r.kind) {
                      (this.activePresenterId = null),
                        this.eventEmitter.emit(lt, this.activePresenterId);
                      var a =
                        this.participants.size > 0
                          ? this.participants.entries().next().value[1].id
                          : null;
                      this.updateMainParticipant(
                        this.activeSpeakerId || a || this.localParticipant.id
                      );
                    }
                  },
                },
                {
                  key: "handleConsumerAdd",
                  value: function (e) {
                    var t = e.consumer,
                      r = e.peerId,
                      a = this.participants.get(r) || this.characters.get(r);
                    if (a) {
                      var n = new ie(t);
                      a.addStream(n),
                        this.eventEmitter.emit(Dt, n),
                        "share" === n.kind &&
                          ((this.activePresenterId = a.id),
                          this.eventEmitter.emit(lt, this.activePresenterId),
                          this.updateMainParticipant(a.id));
                    }
                  },
                },
                {
                  key: "handleConsumerRemove",
                  value: function (e) {
                    var t = e.consumerId,
                      r = e.peerId,
                      a = this.participants.get(r) || this.characters.get(r);
                    if (null != a && a) {
                      var n = a.deleteStream(t);
                      if (
                        (this.eventEmitter.emit(xt, n), n && "share" === n.kind)
                      ) {
                        (this.activePresenterId = null),
                          this.eventEmitter.emit(lt, this.activePresenterId);
                        var s =
                          this.participants.size > 0
                            ? this.participants.entries().next().value[1].id
                            : null;
                        this.updateMainParticipant(
                          this.activeSpeakerId || s || this.localParticipant.id
                        );
                      }
                    }
                  },
                },
                {
                  key: "handleParticipantMediaStateChanged",
                  value: function (e) {
                    var t = e.peerId,
                      r = e.kind,
                      a = e.newState,
                      n = this.participants.get(t) || this.characters.get(t);
                    this.localParticipant.id == t &&
                      (n = this.localParticipant),
                      n &&
                        n &&
                        ("audio" == r
                          ? (n.micOn = a)
                          : "video" == r && (n.webcamOn = a),
                        n.updateParticipantMediaState(r, a));
                  },
                },
                {
                  key: "handleSpeakerChange",
                  value: function (e) {
                    var t = e.peerId;
                    this.activeSpeakerId !== t &&
                      ((this.activeSpeakerId = t),
                      this.eventEmitter.emit(dt, t),
                      t &&
                        t !== this.localParticipant.id &&
                        this.activePresenterId !== this.mainParticipantId &&
                        t !== this.mainParticipantId &&
                        this.updateMainParticipant(t));
                  },
                },
                {
                  key: "handleNewChatMessage",
                  value: function (e) {
                    var t = e.senderId,
                      r = { senderId: t, text: e.text, timestamp: e.timestamp };
                    if (this.localParticipant.id === t)
                      r.senderName = this.localParticipant.displayName;
                    else {
                      var a = this.participants.get(t);
                      a && (r.senderName = a.displayName);
                    }
                    this.messages.push(r), this.eventEmitter.emit(ut, r);
                  },
                },
                {
                  key: "updateMainParticipant",
                  value: function (e) {
                    this.mainParticipantId = e;
                    var t = null;
                    (t =
                      e === this.localParticipant.id
                        ? this.localParticipant
                        : this.participants.get(this.mainParticipantId)),
                      this.eventEmitter.emit(pt, t);
                  },
                },
                {
                  key: "handleEntryRequested",
                  value: function (e) {
                    var t = this,
                      r = e.id,
                      a = e.name;
                    this.eventEmitter.emit(ht, {
                      participantId: r,
                      name: a,
                      allow: function () {
                        t.roomClient.respondEntry(r, "allowed");
                      },
                      deny: function () {
                        t.roomClient.respondEntry(r, "denied");
                      },
                    });
                  },
                },
                {
                  key: "handleEntryResponded",
                  value: function (e) {
                    var t = e.id,
                      r = e.decision;
                    this.eventEmitter.emit(mt, t, r);
                  },
                },
                {
                  key: "handleMeetingJoined",
                  value: function (e) {
                    var t = e.peers,
                      r = e.poll,
                      a = e.messages,
                      n = e.baseUrl;
                    (this.baseUrl = n),
                      a.length > 0 && (this.messages = a),
                      this.eventEmitter.emit(nt, {
                        peers: t,
                        poll: r,
                        messages: a,
                      });
                  },
                },
                {
                  key: "handleMeetingLeft",
                  value: function (e) {
                    this.eventEmitter.emit(st, e);
                  },
                },
                {
                  key: "handleRecordingStateChanged",
                  value: function (e) {
                    (this.recordingState = e.status),
                      this.eventEmitter.emit(ft, e);
                  },
                },
                {
                  key: "handleLivestreamStateChanged",
                  value: function (e) {
                    (this.livestreamState = e.status),
                      this.eventEmitter.emit(vt, e);
                  },
                },
                {
                  key: "handleHlsStateChanged",
                  value: function (e) {
                    (this.hlsState = e.status),
                      "HLS_PLAYABLE" == e.status
                        ? (this.hlsUrls = {
                            downstreamUrl: e.downstreamUrl,
                            playbackHlsUrl: e.playbackHlsUrl,
                            livestreamUrl: e.livestreamUrl,
                          })
                        : "HLS_STOPPED" == e.status &&
                          (this.hlsUrls = {
                            downstreamUrl: null,
                            playbackHlsUrl: null,
                            livestreamUrl: null,
                          }),
                      this.eventEmitter.emit(wt, e);
                  },
                },
                {
                  key: "handleTranscriptionStateChanged",
                  value: function (e) {
                    (this.transcriptionState = e.status),
                      this.eventEmitter.emit(jt, e);
                  },
                },
                {
                  key: "handleTranscriptionText",
                  value: function (e) {
                    this.eventEmitter.emit(Bt, e);
                  },
                },
                {
                  key: "handleRecordingStarted",
                  value: function () {
                    this.eventEmitter.emit(gt);
                  },
                },
                {
                  key: "handleRecordingStopped",
                  value: function () {
                    this.eventEmitter.emit(_t);
                  },
                },
                {
                  key: "handleLivestreamStarted",
                  value: function () {
                    this.eventEmitter.emit(bt);
                  },
                },
                {
                  key: "handleLivestreamStopped",
                  value: function () {
                    this.eventEmitter.emit(yt);
                  },
                },
                {
                  key: "handleHlsStarted",
                  value: function (e) {
                    this.eventEmitter.emit(St, e);
                  },
                },
                {
                  key: "handleHlsStopped",
                  value: function () {
                    this.eventEmitter.emit(Rt);
                  },
                },
                {
                  key: "handleWhiteboardStarted",
                  value: function (e) {
                    var t = e.state;
                    this.eventEmitter.emit(Et, t);
                  },
                },
                {
                  key: "handleWhiteboardStopped",
                  value: function (e) {
                    !(function (e) {
                      if (null == e)
                        throw new TypeError("Cannot destructure " + e);
                    })(e),
                      this.eventEmitter.emit(kt);
                  },
                },
                {
                  key: "handleAddCharacter",
                  value: function (e) {
                    var t,
                      r = e.id,
                      a =
                        null !== (t = this.characters.get(r)) && void 0 !== t
                          ? t
                          : new We(
                              Ze(
                                Ze({}, e),
                                {},
                                {
                                  state: ve.CHARACTER_LISTENING,
                                  roomClient: this.roomClient,
                                }
                              )
                            );
                    this.characters.set(r, a),
                      this.eventEmitter.emit(Ft, a),
                      a.eventEmitter.emit(Ft);
                  },
                },
                {
                  key: "handleInitCharacter",
                  value: function (e) {
                    this.characters.set(e.id, e);
                  },
                },
                {
                  key: "handleRemoveCharacter",
                  value: function (e) {
                    var t = e.id;
                    if (this.characters.has(t)) {
                      var r = this.characters.get(t);
                      this.eventEmitter.emit(Ut, r),
                        r.eventEmitter.emit(Ut),
                        this.characters.delete(t);
                    }
                  },
                },
                {
                  key: "handleCharacterStateChanged",
                  value: function (e) {
                    var t = e.id;
                    this.characters.has(t) &&
                      this.characters.get(t).handleCharacterStateChanged(e);
                  },
                },
                {
                  key: "handleCharacterMessage",
                  value: function (e) {
                    var t = e.id;
                    this.characters.has(t) &&
                      this.characters.get(t).handleCharacterMessage(e);
                  },
                },
                {
                  key: "handleVideoStateChanged",
                  value: function (e) {
                    this.eventEmitter.emit(Tt, e);
                  },
                },
                {
                  key: "handleVideoSeeked",
                  value: function (e) {
                    var t = e.currentTime;
                    this.eventEmitter.emit(Ct, { currentTime: t });
                  },
                },
                {
                  key: "handlePinStateChanged",
                  value: function (e) {
                    var t = e.peerId,
                      r = e.state,
                      a = e.pinnedBy;
                    this.eventEmitter.emit(It, {
                      participantId: t,
                      state: r,
                      pinnedBy: a,
                    });
                  },
                },
                {
                  key: "handleMeetingStateChanged",
                  value: function (e) {
                    var t = e.state;
                    this.eventEmitter.emit(Nt, { state: t });
                  },
                },
                {
                  key: "handleVideoQualityChanged",
                  value: function (e) {
                    var t = e.peerId,
                      r = e.prevQuality,
                      a = e.currentQuality,
                      n = this.participants.get(t) || this.characters.get(t);
                    n && n && n.videoQualityChanged(r, a);
                  },
                },
                {
                  key: "handleMicRequested",
                  value: function (e) {
                    var t = this,
                      r = e.peerId;
                    this.eventEmitter.emit(Pt, {
                      participantId: r,
                      accept: function () {
                        return t.unmuteMic();
                      },
                      reject: function () {},
                    });
                  },
                },
                {
                  key: "handleWebcamRequested",
                  value: function (e) {
                    var t = this,
                      r = e.peerId;
                    this.eventEmitter.emit(Ot, {
                      participantId: r,
                      accept: function () {
                        return t.enableWebcam();
                      },
                      reject: function () {},
                    });
                  },
                },
                {
                  key: "handleConnectionParticipantJoin",
                  value: function (e) {
                    var t = e.roomId,
                      r = e.peer,
                      a = this.connections.get(t);
                    null != a && a.meeting.participantJoin(r);
                  },
                },
                {
                  key: "handleConnectionParticipantLeft",
                  value: function (e) {
                    var t = e.roomId,
                      r = e.peerId,
                      a = this.connections.get(t);
                    null != a && a.meeting.participantLeft(r);
                  },
                },
                {
                  key: "handleConnectionOpen",
                  value: function (e) {
                    var t = e.peers,
                      r = e.roomId,
                      a = e.payload,
                      n = new Ye({ roomId: r, peers: t, payload: a });
                    this.connections.set(n.id, n),
                      this.eventEmitter.emit(Mt, n);
                  },
                },
                {
                  key: "handleConnectionClose",
                  value: function (e) {
                    var t = e.roomId;
                    null != this.connections.get(t) &&
                      (this.connections.delete(t),
                      this.eventEmitter.emit(At, t));
                  },
                },
                {
                  key: "handleSwitchMeeting",
                  value: function (e) {
                    var t = e.roomId,
                      r = e.token,
                      a = e.payload,
                      n = e.peerId,
                      s = e.connectionPeerId,
                      i = e.connectionRoomId,
                      o = n
                        ? {
                            meetingId: t,
                            payload: a,
                            token: r,
                            participantId: n,
                          }
                        : {
                            meetingId: t,
                            payload: a,
                            token: r,
                            connectionParticipantId: s,
                            connectionMeetingId: i,
                          };
                    this.eventEmitter.emit(Lt, o);
                  },
                },
                {
                  key: "handleConnectionChatMessage",
                  value: function (e) {
                    var t = e.roomId,
                      r = e.peerId,
                      a = e.message,
                      n = this.connections.get(t);
                    null != n &&
                      n.meeting.sendChatMessageEvent({
                        participantId: r,
                        message: a,
                      });
                  },
                },
                {
                  key: "connectTo",
                  value:
                    ((r = (0, t.A)(
                      c().mark(function e(t) {
                        var r, a;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.meetingId),
                                    (a = t.payload),
                                    (e.next = 3),
                                    this.roomClient.openConnection({
                                      roomId: r,
                                      payload: a,
                                    })
                                  );
                                case 3:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (e) {
                      return r.apply(this, arguments);
                    }),
                },
                {
                  key: "selectedCameraDevice",
                  get: function () {
                    var e;
                    return null === (e = this.roomClient._webcam) ||
                      void 0 === e
                      ? void 0
                      : e.device;
                  },
                },
                {
                  key: "selectedMicrophoneDevice",
                  get: function () {
                    var e;
                    return null === (e = this.roomClient._mic) || void 0 === e
                      ? void 0
                      : e.device;
                  },
                },
                {
                  key: "on",
                  value: function (e, t) {
                    switch (e) {
                      case ot:
                      case ct:
                      case dt:
                      case lt:
                      case pt:
                      case ut:
                      case ht:
                      case mt:
                      case ft:
                      case gt:
                      case _t:
                      case vt:
                      case bt:
                      case yt:
                      case St:
                      case Rt:
                      case wt:
                      case jt:
                      case Bt:
                      case Dt:
                      case xt:
                      case Et:
                      case kt:
                      case Ft:
                      case Ut:
                      case nt:
                      case st:
                      case Tt:
                      case Ct:
                      case Pt:
                      case Ot:
                      case It:
                      case Mt:
                      case At:
                      case Lt:
                      case Nt:
                      case it:
                      case at:
                        this.eventEmitter.on(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  },
                },
                {
                  key: "off",
                  value: function (e, t) {
                    switch (e) {
                      case ot:
                      case ct:
                      case dt:
                      case lt:
                      case pt:
                      case ut:
                      case ht:
                      case mt:
                      case ft:
                      case gt:
                      case _t:
                      case vt:
                      case bt:
                      case yt:
                      case wt:
                      case St:
                      case Rt:
                      case jt:
                      case Bt:
                      case Dt:
                      case xt:
                      case Et:
                      case kt:
                      case Ft:
                      case Ut:
                      case nt:
                      case st:
                      case Tt:
                      case Ct:
                      case Pt:
                      case Ot:
                      case It:
                      case Mt:
                      case At:
                      case Lt:
                      case Nt:
                      case at:
                      case it:
                        this.eventEmitter.off(e, t);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  },
                },
              ]
            );
            var r, a, o, d, l, p, u, h;
          })();
        function Vt(e) {
          var t = e.topic,
            r = e.message,
            a = e.senderId,
            n = e.timestamp,
            s = e.senderName,
            i = e.id,
            o = e.payload;
          t &&
            r &&
            tt(Wt, this).emit(t, {
              message: r,
              senderId: a,
              timestamp: n,
              topic: t,
              senderName: s,
              id: i,
              payload: o,
            });
        }
        function Gt(e) {
          var t = e.peerId,
            r = e.mode;
          t === this.localParticipant.id
            ? (this.localParticipant.mode = r)
            : (this.participants.get(t).mode = r),
            this.eventEmitter.emit(it, { participantId: t, mode: r });
        }
        var zt = r(7080),
          $t = r(5071),
          Kt = r(2107),
          Jt = r(4973),
          Qt = r(9027);
        function Yt(e, t, r) {
          return (
            (t = fe(t)),
            me(
              e,
              Xt()
                ? Reflect.construct(t, r || [], fe(e).constructor)
                : t.apply(e, r)
            )
          );
        }
        function Xt() {
          try {
            var e = !Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function () {})
            );
          } catch (e) {}
          return (Xt = function () {
            return !!e;
          })();
        }
        var Zt = (function (e) {
            function t(e, r, a, s) {
              return (0, n.A)(this, t), Yt(this, t, [e, r, a, s]);
            }
            return _e(t, e), (0, s.A)(t);
          })(
            (0, s.A)(function e(t, r, a, s) {
              (0, n.A)(this, e),
                (this.deviceId = t),
                (this.groupId = r),
                (this.kind = a),
                (this.label = s);
            })
          ),
          er = (function (e) {
            function t(e, r, a, s) {
              return (0, n.A)(this, t), Yt(this, t, [e, r, a, s]);
            }
            return _e(t, e), (0, s.A)(t);
          })(Zt),
          tr = (function (e) {
            function t(e, r, a, s) {
              return (0, n.A)(this, t), Yt(this, t, [e, r, a, s]);
            }
            return _e(t, e), (0, s.A)(t);
          })(Zt),
          rr = (function (e) {
            function t(e, r, a, s) {
              return (0, n.A)(this, t), Yt(this, t, [e, r, a, s]);
            }
            return _e(t, e), (0, s.A)(t);
          })(Zt),
          ar = {
            AUDIO: "audio",
            VIDEO: "video",
            AUDIO_AND_VIDEO: "audio_video",
          },
          nr = (r(328), r(7654));
        function sr(e, t) {
          return null == e || null == t
            ? NaN
            : e < t
            ? -1
            : e > t
            ? 1
            : e >= t
            ? 0
            : NaN;
        }
        function ir(e, t) {
          return null == e || null == t
            ? NaN
            : t < e
            ? -1
            : t > e
            ? 1
            : t >= e
            ? 0
            : NaN;
        }
        function or(e) {
          let t, r, a;
          function n(e, a, n = 0, s = e.length) {
            if (n < s) {
              if (0 !== t(a, a)) return s;
              do {
                const t = (n + s) >>> 1;
                r(e[t], a) < 0 ? (n = t + 1) : (s = t);
              } while (n < s);
            }
            return n;
          }
          return (
            2 !== e.length
              ? ((t = sr),
                (r = (t, r) => sr(e(t), r)),
                (a = (t, r) => e(t) - r))
              : ((t = e === sr || e === ir ? e : cr), (r = e), (a = e)),
            {
              left: n,
              center: function (e, t, r = 0, s = e.length) {
                const i = n(e, t, r, s - 1);
                return i > r && a(e[i - 1], t) > -a(e[i], t) ? i - 1 : i;
              },
              right: function (e, a, n = 0, s = e.length) {
                if (n < s) {
                  if (0 !== t(a, a)) return s;
                  do {
                    const t = (n + s) >>> 1;
                    r(e[t], a) <= 0 ? (n = t + 1) : (s = t);
                  } while (n < s);
                }
                return n;
              },
            }
          );
        }
        function cr() {
          return 0;
        }
        const dr = or(sr),
          lr = dr.right,
          pr =
            (dr.left,
            or(function (e) {
              return null === e ? NaN : +e;
            }).center,
            lr);
        function ur(e, t) {
          switch (arguments.length) {
            case 0:
              break;
            case 1:
              this.range(e);
              break;
            default:
              this.range(t).domain(e);
          }
          return this;
        }
        function hr() {
          var e,
            t = [0.5],
            r = [0, 1],
            a = 1;
          function n(n) {
            return null != n && n <= n ? r[pr(t, n, 0, a)] : e;
          }
          return (
            (n.domain = function (e) {
              return arguments.length
                ? ((t = Array.from(e)),
                  (a = Math.min(t.length, r.length - 1)),
                  n)
                : t.slice();
            }),
            (n.range = function (e) {
              return arguments.length
                ? ((r = Array.from(e)),
                  (a = Math.min(t.length, r.length - 1)),
                  n)
                : r.slice();
            }),
            (n.invertExtent = function (e) {
              var a = r.indexOf(e);
              return [t[a - 1], t[a]];
            }),
            (n.unknown = function (t) {
              return arguments.length ? ((e = t), n) : e;
            }),
            (n.copy = function () {
              return hr().domain(t).range(r).unknown(e);
            }),
            ur.apply(n, arguments)
          );
        }
        function mr(e, t) {
          var r = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var a = Object.getOwnPropertySymbols(e);
            t &&
              (a = a.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              r.push.apply(r, a);
          }
          return r;
        }
        function fr(e) {
          for (var t = 1; t < arguments.length; t++) {
            var r = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? mr(Object(r), !0).forEach(function (t) {
                  br(e, t, r[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
              : mr(Object(r)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(r, t)
                  );
                });
          }
          return e;
        }
        function gr(e, t) {
          if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function");
        }
        function _r(e, t) {
          for (var r = 0; r < t.length; r++) {
            var a = t[r];
            (a.enumerable = a.enumerable || !1),
              (a.configurable = !0),
              "value" in a && (a.writable = !0),
              Object.defineProperty(e, Ar(a.key), a);
          }
        }
        function vr(e, t, r) {
          return (
            t && _r(e.prototype, t),
            r && _r(e, r),
            Object.defineProperty(e, "prototype", { writable: !1 }),
            e
          );
        }
        function br(e, t, r) {
          return (
            (t = Ar(t)) in e
              ? Object.defineProperty(e, t, {
                  value: r,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = r),
            e
          );
        }
        function yr(e, t) {
          if ("function" != typeof t && null !== t)
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          (e.prototype = Object.create(t && t.prototype, {
            constructor: { value: e, writable: !0, configurable: !0 },
          })),
            Object.defineProperty(e, "prototype", { writable: !1 }),
            t && Sr(e, t);
        }
        function wr(e) {
          return (
            (wr = Object.setPrototypeOf
              ? Object.getPrototypeOf.bind()
              : function (e) {
                  return e.__proto__ || Object.getPrototypeOf(e);
                }),
            wr(e)
          );
        }
        function Sr(e, t) {
          return (
            (Sr = Object.setPrototypeOf
              ? Object.setPrototypeOf.bind()
              : function (e, t) {
                  return (e.__proto__ = t), e;
                }),
            Sr(e, t)
          );
        }
        function Rr(e, t) {
          if (null == e) return {};
          var r,
            a,
            n = (function (e, t) {
              if (null == e) return {};
              var r,
                a,
                n = {},
                s = Object.keys(e);
              for (a = 0; a < s.length; a++)
                (r = s[a]), t.indexOf(r) >= 0 || (n[r] = e[r]);
              return n;
            })(e, t);
          if (Object.getOwnPropertySymbols) {
            var s = Object.getOwnPropertySymbols(e);
            for (a = 0; a < s.length; a++)
              (r = s[a]),
                t.indexOf(r) >= 0 ||
                  (Object.prototype.propertyIsEnumerable.call(e, r) &&
                    (n[r] = e[r]));
          }
          return n;
        }
        function Er(e) {
          if (void 0 === e)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return e;
        }
        function kr(e) {
          var t = (function () {
            if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
            if (Reflect.construct.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
              return (
                Boolean.prototype.valueOf.call(
                  Reflect.construct(Boolean, [], function () {})
                ),
                !0
              );
            } catch (e) {
              return !1;
            }
          })();
          return function () {
            var r,
              a = wr(e);
            if (t) {
              var n = wr(this).constructor;
              r = Reflect.construct(a, arguments, n);
            } else r = a.apply(this, arguments);
            return (function (e, t) {
              if (t && ("object" == typeof t || "function" == typeof t))
                return t;
              if (void 0 !== t)
                throw new TypeError(
                  "Derived constructors may only return object or undefined"
                );
              return Er(e);
            })(this, r);
          };
        }
        function Tr(e, t) {
          for (
            ;
            !Object.prototype.hasOwnProperty.call(e, t) && null !== (e = wr(e));

          );
          return e;
        }
        function Cr() {
          return (
            (Cr =
              "undefined" != typeof Reflect && Reflect.get
                ? Reflect.get.bind()
                : function (e, t, r) {
                    var a = Tr(e, t);
                    if (a) {
                      var n = Object.getOwnPropertyDescriptor(a, t);
                      return n.get
                        ? n.get.call(arguments.length < 3 ? e : r)
                        : n.value;
                    }
                  }),
            Cr.apply(this, arguments)
          );
        }
        function Pr(e, t, r, a) {
          return (
            (Pr =
              "undefined" != typeof Reflect && Reflect.set
                ? Reflect.set
                : function (e, t, r, a) {
                    var n,
                      s = Tr(e, t);
                    if (s) {
                      if ((n = Object.getOwnPropertyDescriptor(s, t)).set)
                        return n.set.call(a, r), !0;
                      if (!n.writable) return !1;
                    }
                    if ((n = Object.getOwnPropertyDescriptor(a, t))) {
                      if (!n.writable) return !1;
                      (n.value = r), Object.defineProperty(a, t, n);
                    } else br(a, t, r);
                    return !0;
                  }),
            Pr(e, t, r, a)
          );
        }
        function Or(e, t, r, a, n) {
          if (!Pr(e, t, r, a || e) && n)
            throw new TypeError("failed to set property");
          return r;
        }
        function Dr(e, t) {
          return (
            (function (e) {
              if (Array.isArray(e)) return e;
            })(e) ||
            (function (e, t) {
              var r =
                null == e
                  ? null
                  : ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
                    e["@@iterator"];
              if (null != r) {
                var a,
                  n,
                  s,
                  i,
                  o = [],
                  c = !0,
                  d = !1;
                try {
                  if (((s = (r = r.call(e)).next), 0 === t)) {
                    if (Object(r) !== r) return;
                    c = !1;
                  } else
                    for (
                      ;
                      !(c = (a = s.call(r)).done) &&
                      (o.push(a.value), o.length !== t);
                      c = !0
                    );
                } catch (e) {
                  (d = !0), (n = e);
                } finally {
                  try {
                    if (
                      !c &&
                      null != r.return &&
                      ((i = r.return()), Object(i) !== i)
                    )
                      return;
                  } finally {
                    if (d) throw n;
                  }
                }
                return o;
              }
            })(e, t) ||
            Ir(e, t) ||
            (function () {
              throw new TypeError(
                "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            })()
          );
        }
        function xr(e) {
          return (
            (function (e) {
              if (Array.isArray(e)) return Mr(e);
            })(e) ||
            (function (e) {
              if (
                ("undefined" != typeof Symbol && null != e[Symbol.iterator]) ||
                null != e["@@iterator"]
              )
                return Array.from(e);
            })(e) ||
            Ir(e) ||
            (function () {
              throw new TypeError(
                "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            })()
          );
        }
        function Ir(e, t) {
          if (e) {
            if ("string" == typeof e) return Mr(e, t);
            var r = Object.prototype.toString.call(e).slice(8, -1);
            return (
              "Object" === r && e.constructor && (r = e.constructor.name),
              "Map" === r || "Set" === r
                ? Array.from(e)
                : "Arguments" === r ||
                  /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                ? Mr(e, t)
                : void 0
            );
          }
        }
        function Mr(e, t) {
          (null == t || t > e.length) && (t = e.length);
          for (var r = 0, a = new Array(t); r < t; r++) a[r] = e[r];
          return a;
        }
        function Ar(e) {
          var t = (function (e, t) {
            if ("object" != typeof e || null === e) return e;
            var r = e[Symbol.toPrimitive];
            if (void 0 !== r) {
              var a = r.call(e, t || "default");
              if ("object" != typeof a) return a;
              throw new TypeError(
                "@@toPrimitive must return a primitive value."
              );
            }
            return ("string" === t ? String : Number)(e);
          })(e, "string");
          return "symbol" == typeof t ? t : String(t);
        }
        function Lr(e, t) {
          return (function (e, t) {
            if (t.get) return t.get.call(e);
            return t.value;
          })(e, jr(e, t, "get"));
        }
        function Nr(e, t, r) {
          return (
            (function (e, t, r) {
              if (t.set) t.set.call(e, r);
              else {
                if (!t.writable)
                  throw new TypeError(
                    "attempted to set read only private field"
                  );
                t.value = r;
              }
            })(e, jr(e, t, "set"), r),
            r
          );
        }
        function jr(e, t, r) {
          if (!t.has(e))
            throw new TypeError(
              "attempted to " + r + " private field on non-instance"
            );
          return t.get(e);
        }
        function Br(e, t, r) {
          if (!t.has(e))
            throw new TypeError(
              "attempted to get private field on non-instance"
            );
          return r;
        }
        function Fr(e, t) {
          if (t.has(e))
            throw new TypeError(
              "Cannot initialize the same private elements twice on an object"
            );
        }
        function Ur(e, t, r) {
          Fr(e, t), t.set(e, r);
        }
        function Wr(e, t) {
          Fr(e, t), t.add(e);
        }
        var qr = "https://speed.cloudflare.com",
          Hr = {
            autoStart: !0,
            downloadApiUrl: "".concat(qr, "/__down"),
            uploadApiUrl: "".concat(qr, "/__up"),
            logMeasurementApiUrl: null,
            logAimApiUrl: "https://aim.cloudflare.com/__log",
            turnServerUri: "turn.speed.cloudflare.com:50000",
            turnServerCredsApiUrl: "".concat(qr, "/turn-creds"),
            turnServerUser: null,
            turnServerPass: null,
            rpkiInvalidHost: "invalid.rpki.cloudflare.com",
            cfTraceUrl: "".concat(qr, "/cdn-cgi/trace"),
            includeCredentials: !1,
            measurements: [
              { type: "latency", numPackets: 1 },
              { type: "download", bytes: 1e5, count: 1, bypassMinDuration: !0 },
              { type: "latency", numPackets: 20 },
              { type: "download", bytes: 1e5, count: 9 },
              { type: "download", bytes: 1e6, count: 8 },
              { type: "upload", bytes: 1e5, count: 8 },
              {
                type: "packetLoss",
                numPackets: 1e3,
                batchSize: 10,
                batchWaitTime: 10,
                responsesWaitTime: 3e3,
              },
              { type: "upload", bytes: 1e6, count: 6 },
              { type: "download", bytes: 1e7, count: 6 },
              { type: "upload", bytes: 1e7, count: 4 },
              { type: "download", bytes: 25e6, count: 4 },
              { type: "upload", bytes: 25e6, count: 4 },
              { type: "download", bytes: 1e8, count: 3 },
              { type: "upload", bytes: 5e7, count: 3 },
              { type: "download", bytes: 25e7, count: 2 },
            ],
            measureDownloadLoadedLatency: !0,
            measureUploadLoadedLatency: !0,
            loadedLatencyThrottle: 400,
            bandwidthFinishRequestDuration: 1e3,
            estimatedServerTime: 10,
            latencyPercentile: 0.5,
            bandwidthPercentile: 0.9,
            bandwidthMinRequestDuration: 10,
            loadedRequestMinDuration: 250,
            loadedLatencyMaxPoints: 20,
          },
          Vr = {
            aimMeasurementScoring: {
              packetLoss: hr([0.01, 0.05, 0.25, 0.5], [10, 5, 0, -10, -20]),
              latency: hr([10, 20, 50, 100, 500], [20, 10, 5, 0, -10, -20]),
              loadedLatencyIncrease: hr(
                [10, 20, 50, 100, 500],
                [20, 10, 5, 0, -10, -20]
              ),
              jitter: hr([10, 20, 100, 500], [10, 5, 0, -10, -20]),
              download: hr([1e6, 1e7, 5e7, 1e8], [0, 5, 10, 20, 30]),
              upload: hr([1e6, 1e7, 5e7, 1e8], [0, 5, 10, 20, 30]),
            },
            aimExperiencesDefs: {
              streaming: {
                input: [
                  "latency",
                  "packetLoss",
                  "download",
                  "loadedLatencyIncrease",
                ],
                pointThresholds: [15, 20, 40, 60],
              },
              gaming: {
                input: ["latency", "packetLoss", "loadedLatencyIncrease"],
                pointThresholds: [5, 15, 25, 30],
              },
              rtc: {
                input: [
                  "latency",
                  "jitter",
                  "packetLoss",
                  "loadedLatencyIncrease",
                ],
                pointThresholds: [5, 15, 25, 40],
              },
            },
          },
          Gr = function (e) {
            var t = e.headers.get("server-timing");
            if (t) {
              var r = t.match(/dur=([0-9.]+)/);
              if (r) return +r[1];
            }
          },
          zr = function (e) {
            return e.responseStart - e.requestStart;
          },
          $r = function (e) {
            return e.responseEnd - e.responseStart;
          },
          Kr = function (e) {
            return e.ping + e.payloadDownloadTime;
          },
          Jr = function (e) {
            return e.ttfb;
          },
          Qr = function (e, t) {
            var r = e.duration,
              a = e.transferSize,
              n = r / 1e3;
            return n ? (8 * (a || 1.005 * +t)) / n : void 0;
          },
          Yr = function (e, t) {
            var r = e.duration / 1e3;
            return r ? (8 * t * 1.005) / r : void 0;
          },
          Xr = nr(function (e) {
            return "0".repeat(e);
          }),
          Zr = new WeakMap(),
          ea = new WeakMap(),
          ta = new WeakMap(),
          ra = new WeakMap(),
          aa = new WeakMap(),
          na = new WeakMap(),
          sa = new WeakMap(),
          ia = new WeakMap(),
          oa = new WeakMap(),
          ca = new WeakMap(),
          da = new WeakMap(),
          la = new WeakMap(),
          pa = new WeakMap(),
          ua = new WeakMap(),
          ha = new WeakMap(),
          ma = new WeakMap(),
          fa = new WeakMap(),
          ga = new WeakMap(),
          _a = new WeakMap(),
          va = new WeakMap(),
          ba = new WeakMap(),
          ya = new WeakMap(),
          wa = new WeakSet(),
          Sa = new WeakSet(),
          Ra = new WeakSet(),
          Ea = new WeakSet();
        function ka(e) {
          var t = this;
          e !== Lr(this, la) &&
            (Nr(this, la, e),
            setTimeout(function () {
              return Lr(t, ra).call(t, Lr(t, la));
            }));
        }
        function Ta(e, t) {
          var r = this,
            a = Lr(this, oa)[e],
            n = a.bytes,
            s = a.dir,
            i = Lr(this, ua),
            o = i[s].hasOwnProperty(n)
              ? i[s][n]
              : {
                  timings: [],
                  numMeasurements: Lr(this, oa)
                    .filter(function (e) {
                      var t = e.bytes,
                        r = e.dir;
                      return n === t && s === r;
                    })
                    .map(function (e) {
                      return e.count;
                    })
                    .reduce(function (e, t) {
                      return e + t;
                    }, 0),
                };
          t && o.timings.push(t),
            (o.timings = o.timings.slice(-o.numMeasurements)),
            (i[s][n] = o),
            t
              ? setTimeout(function () {
                  Lr(r, na).call(r, fr({ type: s, bytes: n }, t), i);
                })
              : Lr(this, aa).call(this, Lr(this, oa)[e], i);
        }
        function Ca() {
          var e = this,
            t = Lr(this, oa),
            r = t[Lr(this, ha)];
          if (Lr(this, ma) >= r.count) {
            var a = Lr(this, pa);
            if (
              Lr(this, ga) > this.finishRequestDuration &&
              !r.bypassMinDuration
            ) {
              var n = r.dir;
              (Lr(this, pa)[n] = !0),
                Object.values(Lr(this, pa)).every(function (e) {
                  return e;
                }) && Lr(this, sa).call(this, Lr(this, ua));
            }
            Nr(this, ma, 0),
              Nr(this, ga, -1 / 0),
              performance.clearResourceTimings();
            do {
              Nr(this, ha, Lr(this, ha) + 1);
            } while (Lr(this, ha) < t.length && a[t[Lr(this, ha)].dir]);
            if (Lr(this, ha) >= t.length)
              return (
                Nr(this, pa, { down: !0, up: !0 }),
                Br(this, wa, ka).call(this, !1),
                void Lr(this, sa).call(this, Lr(this, ua))
              );
            r = t[Lr(this, ha)];
          }
          var s = Lr(this, ha);
          0 === Lr(this, ma) && Br(this, Sa, Ta).call(this, s);
          var i = r,
            o = i.bytes,
            c = "down" === i.dir,
            d = Lr(this, c ? ca : da),
            l = Object.assign({}, Lr(this, Zr));
          c && (l.bytes = "".concat(o));
          var p,
            u = ""
              .concat(
                d.startsWith("http") || d.startsWith("//")
                  ? ""
                  : window.location.origin
              )
              .concat(d, "?")
              .concat(
                Object.entries(l)
                  .map(function (e) {
                    var t = Dr(e, 2),
                      r = t[0],
                      a = t[1];
                    return "".concat(r, "=").concat(a);
                  })
                  .join("&")
              ),
            h = Object.assign(
              {},
              c ? {} : { method: "POST", body: Xr(o) },
              Lr(this, ea)
            ),
            m = Nr(
              this,
              ba,
              fetch(u, h)
                .then(function (e) {
                  if (e.ok) return e;
                  throw Error(e.statusText);
                })
                .then(function (t) {
                  return e.getServerTime && (p = e.getServerTime(t)), t;
                })
                .then(function (t) {
                  return t.text().then(function (r) {
                    return (
                      Lr(e, ta) &&
                        Lr(e, ta).call(e, {
                          url: u,
                          headers: t.headers,
                          body: r,
                        }),
                      r
                    );
                  });
                })
                .then(function (t, r) {
                  if (m._cancel) r("cancelled");
                  else {
                    var a = performance.getEntriesByName(u).slice(-1)[0],
                      n = {
                        transferSize: a.transferSize,
                        ttfb: zr(a),
                        payloadDownloadTime: $r(a),
                        serverTime: p || -1,
                        measTime: new Date(),
                      };
                    if (
                      ((n.ping = Math.max(0.01, n.ttfb - (p || Lr(e, va)))),
                      (n.duration = (c ? Kr : Jr)(n)),
                      (n.bps = (c ? Qr : Yr)(n, o)),
                      c && o)
                    ) {
                      var i = +o;
                      n.transferSize &&
                        (n.transferSize < i || n.transferSize / i > 1.05) &&
                        console.warn(
                          "Requested "
                            .concat(i, "B but received ")
                            .concat(n.transferSize, "B (")
                            .concat(
                              Math.round((n.transferSize / i) * 1e4) / 100,
                              "%)."
                            )
                        );
                    }
                    Br(e, Sa, Ta).call(e, s, n);
                    var d = n.duration;
                    Nr(e, ga, Lr(e, ga) < 0 ? d : Math.min(Lr(e, ga), d)),
                      Nr(e, ma, Lr(e, ma) + 1),
                      Nr(e, fa, 0),
                      Lr(e, _a)
                        ? Nr(
                            e,
                            ya,
                            setTimeout(function () {
                              return Br(e, Ra, Ca).call(e);
                            }, Lr(e, _a))
                          )
                        : Br(e, Ra, Ca).call(e);
                  }
                })
                .catch(function (t) {
                  var r, a;
                  m._cancel ||
                    (console.warn("Error fetching ".concat(u, ": ").concat(t)),
                    Nr(e, fa, ((r = Lr(e, fa)), (a = r++), r)),
                    a < 20
                      ? Br(e, Ra, Ca).call(e)
                      : (Nr(e, fa, 0),
                        Br(e, wa, ka).call(e, !1),
                        Lr(e, ia).call(
                          e,
                          "Connection failed to "
                            .concat(u, ". Gave up after ")
                            .concat(20, " retries.")
                        )));
                })
            );
        }
        function Pa() {
          var e = Lr(this, ba);
          e && (e._cancel = !0);
        }
        var Oa = (function () {
            function e(t) {
              var r =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
                a = r.downloadApiUrl,
                n = r.uploadApiUrl,
                s = r.throttleMs,
                i = void 0 === s ? 0 : s,
                o = r.estimatedServerTime,
                c = void 0 === o ? 0 : o;
              if (
                (gr(this, e),
                Wr(this, Ea),
                Wr(this, Ra),
                Wr(this, Sa),
                Wr(this, wa),
                Ur(this, Zr, { writable: !0, value: {} }),
                Ur(this, ea, { writable: !0, value: {} }),
                br(this, "finishRequestDuration", 1e3),
                br(this, "getServerTime", Gr),
                Ur(this, ta, {
                  writable: !0,
                  value: function (e) {
                    return e;
                  },
                }),
                Ur(this, ra, { writable: !0, value: function () {} }),
                Ur(this, aa, { writable: !0, value: function () {} }),
                Ur(this, na, { writable: !0, value: function () {} }),
                Ur(this, sa, { writable: !0, value: function () {} }),
                Ur(this, ia, { writable: !0, value: function () {} }),
                Ur(this, oa, { writable: !0, value: void 0 }),
                Ur(this, ca, { writable: !0, value: void 0 }),
                Ur(this, da, { writable: !0, value: void 0 }),
                Ur(this, la, { writable: !0, value: !1 }),
                Ur(this, pa, { writable: !0, value: { down: !1, up: !1 } }),
                Ur(this, ua, { writable: !0, value: { down: {}, up: {} } }),
                Ur(this, ha, { writable: !0, value: 0 }),
                Ur(this, ma, { writable: !0, value: 0 }),
                Ur(this, fa, { writable: !0, value: 0 }),
                Ur(this, ga, { writable: !0, value: -1 / 0 }),
                Ur(this, _a, { writable: !0, value: 0 }),
                Ur(this, va, { writable: !0, value: 0 }),
                Ur(this, ba, { writable: !0, value: void 0 }),
                Ur(this, ya, { writable: !0, value: void 0 }),
                !t)
              )
                throw new Error("Missing measurements argument");
              if (!a) throw new Error("Missing downloadApiUrl argument");
              if (!n) throw new Error("Missing uploadApiUrl argument");
              Nr(this, oa, t),
                Nr(this, ca, a),
                Nr(this, da, n),
                Nr(this, _a, i),
                Nr(this, va, Math.max(0, c));
            }
            return (
              vr(e, [
                {
                  key: "results",
                  get: function () {
                    return Lr(this, ua);
                  },
                },
                {
                  key: "qsParams",
                  get: function () {
                    return Lr(this, Zr);
                  },
                  set: function (e) {
                    Nr(this, Zr, e);
                  },
                },
                {
                  key: "fetchOptions",
                  get: function () {
                    return Lr(this, ea);
                  },
                  set: function (e) {
                    Nr(this, ea, e);
                  },
                },
                {
                  key: "responseHook",
                  set: function (e) {
                    Nr(this, ta, e);
                  },
                },
                {
                  key: "onRunningChange",
                  set: function (e) {
                    Nr(this, ra, e);
                  },
                },
                {
                  key: "onNewMeasurementStarted",
                  set: function (e) {
                    Nr(this, aa, e);
                  },
                },
                {
                  key: "onMeasurementResult",
                  set: function (e) {
                    Nr(this, na, e);
                  },
                },
                {
                  key: "onFinished",
                  set: function (e) {
                    Nr(this, sa, e);
                  },
                },
                {
                  key: "onConnectionError",
                  set: function (e) {
                    Nr(this, ia, e);
                  },
                },
                {
                  key: "pause",
                  value: function () {
                    clearTimeout(Lr(this, ya)),
                      Br(this, Ea, Pa).call(this),
                      Br(this, wa, ka).call(this, !1);
                  },
                },
                {
                  key: "play",
                  value: function () {
                    Lr(this, la) ||
                      (Br(this, wa, ka).call(this, !0),
                      Br(this, Ra, Ca).call(this));
                  },
                },
              ]),
              e
            );
          })(),
          Da = [
            "measureParallelLatency",
            "parallelLatencyThrottleMs",
            "downloadApiUrl",
            "uploadApiUrl",
            "estimatedServerTime",
          ],
          xa = new WeakMap(),
          Ia = new WeakSet();
        function Ma(e) {
          var t = this;
          Lr(this, xa) &&
            (e
              ? setTimeout(function () {
                  return Lr(t, xa).play();
                }, 20)
              : Lr(this, xa).pause());
        }
        var Aa = (function (e) {
            yr(r, e);
            var t = kr(r);
            function r(e) {
              var a,
                n,
                s,
                i =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
                o = i.measureParallelLatency,
                c = void 0 !== o && o,
                d = i.parallelLatencyThrottleMs,
                l = void 0 === d ? 100 : d,
                p = i.downloadApiUrl,
                u = i.uploadApiUrl,
                h = i.estimatedServerTime,
                m = void 0 === h ? 0 : h,
                f = Rr(i, Da);
              return (
                gr(this, r),
                Wr(
                  Er(
                    (s = t.call(
                      this,
                      e,
                      fr(
                        {
                          downloadApiUrl: p,
                          uploadApiUrl: u,
                          estimatedServerTime: m,
                        },
                        f
                      )
                    ))
                  ),
                  Ia
                ),
                Ur(Er(s), xa, { writable: !0, value: void 0 }),
                c &&
                  (Nr(
                    Er(s),
                    xa,
                    new Oa(
                      [
                        {
                          dir: "down",
                          bytes: 0,
                          count: 1 / 0,
                          bypassMinDuration: !0,
                        },
                      ],
                      {
                        downloadApiUrl: p,
                        uploadApiUrl: u,
                        estimatedServerTime: m,
                        throttleMs: l,
                      }
                    )
                  ),
                  (Lr(Er(s), xa).qsParams = {
                    during: "".concat(e[0].dir, "load"),
                  }),
                  Or(
                    ((a = Er(s)), wr(r.prototype)),
                    "onRunningChange",
                    Br(Er(s), Ia, Ma),
                    a,
                    !0
                  ),
                  Or(
                    ((n = Er(s)), wr(r.prototype)),
                    "onConnectionError",
                    function () {
                      return Lr(Er(s), xa).pause();
                    },
                    n,
                    !0
                  )),
                s
              );
            }
            return (
              vr(r, [
                {
                  key: "latencyResults",
                  get: function () {
                    return Lr(this, xa) && Lr(this, xa).results.down[0].timings;
                  },
                },
                {
                  key: "onParallelLatencyResult",
                  set: function (e) {
                    Lr(this, xa) &&
                      (Lr(this, xa).onMeasurementResult = function (t) {
                        return e(t);
                      });
                  },
                },
                {
                  key: "fetchOptions",
                  get: function () {
                    return Cr(wr(r.prototype), "fetchOptions", this);
                  },
                  set: function (e) {
                    Or(wr(r.prototype), "fetchOptions", e, this, !0),
                      Lr(this, xa) && (Lr(this, xa).fetchOptions = e);
                  },
                },
                {
                  key: "onRunningChange",
                  set: function (e) {
                    var t = this;
                    Or(
                      wr(r.prototype),
                      "onRunningChange",
                      function (r) {
                        Br(t, Ia, Ma).call(t, r), e(r);
                      },
                      this,
                      !0
                    );
                  },
                },
                {
                  key: "onConnectionError",
                  set: function (e) {
                    var t = this;
                    Or(
                      wr(r.prototype),
                      "onConnectionError",
                      function () {
                        Lr(t, xa) && Lr(t, xa).pause(),
                          e.apply(void 0, arguments);
                      },
                      this,
                      !0
                    );
                  },
                },
              ]),
              r
            );
          })(Oa),
          La = ["measurementId", "logApiUrl"],
          Na = new WeakMap(),
          ja = new WeakMap(),
          Ba = new WeakMap(),
          Fa = new WeakMap(),
          Ua = new WeakSet(),
          Wa = new WeakSet();
        function qa(e) {
          Lr(this, Fa) &&
            (Nr(this, Ba, +e.headers.get("cf-meta-request-time")),
            Nr(this, ja, e.body.slice(-300).split("___").pop()));
        }
        function Ha(e) {
          if (Lr(this, Fa)) {
            var t = {
              type: e.type,
              bytes: e.bytes,
              ping: Math.round(e.ping),
              ttfb: Math.round(e.ttfb),
              payloadDownloadTime: Math.round(e.payloadDownloadTime),
              duration: Math.round(e.duration),
              transferSize: Math.round(e.transferSize),
              serverTime: Math.round(e.serverTime),
              token: Lr(this, ja),
              requestTime: Lr(this, Ba),
              measId: Lr(this, Na),
            };
            Nr(this, ja, null),
              Nr(this, Ba, null),
              fetch(
                Lr(this, Fa),
                fr(
                  { method: "POST", body: JSON.stringify(t) },
                  this.fetchOptions
                )
              );
          }
        }
        var Va = (function (e) {
            yr(r, e);
            var t = kr(r);
            function r(e) {
              var a,
                n,
                s,
                i,
                o =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
                c = o.measurementId,
                d = o.logApiUrl,
                l = Rr(o, La);
              return (
                gr(this, r),
                Wr(Er((i = t.call(this, e, l))), Wa),
                Wr(Er(i), Ua),
                Ur(Er(i), Na, { writable: !0, value: void 0 }),
                Ur(Er(i), ja, { writable: !0, value: void 0 }),
                Ur(Er(i), Ba, { writable: !0, value: void 0 }),
                Ur(Er(i), Fa, { writable: !0, value: void 0 }),
                Nr(Er(i), Na, c),
                Nr(Er(i), Fa, d),
                Or(
                  ((a = Er(i)), wr(r.prototype)),
                  "qsParams",
                  d ? { measId: Lr(Er(i), Na) } : {},
                  a,
                  !0
                ),
                Or(
                  ((n = Er(i)), wr(r.prototype)),
                  "responseHook",
                  function (e) {
                    return Br(Er(i), Ua, qa).call(Er(i), e);
                  },
                  n,
                  !0
                ),
                Or(
                  ((s = Er(i)), wr(r.prototype)),
                  "onMeasurementResult",
                  function (e) {
                    return Br(Er(i), Wa, Ha).call(Er(i), e);
                  },
                  s,
                  !0
                ),
                i
              );
            }
            return (
              vr(r, [
                {
                  key: "qsParams",
                  set: function (e) {
                    Or(
                      wr(r.prototype),
                      "qsParams",
                      Lr(this, Fa) ? fr({ measId: Lr(this, Na) }, e) : e,
                      this,
                      !0
                    );
                  },
                },
                {
                  key: "responseHook",
                  set: function (e) {
                    var t = this;
                    Or(
                      wr(r.prototype),
                      "responseHook",
                      function (r) {
                        e(r), Br(t, Ua, qa).call(t, r);
                      },
                      this,
                      !0
                    );
                  },
                },
                {
                  key: "onMeasurementResult",
                  set: function (e) {
                    var t = this;
                    Or(
                      wr(r.prototype),
                      "onMeasurementResult",
                      function (r) {
                        for (
                          var a = arguments.length,
                            n = new Array(a > 1 ? a - 1 : 0),
                            s = 1;
                          s < a;
                          s++
                        )
                          n[s - 1] = arguments[s];
                        e.apply(void 0, [r].concat(n)),
                          Br(t, Wa, Ha).call(t, r);
                      },
                      this,
                      !0
                    );
                  },
                },
              ]),
              r
            );
          })(Aa),
          Ga = new WeakMap(),
          za = new WeakMap(),
          $a = new WeakMap(),
          Ka = new WeakSet(),
          Ja = new WeakSet(),
          Qa = new WeakSet(),
          Ya = (function () {
            function e(t) {
              if (
                (gr(this, e),
                Wr(this, Qa),
                Wr(this, Ja),
                Wr(this, Ka),
                Ur(this, Ga, { writable: !0, value: !1 }),
                Ur(this, za, { writable: !0, value: void 0 }),
                Ur(this, $a, { writable: !0, value: void 0 }),
                !t)
              )
                throw new Error("Missing operation to perform");
              Nr(this, $a, t), this.play();
            }
            return (
              vr(e, [
                {
                  key: "pause",
                  value: function () {
                    Br(this, Qa, en).call(this),
                      Br(this, Ka, Xa).call(this, !1);
                  },
                },
                {
                  key: "stop",
                  value: function () {
                    this.pause();
                  },
                },
                {
                  key: "play",
                  value: function () {
                    Lr(this, Ga) ||
                      (Br(this, Ka, Xa).call(this, !0),
                      Br(this, Ja, Za).call(this));
                  },
                },
              ]),
              e
            );
          })();
        function Xa(e) {
          e !== Lr(this, Ga) && Nr(this, Ga, e);
        }
        function Za() {
          var e = this,
            t = Nr(
              this,
              za,
              Lr(this, $a)
                .call(this)
                .then(function () {
                  !t._cancel && Br(e, Ja, Za).call(e);
                })
            );
        }
        function en() {
          var e = Lr(this, za);
          e && (e._cancel = !0);
        }
        var tn = new WeakMap(),
          rn = (function () {
            function e() {
              var t = this,
                r =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : {},
                a = r.download,
                n = r.upload;
              if (
                (gr(this, e),
                br(this, "qsParams", {}),
                br(this, "fetchOptions", {}),
                Ur(this, tn, { writable: !0, value: [] }),
                !a && !n)
              )
                throw new Error(
                  "Missing at least one of download/upload config"
                );
              [
                [a, "download"],
                [n, "upload"],
              ]
                .filter(function (e) {
                  return Dr(e, 1)[0];
                })
                .forEach(function (e) {
                  var t = Dr(e, 2),
                    r = t[0],
                    a = t[1],
                    n = r.apiUrl,
                    s = r.chunkSize;
                  if (!n)
                    throw new Error("Missing ".concat(a, " apiUrl argument"));
                  if (!s)
                    throw new Error(
                      "Missing ".concat(a, " chunkSize argument")
                    );
                });
              var s = function (e) {
                var r = e.apiUrl,
                  a = e.qsParams,
                  n = void 0 === a ? {} : a,
                  s = e.fetchOptions,
                  i = void 0 === s ? {} : s;
                return new Ya(function () {
                  var e = Object.assign({}, n, t.qsParams),
                    a = ""
                      .concat(
                        r.startsWith("http") || r.startsWith("//")
                          ? ""
                          : window.location.origin
                      )
                      .concat(r, "?")
                      .concat(
                        Object.entries(e)
                          .map(function (e) {
                            var t = Dr(e, 2),
                              r = t[0],
                              a = t[1];
                            return "".concat(r, "=").concat(a);
                          })
                          .join("&")
                      ),
                    s = Object.assign({}, i, t.fetchOptions);
                  return fetch(a, s)
                    .then(function (e) {
                      if (e.ok) return e;
                      throw Error(e.statusText);
                    })
                    .then(function (e) {
                      return e.text();
                    });
                });
              };
              a &&
                Lr(this, tn).push(
                  s({
                    apiUrl: a.apiUrl,
                    qsParams: { bytes: "".concat(a.chunkSize) },
                  })
                ),
                n &&
                  Lr(this, tn).push(
                    s({
                      apiUrl: n.apiUrl,
                      fetchOptions: {
                        method: "POST",
                        body: "0".repeat(n.chunkSize),
                      },
                    })
                  );
            }
            return (
              vr(e, [
                {
                  key: "pause",
                  value: function () {
                    Lr(this, tn).forEach(function (e) {
                      return e.pause();
                    });
                  },
                },
                {
                  key: "stop",
                  value: function () {
                    this.pause();
                  },
                },
                {
                  key: "play",
                  value: function () {
                    Lr(this, tn).forEach(function (e) {
                      return e.play();
                    });
                  },
                },
              ]),
              e
            );
          })(),
          an = ["iceServers", "acceptIceCandidate", "dataChannelCfg"],
          nn = new WeakMap(),
          sn = new WeakMap(),
          on = new WeakMap(),
          cn = new WeakMap(),
          dn = new WeakMap(),
          ln = (function () {
            function e() {
              var t = this,
                r =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : {},
                a = r.iceServers,
                n = void 0 === a ? [] : a,
                s = r.acceptIceCandidate,
                i =
                  void 0 === s
                    ? function (e) {
                        var t = e.protocol || "";
                        if (!t && e.candidate) {
                          var r = e.candidate.split(" ");
                          r.length >= 3 && (t = r[2]);
                        }
                        return "udp" === t.toLowerCase();
                      }
                    : s,
                o = r.dataChannelCfg,
                c = void 0 === o ? { ordered: !1, maxRetransmits: 0 } : o,
                d = Rr(r, an);
              gr(this, e),
                br(this, "onOpen", function () {}),
                br(this, "onClose", function () {}),
                br(this, "onMessageReceived", function () {}),
                Ur(this, nn, { writable: !0, value: !1 }),
                Ur(this, sn, { writable: !0, value: void 0 }),
                Ur(this, on, { writable: !0, value: void 0 }),
                Ur(this, cn, { writable: !0, value: void 0 }),
                Ur(this, dn, { writable: !0, value: void 0 });
              var l = new RTCPeerConnection(fr({ iceServers: n }, d)),
                p = new RTCPeerConnection(fr({ iceServers: n }, d)),
                u = l.createDataChannel("channel", c);
              (u.onopen = function () {
                Nr(t, nn, !0), t.onOpen();
              }),
                (u.onclose = function () {
                  return t.close();
                }),
                (p.ondatachannel = function (e) {
                  var r = e.channel;
                  (r.onclose = function () {
                    return t.close();
                  }),
                    (r.onmessage = function (e) {
                      return t.onMessageReceived(e.data);
                    }),
                    Nr(t, dn, r);
                }),
                (l.onicecandidate = function (e) {
                  e.candidate &&
                    i(e.candidate) &&
                    p.addIceCandidate(e.candidate);
                }),
                (p.onicecandidate = function (e) {
                  e.candidate &&
                    i(e.candidate) &&
                    l.addIceCandidate(e.candidate);
                }),
                l
                  .createOffer()
                  .then(function (e) {
                    return l.setLocalDescription(e);
                  })
                  .then(function () {
                    return p.setRemoteDescription(l.localDescription);
                  })
                  .then(function () {
                    return p.createAnswer();
                  })
                  .then(function (e) {
                    return p.setLocalDescription(e);
                  })
                  .then(function () {
                    return l.setRemoteDescription(p.localDescription);
                  }),
                Nr(this, sn, l),
                Nr(this, on, p),
                Nr(this, cn, u),
                Nr(this, nn, !1);
            }
            return (
              vr(e, [
                {
                  key: "send",
                  value: function (e) {
                    return Lr(this, cn).send(e);
                  },
                },
                {
                  key: "close",
                  value: function () {
                    return (
                      Lr(this, sn) && Lr(this, sn).close(),
                      Lr(this, on) && Lr(this, on).close(),
                      Lr(this, cn) && Lr(this, cn).close(),
                      Lr(this, dn) && Lr(this, dn).close(),
                      Lr(this, nn) && this.onClose(),
                      Nr(this, nn, !1),
                      this
                    );
                  },
                },
              ]),
              e
            );
          })(),
          pn = new WeakMap(),
          un = new WeakMap(),
          hn = new WeakMap(),
          mn = new WeakMap(),
          fn = new WeakMap(),
          gn = new WeakMap(),
          _n = (function () {
            function e() {
              var t = this,
                r =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : {},
                a = r.turnServerUri,
                n = r.turnServerCredsApi,
                s = r.turnServerCredsApiParser,
                i =
                  void 0 === s
                    ? function (e) {
                        return {
                          turnServerUser: e.username,
                          turnServerPass: e.credential,
                        };
                      }
                    : s,
                o = r.turnServerCredsApiIncludeCredentials,
                c = void 0 !== o && o,
                d = r.turnServerUser,
                l = r.turnServerPass,
                p = r.numMsgs,
                u = void 0 === p ? 100 : p,
                h = r.batchSize,
                m = void 0 === h ? 10 : h,
                f = r.batchWaitTime,
                g = void 0 === f ? 10 : f,
                _ = r.responsesWaitTime,
                v = void 0 === _ ? 5e3 : _,
                b = r.connectionTimeout,
                y = void 0 === b ? 5e3 : b;
              if (
                (gr(this, e),
                Ur(this, pn, { writable: !0, value: function () {} }),
                Ur(this, un, { writable: !0, value: function () {} }),
                Ur(this, hn, { writable: !0, value: function () {} }),
                br(this, "onMsgSent", function () {}),
                br(this, "onAllMsgsSent", function () {}),
                br(this, "onMsgReceived", function () {}),
                Ur(this, mn, { writable: !0, value: {} }),
                Ur(this, fn, { writable: !0, value: void 0 }),
                Ur(this, gn, { writable: !0, value: void 0 }),
                !a)
              )
                throw new Error("Missing turnServerUri argument");
              if (!((d && l) || n))
                throw new Error(
                  "Missing either turnServerCredsApi or turnServerUser+turnServerPass arguments"
                );
              Nr(this, gn, u),
                (d && l
                  ? Promise.resolve({ turnServerUser: d, turnServerPass: l })
                  : fetch(n, { credentials: c ? "include" : void 0 })
                      .then(function (e) {
                        return e.json();
                      })
                      .then(function (e) {
                        if (e.error) throw e.error;
                        return e;
                      })
                      .then(i)
                )
                  .catch(function (e) {
                    return Lr(t, pn).call(t, e);
                  })
                  .then(function (e) {
                    var r = e.turnServerUser,
                      n = e.turnServerPass,
                      s = Nr(
                        t,
                        fn,
                        new ln({
                          iceServers: [
                            {
                              urls: "turn:".concat(a, "?transport=udp"),
                              username: r,
                              credential: n,
                            },
                          ],
                          iceTransportPolicy: "relay",
                        })
                      ),
                      i = !1;
                    setTimeout(function () {
                      i ||
                        (s.close(),
                        Lr(t, un).call(t, "ICE connection timeout!"));
                    }, y);
                    var o = Lr(t, mn);
                    (s.onOpen = function () {
                      i = !0;
                      var e = t;
                      !(function t(r) {
                        if (r <= u) {
                          for (var a = r; a <= Math.min(u, r + m - 1); )
                            (o[a] = !1), s.send(a), e.onMsgSent(a), a++;
                          setTimeout(function () {
                            return t(a);
                          }, g);
                        } else {
                          e.onAllMsgsSent(Object.keys(o).length);
                          var n = function () {
                              s.close(), Lr(e, hn).call(e, e.results);
                            },
                            i = setTimeout(n, v),
                            c = Object.values(Lr(e, mn)).filter(function (e) {
                              return !e;
                            }).length;
                          s.onMessageReceived = function (t) {
                            clearTimeout(i),
                              (o[t] = !0),
                              e.onMsgReceived(t),
                              --c <= 0 &&
                              Object.values(Lr(e, mn)).every(function (e) {
                                return e;
                              })
                                ? n()
                                : (i = setTimeout(n, v));
                          };
                        }
                      })(1);
                    }),
                      (s.onMessageReceived = function (e) {
                        (o[e] = !0), t.onMsgReceived(e);
                      });
                  })
                  .catch(function (e) {
                    return Lr(t, un).call(t, e.toString());
                  });
            }
            return (
              vr(e, [
                {
                  key: "onCredentialsFailure",
                  set: function (e) {
                    Nr(this, pn, e);
                  },
                },
                {
                  key: "onConnectionError",
                  set: function (e) {
                    Nr(this, un, e);
                  },
                },
                {
                  key: "onFinished",
                  set: function (e) {
                    Nr(this, hn, e);
                  },
                },
                {
                  key: "results",
                  get: function () {
                    var e = Lr(this, gn),
                      t = Object.keys(Lr(this, mn)).length,
                      r = Object.entries(Lr(this, mn))
                        .filter(function (e) {
                          return !Dr(e, 2)[1];
                        })
                        .map(function (e) {
                          return +Dr(e, 1)[0];
                        });
                    return {
                      totalMessages: e,
                      numMessagesSent: t,
                      packetLoss: r.length / t,
                      lostMessages: r,
                    };
                  },
                },
              ]),
              e
            );
          })(),
          vn = [
            "downloadChunkSize",
            "uploadChunkSize",
            "downloadApiUrl",
            "uploadApiUrl",
          ],
          bn = new WeakMap(),
          yn = (function (e) {
            yr(r, e);
            var t = kr(r);
            function r() {
              var e,
                a,
                n,
                s,
                i =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : {},
                o = i.downloadChunkSize,
                c = i.uploadChunkSize,
                d = i.downloadApiUrl,
                l = i.uploadApiUrl,
                p = Rr(i, vn);
              return (
                gr(this, r),
                Ur(Er((s = t.call(this, p))), bn, {
                  writable: !0,
                  value: void 0,
                }),
                (o || c) &&
                  (Nr(
                    Er(s),
                    bn,
                    new rn({
                      download: o ? { apiUrl: d, chunkSize: o } : null,
                      upload: c ? { apiUrl: l, chunkSize: c } : null,
                    })
                  ),
                  Or(
                    ((e = Er(s)), wr(r.prototype)),
                    "onCredentialsFailure",
                    Or(
                      ((n = Er(s)), wr(r.prototype)),
                      "onConnectionError",
                      Or(
                        ((a = Er(s)), wr(r.prototype)),
                        "onFinished",
                        function () {
                          return Lr(Er(s), bn).stop();
                        },
                        a,
                        !0
                      ),
                      n,
                      !0
                    ),
                    e,
                    !0
                  )),
                s
              );
            }
            return (
              vr(r, [
                {
                  key: "qsParams",
                  set: function (e) {
                    Lr(this, bn) && (Lr(this, bn).qsParams = e);
                  },
                },
                {
                  key: "fetchOptions",
                  set: function (e) {
                    Lr(this, bn) && (Lr(this, bn).fetchOptions = e);
                  },
                },
                {
                  key: "onCredentialsFailure",
                  set: function (e) {
                    var t = this;
                    Or(
                      wr(r.prototype),
                      "onCredentialsFailure",
                      function () {
                        e.apply(void 0, arguments),
                          Lr(t, bn) && Lr(t, bn).stop();
                      },
                      this,
                      !0
                    );
                  },
                },
                {
                  key: "onConnectionError",
                  set: function (e) {
                    var t = this;
                    Or(
                      wr(r.prototype),
                      "onConnectionError",
                      function () {
                        e.apply(void 0, arguments),
                          Lr(t, bn) && Lr(t, bn).stop();
                      },
                      this,
                      !0
                    );
                  },
                },
                {
                  key: "onFinished",
                  set: function (e) {
                    var t = this;
                    Or(
                      wr(r.prototype),
                      "onFinished",
                      function () {
                        e.apply(void 0, arguments),
                          Lr(t, bn) && Lr(t, bn).stop();
                      },
                      this,
                      !0
                    );
                  },
                },
              ]),
              r
            );
          })(_n),
          wn = ["reachable"],
          Sn = vr(function e(t) {
            var r = this,
              a =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : {},
              n = a.timeout,
              s = void 0 === n ? -1 : n,
              i = a.fetchOptions,
              o = void 0 === i ? {} : i;
            gr(this, e), br(this, "onFinished", function () {});
            var c = !1,
              d = function (e) {
                var a = e.reachable,
                  n = Rr(e, wn);
                c ||
                  ((c = !0),
                  r.onFinished(fr({ targetUrl: t, reachable: a }, n)));
              };
            fetch(t, o)
              .then(function (e) {
                d({ reachable: !0, response: e });
              })
              .catch(function (e) {
                d({ reachable: !1, error: e });
              }),
              s > 0 &&
                setTimeout(function () {
                  return d({ reachable: !1, error: "Request timeout" });
                }, s);
          }),
          Rn = function (e) {
            var t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0.5;
            if (!e.length) return 0;
            var r = e.slice().sort(function (e, t) {
                return e - t;
              }),
              a = (e.length - 1) * t,
              n = a % 1;
            if (0 === n) return r[Math.round(a)];
            var s = [Math.floor, Math.ceil].map(function (e) {
              return r[e(a)];
            });
            return s[0] + (s[1] - s[0]) * n;
          },
          En = new WeakMap(),
          kn = new WeakMap(),
          Tn = (function () {
            function e(t) {
              var r = this;
              gr(this, e),
                br(this, "getLatencyPoints", function (e) {
                  return e.timings.map(function (e) {
                    return e.ping;
                  });
                }),
                br(this, "getLatency", function (e) {
                  return Rn(r.getLatencyPoints(e), Lr(r, En).latencyPercentile);
                }),
                br(this, "getBandwidthPoints", function (e) {
                  return Object.entries(e)
                    .map(function (e) {
                      var t = Dr(e, 2),
                        r = t[0];
                      return t[1].timings.map(function (e) {
                        var t = e.bps,
                          a = e.duration,
                          n = e.ping,
                          s = e.measTime,
                          i = e.serverTime,
                          o = e.transferSize;
                        return {
                          bytes: +r,
                          bps: t,
                          duration: a,
                          ping: n,
                          measTime: s,
                          serverTime: i,
                          transferSize: o,
                        };
                      });
                    })
                    .flat();
                }),
                br(this, "getBandwidth", function (e) {
                  return Rn(
                    r
                      .getBandwidthPoints(e)
                      .filter(function (e) {
                        return (
                          e.duration >= Lr(r, En).bandwidthMinRequestDuration
                        );
                      })
                      .map(function (e) {
                        return e.bps;
                      })
                      .filter(function (e) {
                        return e;
                      }),
                    Lr(r, En).bandwidthPercentile
                  );
                }),
                br(this, "getLoadedLatency", function (e) {
                  return r.getLatency({ timings: Lr(r, kn).call(r, e) });
                }),
                br(this, "getLoadedJitter", function (e) {
                  return r.getJitter({ timings: Lr(r, kn).call(r, e) });
                }),
                br(this, "getLoadedLatencyPoints", function (e) {
                  return r.getLatencyPoints({ timings: Lr(r, kn).call(r, e) });
                }),
                br(this, "getPacketLoss", function (e) {
                  return e.packetLoss;
                }),
                br(this, "getPacketLossDetails", function (e) {
                  return e;
                }),
                br(this, "getReachability", function (e) {
                  return !!e.reachable;
                }),
                br(this, "getReachabilityDetails", function (e) {
                  return { host: e.host, reachable: e.reachable };
                }),
                Ur(this, En, { writable: !0, value: void 0 }),
                Ur(this, kn, {
                  writable: !0,
                  value: function (e) {
                    return Object.values(e)
                      .filter(function (e) {
                        return (
                          e.timings.length &&
                          Math.min.apply(
                            Math,
                            xr(
                              e.timings.map(function (e) {
                                return e.duration;
                              })
                            )
                          ) >= Lr(r, En).loadedRequestMinDuration
                        );
                      })
                      .map(function (e) {
                        return e.sideLatency || [];
                      })
                      .flat()
                      .slice(-Lr(r, En).loadedLatencyMaxPoints);
                  },
                }),
                Nr(this, En, t);
            }
            return (
              vr(e, [
                {
                  key: "getJitter",
                  value: function (e) {
                    var t = this.getLatencyPoints(e);
                    return t.length < 2
                      ? null
                      : t.reduce(function (e, t) {
                          var r = e.sumDeltas,
                            a = void 0 === r ? 0 : r,
                            n = e.prevLatency;
                          return {
                            sumDeltas: a + (void 0 !== n ? Math.abs(n - t) : 0),
                            prevLatency: t,
                          };
                        }, {}).sumDeltas /
                          (t.length - 1);
                  },
                },
              ]),
              e
            );
          })(),
          Cn = ["bad", "poor", "average", "good", "great"],
          Pn = {
            loadedLatencyIncrease: function (e) {
              return e.latency && (e.downLoadedLatency || e.upLoadedLatency)
                ? Math.max(e.downLoadedLatency, e.upLoadedLatency) - e.latency
                : void 0;
            },
          },
          On = { packetLoss: 0 },
          Dn = new WeakMap(),
          xn = (function () {
            function e(t) {
              gr(this, e),
                Ur(this, Dn, { writable: !0, value: void 0 }),
                Nr(this, Dn, t);
            }
            return (
              vr(e, [
                {
                  key: "getScores",
                  value: function (e) {
                    var t = Object.assign.apply(
                      Object,
                      xr(
                        Object.entries(Lr(this, Dn).aimMeasurementScoring).map(
                          function (t) {
                            var r = Dr(t, 2),
                              a = r[0],
                              n = r[1],
                              s = Pn.hasOwnProperty(a) ? Pn[a](e) : e[a];
                            return void 0 === s
                              ? On.hasOwnProperty(a)
                                ? br({}, a, On[a])
                                : {}
                              : br({}, a, void 0 === s ? 0 : +n(s));
                          }
                        )
                      )
                    );
                    return Object.assign.apply(
                      Object,
                      [{}].concat(
                        xr(
                          Object.entries(Lr(this, Dn).aimExperiencesDefs)
                            .filter(function (e) {
                              return Dr(e, 2)[1].input.every(function (e) {
                                return t.hasOwnProperty(e);
                              });
                            })
                            .map(function (e) {
                              var r,
                                a = Dr(e, 2),
                                n = a[0],
                                s = a[1],
                                i = s.input,
                                o = s.pointThresholds,
                                c = Math.max(
                                  0,
                                  ((r = i.map(function (e) {
                                    return t[e];
                                  })),
                                  r.reduce(function (e, t) {
                                    return e + t;
                                  }, 0))
                                ),
                                d = hr(o, [0, 1, 2, 3, 4])(c);
                              return br({}, n, {
                                points: c,
                                classificationIdx: d,
                                classificationName: Cn[d],
                              });
                            })
                        )
                      )
                    );
                  },
                },
              ]),
              e
            );
          })(),
          In = new WeakMap(),
          Mn = new WeakMap(),
          An = new WeakMap(),
          Ln = new WeakMap(),
          Nn = new WeakMap(),
          jn = new WeakMap(),
          Bn = new WeakMap(),
          Fn = new WeakMap(),
          Un = (function () {
            function e(t) {
              var r = this;
              gr(this, e),
                br(this, "raw", void 0),
                br(this, "getUnloadedLatency", function () {
                  return Lr(r, Ln).call(r, "getLatency", "latency");
                }),
                br(this, "getUnloadedJitter", function () {
                  return Lr(r, Ln).call(r, "getJitter", "latency");
                }),
                br(this, "getUnloadedLatencyPoints", function () {
                  return Lr(r, Ln).call(r, "getLatencyPoints", "latency", []);
                }),
                br(this, "getDownLoadedLatency", function () {
                  return Lr(r, Ln).call(r, "getLoadedLatency", "download");
                }),
                br(this, "getDownLoadedJitter", function () {
                  return Lr(r, Ln).call(r, "getLoadedJitter", "download");
                }),
                br(this, "getDownLoadedLatencyPoints", function () {
                  return Lr(r, Ln).call(
                    r,
                    "getLoadedLatencyPoints",
                    "download",
                    []
                  );
                }),
                br(this, "getUpLoadedLatency", function () {
                  return Lr(r, Ln).call(r, "getLoadedLatency", "upload");
                }),
                br(this, "getUpLoadedJitter", function () {
                  return Lr(r, Ln).call(r, "getLoadedJitter", "upload");
                }),
                br(this, "getUpLoadedLatencyPoints", function () {
                  return Lr(r, Ln).call(
                    r,
                    "getLoadedLatencyPoints",
                    "upload",
                    []
                  );
                }),
                br(this, "getDownloadBandwidth", function () {
                  return Lr(r, Ln).call(r, "getBandwidth", "download");
                }),
                br(this, "getDownloadBandwidthPoints", function () {
                  return Lr(r, Ln).call(
                    r,
                    "getBandwidthPoints",
                    "download",
                    []
                  );
                }),
                br(this, "getUploadBandwidth", function () {
                  return Lr(r, Ln).call(r, "getBandwidth", "upload");
                }),
                br(this, "getUploadBandwidthPoints", function () {
                  return Lr(r, Ln).call(r, "getBandwidthPoints", "upload", []);
                }),
                br(this, "getPacketLoss", function () {
                  return Lr(r, Ln).call(r, "getPacketLoss", "packetLoss");
                }),
                br(this, "getPacketLossDetails", function () {
                  return Lr(r, Ln).call(
                    r,
                    "getPacketLossDetails",
                    "packetLoss",
                    void 0,
                    !0
                  );
                }),
                br(this, "getScores", function () {
                  return Lr(r, An).getScores(r.getSummary());
                }),
                Ur(this, In, { writable: !0, value: void 0 }),
                Ur(this, Mn, { writable: !0, value: void 0 }),
                Ur(this, An, { writable: !0, value: void 0 }),
                Ur(this, Ln, {
                  writable: !0,
                  value: function (e, t) {
                    var a =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : void 0,
                      n =
                        arguments.length > 3 &&
                        void 0 !== arguments[3] &&
                        arguments[3];
                    return r.raw.hasOwnProperty(t) && r.raw[t].started
                      ? n && r.raw[t].error
                        ? { error: r.raw[t].error }
                        : Lr(r, Mn)[e](r.raw[t].results)
                      : a;
                  },
                }),
                Ur(this, Nn, {
                  writable: !0,
                  value: function () {
                    return Lr(r, Ln).call(
                      r,
                      "getReachability",
                      "v4Reachability"
                    );
                  },
                }),
                Ur(this, jn, {
                  writable: !0,
                  value: function () {
                    return Lr(r, Ln).call(
                      r,
                      "getReachabilityDetails",
                      "v4Reachability"
                    );
                  },
                }),
                Ur(this, Bn, {
                  writable: !0,
                  value: function () {
                    return Lr(r, Ln).call(
                      r,
                      "getReachability",
                      "v6Reachability"
                    );
                  },
                }),
                Ur(this, Fn, {
                  writable: !0,
                  value: function () {
                    return Lr(r, Ln).call(
                      r,
                      "getReachabilityDetails",
                      "v6Reachability"
                    );
                  },
                }),
                Nr(this, In, t),
                this.clear(),
                Nr(this, Mn, new Tn(Lr(this, In))),
                Nr(this, An, new xn(Lr(this, In)));
            }
            return (
              vr(e, [
                {
                  key: "isFinished",
                  get: function () {
                    return Object.values(this.raw).every(function (e) {
                      return e.finished;
                    });
                  },
                },
                {
                  key: "clear",
                  value: function () {
                    this.raw = Object.assign.apply(
                      Object,
                      [{}].concat(
                        xr(
                          xr(
                            new Set(
                              Lr(this, In).measurements.map(function (e) {
                                return e.type;
                              })
                            )
                          ).map(function (e) {
                            return br({}, e, {
                              started: !1,
                              finished: !1,
                              results: {},
                            });
                          })
                        )
                      )
                    );
                  },
                },
                {
                  key: "getSummary",
                  value: function () {
                    var e = {
                      download: this.getDownloadBandwidth,
                      upload: this.getUploadBandwidth,
                      latency: this.getUnloadedLatency,
                      jitter: this.getUnloadedJitter,
                      downLoadedLatency: this.getDownLoadedLatency,
                      downLoadedJitter: this.getDownLoadedJitter,
                      upLoadedLatency: this.getUpLoadedLatency,
                      upLoadedJitter: this.getUpLoadedJitter,
                      packetLoss: this.getPacketLoss,
                      v4Reachability: Lr(this, Nn),
                      v6Reachability: Lr(this, Bn),
                    };
                    return Object.assign.apply(
                      Object,
                      xr(
                        Object.entries(e).map(function (e) {
                          var t = Dr(e, 2),
                            r = t[0],
                            a = (0, t[1])();
                          return void 0 === a ? {} : br({}, r, a);
                        })
                      )
                    );
                  },
                },
              ]),
              e
            );
          })(),
          Wn = function (e) {
            var t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 0;
            return e ? Math.round(e * Math.pow(10, t)) / Math.pow(10, t) : e;
          },
          qn = function (e) {
            return e.map(function (e) {
              return Wn(e, 2);
            });
          },
          Hn = function (e) {
            return e.map(function (e) {
              return { bytes: +e.bytes, bps: Wn(e.bps) };
            });
          },
          Vn = {
            latencyMs: ["getUnloadedLatencyPoints", qn],
            download: ["getDownloadBandwidthPoints", Hn],
            upload: ["getUploadBandwidthPoints", Hn],
            downLoadedLatencyMs: ["getDownLoadedLatencyPoints", qn],
            upLoadedLatencyMs: ["getUpLoadedLatencyPoints", qn],
            packetLoss: [
              "getPacketLossDetails",
              function (e) {
                return e.error
                  ? void 0
                  : {
                      numMessages: e.numMessagesSent,
                      lossRatio: Wn(e.packetLoss, 4),
                    };
              },
            ],
          },
          Gn = function (e, t) {
            var r = t.apiUrl,
              a = {};
            Object.entries(Vn).forEach(function (t) {
              var r = Dr(t, 2),
                n = r[0],
                s = Dr(r[1], 2),
                i = s[0],
                o = s[1],
                c =
                  void 0 === o
                    ? function (e) {
                        return e;
                      }
                    : o,
                d = e[i]();
              d && (a[n] = c(d));
            });
            var n = e.getScores();
            n &&
              (a.scores = Object.assign.apply(
                Object,
                [{}].concat(
                  xr(
                    Object.entries(n).map(function (e) {
                      var t,
                        r = Dr(e, 2),
                        a = r[0],
                        n = r[1];
                      return br({}, a, {
                        points: (t = n).points,
                        classification: t.classificationName,
                      });
                    })
                  )
                )
              )),
              fetch(r, { method: "POST", body: JSON.stringify(a) });
          },
          zn = ["type"],
          $n = ["numPackets"],
          Kn = ["bytes"],
          Jn = ["latency", "latencyUnderLoad", "download", "upload"],
          Qn = function () {
            return "".concat(Math.round(1e16 * Math.random()));
          },
          Yn = new WeakMap(),
          Xn = new WeakMap(),
          Zn = new WeakMap(),
          es = new WeakMap(),
          ts = new WeakMap(),
          rs = new WeakMap(),
          as = new WeakMap(),
          ns = new WeakMap(),
          ss = new WeakMap(),
          is = new WeakMap(),
          os = new WeakMap(),
          cs = new WeakSet(),
          ds = new WeakSet(),
          ls = new WeakSet(),
          ps = new WeakSet(),
          us = new WeakSet(),
          hs = new WeakSet(),
          ms = new WeakSet(),
          fs = (function () {
            function e() {
              var t =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : {};
              gr(this, e),
                Wr(this, ms),
                Wr(this, hs),
                Wr(this, us),
                Wr(this, ps),
                Wr(this, ls),
                Wr(this, ds),
                Wr(this, cs),
                br(this, "onRunningChange", function () {}),
                br(this, "onResultsChange", function () {}),
                Ur(this, Yn, { writable: !0, value: function () {} }),
                Ur(this, Xn, { writable: !0, value: function () {} }),
                Ur(this, Zn, { writable: !0, value: void 0 }),
                Ur(this, es, { writable: !0, value: void 0 }),
                Ur(this, ts, { writable: !0, value: Qn() }),
                Ur(this, rs, { writable: !0, value: -1 }),
                Ur(this, as, { writable: !0, value: void 0 }),
                Ur(this, ns, { writable: !0, value: 1e6 }),
                Ur(this, ss, { writable: !0, value: 1e6 }),
                Ur(this, is, { writable: !0, value: !1 }),
                Ur(this, os, { writable: !0, value: !1 }),
                Nr(this, Zn, Object.assign({}, Hr, t, Vr)),
                Nr(this, es, new Un(Lr(this, Zn))),
                Lr(this, Zn).autoStart && this.play();
            }
            return (
              vr(e, [
                {
                  key: "results",
                  get: function () {
                    return Lr(this, es);
                  },
                },
                {
                  key: "isRunning",
                  get: function () {
                    return Lr(this, is);
                  },
                },
                {
                  key: "isFinished",
                  get: function () {
                    return Lr(this, os);
                  },
                },
                {
                  key: "onFinish",
                  set: function (e) {
                    Nr(this, Yn, e);
                  },
                },
                {
                  key: "onError",
                  set: function (e) {
                    Nr(this, Xn, e);
                  },
                },
                {
                  key: "pause",
                  value: function () {
                    Jn.includes(Br(this, ls, vs).call(this)) &&
                      Lr(this, as).pause(),
                      Br(this, cs, gs).call(this, !1);
                  },
                },
                {
                  key: "play",
                  value: function () {
                    Lr(this, is) ||
                      (Br(this, cs, gs).call(this, !0),
                      Br(this, ms, Ss).call(this));
                  },
                },
                {
                  key: "restart",
                  value: function () {
                    Br(this, us, ys).call(this), this.play();
                  },
                },
              ]),
              e
            );
          })();
        function gs(e) {
          e !== Lr(this, is) &&
            (Nr(this, is, e), this.onRunningChange(Lr(this, is)));
        }
        function _s(e) {
          var t = this;
          e !== Lr(this, os) &&
            (Nr(this, os, e),
            e &&
              setTimeout(function () {
                return Lr(t, Yn).call(t, t.results);
              }));
        }
        function vs() {
          return Lr(this, rs) < 0 ||
            Lr(this, rs) >= Lr(this, Zn).measurements.length
            ? null
            : Lr(this, Zn).measurements[Lr(this, rs)].type;
        }
        function bs() {
          return Lr(this, es).raw[Br(this, ls, vs).call(this)] || void 0;
        }
        function ys() {
          Br(this, hs, ws).call(this),
            Nr(this, ts, Qn()),
            Nr(this, rs, -1),
            Nr(this, as, void 0),
            Br(this, cs, gs).call(this, !1),
            Br(this, ds, _s).call(this, !1),
            Lr(this, es).clear();
        }
        function ws() {
          var e = Lr(this, as);
          e &&
            ((e.onFinished =
              e.onConnectionError =
              e.onFail =
              e.onMsgReceived =
              e.onCredentialsFailure =
              e.onMeasurementResult =
                function () {}),
            Jn.includes(Br(this, ls, vs).call(this)) && e.pause());
        }
        function Ss() {
          var e,
            t = this;
          if (
            !(
              Jn.includes(Br(this, ls, vs).call(this)) &&
              Br(this, ps, bs).call(this) &&
              Br(this, ps, bs).call(this).started
            ) ||
            Br(this, ps, bs).call(this).finished ||
            Br(this, ps, bs).call(this).finishedCurrentRound ||
            Br(this, ps, bs).call(this).error
          ) {
            if (
              (Nr(this, rs, ((e = Lr(this, rs)), ++e)),
              Lr(this, rs) >= Lr(this, Zn).measurements.length)
            )
              return (
                Br(this, cs, gs).call(this, !1),
                void Br(this, ds, _s).call(this, !0)
              );
            var r,
              a = Lr(this, Zn).measurements[Lr(this, rs)],
              n = a.type,
              s = Rr(a, zn),
              i = Br(this, ps, bs).call(this),
              o = Lr(this, Zn),
              c = o.downloadApiUrl,
              d = o.uploadApiUrl,
              l = o.estimatedServerTime;
            switch (n) {
              case "v4Reachability":
              case "v6Reachability":
                (r = new Sn("https://".concat(s.host), {
                  fetchOptions: { method: "GET", mode: "no-cors" },
                })).onFinished = function (e) {
                  (i.finished = !0),
                    (i.results = fr({ host: s.host }, e)),
                    t.onResultsChange({ type: n }),
                    Br(t, ms, Ss).call(t);
                };
                break;
              case "rpki":
                (r = new Sn("https://".concat(Lr(this, Zn).rpkiInvalidHost), {
                  timeout: 5e3,
                })).onFinished = function (e) {
                  (e.response ? e.response.json() : Promise.resolve()).then(
                    function (r) {
                      (i.finished = !0),
                        (i.results = fr(
                          {
                            host: Lr(t, Zn).rpkiInvalidHost,
                            filteringInvalids: !e.reachable,
                          },
                          r ? { asn: r.asn, name: r.name } : {}
                        )),
                        t.onResultsChange({ type: n }),
                        Br(t, ms, Ss).call(t);
                    }
                  );
                };
                break;
              case "nxdomain":
                (r = new Sn("https://".concat(s.nxhost), {
                  fetchOptions: { mode: "no-cors" },
                })).onFinished = function (e) {
                  (i.finished = !0),
                    (i.results = { host: s.nxhost, reachable: e.reachable }),
                    t.onResultsChange({ type: n }),
                    Br(t, ms, Ss).call(t);
                };
                break;
              case "packetLoss":
              case "packetLossUnderLoad":
                i.finished = !1;
                var p = s.numPackets,
                  u = Rr(s, $n),
                  h = Lr(this, Zn),
                  m = h.turnServerUri,
                  f = h.turnServerCredsApiUrl,
                  g = h.turnServerUser,
                  _ = h.turnServerPass,
                  v = h.includeCredentials;
                ((r = new yn(
                  fr(
                    {
                      turnServerUri: m,
                      turnServerCredsApi: f,
                      turnServerCredsApiIncludeCredentials: v,
                      turnServerUser: g,
                      turnServerPass: _,
                      numMsgs: p,
                      downloadChunkSize: s.loadDown ? Lr(this, ns) : void 0,
                      uploadChunkSize: s.loadUp ? Lr(this, ss) : void 0,
                      downloadApiUrl: c,
                      uploadApiUrl: d,
                    },
                    u
                  )
                )).onMsgReceived = function () {
                  (i.results = Object.assign({}, r.results)),
                    t.onResultsChange({ type: n });
                }),
                  (r.onFinished = function () {
                    (i.finished = !0),
                      t.onResultsChange({ type: n }),
                      Br(t, ms, Ss).call(t);
                  }),
                  (r.onConnectionError = function (e) {
                    (i.error = e),
                      t.onResultsChange({ type: n }),
                      Lr(t, Xn).call(
                        t,
                        "Connection error while measuring packet loss: ".concat(
                          e
                        )
                      ),
                      Br(t, ms, Ss).call(t);
                  }),
                  (r.onCredentialsFailure = function () {
                    (i.error = "unable to get turn server credentials"),
                      t.onResultsChange({ type: n }),
                      Lr(t, Xn).call(
                        t,
                        "Error while measuring packet loss: unable to get turn server credentials."
                      ),
                      Br(t, ms, Ss).call(t);
                  });
                break;
              case "latency":
              case "latencyUnderLoad":
                (i.finished = !1),
                  ((r = new Va(
                    [
                      {
                        dir: "down",
                        bytes: 0,
                        count: s.numPackets,
                        bypassMinDuration: !0,
                      },
                    ],
                    {
                      downloadApiUrl: c,
                      uploadApiUrl: d,
                      estimatedServerTime: l,
                      logApiUrl: Lr(this, Zn).logMeasurementApiUrl,
                      measurementId: Lr(this, ts),
                      downloadChunkSize: s.loadDown ? Lr(this, ns) : void 0,
                      uploadChunkSize: s.loadUp ? Lr(this, ss) : void 0,
                    }
                  )).fetchOptions = {
                    credentials: Lr(this, Zn).includeCredentials
                      ? "include"
                      : void 0,
                  }),
                  (r.onMeasurementResult = r.onNewMeasurementStarted =
                    function (e, r) {
                      (i.results = Object.assign({}, r.down[0])),
                        t.onResultsChange({ type: n });
                    }),
                  (r.onFinished = function () {
                    (i.finished = !0),
                      t.onResultsChange({ type: n }),
                      Lr(t, is) && Br(t, ms, Ss).call(t);
                  }),
                  (r.onConnectionError = function (e) {
                    (i.error = e),
                      t.onResultsChange({ type: n }),
                      Lr(t, Xn).call(
                        t,
                        "Connection error while measuring latency: ".concat(e)
                      ),
                      Br(t, ms, Ss).call(t);
                  }),
                  r.play();
                break;
              case "download":
              case "upload":
                if (i.finished || i.error) Br(this, ms, Ss).call(this);
                else {
                  delete i.finishedCurrentRound;
                  var b = Lr(this, Zn)[
                    "measure".concat(
                      "download" === n ? "Down" : "Up",
                      "loadLoadedLatency"
                    )
                  ];
                  ((r = new Va(
                    [fr({ dir: "download" === n ? "down" : "up" }, s)],
                    {
                      downloadApiUrl: c,
                      uploadApiUrl: d,
                      estimatedServerTime: l,
                      logApiUrl: Lr(this, Zn).logMeasurementApiUrl,
                      measurementId: Lr(this, ts),
                      measureParallelLatency: b,
                      parallelLatencyThrottleMs: Lr(this, Zn)
                        .loadedLatencyThrottle,
                    }
                  )).fetchOptions = {
                    credentials: Lr(this, Zn).includeCredentials
                      ? "include"
                      : void 0,
                  }),
                    (r.finishRequestDuration = Lr(
                      this,
                      Zn
                    ).bandwidthFinishRequestDuration),
                    (r.onNewMeasurementStarted = function (e) {
                      var r = e.count,
                        a = e.bytes,
                        s = (i.results = Object.assign({}, i.results));
                      !s.hasOwnProperty(a) &&
                        (s[a] = {
                          timings: [],
                          numMeasurements: 0,
                          sideLatency: b ? [] : void 0,
                        }),
                        s[a].numMeasurements - s[a].timings.length !== r &&
                          ((s[a].numMeasurements += r),
                          t.onResultsChange({ type: n }));
                    }),
                    (r.onMeasurementResult = function (e) {
                      var r = e.bytes,
                        a = Rr(e, Kn);
                      i.results[r].timings.push(a),
                        (i.results = Object.assign({}, i.results)),
                        t.onResultsChange({ type: n });
                    }),
                    (r.onParallelLatencyResult = function (e) {
                      i.results[s.bytes].sideLatency.push(e),
                        (i.results = Object.assign({}, i.results)),
                        t.onResultsChange({ type: n });
                    }),
                    (r.onFinished = function (e) {
                      var r = !Lr(t, Zn)
                          .measurements.slice(Lr(t, rs) + 1)
                          .map(function (e) {
                            return e.type;
                          })
                          .includes(n),
                        a = Math.min.apply(
                          Math,
                          xr(
                            Object.values("download" === n ? e.down : e.up)
                              .slice(-1)[0]
                              .timings.map(function (e) {
                                return e.duration;
                              })
                          )
                        );
                      if (
                        r ||
                        (!s.bypassMinDuration &&
                          a > Lr(t, Zn).bandwidthFinishRequestDuration)
                      ) {
                        (i.finished = !0), t.onResultsChange({ type: n });
                        var o =
                          0.5 *
                          Object.keys(i.results)
                            .map(function (e) {
                              return +e;
                            })
                            .sort(function (e, t) {
                              return t - e;
                            })[0];
                        "download" === n && Nr(t, ns, o),
                          "upload" === n && Nr(t, ss, o);
                      } else i.finishedCurrentRound = !0;
                      Lr(t, is) && Br(t, ms, Ss).call(t);
                    }),
                    (r.onConnectionError = function (e) {
                      (i.error = e),
                        t.onResultsChange({ type: n }),
                        Lr(t, Xn).call(
                          t,
                          "Connection error while measuring "
                            .concat(n, ": ")
                            .concat(e)
                        ),
                        Br(t, ms, Ss).call(t);
                    }),
                    r.play();
                }
            }
            Nr(this, as, r),
              (i.started = !0),
              this.onResultsChange({ type: n });
          } else Lr(this, as).play();
        }
        var Rs = new WeakMap(),
          Es = new WeakMap(),
          ks = (function (e) {
            yr(r, e);
            var t = kr(r);
            function r(e) {
              var a, n;
              gr(this, r);
              for (
                var s = arguments.length,
                  i = new Array(s > 1 ? s - 1 : 0),
                  o = 1;
                o < s;
                o++
              )
                i[o - 1] = arguments[o];
              return (
                Ur(Er((n = t.call.apply(t, [this, e].concat(i)))), Rs, {
                  writable: !0,
                  value: void 0,
                }),
                Ur(Er(n), Es, {
                  writable: !0,
                  value: function (e) {
                    Lr(Er(n), Rs) && Gn(e, { apiUrl: Lr(Er(n), Rs) });
                  },
                }),
                Or(
                  ((a = Er(n)), wr(r.prototype)),
                  "onFinish",
                  Lr(Er(n), Es),
                  a,
                  !0
                ),
                Nr(Er(n), Rs, Object.assign({}, Hr, e, Vr).logAimApiUrl),
                n
              );
            }
            return (
              vr(r, [
                {
                  key: "onFinish",
                  set: function (e) {
                    var t = this;
                    Or(
                      wr(r.prototype),
                      "onFinish",
                      function (r) {
                        e(r), Lr(t, Es).call(t, r);
                      },
                      this,
                      !0
                    );
                  },
                },
              ]),
              r
            );
          })(fs);
        function Ts(e, t) {
          var r =
            ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
            e["@@iterator"];
          if (!r) {
            if (
              Array.isArray(e) ||
              (r = (function (e, t) {
                if (e) {
                  if ("string" == typeof e) return Cs(e, t);
                  var r = {}.toString.call(e).slice(8, -1);
                  return (
                    "Object" === r && e.constructor && (r = e.constructor.name),
                    "Map" === r || "Set" === r
                      ? Array.from(e)
                      : "Arguments" === r ||
                        /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                      ? Cs(e, t)
                      : void 0
                  );
                }
              })(e)) ||
              (t && e && "number" == typeof e.length)
            ) {
              r && (e = r);
              var a = 0,
                n = function () {};
              return {
                s: n,
                n: function () {
                  return a >= e.length
                    ? { done: !0 }
                    : { done: !1, value: e[a++] };
                },
                e: function (e) {
                  throw e;
                },
                f: n,
              };
            }
            throw new TypeError(
              "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
            );
          }
          var s,
            i = !0,
            o = !1;
          return {
            s: function () {
              r = r.call(e);
            },
            n: function () {
              var e = r.next();
              return (i = e.done), e;
            },
            e: function (e) {
              (o = !0), (s = e);
            },
            f: function () {
              try {
                i || null == r.return || r.return();
              } finally {
                if (o) throw s;
              }
            },
          };
        }
        function Cs(e, t) {
          (null == t || t > e.length) && (t = e.length);
          for (var r = 0, a = Array(t); r < t; r++) a[r] = e[r];
          return a;
        }
        var Ps = [R],
          Os = !1,
          Ds = (function () {
            return (0, s.A)(
              function e() {
                (0, n.A)(this, e);
              },
              null,
              [
                {
                  key: "config",
                  value: function (e) {
                    if (!e)
                      throw new Error(
                        "'token' is empty, please provide it in config"
                      );
                    this.apiKey = e;
                    var t = v(Z, void 0, y.apply(void 0, Ps));
                    (window.STORE = t), ee.default.init({ store: t });
                  },
                },
                {
                  key: "getCameras",
                  value:
                    ((f = (0, t.A)(
                      c().mark(function e() {
                        var r, a, n, s;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    ((e.prev = 0),
                                    (r =
                                      navigator.userAgent.includes("Firefox")),
                                    (a = []),
                                    !r)
                                  ) {
                                    e.next = 8;
                                    break;
                                  }
                                  return (
                                    (e.next = 6),
                                    new Promise(function (e, r) {
                                      navigator.mediaDevices
                                        .getUserMedia({ audio: !1, video: !0 })
                                        .then(
                                          (function () {
                                            var r = (0, t.A)(
                                              c().mark(function t(r) {
                                                var n;
                                                return c().wrap(function (t) {
                                                  for (;;)
                                                    switch ((t.prev = t.next)) {
                                                      case 0:
                                                        return (
                                                          (t.next = 2),
                                                          navigator.mediaDevices.enumerateDevices()
                                                        );
                                                      case 2:
                                                        (n = t.sent),
                                                          (a = n
                                                            .filter(function (
                                                              e
                                                            ) {
                                                              return (
                                                                "videoinput" ===
                                                                e.kind
                                                              );
                                                            })
                                                            .map(function (e) {
                                                              return new er(
                                                                e.deviceId,
                                                                e.groupId,
                                                                e.kind,
                                                                e.label
                                                              );
                                                            })),
                                                          e(a),
                                                          r
                                                            .getTracks()
                                                            .forEach(function (
                                                              e
                                                            ) {
                                                              return e.stop();
                                                            });
                                                      case 6:
                                                      case "end":
                                                        return t.stop();
                                                    }
                                                }, t);
                                              })
                                            );
                                            return function (e) {
                                              return r.apply(this, arguments);
                                            };
                                          })()
                                        )
                                        .catch(function (e) {
                                          console.error(
                                            "Error in getCameras()",
                                            e
                                          ),
                                            r(e);
                                        });
                                    })
                                  );
                                case 6:
                                  e.next = 12;
                                  break;
                                case 8:
                                  return (
                                    (e.next = 10),
                                    navigator.mediaDevices.enumerateDevices()
                                  );
                                case 10:
                                  (n = e.sent),
                                    (a = n
                                      .filter(function (e) {
                                        return "videoinput" === e.kind;
                                      })
                                      .map(function (e) {
                                        return new er(
                                          e.deviceId,
                                          e.groupId,
                                          e.kind,
                                          e.label
                                        );
                                      }));
                                case 12:
                                  return e.abrupt("return", a);
                                case 15:
                                  (e.prev = 15),
                                    (e.t0 = e.catch(0)),
                                    (s = e.t0.message),
                                    e.t0 instanceof TypeError &&
                                      "TypeError" === e.t0.name &&
                                      (s =
                                        zt.q.ERROR_CAMERA_ACCESS_UNAVAILABLE
                                          .message),
                                    console.error(
                                      "An error occurred in getCameras(), ".concat(
                                        s
                                      )
                                    );
                                case 20:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [[0, 15]]
                        );
                      })
                    )),
                    function () {
                      return f.apply(this, arguments);
                    }),
                },
                {
                  key: "getMicrophones",
                  value:
                    ((m = (0, t.A)(
                      c().mark(function e() {
                        var r, a, n, s;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    ((e.prev = 0),
                                    (r =
                                      navigator.userAgent.includes("Firefox")),
                                    (a = []),
                                    !r)
                                  ) {
                                    e.next = 8;
                                    break;
                                  }
                                  return (
                                    (e.next = 6),
                                    new Promise(function (e, r) {
                                      navigator.mediaDevices
                                        .getUserMedia({ audio: !0, video: !1 })
                                        .then(
                                          (function () {
                                            var r = (0, t.A)(
                                              c().mark(function t(r) {
                                                var n;
                                                return c().wrap(function (t) {
                                                  for (;;)
                                                    switch ((t.prev = t.next)) {
                                                      case 0:
                                                        return (
                                                          (t.next = 2),
                                                          navigator.mediaDevices.enumerateDevices()
                                                        );
                                                      case 2:
                                                        (n = t.sent),
                                                          (a = n
                                                            .filter(function (
                                                              e
                                                            ) {
                                                              return (
                                                                "audioinput" ===
                                                                e.kind
                                                              );
                                                            })
                                                            .map(function (e) {
                                                              return new tr(
                                                                e.deviceId,
                                                                e.groupId,
                                                                e.kind,
                                                                e.label
                                                              );
                                                            })),
                                                          e(a),
                                                          r
                                                            .getTracks()
                                                            .forEach(function (
                                                              e
                                                            ) {
                                                              return e.stop();
                                                            });
                                                      case 6:
                                                      case "end":
                                                        return t.stop();
                                                    }
                                                }, t);
                                              })
                                            );
                                            return function (e) {
                                              return r.apply(this, arguments);
                                            };
                                          })()
                                        )
                                        .catch(function (e) {
                                          console.error(
                                            "Error in getMicrophones()",
                                            e
                                          ),
                                            r(e);
                                        });
                                    })
                                  );
                                case 6:
                                  e.next = 12;
                                  break;
                                case 8:
                                  return (
                                    (e.next = 10),
                                    navigator.mediaDevices.enumerateDevices()
                                  );
                                case 10:
                                  (n = e.sent),
                                    (a = n
                                      .filter(function (e) {
                                        return "audioinput" === e.kind;
                                      })
                                      .map(function (e) {
                                        return new tr(
                                          e.deviceId,
                                          e.groupId,
                                          e.kind,
                                          e.label
                                        );
                                      }));
                                case 12:
                                  return e.abrupt("return", a);
                                case 15:
                                  (e.prev = 15),
                                    (e.t0 = e.catch(0)),
                                    (s = e.t0.message),
                                    e.t0 instanceof TypeError &&
                                      "TypeError" === e.t0.name &&
                                      (s =
                                        zt.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE
                                          .message),
                                    console.error(
                                      "An error occurred in getMicrophones(), ".concat(
                                        s
                                      )
                                    );
                                case 20:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [[0, 15]]
                        );
                      })
                    )),
                    function () {
                      return m.apply(this, arguments);
                    }),
                },
                {
                  key: "getPlaybackDevices",
                  value:
                    ((h = (0, t.A)(
                      c().mark(function e() {
                        var r, a, n, s;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    ((e.prev = 0),
                                    (r =
                                      navigator.userAgent.includes("Firefox")),
                                    (a = []),
                                    !r)
                                  ) {
                                    e.next = 8;
                                    break;
                                  }
                                  return (
                                    (e.next = 6),
                                    new Promise(function (e, r) {
                                      navigator.mediaDevices
                                        .getUserMedia({ audio: !0, video: !1 })
                                        .then(
                                          (function () {
                                            var r = (0, t.A)(
                                              c().mark(function t(r) {
                                                var n;
                                                return c().wrap(function (t) {
                                                  for (;;)
                                                    switch ((t.prev = t.next)) {
                                                      case 0:
                                                        return (
                                                          (t.next = 2),
                                                          navigator.mediaDevices.enumerateDevices()
                                                        );
                                                      case 2:
                                                        (n = t.sent),
                                                          (a = n
                                                            .filter(function (
                                                              e
                                                            ) {
                                                              return (
                                                                "audiooutput" ===
                                                                e.kind
                                                              );
                                                            })
                                                            .map(function (e) {
                                                              return new rr(
                                                                e.deviceId,
                                                                e.groupId,
                                                                e.kind,
                                                                e.label
                                                              );
                                                            })),
                                                          e(a),
                                                          r
                                                            .getTracks()
                                                            .forEach(function (
                                                              e
                                                            ) {
                                                              return e.stop();
                                                            });
                                                      case 6:
                                                      case "end":
                                                        return t.stop();
                                                    }
                                                }, t);
                                              })
                                            );
                                            return function (e) {
                                              return r.apply(this, arguments);
                                            };
                                          })()
                                        )
                                        .catch(function (e) {
                                          console.error(
                                            "Error in getPlaybackDevices()",
                                            e
                                          ),
                                            r(e);
                                        });
                                    })
                                  );
                                case 6:
                                  e.next = 12;
                                  break;
                                case 8:
                                  return (
                                    (e.next = 10),
                                    navigator.mediaDevices.enumerateDevices()
                                  );
                                case 10:
                                  (n = e.sent),
                                    (a = n
                                      .filter(function (e) {
                                        return "audiooutput" === e.kind;
                                      })
                                      .map(function (e) {
                                        return new rr(
                                          e.deviceId,
                                          e.groupId,
                                          e.kind,
                                          e.label
                                        );
                                      }));
                                case 12:
                                  return e.abrupt("return", a);
                                case 15:
                                  (e.prev = 15),
                                    (e.t0 = e.catch(0)),
                                    (s = e.t0.message),
                                    e.t0 instanceof TypeError &&
                                      "TypeError" === e.t0.name &&
                                      (s =
                                        "Playback device access unavailable: Please ensure your device is compatible and that you're on a secure website (https://)"),
                                    console.error(
                                      "An error occurred in getPlaybackDevices(), ".concat(
                                        s
                                      )
                                    );
                                case 20:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [[0, 15]]
                        );
                      })
                    )),
                    function () {
                      return h.apply(this, arguments);
                    }),
                },
                {
                  key: "getDevices",
                  value:
                    ((u = (0, t.A)(
                      c().mark(function e() {
                        var t, r, a, n, s, i;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.prev = 0),
                                    (e.next = 3),
                                    navigator.mediaDevices.enumerateDevices()
                                  );
                                case 3:
                                  (t = e.sent), (r = []), (a = Ts(t));
                                  try {
                                    for (a.s(); !(n = a.n()).done; )
                                      (s = n.value),
                                        r.push(
                                          new Zt(
                                            s.deviceId,
                                            s.groupId,
                                            s.kind,
                                            s.label
                                          )
                                        );
                                  } catch (e) {
                                    a.e(e);
                                  } finally {
                                    a.f();
                                  }
                                  return e.abrupt("return", r);
                                case 10:
                                  (e.prev = 10),
                                    (e.t0 = e.catch(0)),
                                    (i = e.t0.message),
                                    e.t0 instanceof TypeError &&
                                      (i =
                                        "TypeError" === e.t0.name
                                          ? "Could not access devices : Please ensure your devices is compatible and that you're on a secure website (https://)"
                                          : e.t0.message),
                                    console.error(
                                      "An error occurred in getDevices(), ".concat(
                                        i
                                      )
                                    );
                                case 15:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [[0, 10]]
                        );
                      })
                    )),
                    function () {
                      return u.apply(this, arguments);
                    }),
                },
                {
                  key: "on",
                  value: function (e, t) {
                    if ("device-changed" !== e)
                      throw new Error("Unsupported event type");
                    this.addDeviceChangeEvent(), this.eventEmitter.on(e, t);
                  },
                },
                {
                  key: "addDeviceChangeEvent",
                  value: function () {
                    var e = this;
                    if (!Os) {
                      this.getDevices().then(function (t) {
                        e.devices = t;
                      });
                      try {
                        navigator.mediaDevices.addEventListener(
                          "devicechange",
                          (function () {
                            var r = (0, t.A)(
                              c().mark(function t(r) {
                                var a, n, s, i, o;
                                return c().wrap(
                                  function (t) {
                                    for (;;)
                                      switch ((t.prev = t.next)) {
                                        case 0:
                                          return (
                                            (a = e.devices),
                                            (t.next = 3),
                                            e.getDevices()
                                          );
                                        case 3:
                                          (e.devices = t.sent),
                                            (n = new Array()),
                                            (s = Ts(e.devices)),
                                            (t.prev = 6),
                                            (o = c().mark(function e() {
                                              var t;
                                              return c().wrap(function (e) {
                                                for (;;)
                                                  switch ((e.prev = e.next)) {
                                                    case 0:
                                                      (t = i.value),
                                                        0 ==
                                                        a.filter(function (e) {
                                                          return (
                                                            e.deviceId ==
                                                              t.deviceId &&
                                                            e.kind == t.kind
                                                          );
                                                        }).length
                                                          ? n.push(t)
                                                          : (a = a.filter(
                                                              function (e) {
                                                                return !(
                                                                  e.deviceId ==
                                                                    t.deviceId &&
                                                                  e.kind ==
                                                                    t.kind
                                                                );
                                                              }
                                                            ));
                                                    case 3:
                                                    case "end":
                                                      return e.stop();
                                                  }
                                              }, e);
                                            })),
                                            s.s();
                                        case 9:
                                          if ((i = s.n()).done) {
                                            t.next = 13;
                                            break;
                                          }
                                          return t.delegateYield(o(), "t0", 11);
                                        case 11:
                                          t.next = 9;
                                          break;
                                        case 13:
                                          t.next = 18;
                                          break;
                                        case 15:
                                          (t.prev = 15),
                                            (t.t1 = t.catch(6)),
                                            s.e(t.t1);
                                        case 18:
                                          return (
                                            (t.prev = 18), s.f(), t.finish(18)
                                          );
                                        case 21:
                                          0 != n.length &&
                                            e.eventEmitter.emit(
                                              "device-changed",
                                              { devices: e.devices }
                                            ),
                                            0 != a.length &&
                                              e.eventEmitter.emit(
                                                "device-changed",
                                                { devices: e.devices }
                                              );
                                        case 23:
                                        case "end":
                                          return t.stop();
                                      }
                                  },
                                  t,
                                  null,
                                  [[6, 15, 18, 21]]
                                );
                              })
                            );
                            return function (e) {
                              return r.apply(this, arguments);
                            };
                          })()
                        ),
                          (Os = !0);
                      } catch (e) {
                        var r = e.message;
                        e instanceof TypeError &&
                          (r =
                            "TypeError" === e.name
                              ? "Could not access devices : Please ensure your devices is compatible and that you're on a secure website (https://)"
                              : e.message),
                          console.error(
                            "An error occurred in device-change event, ".concat(
                              r
                            )
                          );
                      }
                    }
                  },
                },
                {
                  key: "off",
                  value: function (e, t) {
                    if ("device-changed" !== e)
                      throw new Error("Unsupported event type");
                    this.eventEmitter.off(e, t);
                  },
                },
                {
                  key: "checkPermissions",
                  value:
                    ((p = (0, t.A)(
                      c().mark(function e(t) {
                        var r, a, n, s, i;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    (t || (t = ar.AUDIO_AND_VIDEO),
                                    (r = new Map()),
                                    !t.includes(ar.AUDIO) &&
                                      !t.includes(ar.AUDIO_AND_VIDEO))
                                  ) {
                                    e.next = 15;
                                    break;
                                  }
                                  return (
                                    (a = !0),
                                    (e.prev = 4),
                                    (e.next = 7),
                                    navigator.permissions.query({
                                      name: "microphone",
                                    })
                                  );
                                case 7:
                                  ("prompt" != (n = e.sent).state &&
                                    "denied" != n.state) ||
                                    (a = !1),
                                    (e.next = 14);
                                  break;
                                case 11:
                                  throw (
                                    ((e.prev = 11),
                                    (e.t0 = e.catch(4)),
                                    Error(
                                      "Browser does not support microphone permission check"
                                    ))
                                  );
                                case 14:
                                  r.set(ar.AUDIO, a);
                                case 15:
                                  if (
                                    !t.includes(ar.VIDEO) &&
                                    !t.includes(ar.AUDIO_AND_VIDEO)
                                  ) {
                                    e.next = 28;
                                    break;
                                  }
                                  return (
                                    (s = !0),
                                    (e.prev = 17),
                                    (e.next = 20),
                                    navigator.permissions.query({
                                      name: "camera",
                                    })
                                  );
                                case 20:
                                  ("prompt" != (i = e.sent).state &&
                                    "denied" != i.state) ||
                                    (s = !1),
                                    (e.next = 27);
                                  break;
                                case 24:
                                  throw (
                                    ((e.prev = 24),
                                    (e.t1 = e.catch(17)),
                                    Error(
                                      "Browser does not support camera permission check"
                                    ))
                                  );
                                case 27:
                                  r.set(ar.VIDEO, s);
                                case 28:
                                  return e.abrupt("return", r);
                                case 29:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [
                            [4, 11],
                            [17, 24],
                          ]
                        );
                      })
                    )),
                    function (e) {
                      return p.apply(this, arguments);
                    }),
                },
                {
                  key: "requestPermission",
                  value:
                    ((d = (0, t.A)(
                      c().mark(function e(t) {
                        var r, a, n, s, i, o, d, l, p, u, h, m, f;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    (t || (t = ar.AUDIO_AND_VIDEO),
                                    (r = new Map()),
                                    !t.includes(ar.AUDIO_AND_VIDEO))
                                  ) {
                                    e.next = 32;
                                    break;
                                  }
                                  return (
                                    (n = { audio: !0, video: !0 }),
                                    (s = !0),
                                    (e.prev = 5),
                                    (e.next = 8),
                                    navigator.mediaDevices.getUserMedia(n)
                                  );
                                case 8:
                                  (a = e.sent), (e.next = 30);
                                  break;
                                case 11:
                                  if (
                                    ((e.prev = 11),
                                    (e.t0 = e.catch(5)),
                                    !(e.t0 instanceof DOMException))
                                  ) {
                                    e.next = 27;
                                    break;
                                  }
                                  (e.t1 = e.t0.name),
                                    (e.next =
                                      "NotAllowedError" === e.t1
                                        ? 17
                                        : "NotReadableError" === e.t1
                                        ? 19
                                        : "NotFoundError" === e.t1
                                        ? 21
                                        : 24);
                                  break;
                                case 17:
                                  return (
                                    "Permission denied by system" ===
                                      e.t0.message &&
                                      (i =
                                        zt.q
                                          .ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 25)
                                  );
                                case 19:
                                  return (
                                    (i = Is(e.t0, "video")),
                                    e.abrupt("break", 25)
                                  );
                                case 21:
                                  return (
                                    (i = zt.q.ERROR_CAMERA_NOT_FOUND.message),
                                    navigator &&
                                      navigator.userAgent &&
                                      -1 !=
                                        navigator.userAgent.indexOf(
                                          "Firefox"
                                        ) &&
                                      (i =
                                        zt.q
                                          .ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 25)
                                  );
                                case 24:
                                  i = e.t0.message;
                                case 25:
                                  e.next = 28;
                                  break;
                                case 27:
                                  i =
                                    e.t0 instanceof TypeError &&
                                    "TypeError" === e.t0.name
                                      ? zt.q.ERROR_CAMERA_ACCESS_UNAVAILABLE
                                          .message
                                      : e.t0.message;
                                case 28:
                                  (s = !1),
                                    i &&
                                      console.error(
                                        "An error occurred in request permission, ".concat(
                                          i
                                        )
                                      );
                                case 30:
                                  a &&
                                    setTimeout(function () {
                                      a.getTracks().forEach(function (e) {
                                        e.stop();
                                      });
                                    }, 100),
                                    r.set(ar.AUDIO_AND_VIDEO, s);
                                case 32:
                                  if (!t.includes(ar.VIDEO)) {
                                    e.next = 62;
                                    break;
                                  }
                                  return (
                                    (d = { audio: !1, video: !0 }),
                                    (l = !0),
                                    (e.prev = 35),
                                    (e.next = 38),
                                    navigator.mediaDevices.getUserMedia(d)
                                  );
                                case 38:
                                  (o = e.sent), (e.next = 60);
                                  break;
                                case 41:
                                  if (
                                    ((e.prev = 41),
                                    (e.t2 = e.catch(35)),
                                    !(e.t2 instanceof DOMException))
                                  ) {
                                    e.next = 57;
                                    break;
                                  }
                                  (e.t3 = e.t2.name),
                                    (e.next =
                                      "NotAllowedError" === e.t3
                                        ? 47
                                        : "NotReadableError" === e.t3
                                        ? 49
                                        : "NotFoundError" === e.t3
                                        ? 51
                                        : 54);
                                  break;
                                case 47:
                                  return (
                                    "Permission denied by system" ===
                                      e.t2.message &&
                                      (p =
                                        zt.q
                                          .ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 55)
                                  );
                                case 49:
                                  return (
                                    (p = Is(e.t2, "video")),
                                    e.abrupt("break", 55)
                                  );
                                case 51:
                                  return (
                                    (p = zt.q.ERROR_CAMERA_NOT_FOUND.message),
                                    navigator &&
                                      navigator.userAgent &&
                                      -1 !=
                                        navigator.userAgent.indexOf(
                                          "Firefox"
                                        ) &&
                                      (p =
                                        zt.q
                                          .ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 55)
                                  );
                                case 54:
                                  p = e.t2.message;
                                case 55:
                                  e.next = 58;
                                  break;
                                case 57:
                                  p =
                                    e.t2 instanceof TypeError &&
                                    "TypeError" === e.t2.name
                                      ? zt.q.ERROR_CAMERA_ACCESS_UNAVAILABLE
                                          .message
                                      : e.t2.message;
                                case 58:
                                  (l = !1),
                                    p &&
                                      console.error(
                                        "An error occurred in request permission, ".concat(
                                          p
                                        )
                                      );
                                case 60:
                                  o &&
                                    o.getTracks().forEach(function (e) {
                                      e.stop();
                                    }),
                                    r.set(ar.VIDEO, l);
                                case 62:
                                  if (!t.includes(ar.AUDIO)) {
                                    e.next = 92;
                                    break;
                                  }
                                  return (
                                    (h = { audio: !0, video: !1 }),
                                    (m = !0),
                                    (e.prev = 65),
                                    (e.next = 68),
                                    navigator.mediaDevices.getUserMedia(h)
                                  );
                                case 68:
                                  (u = e.sent), (e.next = 90);
                                  break;
                                case 71:
                                  if (
                                    ((e.prev = 71),
                                    (e.t4 = e.catch(65)),
                                    !(e.t4 instanceof DOMException))
                                  ) {
                                    e.next = 87;
                                    break;
                                  }
                                  (e.t5 = e.t4.name),
                                    (e.next =
                                      "NotAllowedError" === e.t5
                                        ? 77
                                        : "NotReadableError" === e.t5
                                        ? 79
                                        : "NotFoundError" === e.t5
                                        ? 81
                                        : 84);
                                  break;
                                case 77:
                                  return (
                                    "Permission denied by system" ===
                                      e.t4.message &&
                                      (f =
                                        zt.q
                                          .ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 85)
                                  );
                                case 79:
                                  return (
                                    (f = Is(e.t4, "audio")),
                                    e.abrupt("break", 85)
                                  );
                                case 81:
                                  return (
                                    (f =
                                      zt.q.ERROR_MICROPHONE_NOT_FOUND.message),
                                    navigator &&
                                      navigator.userAgent &&
                                      -1 !=
                                        navigator.userAgent.indexOf(
                                          "Firefox"
                                        ) &&
                                      (f =
                                        zt.q
                                          .ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 85)
                                  );
                                case 84:
                                  f = e.t4.message;
                                case 85:
                                  e.next = 88;
                                  break;
                                case 87:
                                  f =
                                    e.t4 instanceof TypeError &&
                                    "TypeError" === e.t4.name
                                      ? zt.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE
                                          .message
                                      : e.t4.message;
                                case 88:
                                  (m = !1),
                                    f &&
                                      console.error(
                                        "An error occurred in request permission, ".concat(
                                          f
                                        )
                                      );
                                case 90:
                                  u &&
                                    u.getTracks().forEach(function (e) {
                                      e.stop();
                                    }),
                                    r.set(ar.AUDIO, m);
                                case 92:
                                  return e.abrupt("return", r);
                                case 93:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          null,
                          [
                            [5, 11],
                            [35, 41],
                            [65, 71],
                          ]
                        );
                      })
                    )),
                    function (e) {
                      return d.apply(this, arguments);
                    }),
                },
                {
                  key: "isInt",
                  value: function (e) {
                    return "number" == typeof e && e % 1 == 0;
                  },
                },
                {
                  key: "getNetworkStats",
                  value:
                    ((o = (0, t.A)(
                      c().mark(function e() {
                        var t,
                          r,
                          a,
                          n = arguments;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    ((t = (
                                      n.length > 0 && void 0 !== n[0]
                                        ? n[0]
                                        : {}
                                    ).timeoutDuration) &&
                                      this.isInt(t)) ||
                                      (t = 6e4),
                                    (r = new Promise(function (e, r) {
                                      setTimeout(function () {
                                        r(
                                          "Not able to get NetworkStats due to timeout"
                                        );
                                      }, t);
                                    })),
                                    (a = new Promise(function (e, t) {
                                      if (navigator.onLine) {
                                        var r = new ks({
                                          measureDownloadLoadedLatency: !1,
                                          measureUploadLoadedLatency: !1,
                                          measurements: [
                                            {
                                              type: "upload",
                                              bytes: 3e6,
                                              count: 1,
                                              bypassMinDuration: !0,
                                            },
                                            {
                                              type: "download",
                                              bytes: 3e6,
                                              count: 1,
                                              bypassMinDuration: !0,
                                            },
                                          ],
                                        });
                                        r.isRunning
                                          ? ((r.onFinish = function (t) {
                                              e({
                                                downloadSpeed: parseFloat(
                                                  Number(
                                                    t.getDownloadBandwidth() /
                                                      1048576
                                                  ).toFixed(2)
                                                ),
                                                uploadSpeed: parseFloat(
                                                  Number(
                                                    t.getUploadBandwidth() /
                                                      1048576
                                                  ).toFixed(2)
                                                ),
                                              });
                                            }),
                                            (r.onError = function (e) {
                                              t("Not able to get NetworkStats");
                                            }))
                                          : t("Not able to get NetworkStats");
                                      } else t("Not able to get NetworkStats due to no Network");
                                    })),
                                    e.abrupt("return", Promise.race([a, r]))
                                  );
                                case 5:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function () {
                      return o.apply(this, arguments);
                    }),
                },
                {
                  key: "analytics",
                  value: function (e) {
                    var t, r, a;
                    !e &&
                      navigator &&
                      navigator.userAgent &&
                      ((r = navigator.userAgent),
                      delete (a = l().parse(r)).engine);
                    try {
                      var n;
                      (null !== (n = e) &&
                        void 0 !== n &&
                        n.browserUserAgent) ||
                        ((r = navigator.userAgent),
                        delete (a = l().parse(r)).engine);
                    } catch (e) {}
                    e &&
                      e.rawUserAgent &&
                      ((r = e.rawUserAgent), delete (a = l().parse(r)).engine),
                      e || (e = {});
                    var s = {};
                    (s.sdkType = e.sdkType || "javascript"),
                      (s.sdkVersion = e.sdkVersion || "0.0.89"),
                      (s.platform =
                        e.platform ||
                        (null === (t = a) ||
                        void 0 === t ||
                        null === (t = t.platform) ||
                        void 0 === t
                          ? void 0
                          : t.type) ||
                        ""),
                      "null" == e.browserUserAgent
                        ? (s.browserUserAgent = void 0)
                        : (s.browserUserAgent = a),
                      e.deviceUserAgent &&
                        (s.deviceUserAgent = e.deviceUserAgent),
                      (this._deviceInfo = s);
                  },
                },
                {
                  key: "initMeeting",
                  value: function (t) {
                    var r,
                      a = t.meetingId,
                      n = t.customCameraVideoTrack,
                      s = void 0 === n ? void 0 : n,
                      i = t.customMicrophoneAudioTrack,
                      o = void 0 === i ? void 0 : i,
                      c = t.autoConsume,
                      d = void 0 === c || c,
                      l = t.preferredProtocol,
                      p = t.mode,
                      u = t.multiStream,
                      h = void 0 === u || u,
                      m = t.participantId,
                      f = t.name,
                      g = t.micEnabled,
                      _ = t.webcamEnabled,
                      v = t.maxResolution,
                      b = t.metaData,
                      y = t.chatEnabled,
                      w = t.useSpartialLayerAnalytics,
                      S = t.signalingBaseUrl,
                      R = t.defaultCamera,
                      E = t.debugMode,
                      T = void 0 === E || E;
                    if (!a)
                      throw new Error(
                        "'meetingId' is empty, please verify it or generate new meetingId using the API."
                      );
                    var C = m ? m.toString() : k()({ length: 8 }).toLowerCase(),
                      P = f || k()({ length: 6 }).toLowerCase();
                    switch (
                      (this._deviceInfo || this.analytics(),
                      "string" != typeof l && (l = "UDP_OVER_TCP"),
                      null === (r = l) || void 0 === r
                        ? void 0
                        : r.toUpperCase())
                    ) {
                      case "UDP_ONLY":
                      case "UDP_OVER_TCP":
                      case "TCP_ONLY":
                        l = l.toUpperCase();
                        break;
                      default:
                        l = "UDP_OVER_TCP";
                    }
                    if (
                      (p || (p = Kt.n.CONFERENCE),
                      p !== Kt.n.CONFERENCE && p !== Kt.n.VIEWER)
                    )
                      throw new Error(
                        '"mode" can only be either '
                          .concat(Kt.n.CONFERENCE, " or ")
                          .concat(Kt.n.VIEWER)
                      );
                    if (null != b && "object" != (0, e.A)(b))
                      throw new Error('"metaData" can only be object.');
                    var O = "react-native" === this._deviceInfo.sdkType,
                      D = O
                        ? R
                          ? "front" === R
                            ? 1
                            : 0
                          : s
                          ? "user" ===
                            s.getVideoTracks()[0].getConstraints().facingMode
                            ? 1
                            : 0
                          : O
                          ? 1
                          : 0
                        : 0,
                      x = new ee.default({
                        roomId: a,
                        peerId: C,
                        secret: this.apiKey,
                        device: "unknown",
                        displayName: P,
                        mode: p,
                        useSimulcast: h,
                        produce: !0,
                        consume: !0,
                        useSharingSimulcast: !0,
                        datachannel: !1 !== y,
                        micEnabled: !1 !== g,
                        webcamEnabled: !1 !== _,
                        maxResolution: v || "hd",
                        useSpartialLayerAnalytics: w,
                        _deviceInfo: this._deviceInfo,
                        customCameraVideoTrack: s,
                        customMicrophoneAudioTrack: o,
                        autoConsume: d,
                        preferredProtocol: l,
                        signalingBaseUrl: S,
                        metaData: b,
                        defaultCameraIndex: D,
                        debugMode: T,
                      });
                    se.roomClient = x;
                    var I = new he({
                      id: C,
                      displayName: P,
                      local: !0,
                      mode: p,
                      metaData: b,
                    });
                    return new Ht(a, I, x);
                  },
                },
                {
                  key: "createCameraVideoTrack",
                  value:
                    ((i = (0, t.A)(
                      c().mark(function e(t) {
                        var r, a, n, s, i, o, d, l, p, u, h, m, f, g, _, v;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    ((r = t.cameraId),
                                    (a = void 0 === r ? void 0 : r),
                                    (n = t.encoderConfig),
                                    (s = void 0 === n ? void 0 : n),
                                    (i = t.facingMode),
                                    (o = void 0 === i ? void 0 : i),
                                    (d = t.optimizationMode),
                                    (l = void 0 === d ? void 0 : d),
                                    (p = t.multiStream),
                                    (u = void 0 === p || p),
                                    !a)
                                  ) {
                                    e.next = 6;
                                    break;
                                  }
                                  return (e.next = 4), this.getCameras();
                                case 4:
                                  (h = e.sent) &&
                                    h.some(function (e) {
                                      return e.deviceId;
                                    }) &&
                                    (h.some(function (e) {
                                      return e.deviceId === a;
                                    }) ||
                                      console.error(
                                        "No camera device found for the given cameraId, please check the passed cameraId. The default camera will be used instead."
                                      ));
                                case 6:
                                  return (
                                    (e.prev = 6),
                                    (m = s
                                      ? Qt.$.videoProfiles[s]
                                      : Qt.$.videoProfiles.h360p_w640p),
                                    (f = {
                                      video: {
                                        deviceId: a || void 0,
                                        facingMode: o || void 0,
                                        width: m.width,
                                        height: m.height,
                                        frameRate: m.frameRate,
                                      },
                                    }),
                                    (e.next = 11),
                                    (0, Jt.lp)(f)
                                  );
                                case 11:
                                  return (
                                    (g = e.sent),
                                    l && (g.contentHint = l),
                                    (g.encoderConfig = s || "h360p_w640p"),
                                    (g.contentHint = l || ""),
                                    (g.multiStream = u),
                                    (g.cameraId = a),
                                    e.abrupt("return", g)
                                  );
                                case 20:
                                  if (
                                    ((e.prev = 20),
                                    (e.t0 = e.catch(6)),
                                    "SecurityError" !== e.t0.name)
                                  ) {
                                    e.next = 26;
                                    break;
                                  }
                                  (_ =
                                    zt.q
                                      .ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED
                                      .message),
                                    (e.next = 46);
                                  break;
                                case 26:
                                  if ("DOMException" !== e.t0.name) {
                                    e.next = 30;
                                    break;
                                  }
                                  (_ = zt.q.ERROR_RN_CAMERA_NOT_FOUND.message),
                                    (e.next = 46);
                                  break;
                                case 30:
                                  if (!(e.t0 instanceof DOMException)) {
                                    e.next = 45;
                                    break;
                                  }
                                  (e.t1 = e.t0.name),
                                    (e.next =
                                      "NotAllowedError" === e.t1
                                        ? 34
                                        : "NotReadableError" === e.t1
                                        ? 36
                                        : "NotFoundError" === e.t1
                                        ? 38
                                        : 41);
                                  break;
                                case 34:
                                  return (
                                    (_ = xs(e.t0, "video")),
                                    e.abrupt("break", 43)
                                  );
                                case 36:
                                  return (
                                    (_ = Is(e.t0, "video")),
                                    e.abrupt("break", 43)
                                  );
                                case 38:
                                  return (
                                    (_ = zt.q.ERROR_CAMERA_NOT_FOUND.message),
                                    navigator &&
                                      navigator.userAgent &&
                                      -1 !=
                                        navigator.userAgent.indexOf(
                                          "Firefox"
                                        ) &&
                                      (_ =
                                        zt.q
                                          .ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 43)
                                  );
                                case 41:
                                  return (
                                    (_ = e.t0.message), e.abrupt("break", 43)
                                  );
                                case 43:
                                  e.next = 46;
                                  break;
                                case 45:
                                  "getUserMedia is not implemented in this browser" ==
                                  e.t0.message
                                    ? ((v =
                                        zt.q.ERROR_CAMERA_ACCESS_UNAVAILABLE),
                                      (_ = v.message))
                                    : (_ = e.t0.message);
                                case 46:
                                  console.error(
                                    "An error occurred in creating video track, ".concat(
                                      _
                                    )
                                  );
                                case 47:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this,
                          [[6, 20]]
                        );
                      })
                    )),
                    function (e) {
                      return i.apply(this, arguments);
                    }),
                },
                {
                  key: "createScreenShareVideoTrack",
                  value:
                    ((a = (0, t.A)(
                      c().mark(function e(t) {
                        var r, a, n, s, i, o, d, l, p;
                        return c().wrap(function (e) {
                          for (;;)
                            switch ((e.prev = e.next)) {
                              case 0:
                                return (
                                  (r = t.encoderConfig),
                                  (a = void 0 === r ? void 0 : r),
                                  (n = t.optimizationMode),
                                  (s = void 0 === n ? void 0 : n),
                                  (i = t.withAudio),
                                  (o = void 0 === i ? "enable" : i),
                                  (d = a
                                    ? Qt.$.screenShareProfiles[a]
                                    : Qt.$.screenShareProfiles.h720p_15fps),
                                  (l = {
                                    audio: "enable" === o,
                                    video: {
                                      width: d.width,
                                      height: d.height,
                                      frameRate: d.frameRate,
                                    },
                                  }),
                                  (e.next = 5),
                                  (0, Jt.Zu)(l)
                                );
                              case 5:
                                return (
                                  (p = e.sent),
                                  s && (p.contentHint = s),
                                  e.abrupt("return", p)
                                );
                              case 8:
                              case "end":
                                return e.stop();
                            }
                        }, e);
                      })
                    )),
                    function (e) {
                      return a.apply(this, arguments);
                    }),
                },
                {
                  key: "createMicrophoneAudioTrack",
                  value:
                    ((r = (0, t.A)(
                      c().mark(function e(t) {
                        var r, a, n, s, i, o, d, l, p, u, h, m;
                        return c().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    ((r = t.noiseConfig),
                                    (a = void 0 === r ? void 0 : r),
                                    (n = t.encoderConfig),
                                    (s = void 0 === n ? void 0 : n),
                                    (i = t.microphoneId),
                                    !(o = void 0 === i ? void 0 : i))
                                  ) {
                                    e.next = 6;
                                    break;
                                  }
                                  return (e.next = 4), this.getMicrophones();
                                case 4:
                                  (d = e.sent) &&
                                    d.some(function (e) {
                                      return e.deviceId;
                                    }) &&
                                    (d.some(function (e) {
                                      return e.deviceId === o;
                                    }) ||
                                      console.error(
                                        "No microphone device found for the given microphoneId, please check the passed microphoneId. The default microphone will be used instead."
                                      ));
                                case 6:
                                  return (
                                    (e.prev = 6),
                                    (l = s
                                      ? Qt.$.audioProfiles[s]
                                      : Qt.$.audioProfiles.speech_standard),
                                    (p = {
                                      audio: {
                                        deviceId: o,
                                        sampleRate: l.sampleRate,
                                        echoCancellation: a
                                          ? a && a.acousticEchoCancellation
                                          : l.echoCancellation,
                                        autoGainControl: a
                                          ? a && a.autoGainControl
                                          : l.autoGainControl,
                                        noiseSuppression: a
                                          ? a && a.noiseSuppression
                                          : l.noiseSuppression,
                                        channelCount: l.channelCount,
                                      },
                                    }),
                                    (e.next = 11),
                                    (0, Jt.lp)(p)
                                  );
                                case 11:
                                  return (
                                    ((u = e.sent).encoderConfig =
                                      s || "speech_standard"),
                                    (u.microphoneId = o),
                                    e.abrupt("return", u)
                                  );
                                case 17:
                                  if (
                                    ((e.prev = 17),
                                    (e.t0 = e.catch(6)),
                                    "SecurityError" !== e.t0.name)
                                  ) {
                                    e.next = 23;
                                    break;
                                  }
                                  (h =
                                    zt.q.ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED
                                      .message),
                                    (e.next = 43);
                                  break;
                                case 23:
                                  if ("DOMException" !== e.t0.name) {
                                    e.next = 27;
                                    break;
                                  }
                                  (h = zt.q.ERROR_RN_MIC_NOT_FOUND.message),
                                    (e.next = 43);
                                  break;
                                case 27:
                                  if (!(e.t0 instanceof DOMException)) {
                                    e.next = 42;
                                    break;
                                  }
                                  (e.t1 = e.t0.name),
                                    (e.next =
                                      "NotAllowedError" === e.t1
                                        ? 31
                                        : "NotReadableError" === e.t1
                                        ? 33
                                        : "NotFoundError" === e.t1
                                        ? 35
                                        : 38);
                                  break;
                                case 31:
                                  return (
                                    (h = xs(e.t0, "audio")),
                                    e.abrupt("break", 40)
                                  );
                                case 33:
                                  return (
                                    (h = Is(e.t0, "audio")),
                                    e.abrupt("break", 40)
                                  );
                                case 35:
                                  return (
                                    (h =
                                      zt.q.ERROR_MICROPHONE_NOT_FOUND.message),
                                    navigator &&
                                      navigator.userAgent &&
                                      -1 !=
                                        navigator.userAgent.indexOf(
                                          "Firefox"
                                        ) &&
                                      (h =
                                        zt.q
                                          .ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS
                                          .message),
                                    e.abrupt("break", 40)
                                  );
                                case 38:
                                  return (
                                    (h = e.t0.message), e.abrupt("break", 40)
                                  );
                                case 40:
                                  e.next = 43;
                                  break;
                                case 42:
                                  "getUserMedia is not implemented in this browser" ==
                                  e.t0.message
                                    ? ((m =
                                        zt.q
                                          .ERROR_MICROPHONE_ACCESS_UNAVAILABLE),
                                      (h = m.message))
                                    : (h = e.t0.message);
                                case 43:
                                  console.error(
                                    "An error occurred in creating audio track, ".concat(
                                      h
                                    )
                                  );
                                case 44:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this,
                          [[6, 17]]
                        );
                      })
                    )),
                    function (e) {
                      return r.apply(this, arguments);
                    }),
                },
              ]
            );
            var r, a, i, o, d, p, u, h, m, f;
          })();
        function xs(e, t) {
          return (
            "Permission denied" === e.message ||
            "Permission dismissed" === e.message
              ? "video" === t
                ? zt.q.ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED
                : zt.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED
              : e.message.includes(
                  "The request is not allowed by the user agent"
                )
              ? "video" === t
                ? zt.q.ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE
                : zt.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED
              : "Permission denied by system" === e.message
              ? "video" === t
                ? zt.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS
                : zt.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS
              : "video" === t
              ? zt.q.ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
              : zt.q.ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED
          ).message;
        }
        function Is(e, t) {
          return (
            "Device in use" === e.message
              ? "video" === t
                ? zt.q.ERROR_CAMERA_IN_USE
                : zt.q.ERROR_MICROPHONE_IN_USE
              : "video" === t
              ? zt.q.ERROR_VIDEO_SOURCE_INITIATION_FAILED
              : zt.q.ERROR_MICROPHONE_IN_USE
          ).message;
        }
        (0, i.A)(Ds, "devices", []),
          (0, i.A)(Ds, "eventEmitter", new te()),
          (0, i.A)(Ds, "Constants", {
            errors: zt.s,
            recordingEvents: {
              RECORDING_STARTING: "RECORDING_STARTING",
              RECORDING_STARTED: "RECORDING_STARTED",
              RECORDING_STOPPING: "RECORDING_STOPPING",
              RECORDING_STOPPED: "RECORDING_STOPPED",
            },
            livestreamEvents: {
              LIVESTREAM_STARTING: "LIVESTREAM_STARTING",
              LIVESTREAM_STARTED: "LIVESTREAM_STARTED",
              LIVESTREAM_STOPPING: "LIVESTREAM_STOPPING",
              LIVESTREAM_STOPPED: "LIVESTREAM_STOPPED",
            },
            characterState: ve,
            characterMode: {
              TEXT: "text",
              CO_PILOT: "co_pilot",
              AUTO_PILOT: "auto_pilot",
              VISION_PILOT: "vision_pilot",
            },
            hlsEvents: $t.V,
            transcriptionEvents: {
              TRANSCRIPTION_STARTING: "TRANSCRIPTION_STARTING",
              TRANSCRIPTION_STARTED: "TRANSCRIPTION_STARTED",
              TRANSCRIPTION_STOPPING: "TRANSCRIPTION_STOPPING",
              TRANSCRIPTION_STOPPED: "TRANSCRIPTION_STOPPED",
            },
            modes: Kt.n,
            permission: ar,
          });
        var Ms = Ds;
      })(),
      a
    );
  })()
);

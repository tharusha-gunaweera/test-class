import {
  require_react
} from "./chunk-2YZST6ER.js";
import {
  __commonJS,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports, module) {
    "use strict";
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter2() {
      EventEmitter2.init.call(this);
    }
    module.exports = EventEmitter2;
    module.exports.once = once;
    EventEmitter2.EventEmitter = EventEmitter2;
    EventEmitter2.prototype._events = void 0;
    EventEmitter2.prototype._eventsCount = 0;
    EventEmitter2.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter2, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter2.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter2.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter2.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter2.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter2.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
      var doError = type === "error";
      var events2 = this._events;
      if (events2 !== void 0)
        doError = doError && events2.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events2[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m;
      var events2;
      var existing;
      checkListener(listener);
      events2 = target._events;
      if (events2 === void 0) {
        events2 = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events2.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events2 = target._events;
        }
        existing = events2[type];
      }
      if (existing === void 0) {
        existing = events2[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events2[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter2.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter2.prototype.on = EventEmitter2.prototype.addListener;
    EventEmitter2.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter2.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter2.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter2.prototype.removeListener = function removeListener(type, listener) {
      var list, events2, position, i, originalListener;
      checkListener(listener);
      events2 = this._events;
      if (events2 === void 0)
        return this;
      list = events2[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events2[type];
          if (events2.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events2[type] = list[0];
        if (events2.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events2, i;
      events2 = this._events;
      if (events2 === void 0)
        return this;
      if (events2.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events2[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events2[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events2);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener") continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events2[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events2 = target._events;
      if (events2 === void 0)
        return [];
      var evlistener = events2[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter2.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter2.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter2.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter2.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events2 = this._events;
      if (events2 !== void 0) {
        var evlistener = events2[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/@videosdk.live/js-sdk/videosdk.js
var require_videosdk = __commonJS({
  "node_modules/@videosdk.live/js-sdk/videosdk.js"(exports, module) {
    !function(e, t) {
      if ("object" == typeof exports && "object" == typeof module)
        module.exports = t();
      else if ("function" == typeof define && define.amd) define([], t);
      else {
        var r = t();
        for (var a in r) ("object" == typeof exports ? exports : e)[a] = r[a];
      }
    }(
      self,
      () => (() => {
        var e = {
          5414: (e2) => {
            self, e2.exports = (() => {
              var e3 = {
                43: function(e4, t3, r3) {
                  var a3, n;
                  !function() {
                    "use strict";
                    a3 = function() {
                      var e5 = function() {
                      }, t4 = "undefined", r4 = typeof window !== t4 && typeof window.navigator !== t4 && /Trident\/|MSIE /.test(window.navigator.userAgent), a4 = ["trace", "debug", "info", "warn", "error"];
                      function n2(e6, t5) {
                        var r5 = e6[t5];
                        if ("function" == typeof r5.bind) return r5.bind(e6);
                        try {
                          return Function.prototype.bind.call(r5, e6);
                        } catch (t6) {
                          return function() {
                            return Function.prototype.apply.apply(r5, [
                              e6,
                              arguments
                            ]);
                          };
                        }
                      }
                      function s() {
                        console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [
                          console,
                          arguments
                        ])), console.trace && console.trace();
                      }
                      function i(t5, r5) {
                        for (var n3 = 0; n3 < a4.length; n3++) {
                          var s2 = a4[n3];
                          this[s2] = n3 < t5 ? e5 : this.methodFactory(s2, t5, r5);
                        }
                        this.log = this.debug;
                      }
                      function o(e6, r5, a5) {
                        return function() {
                          typeof console !== t4 && (i.call(this, r5, a5), this[e6].apply(this, arguments));
                        };
                      }
                      function c(a5, i2, c2) {
                        return function(a6) {
                          return "debug" === a6 && (a6 = "log"), typeof console !== t4 && ("trace" === a6 && r4 ? s : void 0 !== console[a6] ? n2(console, a6) : void 0 !== console.log ? n2(console, "log") : e5);
                        }(a5) || o.apply(this, arguments);
                      }
                      function d(e6, r5, n3) {
                        var s2, o2 = this, d2 = "loglevel";
                        function l2() {
                          var e7;
                          if (typeof window !== t4 && d2) {
                            try {
                              e7 = window.localStorage[d2];
                            } catch (e8) {
                            }
                            if (typeof e7 === t4)
                              try {
                                var r6 = window.document.cookie, a5 = r6.indexOf(encodeURIComponent(d2) + "=");
                                -1 !== a5 && (e7 = /^([^;]+)/.exec(r6.slice(a5))[1]);
                              } catch (e8) {
                              }
                            return void 0 === o2.levels[e7] && (e7 = void 0), e7;
                          }
                        }
                        "string" == typeof e6 ? d2 += ":" + e6 : "symbol" == typeof e6 && (d2 = void 0), o2.name = e6, o2.levels = {
                          TRACE: 0,
                          DEBUG: 1,
                          INFO: 2,
                          WARN: 3,
                          ERROR: 4,
                          SILENT: 5
                        }, o2.methodFactory = n3 || c, o2.getLevel = function() {
                          return s2;
                        }, o2.setLevel = function(r6, n4) {
                          if ("string" == typeof r6 && void 0 !== o2.levels[r6.toUpperCase()] && (r6 = o2.levels[r6.toUpperCase()]), !("number" == typeof r6 && r6 >= 0 && r6 <= o2.levels.SILENT))
                            throw "log.setLevel() called with invalid level: " + r6;
                          if (s2 = r6, false !== n4 && function(e7) {
                            var r7 = (a4[e7] || "silent").toUpperCase();
                            if (typeof window !== t4 && d2) {
                              try {
                                return void (window.localStorage[d2] = r7);
                              } catch (e8) {
                              }
                              try {
                                window.document.cookie = encodeURIComponent(d2) + "=" + r7 + ";";
                              } catch (e8) {
                              }
                            }
                          }(r6), i.call(o2, r6, e6), typeof console === t4 && r6 < o2.levels.SILENT)
                            return "No console available for logging";
                        }, o2.setDefaultLevel = function(e7) {
                          l2() || o2.setLevel(e7, false);
                        }, o2.enableAll = function(e7) {
                          o2.setLevel(o2.levels.TRACE, e7);
                        }, o2.disableAll = function(e7) {
                          o2.setLevel(o2.levels.SILENT, e7);
                        };
                        var p2 = l2();
                        null == p2 && (p2 = null == r5 ? "WARN" : r5), o2.setLevel(p2, false);
                      }
                      var l = new d(), p = {};
                      l.getLogger = function(e6) {
                        if ("symbol" != typeof e6 && "string" != typeof e6 || "" === e6)
                          throw new TypeError(
                            "You must supply a name when creating a logger."
                          );
                        var t5 = p[e6];
                        return t5 || (t5 = p[e6] = new d(e6, l.getLevel(), l.methodFactory)), t5;
                      };
                      var u = typeof window !== t4 ? window.log : void 0;
                      return l.noConflict = function() {
                        return typeof window !== t4 && window.log === l && (window.log = u), l;
                      }, l.getLoggers = function() {
                        return p;
                      }, l.default = l, l;
                    }, void 0 === (n = a3.call(t3, r3, t3, e4)) || (e4.exports = n);
                  }();
                }
              }, t2 = {};
              function r2(a3) {
                var n = t2[a3];
                if (void 0 !== n) return n.exports;
                var s = t2[a3] = { exports: {} };
                return e3[a3].call(s.exports, s, s.exports, r2), s.exports;
              }
              r2.d = (e4, t3) => {
                for (var a3 in t3)
                  r2.o(t3, a3) && !r2.o(e4, a3) && Object.defineProperty(e4, a3, { enumerable: true, get: t3[a3] });
              }, r2.o = (e4, t3) => Object.prototype.hasOwnProperty.call(e4, t3), r2.r = (e4) => {
                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e4, Symbol.toStringTag, {
                  value: "Module"
                }), Object.defineProperty(e4, "__esModule", { value: true });
              };
              var a2 = {};
              return (() => {
                "use strict";
                r2.r(a2), r2.d(a2, { VideoSDKMetrics: () => fe });
                const e4 = "inbound", t3 = "outbound", n = {
                  codec_id_in: "",
                  codec_in: {
                    mime_type: null,
                    clock_rate: null,
                    sdp_fmtp_line: null
                  },
                  delta_jitter_ms_in: 0,
                  delta_rtt_ms_out: null,
                  percent_packets_lost_in: 0,
                  delta_packets_in: 0,
                  delta_packets_lost_in: 0,
                  total_packets_in: 0,
                  total_packets_lost_in: 0,
                  total_KBytes_in: 0,
                  delta_KBytes_in: 0,
                  delta_kbs_in: 0,
                  timestamp_in: null,
                  ssrc: "",
                  total_concealment_events: 0,
                  delta_concealment_events: 0,
                  total_inserted_samples_for_decelaration: 0,
                  delta_inserted_samples_for_decelaration: 0,
                  total_removed_samples_for_accelaration: 0,
                  delta_removed_samples_for_accelaration: 0,
                  direction: e4
                }, s = {
                  codec_id_out: "",
                  codec_out: {
                    mime_type: null,
                    clock_rate: null,
                    sdp_fmtp_line: null
                  },
                  delta_jitter_ms_out: 0,
                  delta_rtt_ms_out: null,
                  percent_packets_lost_out: 0,
                  delta_packets_out: 0,
                  delta_packets_lost_out: 0,
                  total_packets_out: 0,
                  total_packets_lost_out: 0,
                  total_KBytes_out: 0,
                  delta_KBytes_out: 0,
                  delta_kbs_out: 0,
                  timestamp_out: null,
                  ssrc: "",
                  direction: t3
                }, i = {
                  codec_id_in: "",
                  size_in: { width: null, height: null, framerate: null },
                  codec_in: { mime_type: null, clock_rate: null },
                  delta_jitter_ms_in: 0,
                  percent_packets_lost_in: 0,
                  delta_packets_in: 0,
                  delta_packets_lost_in: 0,
                  total_packets_in: 0,
                  total_packets_lost_in: 0,
                  total_KBytes_in: 0,
                  delta_KBytes_in: 0,
                  delta_kbs_in: 0,
                  ssrc: "",
                  direction: e4
                }, o = {
                  codec_id_out: "",
                  size_out: { width: null, height: null, framerate: null },
                  codec_out: { mime_type: null, clock_rate: null },
                  delta_jitter_ms_out: 0,
                  delta_rtt_ms_out: null,
                  percent_packets_lost_out: 0,
                  delta_packets_out: 0,
                  delta_packets_lost_out: 0,
                  total_packets_out: 0,
                  total_packets_lost_out: 0,
                  total_KBytes_out: 0,
                  delta_KBytes_out: 0,
                  delta_kbs_out: 0,
                  limitation_out: {
                    reason: null,
                    durations: null,
                    resolutionChanges: 0
                  },
                  timestamp_out: null,
                  ssrc: "",
                  direction: t3
                }, c = "inbound-rtp", d = "bytesReceived", l = "bytesSent", p = "clockRate", u = "codecId", h = "currentRoundTripTime", m = "roundTripTime", f = "fractionLost", g = "frameHeight", _ = "frameWidth", v = "qualityLimitationReason", b = "qualityLimitationDurations", y = "qualityLimitationResolutionChanges", w = "id", S = "jitter", R = "kind", E = "mimeType", k = "packetsLost", T = "packetsReceived", C = "packetsSent", P = "responsesReceived", O = "ssrc", D = "selected", x = "timestamp", I = "totalRoundTripTime", M = "roundTripTimeMeasurements", A = "type", L = "framesDecoded", N = "framesEncoded", j = "totalDecodeTime", B = "totalEncodeTime", F = "pliCount", U = "nackCount", W = "trackId", q = "trackIdentifier", H = "mediaSourceId", V = "audio", G = "video", z = {
                  0: "ETHERNET",
                  2: "CELLULAR_5G",
                  3: "WIFI",
                  5: "CELLULAR_4G",
                  10: "CELLULAR"
                }, $ = "audio", K = "video", J = "network", Q = "data";
                var Y = r2(43);
                const X = () => `${(/* @__PURE__ */ new Date()).toISOString()} | metrics`, Z = (e5, t4, r3) => `${e5} | ${t4} | ${r3}`;
                Y.setDefaultLevel(Y.levels.TRACE);
                const ee = (e5, t4, r3) => {
                  r3 ? Y.debug(Z(X(), e5, t4), r3) : Y.debug(Z(X(), e5, t4));
                }, te = (e5, t4) => {
                  Y.warn(Z(X(), e5, t4));
                }, re = (e5, t4) => {
                  Y.error(Z(X(), e5, t4));
                }, ae = "extractor   ", ne = (t4, r3, a3) => {
                  if (!r3) return null;
                  const c2 = {};
                  let d2 = r3[V][t4];
                  d2 || (d2 = a3 === e4 ? { ...n } : { ...s }), c2[V] = d2;
                  let l2 = r3[G][t4];
                  return l2 || (l2 = a3 === e4 ? { ...i } : { ...o }), c2[G] = l2, c2;
                }, se = (e5, t4, r3, a3) => {
                  let n2 = false;
                  const s2 = a3[t4].total_rtt_ms_out, i2 = a3[t4].total_rtt_measure_out, o2 = r3 ? r3[t4].total_rtt_ms_out : 0, c2 = r3 ? r3[t4].total_rtt_measure_out : 0, d2 = { rtt: null, totalRTT: s2, totalRTTMeasurements: i2 };
                  if (e5[x] === a3[t4].timestamp_out) return d2;
                  if (!Object.prototype.hasOwnProperty.call(e5, m)) return d2;
                  if (Object.prototype.hasOwnProperty.call(e5, M) && (n2 = true, 0 === Number(e5[M]) || Number(e5[M]) - c2 === i2))
                    return d2;
                  const l2 = Number(1e3) * Number(e5[m]);
                  let p2 = s2 + l2, u2 = i2 + 1;
                  return n2 && (p2 = Number(1e3) * Number(e5[I]) - o2, u2 = Number(e5[M]) - c2), { rtt: l2, totalRTT: p2, totalRTTMeasurements: u2 };
                }, ie = (e5, t4, r3) => e5[x] === r3[t4].timestamp_out ? null : Object.prototype.hasOwnProperty.call(e5, S) ? Number(1e3) * (Number(e5[S]) || 0) : null, oe = (e5, t4, r3, a3) => {
                  if (!Object.prototype.hasOwnProperty.call(e5, C) || !Object.prototype.hasOwnProperty.call(e5, l))
                    return {
                      packetsSent: r3[t4].total_packets_out,
                      packetsLost: r3[t4].total_packets_lost_out,
                      bytesSent: r3[t4].total_KBytes_out
                    };
                  const n2 = Number(e5[C]) || 0 - (a3 ? a3[t4].total_packets_out : 0), s2 = n2 - r3[t4].total_packets_out, i2 = Number(e5[l]) / 1024 - (a3 ? a3[t4].total_KBytes_out : 0), o2 = i2 - r3[t4].total_KBytes_out, c2 = e5[x] || Date.now(), d2 = a3 ? a3.timestamp : null;
                  let p2 = r3.timestamp;
                  !p2 && d2 && (p2 = d2);
                  const u2 = p2 ? c2 - p2 : 0;
                  return {
                    packetsSent: n2,
                    deltaPacketsSent: s2,
                    KBytesSent: i2,
                    deltaKBytesSent: o2,
                    kbsSent: u2 > 0 ? 8e-3 * o2 * 1024 / u2 * 1e3 : 0
                  };
                }, ce = (e5, t4, r3, a3) => {
                  let n2 = r3[t4].total_packets_lost_out, s2 = 0, i2 = 0;
                  return Object.prototype.hasOwnProperty.call(e5, k) && (n2 = Number(e5[k]) || 0 - (a3 ? a3[t4].total_packets_lost_out : 0), s2 = n2 - r3[t4].total_packets_lost_out), Object.prototype.hasOwnProperty.call(e5, f) && (i2 = Number(100 * e5[f])), { packetsLost: n2, deltaPacketsLost: s2, fractionLost: i2 };
                }, de = (e5, t4, r3, a3) => {
                  if (!Object.prototype.hasOwnProperty.call(e5, T) || !Object.prototype.hasOwnProperty.call(e5, k) || !Object.prototype.hasOwnProperty.call(e5, d))
                    return {
                      percent_packets_lost: r3[t4].percent_packets_lost_in,
                      packetsReceived: r3[t4].total_packets_in,
                      packetsLost: r3[t4].total_packets_lost_in,
                      bytesReceived: r3[t4].total_KBytes_in
                    };
                  const n2 = (Number(e5[T]) || 0) - (a3 ? a3[t4].total_packets_in : 0), s2 = (Number(e5[k]) || 0) - (a3 ? a3[t4].total_packets_lost_in : 0), i2 = s2 - r3[t4].total_packets_lost_in, o2 = n2 - r3[t4].total_packets_in, c2 = n2 !== r3[t4].total_packets_in ? 100 * i2 / (i2 + o2) : 0, l2 = Number(e5[d]) / 1024 - (a3 ? a3[t4].total_KBytes_in : 0), p2 = l2 - r3[t4].total_KBytes_in, u2 = e5[x] || Date.now(), h2 = a3 ? a3.timestamp : null;
                  let m2 = r3.timestamp;
                  !m2 && h2 && (m2 = h2);
                  const f2 = m2 ? u2 - m2 : 0;
                  return {
                    percentPacketsLost: c2,
                    packetsReceived: n2,
                    deltaPacketsReceived: o2,
                    packetsLost: s2,
                    deltaPacketsLost: i2,
                    KBytesReceived: l2,
                    deltaKBytesReceived: p2,
                    kbsReceived: f2 > 0 ? 8e-3 * p2 * 1024 / f2 * 1e3 : 0
                  };
                }, le = (e5) => "relay" !== e5.candidateType ? "" : e5.relayProtocol || "", pe = (e5) => Object.prototype.hasOwnProperty.call(e5, g) && Object.prototype.hasOwnProperty.call(e5, _) ? {
                  width: e5[_] || null,
                  height: e5[g] || null,
                  framerate: e5.framesPerSecond
                } : { width: null, height: null, framerate: null };
                class ue {
                  constructor(e5, t4) {
                    this._callbacks = { onStatsCollected: null }, this._id = `collector-${t4}`, this._moduleName = this._id, this._probeId = t4, this._config = e5, this._state = "idle", this._statsReports = [];
                  }
                  registerCallback(e5, t4, r3) {
                    e5 in this._callbacks ? (this._callbacks[e5] = { callback: t4, context: r3 }, ee(this._moduleName, `registered callback '${e5}'`)) : re(
                      this._moduleName,
                      `can't register callback for '${e5}' - not found`
                    );
                  }
                  unregisterCallback(e5) {
                    e5 in this._callbacks ? (this._callbacks[e5] = null, delete this._callbacks[e5], ee(this._moduleName, `unregistered callback '${e5}'`)) : re(
                      this._moduleName,
                      `can't unregister callback for '${e5}' - not found`
                    );
                  }
                  analyze(r3, a3) {
                    const m2 = ((e5) => {
                      const t4 = {
                        name: "",
                        meetingId: "",
                        peerId: "",
                        timestamp: null,
                        count: 0,
                        audio: {},
                        video: {},
                        network: { infrastructure: 3 },
                        data: {
                          delta_kbs_bandwidth_in: 0,
                          delta_kbs_bandwidth_out: 0,
                          delta_rtt_connectivity_ms: null,
                          total_rtt_connectivity_ms: 0
                        }
                      };
                      if (e5) {
                        const t5 = {
                          ...e5,
                          audio: {},
                          video: {},
                          data: { ...e5.data },
                          network: { ...e5.network }
                        };
                        return Object.keys(e5.audio).forEach((r4) => {
                          t5.audio[r4] = { ...e5.audio[r4] };
                        }), Object.keys(e5.video).forEach((r4) => {
                          t5.video[r4] = { ...e5.video[r4] };
                        }), t5;
                      }
                      return {
                        ...t4,
                        audio: {},
                        video: {},
                        data: { ...t4.data },
                        network: { ...t4.network }
                      };
                    })(a3);
                    m2.name = this._config.name, m2.meetingId = this._config.meetingId, m2.peerId = this._config.peerId, m2.count = a3 ? a3.count + 1 : 1;
                    let f2 = null;
                    return r3.forEach((r4) => {
                      !f2 && r4.timestamp && (f2 = r4.timestamp), ((r5, a4, n2, s2) => {
                        if (!r5) return [];
                        switch (r5[A]) {
                          case "candidate-pair":
                            let i2 = false;
                            if (r5.nominated && "succeeded" === r5.state && (i2 = true, ee(
                              ae,
                              `analyze() - got stats ${r5[A]} for ${n2}`,
                              r5
                            ), D in r5 && !r5[D] && (i2 = false)), i2) {
                              r5.localCandidateId, r5.remoteCandidateId;
                              const e5 = ((e6, t5, r6) => {
                                const a5 = (e6[d] || 0) / 1024 - (r6 ? r6.data.total_KBytes_in : 0), n3 = (e6[l] || 0) / 1024 - (r6 ? r6.data.total_KBytes_out : 0), s3 = e6[x] || Date.now(), i3 = a5 - t5.data.total_KBytes_in, o3 = n3 - t5.data.total_KBytes_out, c2 = r6 ? r6.timestamp : null;
                                let p2 = t5.timestamp;
                                !p2 && c2 && (p2 = c2);
                                const u2 = p2 ? s3 - p2 : 0;
                                return {
                                  total_KBytes_received: a5,
                                  total_KBytes_sent: n3,
                                  delta_KBytes_received: i3,
                                  delta_KBytes_sent: o3,
                                  kbs_speed_received: u2 > 0 ? 8e-3 * i3 * 1024 / u2 * 1e3 : 0,
                                  kbs_speed_sent: u2 > 0 ? 8e-3 * o3 * 1024 / u2 * 1e3 : 0
                                };
                              })(r5, a4, s2), t4 = (((e6) => {
                                e6.availableIncomingBitrate, e6.availableOutgoingBitrate;
                              })(r5), ((e6, t5, r6, a5) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  h
                                ))
                                  return {
                                    rtt: null,
                                    totalRTT: a5[t5].total_rtt_connectivity_ms,
                                    totalRTTMeasurements: a5[t5].total_rtt_connectivity_measure
                                  };
                                const n3 = Number(1e3) * Number(e6[h]);
                                let s3 = a5[t5].total_rtt_connectivity_ms + n3, i3 = a5[t5].total_rtt_connectivity_measure + 1;
                                return Object.prototype.hasOwnProperty.call(
                                  e6,
                                  I
                                ) && (s3 = Number(1e3) * Number(e6[I]) - (r6 ? r6[t5].total_rtt_connectivity_ms : 0)), Object.prototype.hasOwnProperty.call(
                                  e6,
                                  P
                                ) && (i3 = Number(e6[P]) - (r6 ? r6[t5].total_rtt_connectivity_measure : 0)), {
                                  rtt: n3,
                                  totalRTT: s3,
                                  totalRTTMeasurements: i3
                                };
                              })(r5, "data", s2, a4));
                              return [
                                {
                                  type: Q,
                                  value: {
                                    total_KBytes_in: e5.total_KBytes_received
                                  }
                                },
                                {
                                  type: Q,
                                  value: {
                                    total_KBytes_out: e5.total_KBytes_sent
                                  }
                                },
                                {
                                  type: Q,
                                  value: {
                                    delta_KBytes_in: e5.delta_KBytes_received
                                  }
                                },
                                {
                                  type: Q,
                                  value: {
                                    delta_KBytes_out: e5.delta_KBytes_sent
                                  }
                                },
                                {
                                  type: Q,
                                  value: {
                                    delta_kbs_in: e5.kbs_speed_received
                                  }
                                },
                                {
                                  type: Q,
                                  value: {
                                    delta_kbs_out: e5.kbs_speed_sent
                                  }
                                },
                                {
                                  type: Q,
                                  value: {
                                    delta_rtt_connectivity_ms: t4.rtt
                                  }
                                }
                              ];
                            }
                            break;
                          case "local-candidate":
                            if (r5[w] === a4.network.local_candidate_id)
                              return [
                                {
                                  type: J,
                                  value: {
                                    infrastructure: r5.networkType
                                  }
                                },
                                {
                                  type: J,
                                  value: {
                                    local_candidate_protocol: r5.protocol || ""
                                  }
                                },
                                {
                                  type: J,
                                  value: {
                                    local_candidate_relay_protocol: le(r5)
                                  }
                                }
                              ];
                            break;
                          case c: {
                            ee(
                              ae,
                              `analyze() - got stats ${r5[A]} for ${n2}`,
                              r5
                            );
                            const t4 = r5[O], i3 = ne(t4, a4, e4);
                            i3 && (i3.timestamp = a4.timestamp);
                            const o3 = ne(t4, s2, e4);
                            if (o3 && (o3.timestamp = s2.timestamp), r5[R] === V) {
                              const e5 = de(r5, V, i3, o3), a5 = ie(r5, V, i3), n3 = r5[u] || "", s3 = ((e6, t5, r6) => {
                                const a6 = Number(e6.concealmentEvents) || 0, n4 = a6 - (r6[t5].total_concealment_events || 0), s4 = Number(
                                  e6.insertedSamplesForDeceleration
                                ) || 0, i4 = s4 - (r6[t5].total_inserted_samples_for_decelaration || 0), o4 = Number(
                                  e6.removedSamplesForAcceleration
                                ) || 0;
                                return {
                                  totalConcealmentEvents: a6,
                                  deltaConcealmentEvents: n4,
                                  totalInsertedSamplesForDecelaration: s4,
                                  deltaInsertedSamplesForDecelaration: i4,
                                  totalRemovedSamplesForAccelaration: o4,
                                  deltaRemovedSampleForAccelaration: o4 - (r6[t5].total_removed_samples_for_accelaration || 0)
                                };
                              })(r5, V, i3);
                              return [
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { codec_id_in: n3 }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    total_packets_in: e5.packetsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    delta_packets_in: e5.deltaPacketsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    total_packets_lost_in: e5.packetsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    delta_packets_lost_in: e5.deltaPacketsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    percent_packets_lost_in: e5.percentPacketsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    total_KBytes_in: e5.KBytesReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    delta_KBytes_in: e5.deltaKBytesReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { delta_kbs_in: e5.kbsReceived }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { delta_jitter_ms_in: a5 }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    total_concealment_events: s3.totalConcealmentEvents
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    delta_concealment_events: s3.deltaConcealmentEvents
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    total_inserted_samples_for_decelaration: s3.totalInsertedSamplesForDecelaration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    delta_inserted_samples_for_decelaration: s3.deltaInsertedSamplesForDecelaration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    total_removed_samples_for_accelaration: s3.totalRemovedSamplesForAccelaration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: {
                                    delta_removed_samples_for_accelaration: s3.deltaRemovedSampleForAccelaration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { track_in: r5[W] }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { track_id_in: r5[q] }
                                },
                                {
                                  ssrc: t4,
                                  type: $,
                                  value: { media_source_id: r5[H] }
                                }
                              ];
                            }
                            if (r5[R] === G) {
                              ((e6, t5) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  L
                                ) || !Object.prototype.hasOwnProperty.call(
                                  e6,
                                  j
                                ))
                                  return {
                                    delta_ms_decode_frame: t5[G].delta_ms_decode_frame_in,
                                    frames_decoded: t5[G].total_frames_decoded_in,
                                    total_decode_time: t5[G].total_time_decoded_in
                                  };
                                e6[L], e6[j], t5[G].total_time_decoded_in, t5[G].total_frames_decoded_in;
                              })(r5, i3);
                              const e5 = de(r5, G, i3, o3), a5 = ie(r5, G, i3), n3 = (r5.decoderImplementation, r5[u] || null), s3 = pe(r5);
                              return ((e6, t5, r6) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  F
                                ) || !Object.prototype.hasOwnProperty.call(
                                  e6,
                                  U
                                ))
                                  return {
                                    pliCount: t5.total_pli_sent_in,
                                    nackCount: t5.total_nack_sent_in,
                                    deltaPliCount: 0,
                                    deltaNackCount: 0
                                  };
                                e6[F], r6 && r6[G].total_pli_sent_in, e6[U], r6 && r6[G].total_nack_sent_in, t5[G].total_pli_sent_in, t5[G].total_nack_sent_in;
                              })(r5, i3, o3), [
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: { codec_id_in: n3 }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    total_packets_in: e5.packetsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    delta_packets_in: e5.deltaPacketsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    total_packets_lost_in: e5.packetsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    delta_packets_lost_in: e5.deltaPacketsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    percent_packets_lost_in: e5.percentPacketsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    total_KBytes_in: e5.KBytesReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    delta_KBytes_in: e5.deltaKBytesReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: {
                                    delta_kbs_in: e5.kbsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: { delta_jitter_ms_in: a5 }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: { size_in: s3 }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: { track_in: r5[W] }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: { track_id_in: r5[q] }
                                },
                                {
                                  ssrc: t4,
                                  type: K,
                                  value: { media_source_id: r5[H] }
                                }
                              ];
                            }
                            break;
                          }
                          case "outbound-rtp": {
                            ee(
                              ae,
                              `analyze() - got stats ${r5[A]} for ${n2}`,
                              r5
                            );
                            const e5 = r5[O], i3 = ne(e5, a4, t3);
                            i3 && (i3.timestamp = a4.timestamp);
                            const o3 = ne(e5, s2, t3);
                            if (o3 && (o3.timestamp = s2.timestamp), r5[R] === V) {
                              const t4 = r5[u] || null, a5 = oe(r5, V, i3, o3);
                              return [
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { codec_id_out: t4 }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: {
                                    total_packets_out: a5.packetsSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: {
                                    delta_packets_out: a5.deltaPacketsSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: {
                                    total_KBytes_out: a5.KBytesSent
                                  }
                                },
                                {
                                  type: $,
                                  value: {
                                    delta_KBytes_out: a5.deltaKBytesSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { delta_kbs_out: a5.kbsSent }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { track_out: r5[W] }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { track_id_out: r5[q] }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { media_source_id: r5[H] }
                                }
                              ];
                            }
                            if (r5[R] === G) {
                              r5.encoderImplementation;
                              const t4 = r5[u] || null, a5 = (((e6, t5) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  N
                                ) || !Object.prototype.hasOwnProperty.call(
                                  e6,
                                  B
                                ))
                                  return {
                                    delta_ms_encode_frame: t5[G].delta_ms_encode_frame_out,
                                    frames_encoded: t5[G].total_frames_encoded_out,
                                    total_encode_time: t5[G].total_time_encoded_out
                                  };
                                e6[N], e6[B], t5[G].total_time_encoded_out, t5[G].total_frames_encoded_out;
                              })(r5, i3), pe(r5)), n3 = ((e6) => {
                                const t5 = Object.prototype.hasOwnProperty.call(
                                  e6,
                                  v
                                ) ? e6[v] : null, r6 = Object.prototype.hasOwnProperty.call(
                                  e6,
                                  y
                                ) ? e6[y] : null, a6 = Object.prototype.hasOwnProperty.call(
                                  e6,
                                  b
                                ) ? e6[b] : null;
                                return a6 && Object.keys(a6).forEach((e7) => {
                                  a6[e7] > 1e3 && (a6[e7] = Number(a6[e7] / 1e3));
                                }), {
                                  reason: t5,
                                  durations: a6,
                                  resolutionChanges: r6
                                };
                              })(r5), s3 = (((e6, t5, r6) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  F
                                ) || !Object.prototype.hasOwnProperty.call(
                                  e6,
                                  U
                                ))
                                  return {
                                    pliCount: t5.total_pli_received_out,
                                    nackCount: t5.total_nack_received_out,
                                    deltaPliCount: 0,
                                    deltaNackCount: 0
                                  };
                                e6[F], r6 && r6[G].total_pli_received_out, e6[U], r6 && r6[G].total_nack_received_out, t5[G].total_pli_received_out, t5[G].total_nack_received_out;
                              })(r5, i3, o3), oe(r5, G, i3, o3));
                              return [
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { codec_id_out: t4 }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: {
                                    total_packets_out: s3.packetsSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: {
                                    delta_packets_out: s3.deltaPacketsSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: {
                                    total_KBytes_out: s3.KBytesSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: {
                                    delta_KBytes_out: s3.deltaKBytesSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { delta_kbs_out: s3.kbsSent }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { size_out: a5 }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { limitation_out: n3 }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { track_out: r5[W] }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { track_id_out: r5[q] }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { media_source_id: r5[H] }
                                }
                              ];
                            }
                            break;
                          }
                          case "media-source": {
                            ee(
                              ae,
                              `analyze() - got stats ${r5[A]} for ${n2}`,
                              r5
                            );
                            const e5 = [];
                            return Object.keys(a4[V]).forEach((t4) => {
                              const n3 = a4[V][t4];
                              if (n3.media_source_id === r5[w]) {
                                var s3 = r5[q];
                                e5.push({
                                  ssrc: n3.ssrc,
                                  type: $,
                                  value: { track_id_out: s3 }
                                });
                              }
                            }), Object.keys(a4[G]).forEach((t4) => {
                              const n3 = a4[G][t4];
                              if (n3.media_source_id === r5[w]) {
                                var s3 = r5[q];
                                e5.push({
                                  ssrc: n3.ssrc,
                                  type: K,
                                  value: { track_id_out: s3 }
                                });
                              }
                            }), e5;
                          }
                          case "track": {
                            ee(
                              ae,
                              `analyze() - got stats ${r5[A]} for ${n2}`,
                              r5
                            );
                            const e5 = [];
                            return Object.keys(a4[V]).forEach((t4) => {
                              const s3 = a4[V][t4];
                              if (s3.track_in === r5[w] || s3.track_out === r5[w]) {
                                ee(
                                  ae,
                                  `analyze() - got stats ${r5[A]} for ${n2}`,
                                  r5
                                );
                                var i3 = r5[q];
                                r5[w] === s3.track_in ? e5.push({
                                  ssrc: s3.ssrc,
                                  type: $,
                                  value: { track_id_in: i3 }
                                }) : e5.push({
                                  ssrc: s3.ssrc,
                                  type: $,
                                  value: { track_id_out: i3 }
                                });
                              }
                            }), Object.keys(a4[G]).forEach((t4) => {
                              const s3 = a4[G][t4];
                              if (s3.track_in === r5[w] || s3.track_out === r5[w]) {
                                ee(
                                  ae,
                                  `analyze() - got stats ${r5[A]} for ${n2}`,
                                  r5
                                );
                                var i3 = r5[q];
                                r5[w] === s3.track_in ? e5.push({
                                  ssrc: s3.ssrc,
                                  type: K,
                                  value: { track_id_in: i3 }
                                }) : e5.push({
                                  ssrc: s3.ssrc,
                                  type: K,
                                  value: { track_id_out: i3 }
                                });
                              }
                            }), e5;
                          }
                          case "codec":
                            const o2 = [];
                            return Object.keys(a4[V]).forEach((e5) => {
                              const t4 = a4[V][e5];
                              if (t4.codec_id_in === r5[w] || t4.codec_id_out === r5[w]) {
                                ee(
                                  ae,
                                  `analyze() - got stats ${r5[A]} for ${n2}`,
                                  r5
                                );
                                const e6 = ((e7) => ({
                                  channels: e7.channels || null,
                                  clock_rate: e7[p] || null,
                                  mime_type: e7[E] || null,
                                  sdp_fmtp_line: e7.sdpFmtpLine || null
                                }))(r5);
                                r5[w] === t4.codec_id_in ? o2.push({
                                  ssrc: t4.ssrc,
                                  type: $,
                                  value: { codec_in: e6 }
                                }) : o2.push({
                                  ssrc: t4.ssrc,
                                  type: $,
                                  value: { codec_out: e6 }
                                });
                              }
                            }), Object.keys(a4[G]).forEach((e5) => {
                              const t4 = a4[G][e5];
                              if (t4.codec_id_in === r5[w] || t4.codec_id_out === r5[w]) {
                                ee(
                                  ae,
                                  `analyze() - got stats ${r5[A]} for ${n2}`,
                                  r5
                                );
                                const e6 = ((e7) => ({
                                  clock_rate: e7[p] || null,
                                  mime_type: e7[E] || null
                                }))(r5);
                                r5[w] === t4.codec_id_in ? o2.push({
                                  ssrc: t4.ssrc,
                                  type: K,
                                  value: { codec_in: e6 }
                                }) : o2.push({
                                  ssrc: t4.ssrc,
                                  type: K,
                                  value: { codec_out: e6 }
                                });
                              }
                            }), o2;
                          case "remote-inbound-rtp": {
                            ee(
                              ae,
                              `analyze() - got stats ${r5[A]} for ${n2}`,
                              r5
                            );
                            const e5 = r5[O], i3 = ne(e5, a4, t3), o3 = ne(e5, s2, t3);
                            if (r5[R] === V) {
                              const t4 = se(r5, V, o3, i3), a5 = ie(r5, V, i3), n3 = ce(r5, V, i3, o3);
                              return [
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { delta_rtt_ms_out: t4.rtt }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { delta_jitter_ms_out: a5 }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { timestamp_out: r5[x] }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: {
                                    total_packets_lost_out: n3.packetsLost
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: {
                                    delta_packets_lost_out: n3.deltaPacketsLost
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: {
                                    percent_packets_lost_out: n3.fractionLost
                                  }
                                }
                              ];
                            }
                            if (r5[R] === G) {
                              const t4 = se(r5, G, o3, i3), a5 = ie(r5, G, i3), n3 = ce(r5, G, i3, o3);
                              return [
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { delta_rtt_ms_out: t4.rtt }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { delta_jitter_ms_out: a5 }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: { timestamp_out: r5[x] }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: {
                                    total_packets_lost_out: n3.packetsLost
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: K,
                                  value: {
                                    delta_packets_lost_out: n3.deltaPacketsLost
                                  }
                                }
                              ];
                            }
                            break;
                          }
                          case "remote-outbound-rtp": {
                            ee(
                              ae,
                              `analyze() - got stats ${r5[A]} for ${n2}`,
                              r5
                            );
                            const e5 = r5[O], i3 = ne(e5, a4, t3), o3 = ne(e5, s2, t3);
                            if (r5[R] === V) {
                              const t4 = se(r5, V, o3, i3);
                              return [
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { delta_rtt_ms_in: t4.rtt }
                                },
                                {
                                  ssrc: e5,
                                  type: $,
                                  value: { timestamp_in: r5[x] }
                                }
                              ];
                            }
                            break;
                          }
                        }
                        return [];
                      })(r4, m2, m2.name, null).forEach((e5) => {
                        if (e5.value && e5.type)
                          if (e5.ssrc) {
                            let d2 = m2[e5.type][e5.ssrc];
                            d2 || (t4 = e5.type, a4 = r4.type, d2 = t4 === V ? a4 === c ? { ...n } : { ...s } : a4 === c ? { ...i } : { ...o }, d2.ssrc = e5.ssrc, m2[e5.type][e5.ssrc] = d2), Object.keys(e5.value).forEach((t5) => {
                              void 0 !== e5.value[t5] && (d2[t5] = e5.value[t5]);
                            });
                          } else
                            Object.keys(e5.value).forEach((t5) => {
                              void 0 !== e5.value[t5] && (m2[e5.type][t5] = e5.value[t5]);
                            });
                        var t4, a4;
                      });
                    }), m2.timestamp = f2, m2;
                  }
                  async collectStats() {
                    try {
                      const e5 = await this._config.monitoringObject.getStats(), t4 = this.analyze(
                        e5,
                        this._statsReports.slice().pop() || null
                      );
                      return this._statsReports.push(t4), this.fireOnStatsCollected(t4), e5;
                    } catch (e5) {
                      return re(this._moduleName, `got error ${e5}`), null;
                    }
                  }
                  fireOnStatsCollected(r3) {
                    if (this._callbacks.onStatsCollected) {
                      const a3 = {};
                      a3.meetingId = r3.meetingId, a3.peerId = r3.peerId, a3.name = r3.name, a3.audio = [], a3.video = [], Object.values(r3.audio).forEach((n2) => {
                        const s2 = {};
                        if (s2.network = z[r3.network.infrastructure], s2.timestamp = r3.timestamp, n2.direction == e4) {
                          s2.codec = n2.codec_in.mime_type, s2.jitter = n2.delta_jitter_ms_in, s2.bitrate = n2.delta_kbs_in, s2.packetsLost = n2.delta_packets_lost_in, s2.rtt = r3.data.delta_rtt_connectivity_ms || 0, s2.totalPackets = n2.delta_packets_in, s2.concealmentEvents = n2.delta_concealment_events, s2.removedSampleForAccelaration = n2.delta_removed_samples_for_accelaration, s2.insertedSamplesForDecelaration = n2.delta_inserted_samples_for_decelaration;
                          const e5 = JSON.stringify(n2.track_id_in).replace(
                            /[{}"]/g,
                            ""
                          );
                          s2.trackId = e5;
                        } else
                          n2.direction == t3 && (s2.codec = n2.codec_out.mime_type, s2.jitter = n2.delta_jitter_ms_out, s2.bitrate = n2.delta_kbs_out, s2.packetsLost = n2.delta_packets_lost_out, s2.rtt = r3.data.delta_rtt_connectivity_ms || 0, s2.totalPackets = n2.delta_packets_out, s2.trackId = n2.track_id_out);
                        a3.audio.push(s2);
                      }), Object.values(r3.video).forEach((n2) => {
                        const s2 = {};
                        if (s2.network = z[r3.network.infrastructure], s2.timestamp = r3.timestamp, n2.direction == e4) {
                          s2.codec = n2.codec_in.mime_type, s2.jitter = n2.delta_jitter_ms_in, s2.bitrate = n2.delta_kbs_in, s2.packetsLost = n2.delta_packets_lost_in, s2.rtt = r3.data.delta_rtt_connectivity_ms || 0, s2.totalPackets = n2.delta_packets_in, s2.size = n2.size_in;
                          const e5 = JSON.stringify(n2.track_id_in).replace(
                            /[{}"]/g,
                            ""
                          );
                          s2.trackId = e5;
                        } else
                          n2.direction == t3 && (s2.codec = n2.codec_out.mime_type, s2.jitter = n2.delta_jitter_ms_out, s2.bitrate = n2.delta_kbs_out, s2.packetsLost = n2.delta_packets_lost_out, s2.rtt = r3.data.delta_rtt_connectivity_ms || 0, s2.totalPackets = n2.delta_packets_out, s2.limitation = n2.limitation_out, s2.size = n2.size_out, s2.trackId = n2.track_id_out);
                        a3.video.push(s2);
                      }), this._callbacks.onStatsCollected.callback(a3);
                    }
                  }
                }
                class he {
                  constructor(e5) {
                    this._id = e5.name && e5.name.substr(0, 12).padEnd(12, " "), this._moduleName = this._id, this._config = e5, this._collector = new ue(this._config, this._id);
                  }
                  get id() {
                    return this._id;
                  }
                  start() {
                    this._collectorIntervalId ? te("Probe already started.") : (ee(this._moduleName, "Probe Started"), this._collectorIntervalId = setInterval(() => {
                      ee(this._moduleName, "Collector collecting stats"), this._collector.collectStats();
                    }, this._config.refreshEvery));
                  }
                  stop() {
                    this._collectorIntervalId ? (clearInterval(this._collectorIntervalId), ee(this._moduleName, "Probe Stopped")) : te("Probe not running, Please start first.");
                  }
                  set onStatsCollected(e5) {
                    e5 ? this._collector.registerCallback(
                      "onStatsCollected",
                      e5
                    ) : this._collector.unregisterCallback(
                      "onStatsCollected"
                    );
                  }
                }
                const me = {
                  refreshEvery: 2e3,
                  startAfter: 0,
                  stopAfter: -1,
                  verbose: false,
                  peerId: "peerId",
                  meetingId: "meetingId",
                  name: "name"
                };
                class fe {
                  constructor(e5) {
                    var t4;
                    this._config = { defaultConfig: me, ...e5 }, this._probes = [], t4 = this._config.verbose || false, Y.setLevel(t4 ? Y.levels.TRACE : Y.levels.INFO), ee("VideoSDKMetrics", "VideoSDKMetrics initialized");
                  }
                  get probes() {
                    return this._probes;
                  }
                  addNewProbe(e5, t4) {
                    if (!e5) throw new Error("undefined monitoring object");
                    const r3 = { monitoringObject: e5, ...t4, ...this._config }, a3 = new he(r3);
                    return this._probes.push(a3), a3;
                  }
                  removeExistingProbe(e5) {
                    if (!e5) throw new Error("undefined probe");
                    e5.stop(), this._probes = this._probes.filter(
                      (t4) => e5.id !== t4.id
                    );
                  }
                  getProbe(e5) {
                    for (let t4 of this.probes) if (t4.id == e5) return t4;
                  }
                  startAllProbes() {
                    this._probes.forEach((e5, t4) => {
                      e5.start();
                    });
                  }
                  stopAllProbes() {
                    this._probes.forEach((e5) => e5.stop());
                  }
                }
              })(), a2;
            })();
          },
          8274: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Logger = void 0;
            const a2 = r2(7833), n = "awaitqueue";
            t2.Logger = class {
              constructor(e3) {
                e3 ? (this._debug = (0, a2.default)(`${n}:${e3}`), this._warn = (0, a2.default)(`${n}:WARN:${e3}`), this._error = (0, a2.default)(`${n}:ERROR:${e3}`)) : (this._debug = (0, a2.default)(n), this._warn = (0, a2.default)(`${n}:WARN`), this._error = (0, a2.default)(`${n}:ERROR`)), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
              }
              get debug() {
                return this._debug;
              }
              get warn() {
                return this._warn;
              }
              get error() {
                return this._error;
              }
            };
          },
          8876: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.AwaitQueue = t2.AwaitQueueRemovedTaskError = t2.AwaitQueueStoppedError = void 0;
            const a2 = new (r2(8274)).Logger();
            class n extends Error {
              constructor(e3) {
                super(e3 ?? "AwaitQueue stopped"), this.name = "AwaitQueueStoppedError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(this, n);
              }
            }
            t2.AwaitQueueStoppedError = n;
            class s extends Error {
              constructor(e3) {
                super(e3 ?? "AwaitQueue task removed"), this.name = "AwaitQueueRemovedTaskError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(this, s);
              }
            }
            t2.AwaitQueueRemovedTaskError = s;
            t2.AwaitQueue = class {
              constructor() {
                this.pendingTasks = /* @__PURE__ */ new Map(), this.nextTaskId = 0, this.stopping = false;
              }
              get size() {
                return this.pendingTasks.size;
              }
              async push(e3, t3) {
                if (t3 = t3 ?? e3.name, a2.debug(`push() [name:${t3}]`), "function" != typeof e3)
                  throw new TypeError("given task is not a function");
                if (t3)
                  try {
                    Object.defineProperty(e3, "name", { value: t3 });
                  } catch (e4) {
                  }
                return new Promise((r3, n2) => {
                  const s2 = {
                    id: this.nextTaskId++,
                    task: e3,
                    name: t3,
                    enqueuedAt: Date.now(),
                    executedAt: void 0,
                    completed: false,
                    resolve: (e4) => {
                      if (s2.completed) return;
                      s2.completed = true, this.pendingTasks.delete(s2.id), a2.debug(`resolving task [name:${s2.name}]`), r3(e4);
                      const [t4] = this.pendingTasks.values();
                      t4 && !t4.executedAt && this.execute(t4);
                    },
                    reject: (e4) => {
                      if (!s2.completed && (s2.completed = true, this.pendingTasks.delete(s2.id), a2.debug(`rejecting task [name:${s2.name}]: %s`, String(e4)), n2(e4), !this.stopping)) {
                        const [e5] = this.pendingTasks.values();
                        e5 && !e5.executedAt && this.execute(e5);
                      }
                    }
                  };
                  this.pendingTasks.set(s2.id, s2), 1 === this.pendingTasks.size && this.execute(s2);
                });
              }
              stop() {
                a2.debug("stop()"), this.stopping = true;
                for (const e3 of this.pendingTasks.values())
                  a2.debug(`stop() | stopping task [name:${e3.name}]`), e3.reject(new n());
                this.stopping = false;
              }
              remove(e3) {
                a2.debug(`remove() [taskIdx:${e3}]`);
                const t3 = Array.from(this.pendingTasks.values())[e3];
                t3 ? t3.reject(new s()) : a2.debug(`stop() | no task with given idx [taskIdx:${e3}]`);
              }
              dump() {
                const e3 = Date.now();
                let t3 = 0;
                return Array.from(this.pendingTasks.values()).map((r3) => ({
                  idx: t3++,
                  task: r3.task,
                  name: r3.name,
                  enqueuedTime: r3.executedAt ? r3.executedAt - r3.enqueuedAt : e3 - r3.enqueuedAt,
                  executionTime: r3.executedAt ? e3 - r3.executedAt : 0
                }));
              }
              async execute(e3) {
                if (a2.debug(`execute() [name:${e3.name}]`), e3.executedAt)
                  throw new Error("task already being executed");
                e3.executedAt = Date.now();
                try {
                  const t3 = await e3.task();
                  e3.resolve(t3);
                } catch (t3) {
                  e3.reject(t3);
                }
              }
            };
          },
          9027: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { $: () => a2 });
            var a2 = {
              networkPriorities: {
                audio: "high",
                dominatingVideo: "high",
                otherVideos: "medium",
                screenShare: "medium"
              },
              aspectRatios: {
                fourThree: { label: "fourThree", value: 1.333 },
                oneSixNine: { label: "oneSixNine", value: 1.777 }
              },
              audioProfiles: {
                speech_low_quality: {
                  sampleRate: 16e3,
                  bitRate: 24,
                  sampleSize: 16,
                  stereo: false,
                  dtx: true,
                  fec: true,
                  maxPlaybackRate: 16e3,
                  packetTime: 20,
                  autoGainControl: true,
                  echoCancellation: true,
                  noiseSuppression: true,
                  channelCount: 1
                },
                speech_standard: {
                  sampleRate: 32e3,
                  bitRate: 24,
                  sampleSize: 24,
                  stereo: false,
                  dtx: true,
                  fec: true,
                  maxPlaybackRate: 32e3,
                  packetTime: 30,
                  autoGainControl: true,
                  echoCancellation: true,
                  noiseSuppression: true,
                  channelCount: 1
                },
                music_standard: {
                  sampleRate: 48e3,
                  bitRate: 40,
                  sampleSize: 32,
                  stereo: false,
                  dtx: false,
                  fec: true,
                  maxPlaybackRate: 48e3,
                  packetTime: 40,
                  autoGainControl: false,
                  echoCancellation: false,
                  noiseSuppression: false,
                  channelCount: 1
                },
                standard_stereo: {
                  sampleRate: 48e3,
                  sampleSize: 32,
                  bitRate: 64,
                  stereo: true,
                  dtx: false,
                  fec: true,
                  maxPlaybackRate: 48e3,
                  packetTime: 40,
                  autoGainControl: false,
                  echoCancellation: false,
                  noiseSuppression: false,
                  channelCount: 2
                },
                high_quality: {
                  sampleRate: 48e3,
                  sampleSize: 32,
                  bitRate: 128,
                  stereo: false,
                  dtx: false,
                  fec: true,
                  maxPlaybackRate: 48e3,
                  packetTime: 60,
                  autoGainControl: false,
                  echoCancellation: false,
                  noiseSuppression: false,
                  channelCount: 1
                },
                high_quality_stereo: {
                  sampleRate: 48e3,
                  sampleSize: 32,
                  bitRate: 192,
                  stereo: true,
                  dtx: false,
                  fec: true,
                  maxPlaybackRate: 48e3,
                  packetTime: 60,
                  autoGainControl: false,
                  echoCancellation: false,
                  noiseSuppression: false,
                  channelCount: 2
                }
              },
              videoProfiles: {
                h90p_w160p: {
                  width: 160,
                  height: 90,
                  bitRate: 6e4,
                  frameRate: 15,
                  aspectRatio: "oneSixNine"
                },
                h180p_w320p: {
                  width: 320,
                  height: 180,
                  bitRate: 12e4,
                  frameRate: 15,
                  aspectRatio: "oneSixNine"
                },
                h216p_w384p: {
                  width: 384,
                  height: 216,
                  bitRate: 18e4,
                  frameRate: 15,
                  aspectRatio: "oneSixNine"
                },
                h360p_w640p: {
                  width: 640,
                  height: 360,
                  bitRate: 3e5,
                  frameRate: 20,
                  aspectRatio: "oneSixNine"
                },
                h540p_w960p: {
                  width: 960,
                  height: 540,
                  bitRate: 6e5,
                  frameRate: 25,
                  aspectRatio: "oneSixNine"
                },
                h720p_w1280p: {
                  width: 1280,
                  height: 720,
                  bitRate: 2e6,
                  frameRate: 30,
                  aspectRatio: "oneSixNine"
                },
                h1080p_w1920p: {
                  width: 1920,
                  height: 1080,
                  bitRate: 3e6,
                  frameRate: 30,
                  aspectRatio: "oneSixNine"
                },
                h1440p_w2560p: {
                  width: 2560,
                  height: 1440,
                  bitRate: 5e6,
                  frameRate: 30,
                  aspectRatio: "oneSixNine"
                },
                h2160p_w3840p: {
                  width: 3840,
                  height: 2160,
                  bitRate: 8e6,
                  frameRate: 30,
                  aspectRatio: "oneSixNine"
                },
                h120p_w160p: {
                  width: 160,
                  height: 120,
                  bitRate: 8e4,
                  frameRate: 15,
                  aspectRatio: "fourThree"
                },
                h180p_w240p: {
                  width: 240,
                  height: 180,
                  bitRate: 1e5,
                  frameRate: 15,
                  aspectRatio: "fourThree"
                },
                h240p_w320p: {
                  width: 320,
                  height: 240,
                  bitRate: 15e4,
                  frameRate: 15,
                  aspectRatio: "fourThree"
                },
                h360p_w480p: {
                  width: 480,
                  height: 360,
                  bitRate: 225e3,
                  frameRate: 20,
                  aspectRatio: "fourThree"
                },
                h480p_w640p: {
                  width: 640,
                  height: 480,
                  bitRate: 3e5,
                  frameRate: 25,
                  aspectRatio: "fourThree"
                },
                h540p_w720p: {
                  width: 720,
                  height: 540,
                  bitRate: 45e4,
                  frameRate: 30,
                  aspectRatio: "fourThree"
                },
                h720p_w960p: {
                  width: 960,
                  height: 720,
                  bitRate: 15e5,
                  frameRate: 30,
                  aspectRatio: "fourThree"
                },
                h1080p_w1440p: {
                  width: 1440,
                  height: 1080,
                  bitRate: 25e5,
                  frameRate: 30,
                  aspectRatio: "fourThree"
                },
                h1440p_w1920p: {
                  width: 1920,
                  height: 1440,
                  bitRate: 35e5,
                  frameRate: 30,
                  aspectRatio: "fourThree"
                }
              },
              screenShareProfiles: {
                h360p_30fps: {
                  width: 640,
                  height: 360,
                  bitRate: 2e5,
                  frameRate: 30
                },
                h720p_5fps: {
                  width: 1280,
                  height: 720,
                  bitRate: 4e5,
                  frameRate: 5
                },
                h720p_15fps: {
                  width: 1280,
                  height: 720,
                  bitRate: 1e6,
                  frameRate: 15
                },
                h1080p_15fps: {
                  width: 1920,
                  height: 1080,
                  bitRate: 15e5,
                  frameRate: 15
                },
                h1080p_30fps: {
                  width: 1920,
                  height: 1080,
                  bitRate: 1e6,
                  frameRate: 30
                }
              },
              simulcastProfiles: {
                3840: [
                  { scaleResolutionDownBy: 12, maxBitRate: 15e4 },
                  { scaleResolutionDownBy: 6, maxBitRate: 5e5 },
                  { scaleResolutionDownBy: 1, maxBitRate: 1e7 }
                ],
                1920: [
                  { scaleResolutionDownBy: 6, maxBitRate: 15e4 },
                  { scaleResolutionDownBy: 3, maxBitRate: 5e5 },
                  { scaleResolutionDownBy: 1, maxBitRate: 35e5 }
                ],
                1280: [
                  { scaleResolutionDownBy: 4, maxBitRate: 15e4 },
                  { scaleResolutionDownBy: 2, maxBitRate: 5e5 },
                  { scaleResolutionDownBy: 1, maxBitRate: 12e5 }
                ],
                640: [
                  { scaleResolutionDownBy: 2, maxBitRate: 15e4 },
                  { scaleResolutionDownBy: 1, maxBitRate: 5e5 }
                ],
                320: [{ scaleResolutionDownBy: 1, maxBitRate: 15e4 }]
              },
              requestTimeout: 2e4,
              requestRetries: 3,
              transportOptions: { tcp: true },
              videoKSVCEncodings: [{ scalabilityMode: "S3T3_KEY" }],
              videoSVCEncodings: [{ scalabilityMode: "S3T3", dtx: true }]
            };
          },
          7080: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { q: () => n, s: () => a2 });
            var a2 = {
              INVALID_API_KEY: 4001,
              INVALID_TOKEN: 4002,
              INVALID_MEETING_ID: 4003,
              INVALID_PARTICIPANT_ID: 4004,
              DUPLICATE_PARTICIPANT: 4005,
              ACCOUNT_DEACTIVATED: 4006,
              ACCOUNT_DISCONTINUED: 4007,
              INVALID_PERMISSIONS: 4008,
              MAX_PARTCIPANT_REACHED: 4009,
              MAX_SPEAKER_REACHED: 4010,
              START_RECORDING_FAILED: 4011,
              STOP_RECORDING_FAILED: 4012,
              START_LIVESTREAM_FAILED: 4013,
              STOP_LIVESTREAM_FAILED: 4014,
              INVALID_LIVESTREAM_CONFIG: 4015,
              START_HLS_FAILED: 4016,
              STOP_HLS_FAILED: 4017,
              START_TRANSCRIPTION_FAILED: 4031,
              STOP_TRANSCRIPTION_FAILED: 4032,
              RECORDING_FAILED: 5001,
              LIVESTREAM_FAILED: 5002,
              HLS_FAILED: 5003,
              TRANSCRIPTION_FAILED: 5007,
              ERROR_GET_VIDEO_MEDIA: 3011,
              ERROR_GET_AUDIO_MEDIA: 3012,
              ERROR_GET_DISPLAY_MEDIA: 3013,
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: 3014,
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: 3015,
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: 3016,
              ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED: 3017,
              ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED: 3018,
              ERROR_CAMERA_PERMISSION_DENIED_BY_OS: 3019,
              ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS: 3020,
              ERROR_CAMERA_NOT_FOUND: 3021,
              ERROR_MICROPHONE_NOT_FOUND: 3022,
              ERROR_CAMERA_IN_USE: 3023,
              ERROR_MICROPHONE_IN_USE: 3024,
              ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE: 3025,
              ERROR_VIDEO_SOURCE_INITIATION_FAILED: 3026,
              ERROR_WEBCAM_TRACK_ENDED: 3027,
              ERROR_MICROPHONE_TRACK_ENDED: 3028,
              ERROR_INVALID_CUSTOM_VIDEO_TRACK: 3029,
              ERROR_INVALID_CUSTOM_AUDIO_TRACK: 3030,
              ERROR_CUSTOM_VIDEO_TRACK_ENDED: 3031,
              ERROR_CUSTOM_AUDIO_TRACK_ENDED: 3032,
              ERROR_CAMERA_ACCESS_UNAVAILABLE: 3033,
              ERROR_MICROPHONE_ACCESS_UNAVAILABLE: 3034,
              ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED: 3035,
              ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED: 3036,
              ERROR_RN_CAMERA_NOT_FOUND: 3037,
              ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED: 3038,
              ERROR_RN_MIC_NOT_FOUND: 3039,
              ERROR_RN_CAMERA_ACCESS_UNAVAILABLE: 3040,
              ERROR_RN_MIC_ACCESS_UNAVAILABLE: 3041,
              ERROR_RN_CAMERA_TRACK_ENDED: 3042,
              ERROR_RN_MIC_TRACK_ENDED: 3043
            }, n = {
              ERROR_GET_VIDEO_MEDIA: {
                code: 3011,
                message: "Your browser/Device does not support Video."
              },
              ERROR_GET_AUDIO_MEDIA: {
                code: 3012,
                message: "Your browser/Device does not support Audio."
              },
              ERROR_GET_DISPLAY_MEDIA: {
                code: 3013,
                message: "Your browser/Device does not support Screen Sharing."
              },
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: {
                code: 3014,
                message: "Video capture permission denied."
              },
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: {
                code: 3015,
                message: "Audio capture permission denied."
              },
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: {
                code: 3016,
                message: "Screen sharing permission denied."
              },
              ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED: {
                code: 3017,
                message: "Oops! It seems like camera access was denied or dismissed. To proceed, kindly grant access through your browser settings."
              },
              ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED: {
                code: 3018,
                message: "Oops! It seems like microphone access was denied or dismissed. To proceed, kindly grant access through your browser settings."
              },
              ERROR_CAMERA_PERMISSION_DENIED_BY_OS: {
                code: 3019,
                message: "Camera permission denied by OS system settings. Please check the system settings and grant permission for this browser."
              },
              ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS: {
                code: 3020,
                message: "Microphone permission denied by OS system settings. Please check the system settings and grant permission for this browser."
              },
              ERROR_CAMERA_NOT_FOUND: {
                code: 3021,
                message: "Please ensure your camera is connected and turned on, and that the camera driver is installed and up-to-date."
              },
              ERROR_MICROPHONE_NOT_FOUND: {
                code: 3022,
                message: "Please ensure your microphone is connected and turned on."
              },
              ERROR_CAMERA_IN_USE: {
                code: 3023,
                message: "The camera is being used by another application. Please close any programs utilizing the camera, such as video conferencing tools, screen recording software, or other browsers. Restart your browser and attempt again."
              },
              ERROR_MICROPHONE_IN_USE: {
                code: 3024,
                message: "The microphone is being used by another application. Please close any programs utilizing the microphone, such as video conferencing tools, screen recording software, or other browsers. Restart your browser and attempt again."
              },
              ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE: {
                code: 3025,
                message: "It seems like there's an issue with camera permission or video autoplay, you can check out this link for details: http://tinyurl.com/autoplay-issue"
              },
              ERROR_VIDEO_SOURCE_INITIATION_FAILED: {
                code: 3026,
                message: "Unable to initiate video source. Please verify browser settings for video permissions."
              },
              ERROR_WEBCAM_TRACK_ENDED: {
                code: 3027,
                message: "Webcam track has ended or the webcam is disconnected. Please ensure your webcam is properly connected and try restarting it."
              },
              ERROR_MICROPHONE_TRACK_ENDED: {
                code: 3028,
                message: "Microphone track has ended or the microphone is disconnected. Please check your microphone connection and try again."
              },
              ERROR_INVALID_CUSTOM_VIDEO_TRACK: {
                code: 3029,
                message: "The provided custom video track is invalid; reverting to the default video track. Please ensure that the video track meets the required specifications."
              },
              ERROR_INVALID_CUSTOM_AUDIO_TRACK: {
                code: 3030,
                message: "The provided custom audio track is invalid; reverting to the default audio track. Please ensure that the audio track meets the required specifications."
              },
              ERROR_CUSTOM_VIDEO_TRACK_ENDED: {
                code: 3031,
                message: "The provided custom video track is in an ended state. Please verify the video track's status, and try again."
              },
              ERROR_CUSTOM_AUDIO_TRACK_ENDED: {
                code: 3032,
                message: "The provided custom audio track is in an ended state. Please verify the audio track's status, and try again."
              },
              ERROR_CAMERA_ACCESS_UNAVAILABLE: {
                code: 3033,
                message: "Camera access unavailable: Please ensure your device is compatible and that you're on a secure website (https://)."
              },
              ERROR_MICROPHONE_ACCESS_UNAVAILABLE: {
                code: 3034,
                message: "Microphone access unavailable: Please ensure your device is compatible and that you're on a secure website (https://)."
              },
              ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED: {
                code: 3035,
                message: "Oops! Something went wrong. The room was in a connecting state, and during that time, an action encountered an issue. Please try again after joining a meeting."
              },
              ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED: {
                code: 3036,
                message: "Oops! It seems like camera access was denied or dismissed. To proceed, kindly grant access through your App settings."
              },
              ERROR_RN_CAMERA_NOT_FOUND: {
                code: 3037,
                message: "Please ensure your camera is connected and turned on"
              },
              ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED: {
                code: 3038,
                message: "Oops! It seems like mic access was denied or dismissed. To proceed, kindly grant access through your App settings."
              },
              ERROR_RN_MIC_NOT_FOUND: {
                code: 3039,
                message: "Please ensure your mic is connected and turned on"
              },
              ERROR_RN_CAMERA_ACCESS_UNAVAILABLE: {
                code: 3040,
                message: "Camera access unavailable: Please ensure your device is compatible."
              },
              ERROR_RN_MIC_ACCESS_UNAVAILABLE: {
                code: 3041,
                message: "Microphone access unavailable: Please ensure your device is compatible."
              },
              ERROR_RN_CAMERA_TRACK_ENDED: {
                code: 3042,
                message: "Camera track has ended. Please make sure your camera is turned on or try restarting it."
              },
              ERROR_RN_MIC_TRACK_ENDED: {
                code: 3043,
                message: "Microphone track has ended or the microphone is disconnected. Please check your microphone connection and try again."
              }
            };
          },
          5071: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { V: () => a2 });
            var a2 = {
              HLS_STARTING: "HLS_STARTING",
              HLS_STARTED: "HLS_STARTED",
              HLS_PLAYABLE: "HLS_PLAYABLE",
              HLS_STOPPING: "HLS_STOPPING",
              HLS_STOPPED: "HLS_STOPPED"
            };
          },
          2107: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { n: () => a2 });
            var a2 = { CONFERENCE: "CONFERENCE", VIEWER: "VIEWER" };
          },
          2487: (e2, t2, r2) => {
            "use strict";
            r2.r(t2), r2.d(t2, { default: () => Xe });
            var a2 = r2(296), n = r2(2284), s = r2(467), i = r2(3029), o = r2(2901), c = r2(4467), d = r2(4756), l = r2.n(d), p = r2(9566), u = r2(76), h = r2(7833), m = r2.n(h), f = "mediasoup-demo", g = function() {
              return (0, o.A)(
                function e3(t3) {
                  (0, i.A)(this, e3), t3 ? (this._debug = m()("".concat(f, ":").concat(t3)), this._warn = m()("".concat(f, ":WARN:").concat(t3)), this._error = m()("".concat(f, ":ERROR:").concat(t3))) : (this._debug = m()(f), this._warn = m()("".concat(f, ":WARN")), this._error = m()("".concat(f, ":ERROR"))), m().disable(), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
                },
                [
                  {
                    key: "debug",
                    get: function() {
                      return this._debug;
                    }
                  },
                  {
                    key: "warn",
                    get: function() {
                      return this._warn;
                    }
                  },
                  {
                    key: "error",
                    get: function() {
                      return this._error;
                    }
                  }
                ]
              );
            }(), _ = r2(1396), v = _.enc.Latin1.parse(
              "6gf9Oz5Y(6fOWPP@3XPv0Mwp51yfJ0HiZW^0*!9NdUuZ*VdKmRC@f))&^!Iriw)q"
            ), b = _.enc.Latin1.parse("BHrabik^$W^y*HL@A*$4YKj(");
            function y(e3) {
              return w.apply(this, arguments);
            }
            function w() {
              return (w = (0, s.A)(
                l().mark(function e3(t3) {
                  var r3, a3, n2, s2, i2, o2, c2, d2, p2, u2, h2, m2, f2;
                  return l().wrap(function(e4) {
                    for (; ; )
                      switch (e4.prev = e4.next) {
                        case 0:
                          return r3 = t3.roomId, a3 = t3.secret, n2 = t3.signalingBaseUrl, s2 = "call-api.videosdk.live", i2 = [], o2 = null, c2 = {}, d2 = {}, p2 = {}, u2 = null, e4.next = 10, fetch(
                            "https://".concat(
                              n2,
                              "/infra/v1/meetings/init-config"
                            ),
                            {
                              method: "POST",
                              headers: {
                                Authorization: a3,
                                "Content-Type": "application/json"
                              },
                              body: JSON.stringify({ roomId: r3 })
                            }
                          ).then(function(e5) {
                            return e5.json();
                          }).catch(function(e5) {
                            return {};
                          });
                        case 10:
                          return h2 = e4.sent, (m2 = h2.data) && (s2 = m2.baseUrl, f2 = m2.observability, i2 = S(m2.iceServers), o2 = f2.jwt, c2 = f2.traces, d2 = f2.logs, p2 = f2.metaData, u2 = m2.signalingUrl), e4.abrupt("return", {
                            baseUrl: s2,
                            iceServers: i2,
                            observabilityJwt: o2,
                            traces: c2,
                            logs: d2,
                            metaData: p2,
                            signalingUrl: u2
                          });
                        case 14:
                        case "end":
                          return e4.stop();
                      }
                  }, e3);
                })
              )).apply(this, arguments);
            }
            function S(e3) {
              try {
                var t3 = _.AES.decrypt(e3, v, {
                  iv: b,
                  mode: _.mode.CBC,
                  padding: _.pad.ZeroPadding
                }).toString(_.enc.Utf8);
                return JSON.parse(t3);
              } catch (e4) {
                return [];
              }
            }
            var R = r2(2215), E = r2.n(R), k = "mediasoup-demo.user", T = "mediasoup-demo.devices";
            function C(e3) {
              var t3 = e3.displayName;
              E().set(k, { displayName: t3 });
            }
            function P() {
              return E().getJSON(T);
            }
            var O = r2(2211), D = r2.n(O), x = function(e3) {
              return { type: "SET_ROOM_STATE", payload: { state: e3 } };
            }, I = function(e3) {
              return {
                type: "SET_ROOM_ACTIVE_SPEAKER",
                payload: { peerId: e3 }
              };
            }, M = function(e3) {
              return { type: "SET_ROOM_STATS_PEER_ID", payload: { peerId: e3 } };
            }, A = function(e3) {
              return {
                type: "SET_MEDIA_CAPABILITIES",
                payload: {
                  canSendMic: e3.canSendMic,
                  canSendWebcam: e3.canSendWebcam
                }
              };
            }, L = function(e3) {
              return { type: "SET_DISPLAY_NAME", payload: { displayName: e3 } };
            }, N = function(e3) {
              return { type: "SET_AUDIO_ONLY_STATE", payload: { enabled: e3 } };
            }, j = function(e3) {
              return {
                type: "SET_AUDIO_ONLY_IN_PROGRESS",
                payload: { flag: e3 }
              };
            }, B = function(e3) {
              return { type: "SET_AUDIO_MUTED_STATE", payload: { enabled: e3 } };
            }, F = function(e3) {
              return {
                type: "SET_RESTART_ICE_IN_PROGRESS",
                payload: { flag: e3 }
              };
            }, U = function(e3) {
              return { type: "ADD_PRODUCER", payload: { producer: e3 } };
            }, W = function(e3) {
              return { type: "REMOVE_PRODUCER", payload: { producerId: e3 } };
            }, q = function(e3, t3) {
              return {
                type: "SET_PRODUCER_TRACK",
                payload: { producerId: e3, track: t3 }
              };
            }, H = function(e3, t3) {
              return {
                type: "SET_PRODUCER_SCORE",
                payload: { producerId: e3, score: t3 }
              };
            }, V = function(e3) {
              return {
                type: "ADD_DATA_PRODUCER",
                payload: { dataProducer: e3 }
              };
            }, G = function(e3) {
              return { type: "SET_WEBCAM_IN_PROGRESS", payload: { flag: e3 } };
            }, z = function(e3) {
              return { type: "SET_SHARE_IN_PROGRESS", payload: { flag: e3 } };
            }, $ = function(e3) {
              return { type: "ADD_PEER", payload: { peer: e3 } };
            }, K = function(e3) {
              return { type: "REMOVE_PEER", payload: { peerId: e3 } };
            }, J = function(e3, t3) {
              return {
                type: "SET_PEER_DISPLAY_NAME",
                payload: { displayName: e3, peerId: t3 }
              };
            }, Q = function(e3, t3) {
              return {
                type: "ADD_CONSUMER",
                payload: { consumer: e3, peerId: t3 }
              };
            }, Y = function(e3, t3) {
              return {
                type: "REMOVE_CONSUMER",
                payload: { consumerId: e3, peerId: t3 }
              };
            }, X = function(e3, t3) {
              return {
                type: "SET_CONSUMER_PAUSED",
                payload: { consumerId: e3, originator: t3 }
              };
            }, Z = function(e3, t3) {
              return {
                type: "SET_CONSUMER_RESUMED",
                payload: { consumerId: e3, originator: t3 }
              };
            }, ee = function(e3, t3, r3) {
              return {
                type: "SET_CONSUMER_CURRENT_LAYERS",
                payload: { consumerId: e3, spatialLayer: t3, temporalLayer: r3 }
              };
            }, te = function(e3, t3, r3) {
              return {
                type: "SET_CONSUMER_PREFERRED_LAYERS",
                payload: { consumerId: e3, spatialLayer: t3, temporalLayer: r3 }
              };
            }, re = function(e3, t3) {
              return {
                type: "SET_CONSUMER_PRIORITY",
                payload: { consumerId: e3, priority: t3 }
              };
            }, ae = function(e3, t3) {
              return {
                type: "SET_CONSUMER_SCORE",
                payload: { consumerId: e3, score: t3 }
              };
            }, ne = function(e3, t3) {
              return {
                type: "ADD_DATA_CONSUMER",
                payload: { dataConsumer: e3, peerId: t3 }
              };
            }, se = function(e3, t3) {
              return {
                type: "REMOVE_DATA_CONSUMER",
                payload: { dataConsumerId: e3, peerId: t3 }
              };
            }, ie = function(e3) {
              var t3 = e3.type, r3 = void 0 === t3 ? "info" : t3, a3 = e3.text, n2 = e3.title, s2 = e3.timeout;
              if (!s2)
                switch (r3) {
                  case "info":
                    s2 = 3e3;
                    break;
                  case "error":
                    s2 = 5e3;
                }
              var i2 = {
                id: D()({ length: 6 }).toLowerCase(),
                type: r3,
                title: n2,
                text: a3,
                timeout: s2
              };
              return function(e4) {
                e4(
                  /* @__PURE__ */ function(e5) {
                    return {
                      type: "ADD_NOTIFICATION",
                      payload: { notification: e5 }
                    };
                  }(i2)
                ), setTimeout(function() {
                  e4({
                    type: "REMOVE_NOTIFICATION",
                    payload: { notificationId: i2.id }
                  });
                }, s2);
              };
            }, oe = r2(7007), ce = r2(9027);
            function de(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var a3 = Object.getOwnPropertySymbols(e3);
                t3 && (a3 = a3.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, a3);
              }
              return r3;
            }
            var le = {}, pe = {}, ue = {};
            for (var he in ce.$.videoProfiles)
              "oneSixNine" == ce.$.videoProfiles[he].aspectRatio && (le[he] = ce.$.videoProfiles[he], le[he].encoding = {
                maxBitrate: le[he].bitRate,
                maxFramerate: le[he].frameRate
              }), "fourThree" == ce.$.videoProfiles[he].aspectRatio && (pe[he] = ce.$.videoProfiles[he], pe[he].encoding = {
                maxBitrate: pe[he].bitRate,
                maxFramerate: pe[he].frameRate
              });
            for (var he in ce.$.screenShareProfiles)
              ue[he] = ce.$.screenShareProfiles[he], ue[he].encoding = {
                maxBitrate: ue[he].bitRate,
                maxFramerate: ue[he].frameRate
              };
            var me = Object.values(le), fe = Object.values(pe), ge = Object.values(ue), _e = [le.h180p_w320p, le.h360p_w640p], ve = [pe.h180p_w240p, pe.h360p_w480p], be = function(e3) {
              return [{ scaleResolutionDownBy: 2, fps: 3 }].map(function(t3) {
                var r3;
                return {
                  width: Math.floor(e3.width / t3.scaleResolutionDownBy),
                  height: Math.floor(e3.height / t3.scaleResolutionDownBy),
                  encodings: {
                    maxBitrate: Math.max(
                      15e4,
                      Math.floor(
                        e3.encoding.maxBitrate / (Math.pow(t3.scaleResolutionDownBy, 2) * ((null !== (r3 = e3.encoding.maxFramerate) && void 0 !== r3 ? r3 : 30) / t3.fps))
                      )
                    ),
                    maxFramerate: t3.fps
                  }
                };
              });
            }, ye = ["q", "h", "f"];
            function we(e3, t3, r3, n2, s2) {
              var i2 = n2 && n2.videoEncoding;
              e3 && (i2 = n2 && n2.screenShareEncoding);
              var o2 = null == n2 ? void 0 : n2.simulcast;
              if (i2 || (i2 = function(e4, t4, r4) {
                for (var a3 = function(e5, t5, r5) {
                  if (e5) return ge;
                  var a4 = t5 > r5 ? t5 / r5 : r5 / t5;
                  if (Math.abs(a4 - 16 / 9) < Math.abs(a4 - 4 / 3))
                    return me;
                  return fe;
                }(e4, t4, r4), n3 = a3[0].encoding, s3 = Math.max(t4, r4), i3 = 0; i3 < a3.length; i3 += 1) {
                  var o3 = a3[i3];
                  if (n3 = o3.encoding, o3.width >= s3) break;
                }
                return n3;
              }(e3, t3, r3)), !o2)
                return [i2];
              var c2, d2 = {
                width: t3,
                height: r3,
                encoding: {
                  maxBitrate: i2.maxBitrate,
                  maxFramerate: i2.maxFramerate
                }
              }, l2 = [], p2 = (l2 = Se(e3, d2))[0];
              if (l2.length > 1) {
                var u2 = l2;
                c2 = (0, a2.A)(u2, 2)[1];
              }
              var h2 = Math.max(t3, r3);
              return Re(
                t3,
                r3,
                h2 >= 960 && c2 ? [p2, c2, d2] : h2 >= 480 ? [p2, d2] : [d2],
                s2
              );
            }
            function Se(e3, t3) {
              if (e3) be(t3);
              var r3 = t3.width, a3 = t3.height, n2 = r3 > a3 ? r3 / a3 : a3 / r3;
              return Math.abs(n2 - 16 / 9) < Math.abs(n2 - 4 / 3) ? _e : ve;
            }
            function Re(e3, t3, r3, a3) {
              var n2 = [];
              return r3.forEach(function(r4, s2) {
                if (!(s2 >= ye.length)) {
                  var i2 = a3 ? null : { maxFramerate: r4.encoding.maxFramerate }, o2 = Math.min(e3, t3), d2 = function(e4) {
                    for (var t4 = 1; t4 < arguments.length; t4++) {
                      var r5 = null != arguments[t4] ? arguments[t4] : {};
                      t4 % 2 ? de(Object(r5), true).forEach(function(t5) {
                        (0, c.A)(e4, t5, r5[t5]);
                      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                        e4,
                        Object.getOwnPropertyDescriptors(r5)
                      ) : de(Object(r5)).forEach(function(t5) {
                        Object.defineProperty(
                          e4,
                          t5,
                          Object.getOwnPropertyDescriptor(r5, t5)
                        );
                      });
                    }
                    return e4;
                  }(
                    {
                      rid: ye[s2],
                      scaleResolutionDownBy: o2 / Math.min(r4.width, r4.height),
                      maxBitrate: r4.encoding.maxBitrate
                    },
                    i2
                  );
                  n2.push(d2);
                }
              }), n2;
            }
            function Ee(e3, t3, r3) {
              if (!e3) return {};
              var a3 = e3.id, n2 = (e3.preferredSpatialLayer, e3.preferredTemporalLayer, e3.appData), s2 = n2.width, i2 = n2.height, o2 = n2.encodings;
              try {
                var c2 = function(e4) {
                  var t4 = [];
                  if (e4 && 0 != e4.length) {
                    if (1 === e4.length) {
                      for (var r4 = 0; r4 < 3; r4++) t4.push(Math.pow(2, 3 - r4 - 1));
                      return t4;
                    }
                    var a4 = false;
                    return e4.forEach(function(e5) {
                      void 0 !== e5.scaleResolutionDownBy ? (a4 = true, t4.push(Math.max(1, e5.scaleResolutionDownBy))) : t4.push(1);
                    }), a4 || e4.forEach(function(r5, a5) {
                      t4[a5] = Math.pow(2, e4.length - a5 - 1);
                    }), t4;
                  }
                }(o2);
                if (!c2) return {};
                for (var d2 = Math.min(
                  Math.max(ce.$.adaptiveScalingFactor || 0.75, 0.5),
                  1
                ), l2 = 0, p2 = 0; p2 < c2.length; p2++) {
                  var u2 = d2 * s2 / c2[p2], h2 = d2 * i2 / c2[p2];
                  if (!(t3 >= u2 && r3 >= h2)) break;
                  l2 = p2;
                }
                var m2 = (e3.temporalLayers ? e3.temporalLayers : 3) - 1;
                if (0 === l2 && m2 > 0) {
                  var f2 = s2 / c2[0], g2 = i2 / c2[0];
                  t3 < 0.5 * f2 && r3 < 0.5 * g2 && (m2 -= 1), m2 > 0 && t3 < 0.25 * f2 && r3 < 0.25 * g2 && (m2 -= 1);
                }
                return {
                  consumerId: a3,
                  newPreferredSpatialLayer: l2,
                  newPreferredTemporalLayer: m2
                };
              } catch (e4) {
                return {};
              }
            }
            var ke = r2(7080), Te = r2(5414), Ce = r2(2107), Pe = r2(5071), Oe = r2(5458), De = Array(32);
            function xe() {
              for (var e3 = 0; e3 < 16; e3++)
                De[e3] = Math.floor(16 * Math.random()) + 48, De[e3] >= 58 && (De[e3] += 39);
              return String.fromCharCode.apply(null, De.slice(0, 16));
            }
            function Ie() {
              var e3 = (1e6 * (/* @__PURE__ */ new Date()).getTime()).toString().padEnd(19, "0");
              return Number(e3);
            }
            function Me(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var a3 = Object.getOwnPropertySymbols(e3);
                t3 && (a3 = a3.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, a3);
              }
              return r3;
            }
            function Ae(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? Me(Object(r3), true).forEach(function(t4) {
                  (0, c.A)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : Me(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var Le = function() {
              return (0, o.A)(
                function e3(t3) {
                  var r3 = this, a3 = t3.roomId, n2 = t3.peerId, s2 = t3.sdkName, o2 = t3.observabilityJwt, c2 = t3.metaData, d2 = t3.traces;
                  (0, i.A)(this, e3), this._traceId = function() {
                    for (var e4 = 0; e4 < 32; e4++)
                      De[e4] = Math.floor(16 * Math.random()) + 48, De[e4] >= 58 && (De[e4] += 39);
                    return String.fromCharCode.apply(null, De.slice(0, 32));
                  }(), this._rootSpanId = xe(), this._observabilityJwt = o2, this._tracesEnabled = d2.enabled;
                  var l2 = function(e4) {
                    for (var t4 = "0123456789abcdefghijklmnopqrstuvwxyz", r4 = "", a4 = e4; a4 > 0; a4--)
                      r4 += t4[Math.floor(36 * Math.random())];
                    return r4;
                  }(8);
                  this._spans = [], this._traceJSON = {
                    resourceSpans: [
                      {
                        resource: {
                          attributes: [
                            {
                              key: "service.name",
                              value: { stringValue: "videosdk-otel" }
                            },
                            {
                              key: "telemetry.sdk.language",
                              value: { stringValue: "webjs" }
                            },
                            {
                              key: "telemetry.sdk.name",
                              value: { stringValue: "opentelemetry" }
                            },
                            {
                              key: "telemetry.sdk.version",
                              value: { stringValue: "1.14.0" }
                            },
                            {
                              key: "sdk-version",
                              value: { stringValue: "0.0.1" }
                            }
                          ],
                          droppedAttributesCount: 0
                        },
                        scopeSpans: [{ scope: { name: l2 }, spans: [] }]
                      }
                    ]
                  }, this._tracesEnabled && (this.addRootSpan(a3, n2, s2, c2), setInterval(function() {
                    r3.processQueue();
                  }, 4e3));
                },
                [
                  {
                    key: "addRootSpan",
                    value: function(e3, t3, r3, a3) {
                      var n2 = {
                        traceId: this._traceId,
                        spanId: this._rootSpanId,
                        name: "room_".concat(e3, "_peer_").concat(t3, "_sdk_").concat(r3),
                        kind: 1,
                        startTimeUnixNano: Ie(),
                        endTimeUnixNano: Ie(),
                        attributes: [
                          { key: "roomId", value: { stringValue: e3 } },
                          { key: "peerId", value: { stringValue: t3 } },
                          { key: "sdkName", value: { stringValue: r3 } },
                          { key: "userId", value: { stringValue: a3.userId } },
                          { key: "email", value: { stringValue: a3.email } }
                        ],
                        droppedAttributesCount: 0,
                        events: [],
                        droppedEventsCount: 0,
                        status: { code: 0 },
                        links: [],
                        droppedLinksCount: 0
                      };
                      this._spans.push(n2);
                    }
                  },
                  {
                    key: "addSpanToTrace",
                    value: function(e3) {
                      this._spans.push(e3);
                    }
                  },
                  {
                    key: "trace",
                    value: function(e3) {
                      var t3 = e3.spanName, r3 = e3.attributes, n2 = void 0 === r3 ? {} : r3, s2 = e3.span, i2 = void 0 === s2 ? void 0 : s2;
                      if (this._tracesEnabled) {
                        var o2 = xe(), c2 = Ie(), d2 = {
                          traceId: this._traceId,
                          spanId: o2,
                          parentSpanId: i2 || this._rootSpanId,
                          name: t3,
                          kind: 1,
                          startTimeUnixNano: c2,
                          droppedAttributesCount: 0,
                          events: [],
                          droppedEventsCount: 0,
                          links: [],
                          droppedLinksCount: 0
                        };
                        return Object.keys(n2).length > 0 && (d2.attributes = Object.entries(n2).map(function(e4) {
                          var t4 = (0, a2.A)(e4, 2);
                          return { key: t4[0], value: { stringValue: t4[1] } };
                        })), this.addSpanToTrace(d2), o2;
                      }
                    }
                  },
                  {
                    key: "traceAutoComplete",
                    value: function(e3) {
                      var t3 = e3.spanName, r3 = e3.attributes, n2 = void 0 === r3 ? {} : r3, s2 = e3.status, i2 = void 0 === s2 ? 1 : s2, o2 = e3.span, c2 = void 0 === o2 ? void 0 : o2, d2 = e3.message, l2 = void 0 === d2 ? "SUCCESS" : d2;
                      if (this._tracesEnabled) {
                        var p2 = xe(), u2 = Ie(), h2 = Ie(), m2 = {
                          traceId: this._traceId,
                          spanId: p2,
                          parentSpanId: c2 || this._rootSpanId,
                          name: t3,
                          kind: 1,
                          startTimeUnixNano: u2,
                          endTimeUnixNano: h2,
                          droppedAttributesCount: 0,
                          events: [],
                          droppedEventsCount: 0,
                          links: [],
                          droppedLinksCount: 0,
                          status: { code: i2, message: l2 }
                        };
                        Object.keys(n2).length > 0 && (m2.attributes = Object.entries(n2).map(function(e4) {
                          var t4 = (0, a2.A)(e4, 2);
                          return { key: t4[0], value: { stringValue: t4[1] } };
                        })), this.addSpanToTrace(m2);
                      }
                    }
                  },
                  {
                    key: "completeSpan",
                    value: function(e3) {
                      var t3 = e3.span, r3 = e3.status, n2 = e3.message, s2 = e3.attributes, i2 = void 0 === s2 ? {} : s2;
                      if (this._tracesEnabled) {
                        var o2 = Ie();
                        this._spans = this._spans.map(function(e4) {
                          if (e4.spanId !== t3) return e4;
                          var s3 = Object.entries(i2).map(function(e5) {
                            var t4 = (0, a2.A)(e5, 2);
                            return { key: t4[0], value: { stringValue: t4[1] } };
                          });
                          return e4.attributes = e4.attributes ? [].concat((0, Oe.A)(e4.attributes), (0, Oe.A)(s3)) : s3, Ae(
                            Ae({}, e4),
                            {},
                            {
                              status: { code: r3, message: n2 },
                              endTimeUnixNano: o2
                            }
                          );
                        });
                      }
                    }
                  },
                  {
                    key: "processQueue",
                    value: function() {
                      var e3 = this;
                      if (this._spans.length > 0) {
                        this._traceJSON.resourceSpans[0].scopeSpans[0].spans = this._spans, this._spans = [];
                        var t3 = {
                          method: "POST",
                          headers: {
                            Authorization: this._observabilityJwt,
                            "Content-Type": "application/json"
                          },
                          body: JSON.stringify(this._traceJSON)
                        };
                        fetch("https://api.videosdk.live/otel/v1/traces", t3).then(
                          function() {
                            var t4 = (0, s.A)(
                              l().mark(function t5(r3) {
                                return l().wrap(function(t6) {
                                  for (; ; )
                                    switch (t6.prev = t6.next) {
                                      case 0:
                                        return e3._traceJSON.resourceSpans[0].scopeSpans[0].spans = [], t6.next = 3, r3.text();
                                      case 3:
                                        return t6.abrupt("return", t6.sent);
                                      case 4:
                                      case "end":
                                        return t6.stop();
                                    }
                                }, t5);
                              })
                            );
                            return function(e4) {
                              return t4.apply(this, arguments);
                            };
                          }()
                        ).then(function(e4) {
                        }).catch(function(t4) {
                          e3._spans = e3._traceJSON.resourceSpans[0].scopeSpans[0].spans, console.error(
                            "There was a problem with the POST request:",
                            t4
                          );
                        });
                      }
                    }
                  }
                ]
              );
            }();
            function Ne(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var a3 = Object.getOwnPropertySymbols(e3);
                t3 && (a3 = a3.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, a3);
              }
              return r3;
            }
            function je(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? Ne(Object(r3), true).forEach(function(t4) {
                  (0, c.A)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : Ne(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var Be = function() {
              return (0, o.A)(
                function e4(t3) {
                  var r3 = t3.roomId, a3 = t3.peerId, n2 = t3.logs, s2 = t3.observabilityJwt, o2 = t3.deviceInfo, c2 = t3.sessionId, d2 = t3.debugMode;
                  (0, i.A)(this, e4);
                  var l2 = o2.browserUserAgent, p2 = o2.deviceUserAgent, u2 = o2.platform;
                  this._peerId = a3, this._roomId = r3, this._logs = n2, this._observabilityJwt = s2, this._deviceInfo = o2, this._sessionId = c2, this._debugMode = d2, this.browserOrDeviceInfo = l2 ? {
                    browserName: l2.browser.name,
                    browserVersion: l2.browser.version,
                    osName: l2.os.name,
                    osVersion: l2.os.version,
                    platform: u2
                  } : p2 ? je({ platform: u2 }, p2) : null;
                },
                [
                  {
                    key: "pushLogs",
                    value: (e3 = (0, s.A)(
                      l().mark(function e4(t3) {
                        var r3, a3, n2, s2, i2, o2, c2, d2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (r3 = t3.logType, a3 = t3.logText, n2 = t3.attributes, s2 = t3.dashboardLog, i2 = void 0 !== s2 && s2, o2 = this._logs, c2 = o2.enabled, d2 = o2.endPoint, !c2) {
                                    e5.next = 8;
                                    break;
                                  }
                                  return e5.next = 5, fetch(d2, {
                                    method: "POST",
                                    headers: {
                                      Authorization: this._observabilityJwt,
                                      "Content-Type": "application/json"
                                    },
                                    body: JSON.stringify({
                                      logType: r3,
                                      logText: a3,
                                      attributes: je(
                                        je({}, n2),
                                        {},
                                        {
                                          roomId: this._roomId,
                                          peerId: this._peerId,
                                          SDK: "".concat(
                                            this._deviceInfo.sdkType,
                                            "-sdk"
                                          ),
                                          SDK_VERSION: this._deviceInfo.sdkVersion,
                                          sessionId: this._sessionId
                                        },
                                        this.browserOrDeviceInfo
                                      ),
                                      debugMode: this._debugMode,
                                      dashboardLog: i2
                                    })
                                  }).then(function(e6) {
                                    return e6.json();
                                  }).catch(function(e6) {
                                    return console.log("error", e6), {};
                                  });
                                case 5:
                                  return e5.abrupt("return", e5.sent);
                                case 8:
                                  return e5.abrupt("return", null);
                                case 9:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(t3) {
                      return e3.apply(this, arguments);
                    })
                  }
                ]
              );
              var e3;
            }(), Fe = r2(4973);
            function Ue(e3, t3) {
              var r3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
              if (!r3) {
                if (Array.isArray(e3) || (r3 = function(e4, t4) {
                  if (e4) {
                    if ("string" == typeof e4) return We(e4, t4);
                    var r4 = {}.toString.call(e4).slice(8, -1);
                    return "Object" === r4 && e4.constructor && (r4 = e4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(e4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? We(e4, t4) : void 0;
                  }
                }(e3)) || t3 && e3 && "number" == typeof e3.length) {
                  r3 && (e3 = r3);
                  var a3 = 0, n2 = function() {
                  };
                  return {
                    s: n2,
                    n: function() {
                      return a3 >= e3.length ? { done: true } : { done: false, value: e3[a3++] };
                    },
                    e: function(e4) {
                      throw e4;
                    },
                    f: n2
                  };
                }
                throw new TypeError(
                  "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              }
              var s2, i2 = true, o2 = false;
              return {
                s: function() {
                  r3 = r3.call(e3);
                },
                n: function() {
                  var e4 = r3.next();
                  return i2 = e4.done, e4;
                },
                e: function(e4) {
                  o2 = true, s2 = e4;
                },
                f: function() {
                  try {
                    i2 || null == r3.return || r3.return();
                  } finally {
                    if (o2) throw s2;
                  }
                }
              };
            }
            function We(e3, t3) {
              (null == t3 || t3 > e3.length) && (t3 = e3.length);
              for (var r3 = 0, a3 = Array(t3); r3 < t3; r3++) a3[r3] = e3[r3];
              return a3;
            }
            function qe(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var a3 = Object.getOwnPropertySymbols(e3);
                t3 && (a3 = a3.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, a3);
              }
              return r3;
            }
            function He(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? qe(Object(r3), true).forEach(function(t4) {
                  (0, c.A)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : qe(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var Ve, Ge = {
              sd: {
                low: { s: 0, t: 2 },
                med: { s: 0, t: 2 },
                high: { s: 1, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 }
              },
              hd: {
                low: { s: 0, t: 2 },
                med: { s: 1, t: 2 },
                high: { s: 2, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 }
              }
            }, ze = {
              qvga: { width: { ideal: 320 }, height: { ideal: 240 } },
              vga: { width: { ideal: 640 }, height: { ideal: 480 } },
              sd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 }
              },
              hd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 }
              }
            }, $e = {
              sd: [
                { scaleResolutionDownBy: 6 },
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 }
              ],
              hd: [
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 },
                { scaleResolutionDownBy: 1 }
              ]
            }, Ke = [{ scalabilityMode: "S3T3_KEY" }], Je = [{ dtx: true, maxFramerate: 30 }], Qe = [{ scalabilityMode: "S3T3", dtx: true }], Ye = new g("RoomClient"), Xe = function() {
              return (0, o.A)(
                function e4(t4) {
                  var r4, a3, n2 = t4.roomId, s2 = t4.peerId, o2 = t4.secret, d3 = t4.displayName, l2 = t4.device, p2 = t4.handlerName, u2 = t4.useSimulcast, h3 = t4.useSharingSimulcast, m3 = t4.forceTcp, f3 = t4.mode, g3 = t4.forceH264, _3 = t4.forceVP9, v3 = t4.svc, b3 = t4.datachannel, y2 = t4.externalVideo, w3 = t4.micEnabled, S3 = t4.webcamEnabled, R3 = t4.maxResolution, E3 = t4.useSpartialLayerAnalytics, k3 = t4._deviceInfo, T3 = t4.customCameraVideoTrack, C2 = t4.customMicrophoneAudioTrack, P2 = t4.autoConsume, O3 = t4.preferredProtocol, D3 = t4.signalingBaseUrl, x2 = t4.metaData, I2 = t4.defaultCameraIndex, M2 = t4.debugMode;
                  (0, i.A)(this, e4), (0, c.A)(this, "delay", function(e5) {
                    return new Promise(function(t5) {
                      return setTimeout(t5, e5);
                    });
                  }), Ye.debug(
                    'constructor() [roomId:"%s", peerId:"%s", displayName:"%s", device:%s]',
                    n2,
                    s2,
                    d3,
                    l2.flag
                  ), this.useSpartialLayerAnalytics = E3 || false, this._deviceInfo = k3, this._eventEmitter = new oe.EventEmitter(), this._closed = false, this._displayName = d3, this._device = l2, this._forceTcp = m3, this._preferredProtocol = O3, f3 == Ce.n.CONFERENCE ? (r4 = true, a3 = true) : (r4 = false, a3 = false), this._mode = f3, this._produce = r4, this._consume = a3, this._useDataChannel = b3, this._forceH264 = Boolean(g3), this._forceVP9 = Boolean(_3), this._micEnabled = Boolean(w3), this._webcamEnabled = Boolean(S3), this._externalVideo = null, this._externalVideoStream = null, this._nextDataChannelTestNumber = 0, y2 && (this._externalVideo = document.createElement("video"), this._externalVideo.controls = true, this._externalVideo.loop = true, this._externalVideo.setAttribute("playsinline", ""), this._externalVideo.src = y2, this._externalVideo.play().catch(function(e5) {
                    return Ye.warn("externalVideo.play() failed:%o", e5);
                  })), this._handlerName = p2, this._useSimulcast = u2, this._useSharingSimulcast = h3, this._protooUrl = "", this._secret = o2, this._peerId = s2, this._roomId = n2, this._baseUrl = "", this._protoo = null, this._mediasoupDevice = null, this._sendTransport = null, this._recvTransport = null, this._micProducer = null, this._webcamProducer = null, this._shareProducer = null, this._shareAudioProducer = null, this._chatDataProducer = null, this._botDataProducer = null, this._consumers = /* @__PURE__ */ new Map(), this._dataConsumers = /* @__PURE__ */ new Map(), this._mics = /* @__PURE__ */ new Map(), this._mic = { device: null }, this._webcams = /* @__PURE__ */ new Map(), this._webcam = { device: null, resolution: R3 || "hd" }, this._pinnedParticipants = /* @__PURE__ */ new Map(), v3 && (Ke[0].scalabilityMode = "".concat(v3, "_KEY"), Qe[0].scalabilityMode = v3), this.customCameraVideoTrack = T3, this.customMicrophoneAudioTrack = C2, this._autoConsume = P2, this._iceServers = [], this._metrics = new Te.VideoSDKMetrics({
                    refreshEvery: 1e3,
                    startAfter: 1e3,
                    verbose: false
                  }), this._stats = {}, this._latestStats = {}, this._isWebsocketAlive = false, this._pingWebsocketInterval = null, this._pingInternetInterval = null, this._pingWebsocketFailedCounter = 0, this._pongInternetCounter = 0, this._transportState = "", this._openTelemetry = null, this._videosdkLogs = null, this._signalingBaseUrl = D3 || "api.videosdk.live", this._metaData = x2, this._defaultCameraIndex = I2, this._debugMode = Boolean(M2);
                },
                [
                  {
                    key: "on",
                    value: function(e4, t4) {
                      this._eventEmitter.on(e4, t4);
                    }
                  },
                  {
                    key: "close",
                    value: function(e4) {
                      var t4, r4, a3, n2, s2, i2 = e4.sendLeft, o2 = void 0 === i2 || i2;
                      o2 && (this._eventEmitter.emit("MEETING_STATE_CHANGED", {
                        state: "CLOSING"
                      }), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.traceAutoComplete({
                        spanName: "Meeting is in CLOSING State",
                        status: 1
                      }));
                      if (!this._closed) {
                        this._closed = true, this._pingWebsocketInterval && clearInterval(this._pingWebsocketInterval), this._pingWebsocketInterval = null, this._pingInternetInterval && clearInterval(this._pingInternetInterval), this._pingInternetInterval = null, this._protoo.close(), this._metrics.running && this._metrics.stopAllProbes(), Ye.debug("close()");
                        var c2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({ spanName: "Closing Trasnport" });
                        this._sendTransport && this._sendTransport.close(), this._recvTransport && this._recvTransport.close(), null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                          span: c2,
                          status: 1,
                          message: "Closed Trasnport"
                        }), Ve.dispatch(x("closed")), o2 && this._eventEmitter.emit("MEETING_STATE_CHANGED", {
                          state: "CLOSED"
                        }), null === (a3 = this._openTelemetry) || void 0 === a3 || a3.traceAutoComplete({
                          spanName: "Meeting is in CLOSED State",
                          status: 1
                        }), o2 && this._eventEmitter.emit("MEETING_LEFT"), null === (n2 = this._openTelemetry) || void 0 === n2 || n2.traceAutoComplete({
                          spanName: "Emitted MEETING_LEFT Event",
                          status: 1
                        });
                      }
                    }
                  },
                  {
                    key: "join",
                    value: (ir = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, i2, o2, d3, h3, m3, f3, g3, _3 = this;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, y({
                                    roomId: this._roomId,
                                    secret: this._secret,
                                    signalingBaseUrl: this._signalingBaseUrl
                                  });
                                case 2:
                                  a3 = e5.sent, n2 = a3.baseUrl, i2 = a3.iceServers, o2 = a3.logs, d3 = a3.observabilityJwt, h3 = a3.traces, m3 = a3.metaData, f3 = a3.signalingUrl, this._baseUrl = n2, this._protooUrl = "".concat(
                                    f3 || "wss://".concat(this._baseUrl),
                                    "/?roomId="
                                  ).concat(this._roomId, "&peerId=").concat(this._peerId, "&secret=").concat(this._secret, "&mode=").concat(this._mode), this._iceServers = i2, this._tracesEnabled = h3.enabled, this._openTelemetry = new Le(
                                    (0, c.A)(
                                      {
                                        roomId: this._roomId,
                                        peerId: this._peerId,
                                        sdkName: "".concat(
                                          this._deviceInfo.sdkType,
                                          "-sdk"
                                        ),
                                        traces: h3,
                                        logs: o2,
                                        observabilityJwt: d3,
                                        metaData: m3
                                      },
                                      "traces",
                                      h3
                                    )
                                  ), this._joinSpan = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "Join() Calling",
                                    attributes: {
                                      DeviceInfo: JSON.stringify(
                                        this._deviceInfo
                                      ),
                                      mode: this._mode,
                                      displayName: this._displayName,
                                      multiStream: this._useSimulcast,
                                      micEnabled: this._micEnabled,
                                      webcamEnabled: this._webcamEnabled,
                                      CustomVideoTrack: !!this.customCameraVideoTrack,
                                      CustomMicTrack: !!this.customMicrophoneAudioTrack,
                                      signalingUrl: f3 || "signalingUrl not specify"
                                    }
                                  }), g3 = new p.TJ(this._protooUrl), this._protoo = new p.xM(g3), this._eventEmitter.emit(
                                    "MEETING_STATE_CHANGED",
                                    { state: "CONNECTING" }
                                  ), Ve.dispatch(x("connecting")), null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Meeting is in CONNECTING State",
                                    span: this._joinSpan,
                                    status: 1
                                  }), this._protoo.on("open", function() {
                                    var e6;
                                    _3._isWebsocketAlive = true, _3._closed = false, _3.startPingPong(), _3._eventEmitter.emit(
                                      "MEETING_STATE_CHANGED",
                                      { state: "CONNECTED" }
                                    ), null === (e6 = _3._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                      spanName: "Meeting is in CONNECTED State",
                                      span: _3._joinSpan,
                                      status: 1
                                    }), _3.requestEntry();
                                  }), this._protoo.on("failed", function() {
                                    var e6;
                                    _3._eventEmitter.emit(
                                      "MEETING_STATE_CHANGED",
                                      { state: "FAILED" }
                                    ), null === (e6 = _3._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                      spanName: "Meeting is in FAILED State",
                                      span: _3._joinSpan,
                                      status: 2
                                    }), Ve.dispatch(
                                      ie({
                                        type: "error",
                                        text: "WebSocket connection failed"
                                      })
                                    );
                                  }), this._protoo.on(
                                    "disconnected",
                                    function() {
                                      var e6;
                                      _3._eventEmitter.emit(
                                        "MEETING_STATE_CHANGED",
                                        { state: "DISCONNECTED" }
                                      ), null === (e6 = _3._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                        spanName: "Meeting is in DISCONNECTED State",
                                        span: _3._joinSpan,
                                        status: 1
                                      }), Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "WebSocket disconnected"
                                        })
                                      ), _3._sendTransport && (_3._sendTransport.close(), _3._sendTransport = null), _3._recvTransport && (_3._recvTransport.close(), _3._recvTransport = null), Ve.dispatch(x("closed"));
                                    }
                                  ), this._protoo.on("close", function() {
                                    _3._closed || _3.close({ sendLeft: true });
                                  }), this._protoo.on(
                                    "request",
                                    function() {
                                      var e6 = (0, s.A)(
                                        l().mark(function e7(t5, r5, a4) {
                                          var n3, s2, i3, o3, c2, d4, p2, h4, m4, f4, g4, v3, b3, y2, w3, S3, R3, E3, k3, T3, C2, P2, O3, D3, x2, I2, M2, A2, L2, N2, j2, B2, F2, U2, W2, q2, H2, V2, G2, z2, $2, K2, J2, X2, Z2, ee2, te2, re2, ae2, se2, oe2, ce2, de3, le3, pe3, ue3, he3, me3, fe3, ge3, _e3, ve3;
                                          return l().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    Ye.debug(
                                                      'proto "request" event [method:%s, data:%o]',
                                                      t5.method,
                                                      t5.data
                                                    ), e8.t0 = t5.method, e8.next = "close" === e8.t0 ? 4 : "newConsumer" === e8.t0 ? 7 : "newDataConsumer" === e8.t0 ? 45 : "enableMic" === e8.t0 ? 72 : "disableMic" === e8.t0 ? 74 : "enableWebcam" === e8.t0 ? 88 : "disableWebcam" === e8.t0 ? 90 : "pinStateChanged" === e8.t0 ? 104 : "switchRoom" === e8.t0 ? 124 : "statsData" === e8.t0 ? 127 : 130;
                                                    break;
                                                  case 4:
                                                    return r5(), _3.close({
                                                      sendLeft: true
                                                    }), e8.abrupt("break", 130);
                                                  case 7:
                                                    if (i3 = null === (n3 = _3._openTelemetry) || void 0 === n3 ? void 0 : n3.trace({
                                                      spanName: "Protoo REQ: newConsumer",
                                                      attributes: {
                                                        request: JSON.stringify(
                                                          t5
                                                        )
                                                      }
                                                    }), _3._consume) {
                                                      e8.next = 12;
                                                      break;
                                                    }
                                                    return a4(
                                                      403,
                                                      "I do not want to consume"
                                                    ), null === (o3 = _3._openTelemetry) || void 0 === o3 || o3.completeSpan({
                                                      span: i3,
                                                      status: 2,
                                                      message: "I do not want to consume"
                                                    }), e8.abrupt("break", 130);
                                                  case 12:
                                                    return c2 = t5.data, d4 = c2.peerId, p2 = c2.producerId, h4 = c2.id, m4 = c2.kind, f4 = c2.rtpParameters, g4 = c2.type, v3 = c2.appData, b3 = c2.producerPaused, y2 = null === (s2 = _3._openTelemetry) || void 0 === s2 ? void 0 : s2.trace({
                                                      spanName: "Creating Consumer",
                                                      span: i3
                                                    }), e8.prev = 14, e8.next = 17, _3._recvTransport.consume(
                                                      {
                                                        id: h4,
                                                        producerId: p2,
                                                        kind: m4,
                                                        rtpParameters: f4,
                                                        appData: He(
                                                          He({}, v3),
                                                          {},
                                                          { peerId: d4 }
                                                        )
                                                      }
                                                    );
                                                  case 17:
                                                    k3 = e8.sent, T3 = u.parseScalabilityMode(
                                                      k3.rtpParameters.encodings[0].scalabilityMode
                                                    ), C2 = T3.spatialLayers, P2 = T3.temporalLayers, k3.spatialLayers = C2, k3.temporalLayers = P2, k3.currentSpatialLayers = C2 - 1, k3.currentTemporalLayers = P2 - 1, _3._consumers.set(
                                                      k3.id,
                                                      k3
                                                    ), k3.on(
                                                      "transportclose",
                                                      function() {
                                                        _3._consumers.delete(
                                                          k3.id
                                                        );
                                                        var e9 = Y(
                                                          k3.id,
                                                          d4
                                                        );
                                                        Ve.dispatch(e9), _3._eventEmitter.emit(
                                                          e9.type,
                                                          e9.payload
                                                        );
                                                      }
                                                    ), null === (w3 = _3._openTelemetry) || void 0 === w3 || w3.completeSpan({
                                                      span: y2,
                                                      status: 1,
                                                      message: "Consumer Created"
                                                    }), y2 = null === (S3 = _3._openTelemetry) || void 0 === S3 ? void 0 : S3.trace({
                                                      spanName: "Sending Stream Enabled Event",
                                                      span: i3
                                                    }), O3 = Q(
                                                      {
                                                        id: k3.id,
                                                        type: g4,
                                                        locallyPaused: false,
                                                        remotelyPaused: b3,
                                                        rtpParameters: k3.rtpParameters,
                                                        spatialLayers: C2,
                                                        temporalLayers: P2,
                                                        currentSpatialLayer: C2 - 1,
                                                        currentTemporalLayer: P2 - 1,
                                                        preferredSpatialLayer: C2 - 1,
                                                        preferredTemporalLayer: P2 - 1,
                                                        priority: 1,
                                                        codec: k3.rtpParameters.codecs[0].mimeType.split(
                                                          "/"
                                                        )[1],
                                                        track: k3.track,
                                                        appData: v3,
                                                        instance: k3
                                                      },
                                                      d4
                                                    ), Ve.dispatch(O3), _3._eventEmitter.emit(
                                                      O3.type,
                                                      O3.payload
                                                    ), r5(), "video" === k3.kind && Ve.getState().me.audioOnly && _3._pauseConsumer(k3), null === (R3 = _3._openTelemetry) || void 0 === R3 || R3.completeSpan({
                                                      span: y2,
                                                      status: 1,
                                                      message: "Event Send Successfully"
                                                    }), null === (E3 = _3._openTelemetry) || void 0 === E3 || E3.completeSpan({
                                                      span: i3,
                                                      status: 1,
                                                      message: "New Consumer Created Successfully",
                                                      attributes: {
                                                        "consumer.consumerId": k3.id
                                                      }
                                                    }), "video" == k3.kind && k3.appData.share && (null === (D3 = _3._openTelemetry) || void 0 === D3 || D3.traceAutoComplete(
                                                      {
                                                        spanName: "Presenter Changed",
                                                        span: i3,
                                                        attributes: {
                                                          "peer.id": d4
                                                        }
                                                      }
                                                    )), e8.next = 44;
                                                    break;
                                                  case 37:
                                                    throw e8.prev = 37, e8.t1 = e8.catch(14), null === (x2 = _3._openTelemetry) || void 0 === x2 || x2.completeSpan({
                                                      span: y2,
                                                      status: 2,
                                                      message: "Error creating a Consumer: ".concat(
                                                        e8.t1
                                                      )
                                                    }), null === (I2 = _3._openTelemetry) || void 0 === I2 || I2.completeSpan({
                                                      span: i3,
                                                      status: 2,
                                                      message: "Error creating a Consumer: ".concat(
                                                        e8.t1
                                                      )
                                                    }), Ve.dispatch(
                                                      ie({
                                                        type: "error",
                                                        text: "Error creating a Consumer: ".concat(
                                                          e8.t1
                                                        )
                                                      })
                                                    ), null === (M2 = _3._videosdkLogs) || void 0 === M2 || M2.pushLogs({
                                                      logText: "Error creating a Consumer",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e8.t1.message
                                                      }
                                                    }), e8.t1;
                                                  case 44:
                                                    return e8.abrupt(
                                                      "break",
                                                      130
                                                    );
                                                  case 45:
                                                    if (_3._consume) {
                                                      e8.next = 48;
                                                      break;
                                                    }
                                                    return a4(
                                                      403,
                                                      "I do not want to data consume"
                                                    ), e8.abrupt("break", 130);
                                                  case 48:
                                                    if (_3._useDataChannel) {
                                                      e8.next = 51;
                                                      break;
                                                    }
                                                    return a4(
                                                      403,
                                                      "I do not want DataChannels"
                                                    ), e8.abrupt("break", 130);
                                                  case 51:
                                                    return A2 = t5.data, L2 = A2.peerId, N2 = A2.dataProducerId, j2 = A2.id, B2 = A2.sctpStreamParameters, F2 = A2.label, U2 = A2.protocol, W2 = A2.appData, e8.prev = 52, e8.next = 55, _3._recvTransport.consumeData(
                                                      {
                                                        id: j2,
                                                        dataProducerId: N2,
                                                        sctpStreamParameters: B2,
                                                        label: F2,
                                                        protocol: U2,
                                                        appData: He(
                                                          He({}, W2),
                                                          {},
                                                          { peerId: L2 }
                                                        )
                                                      }
                                                    );
                                                  case 55:
                                                    q2 = e8.sent, _3._dataConsumers.set(
                                                      q2.id,
                                                      q2
                                                    ), q2.on(
                                                      "transportclose",
                                                      function() {
                                                        _3._dataConsumers.delete(
                                                          q2.id
                                                        );
                                                      }
                                                    ), q2.on(
                                                      "open",
                                                      function() {
                                                        Ye.debug(
                                                          'DataConsumer "open" event'
                                                        );
                                                      }
                                                    ), q2.on(
                                                      "close",
                                                      function() {
                                                        Ye.warn(
                                                          'DataConsumer "close" event'
                                                        ), _3._dataConsumers.delete(
                                                          q2.id
                                                        ), Ve.dispatch(
                                                          ie({
                                                            type: "error",
                                                            text: "DataConsumer closed"
                                                          })
                                                        );
                                                      }
                                                    ), q2.on(
                                                      "error",
                                                      function(e9) {
                                                        Ye.error(
                                                          'DataConsumer "error" event:%o',
                                                          e9
                                                        ), Ve.dispatch(
                                                          ie({
                                                            type: "error",
                                                            text: "DataConsumer error: ".concat(
                                                              e9
                                                            )
                                                          })
                                                        );
                                                      }
                                                    ), q2.on(
                                                      "message",
                                                      function(e9) {
                                                        if (Ye.debug(
                                                          'DataConsumer "message" event [streamId:%d]',
                                                          q2.sctpStreamParameters.streamId
                                                        ), window.DC_MESSAGE = e9, e9 instanceof ArrayBuffer) {
                                                          var t6 = new DataView(
                                                            e9
                                                          ).getUint32();
                                                          return t6 == Math.pow(
                                                            2,
                                                            32
                                                          ) - 1 ? (Ye.warn(
                                                            "dataChannelTest finished!"
                                                          ), void (_3._nextDataChannelTestNumber = 0)) : (t6 > _3._nextDataChannelTestNumber && Ye.warn(
                                                            "dataChannelTest: %s packets missing",
                                                            t6 - _3._nextDataChannelTestNumber
                                                          ), void (_3._nextDataChannelTestNumber = t6 + 1));
                                                        }
                                                        if ("string" == typeof e9)
                                                          switch (q2.label) {
                                                            case "chat":
                                                              var r6 = Ve.getState().peers, a5 = Object.keys(
                                                                r6
                                                              ).map(
                                                                function(e10) {
                                                                  return r6[e10];
                                                                }
                                                              ).find(
                                                                function(e10) {
                                                                  return e10.dataConsumers.includes(
                                                                    q2.id
                                                                  );
                                                                }
                                                              );
                                                              if (!a5) {
                                                                Ye.warn(
                                                                  'DataConsumer "message" from unknown peer'
                                                                );
                                                                break;
                                                              }
                                                              Ve.dispatch(
                                                                ie({
                                                                  title: "".concat(
                                                                    a5.displayName,
                                                                    " says:"
                                                                  ),
                                                                  text: e9,
                                                                  timeout: 5e3
                                                                })
                                                              ), _3._eventEmitter.emit(
                                                                "CHAT_MESSAGE",
                                                                {
                                                                  text: e9,
                                                                  senderId: a5.id,
                                                                  timestamp: (/* @__PURE__ */ new Date()).getTime()
                                                                }
                                                              );
                                                              break;
                                                            case "bot":
                                                              Ve.dispatch(
                                                                ie({
                                                                  title: "Message from Bot:",
                                                                  text: e9,
                                                                  timeout: 5e3
                                                                })
                                                              );
                                                          }
                                                        else
                                                          Ye.warn(
                                                            'ignoring DataConsumer "message" (not a string)'
                                                          );
                                                      }
                                                    ), window.DC = q2, Ve.dispatch(
                                                      ne(
                                                        {
                                                          id: q2.id,
                                                          sctpStreamParameters: q2.sctpStreamParameters,
                                                          label: q2.label,
                                                          protocol: q2.protocol
                                                        },
                                                        L2
                                                      )
                                                    ), r5(), e8.next = 71;
                                                    break;
                                                  case 67:
                                                    e8.prev = 67, e8.t2 = e8.catch(52), Ye.error(
                                                      '"newDataConsumer" request failed:%o',
                                                      e8.t2
                                                    ), Ve.dispatch(
                                                      ie({
                                                        type: "error",
                                                        text: "Error creating a DataConsumer: ".concat(
                                                          e8.t2
                                                        )
                                                      })
                                                    );
                                                  case 71:
                                                    return e8.abrupt(
                                                      "break",
                                                      130
                                                    );
                                                  case 72:
                                                    try {
                                                      V2 = t5.data.peerId, null === (H2 = _3._openTelemetry) || void 0 === H2 || H2.traceAutoComplete(
                                                        {
                                                          spanName: "Emitting MIC_REQUESTED & Protoo REQ: enableMic for ".concat(
                                                            V2
                                                          ),
                                                          status: 1
                                                        }
                                                      ), _3._eventEmitter.emit(
                                                        "MIC_REQUESTED",
                                                        { peerId: V2 }
                                                      ), r5();
                                                    } catch (e9) {
                                                      Ye.error(
                                                        '"enableMic" request failed:%o',
                                                        e9
                                                      ), null === (G2 = _3._videosdkLogs) || void 0 === G2 || G2.pushLogs({
                                                        logText: "Error enableMic request failed",
                                                        logType: "ERROR",
                                                        attributes: {
                                                          error: e9.message
                                                        }
                                                      }), _3._emitError({
                                                        code: 3027,
                                                        message: e9.message
                                                      });
                                                    }
                                                    return e8.abrupt(
                                                      "break",
                                                      130
                                                    );
                                                  case 74:
                                                    return e8.prev = 74, z2 = null === ($2 = _3._openTelemetry) || void 0 === $2 ? void 0 : $2.trace({
                                                      spanName: "Protoo REQ: disableMic"
                                                    }), e8.next = 78, _3.disableMic(false, z2);
                                                  case 78:
                                                    null === (K2 = _3._openTelemetry) || void 0 === K2 || K2.completeSpan({
                                                      span: z2,
                                                      status: 1,
                                                      message: "Request Completed"
                                                    }), r5(), e8.next = 87;
                                                    break;
                                                  case 82:
                                                    e8.prev = 82, e8.t3 = e8.catch(74), null === (J2 = _3._openTelemetry) || void 0 === J2 || J2.completeSpan({
                                                      span: z2,
                                                      status: 2,
                                                      message: "disableMic request failed ".concat(
                                                        e8.t3
                                                      )
                                                    }), null === (X2 = _3._videosdkLogs) || void 0 === X2 || X2.pushLogs({
                                                      logText: "Error disableMic request failed",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e8.t3.message
                                                      }
                                                    }), _3._emitError({
                                                      code: 3028,
                                                      message: e8.t3.message
                                                    });
                                                  case 87:
                                                    return e8.abrupt(
                                                      "break",
                                                      130
                                                    );
                                                  case 88:
                                                    try {
                                                      ee2 = t5.data.peerId, null === (Z2 = _3._openTelemetry) || void 0 === Z2 || Z2.traceAutoComplete(
                                                        {
                                                          spanName: "Emitting WEBCAM_REQUESTED & Protoo REQ: enableWebcam for ".concat(
                                                            ee2
                                                          ),
                                                          status: 1
                                                        }
                                                      ), _3._eventEmitter.emit(
                                                        "WEBCAM_REQUESTED",
                                                        { peerId: ee2 }
                                                      ), r5();
                                                    } catch (e9) {
                                                      Ye.error(
                                                        '"enableWebcam" request failed:%o',
                                                        e9
                                                      ), null === (te2 = _3._videosdkLogs) || void 0 === te2 || te2.pushLogs({
                                                        logText: "Error enableWebcam request failed",
                                                        logType: "ERROR",
                                                        attributes: {
                                                          error: e9.message
                                                        }
                                                      }), _3._emitError({
                                                        code: 3029,
                                                        message: e9.message
                                                      });
                                                    }
                                                    return e8.abrupt(
                                                      "break",
                                                      130
                                                    );
                                                  case 90:
                                                    return e8.prev = 90, re2 = null === (ae2 = _3._openTelemetry) || void 0 === ae2 ? void 0 : ae2.trace({
                                                      spanName: "Protoo REQ: disableWebcam"
                                                    }), e8.next = 94, _3.disableWebcam(re2);
                                                  case 94:
                                                    null === (se2 = _3._openTelemetry) || void 0 === se2 || se2.completeSpan({
                                                      span: re2,
                                                      status: 1,
                                                      message: "Request Completed"
                                                    }), r5(), e8.next = 103;
                                                    break;
                                                  case 98:
                                                    e8.prev = 98, e8.t4 = e8.catch(90), null === (oe2 = _3._openTelemetry) || void 0 === oe2 || oe2.completeSpan({
                                                      span: re2,
                                                      status: 2,
                                                      message: "disableWebcam request failed ".concat(
                                                        e8.t4
                                                      )
                                                    }), null === (ce2 = _3._videosdkLogs) || void 0 === ce2 || ce2.pushLogs({
                                                      logText: "Error disableWebcam request failed",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e8.t4.message
                                                      }
                                                    }), _3._emitError({
                                                      code: 3030,
                                                      message: e8.t4.message
                                                    });
                                                  case 103:
                                                    return e8.abrupt(
                                                      "break",
                                                      130
                                                    );
                                                  case 104:
                                                    e8.prev = 104, ue3 = t5.data, he3 = ue3.peerId, me3 = ue3.state, fe3 = ue3.pinnedBy, de3 = null === (le3 = _3._openTelemetry) || void 0 === le3 ? void 0 : le3.trace({
                                                      spanName: "Protoo REQ: pinStateChanged",
                                                      attributes: {
                                                        requestData: JSON.stringify(
                                                          {
                                                            peerId: he3,
                                                            state: me3,
                                                            pinnedBy: fe3
                                                          }
                                                        )
                                                      }
                                                    }), _3._pinnedParticipants.has(
                                                      he3
                                                    ) || _3._pinnedParticipants.set(
                                                      he3,
                                                      {
                                                        cam: false,
                                                        share: false
                                                      }
                                                    ), ge3 = _3._pinnedParticipants.get(
                                                      he3
                                                    ), null != me3.cam && (ge3.cam = me3.cam), null != me3.share && (ge3.share = me3.share), _3._pinnedParticipants.set(
                                                      he3,
                                                      ge3
                                                    ), _3._eventEmitter.emit(
                                                      "PIN_STATE_CHANGED",
                                                      {
                                                        peerId: he3,
                                                        state: me3,
                                                        pinnedBy: fe3
                                                      }
                                                    ), 0 == ge3.share && 0 == ge3.cam && _3._pinnedParticipants.delete(
                                                      he3
                                                    ), null === (pe3 = _3._openTelemetry) || void 0 === pe3 || pe3.completeSpan({
                                                      span: de3,
                                                      status: 1,
                                                      message: "Request Completed",
                                                      attributes: {
                                                        _pinnedParticipants: JSON.stringify(
                                                          _3._pinnedParticipants
                                                        )
                                                      }
                                                    }), r5(), e8.next = 123;
                                                    break;
                                                  case 118:
                                                    throw e8.prev = 118, e8.t5 = e8.catch(104), null === (_e3 = _3._openTelemetry) || void 0 === _e3 || _e3.completeSpan({
                                                      span: de3,
                                                      status: 2,
                                                      message: "pinStateChanged request failed"
                                                    }), null === (ve3 = _3._videosdkLogs) || void 0 === ve3 || ve3.pushLogs({
                                                      logText: "Error pinStateChanged request failed",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e8.t5.message
                                                      }
                                                    }), e8.t5;
                                                  case 123:
                                                    return e8.abrupt(
                                                      "break",
                                                      130
                                                    );
                                                  case 124:
                                                    return _3._eventEmitter.emit(
                                                      "SWITCH_ROOM",
                                                      t5.data
                                                    ), r5(), e8.abrupt("break", 130);
                                                  case 127:
                                                    return r5({
                                                      peerId: _3._peerId,
                                                      statsData: _3._stats
                                                    }), _3._stats = {}, e8.abrupt("break", 130);
                                                  case 130:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [
                                              [14, 37],
                                              [52, 67],
                                              [74, 82],
                                              [90, 98],
                                              [104, 118]
                                            ]
                                          );
                                        })
                                      );
                                      return function(t5, r5, a4) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._protoo.on(
                                    "notification",
                                    function() {
                                      var e6 = (0, s.A)(
                                        l().mark(function e7(t5) {
                                          var r5, a4, n3, s2, i3, c2, p2, u2, h4, m4, f4, g4, v3, b3, y2, w3, S3, R3, E3, k3, T3, C2, P2, O3, D3, x2, M2, A2, L2, N2, j2, B2, F2, U2, W2, q2, V2, G2, z2, Q2, te2, re2, ne2, oe2, ce2, de3, le3, pe3, ue3, he3, me3, fe3, ge3, _e3, ve3, be3, ye3, we2, Se3, Re3, Ee2, ke2, Te2, Ce2, Oe3, De3, xe3, Ie3, Me3, Ae3, Le2, Ne3, je3, Fe2, Ue2, We3, qe3, Ge2, ze2, $e2, Ke2, Je2, Qe2, Xe3;
                                          return l().wrap(function(e8) {
                                            for (; ; )
                                              switch (e8.prev = e8.next) {
                                                case 0:
                                                  Ye.debug(
                                                    'proto "notification" event [method:%s, data:%o]',
                                                    t5.method,
                                                    t5.data
                                                  ), e8.t0 = t5.method, e8.next = "error" === e8.t0 ? 4 : "participantMediaStateChanged" === e8.t0 ? 9 : "producerScore" === e8.t0 ? 10 : "entryRequested" === e8.t0 ? 13 : "entryResponded" === e8.t0 ? 17 : "newPeer" === e8.t0 ? 23 : "peerClosed" === e8.t0 ? 30 : "peerDisplayNameChanged" === e8.t0 ? 36 : "downlinkBwe" === e8.t0 ? 40 : "consumerClosed" === e8.t0 ? 42 : "consumerPaused" === e8.t0 ? 54 : "consumerResumed" === e8.t0 ? 61 : "consumerLayersChanged" === e8.t0 ? 68 : "consumerScore" === e8.t0 ? 79 : "dataConsumerClosed" === e8.t0 ? 82 : "activeSpeaker" === e8.t0 ? 91 : "transcriptionStateChanged" === e8.t0 ? 96 : "transcriptionText" === e8.t0 ? 99 : "recordingStateChanged" === e8.t0 ? 101 : "recordingStarted" === e8.t0 ? 104 : "recordingStopped" === e8.t0 ? 106 : "livestreamStateChanged" === e8.t0 ? 108 : "livestreamStarted" === e8.t0 ? 111 : "livestreamStopped" === e8.t0 ? 113 : "hlsStateChanged" === e8.t0 ? 115 : "hlsPlayableStateChanged" === e8.t0 ? 118 : "hlsStarted" === e8.t0 ? 120 : "hlsStopped" === e8.t0 ? 123 : "whiteboardStarted" === e8.t0 ? 125 : "whiteboardStopped" === e8.t0 ? 128 : "addCharacter" === e8.t0 ? 130 : "removeCharacter" === e8.t0 ? 136 : "characterStateChanged" === e8.t0 ? 142 : "characterMessage" === e8.t0 ? 145 : "videoStatusChanged" === e8.t0 ? 147 : "videoSeeked" === e8.t0 ? 149 : "connectionOpen" === e8.t0 ? 152 : "connectionClose" === e8.t0 ? 154 : "connectionChatMessage" === e8.t0 ? 156 : "connectionParticipantJoined" === e8.t0 ? 158 : "connectionParticipantLeft" === e8.t0 ? 160 : "pubsubMessage" === e8.t0 ? 162 : "peerModeChanged" === e8.t0 ? 164 : "restartIce" === e8.t0 ? 167 : 171;
                                                  break;
                                                case 4:
                                                  return n3 = t5.data, _3._eventEmitter.emit(
                                                    "ERROR",
                                                    n3
                                                  ), null === (r5 = _3._videosdkLogs) || void 0 === r5 || r5.pushLogs({
                                                    logText: "Error in Meeting Session",
                                                    logType: "ERROR",
                                                    attributes: {
                                                      error: n3.message
                                                    }
                                                  }), null === (a4 = _3._openTelemetry) || void 0 === a4 || a4.traceAutoComplete({
                                                    spanName: "Emitted `ERROR` Event",
                                                    attributes: {
                                                      error: n3.message
                                                    },
                                                    status: 2
                                                  }), e8.abrupt("break", 172);
                                                case 9:
                                                  try {
                                                    s2 = t5.data, i3 = s2.peerId, c2 = s2.kind, p2 = s2.newState, _3._eventEmitter.emit(
                                                      "PARTICIPANT_MEDIA_STATE_CHANGED",
                                                      {
                                                        peerId: i3,
                                                        kind: c2,
                                                        newState: p2
                                                      }
                                                    ), "video" == c2 && (null === (u2 = _3._openTelemetry) || void 0 === u2 || u2.traceAutoComplete(
                                                      {
                                                        spanName: "".concat(
                                                          i3,
                                                          " has "
                                                        ).concat(
                                                          p2 ? "enable" : "disable",
                                                          " "
                                                        ).concat(c2),
                                                        status: 1
                                                      }
                                                    ));
                                                  } catch (e9) {
                                                    Ye.error(
                                                      '"newProducer" request failed:%o',
                                                      e9
                                                    ), null === (h4 = _3._videosdkLogs) || void 0 === h4 || h4.pushLogs({
                                                      logText: "Error newProducer request failed",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e9.message
                                                      }
                                                    });
                                                  }
                                                case 10:
                                                  return m4 = t5.data, f4 = m4.producerId, g4 = m4.score, Ve.dispatch(H(f4, g4)), e8.abrupt("break", 172);
                                                case 13:
                                                  return b3 = t5.data, y2 = b3.id, w3 = b3.name, S3 = null === (v3 = _3._openTelemetry) || void 0 === v3 ? void 0 : v3.trace({
                                                    spanName: "Protoo Noti: entryRequested",
                                                    span: _3._joinSpan,
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        {
                                                          id: y2,
                                                          name: w3
                                                        }
                                                      )
                                                    }
                                                  }), y2 !== _3._peerId ? (_3._eventEmitter.emit(
                                                    "ENTRY_REQUESTED",
                                                    { id: y2, name: w3 }
                                                  ), null === (R3 = _3._openTelemetry) || void 0 === R3 || R3.completeSpan({
                                                    span: S3,
                                                    status: 1,
                                                    message: "EntryResponded Recieved"
                                                  })) : null === (E3 = _3._openTelemetry) || void 0 === E3 || E3.completeSpan({
                                                    span: S3,
                                                    status: 2,
                                                    message: "Entry Request Failed"
                                                  }), e8.abrupt("break", 172);
                                                case 17:
                                                  return T3 = t5.data, C2 = T3.id, P2 = T3.decision, O3 = T3.sessionId, _3._videosdkLogs = new Be({
                                                    roomId: _3._roomId,
                                                    peerId: _3._peerId,
                                                    logs: o2,
                                                    observabilityJwt: d3,
                                                    deviceInfo: _3._deviceInfo,
                                                    sessionId: O3,
                                                    debugMode: _3._debugMode
                                                  }), _3._eventEmitter.emit(
                                                    "ENTRY_RESPONDED",
                                                    { id: C2, decision: P2 }
                                                  ), D3 = null === (k3 = _3._openTelemetry) || void 0 === k3 ? void 0 : k3.trace({
                                                    spanName: "Protoo Noti: entryResponded",
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        {
                                                          id: C2,
                                                          decision: P2
                                                        }
                                                      ),
                                                      sessionId: O3
                                                    },
                                                    span: _3._joinSpan
                                                  }), C2 === _3._peerId && "allowed" === P2 ? (_3.joinRoom(), null === (x2 = _3._openTelemetry) || void 0 === x2 || x2.completeSpan({
                                                    span: D3,
                                                    status: 1,
                                                    message: "EntryResponded Recieved"
                                                  })) : null === (M2 = _3._openTelemetry) || void 0 === M2 || M2.completeSpan({
                                                    span: _3._joinSpan,
                                                    status: 2,
                                                    message: "Join Request Denied"
                                                  }), e8.abrupt("break", 172);
                                                case 23:
                                                  A2 = t5.data, L2 = $(
                                                    He(
                                                      He({}, A2),
                                                      {},
                                                      {
                                                        consumers: [],
                                                        dataConsumers: []
                                                      }
                                                    )
                                                  ), Ve.dispatch(L2), _3._eventEmitter.emit(
                                                    L2.type,
                                                    L2.payload
                                                  ), Ve.dispatch(
                                                    ie({
                                                      text: "".concat(
                                                        A2.displayName,
                                                        " has joined the room"
                                                      )
                                                    })
                                                  );
                                                  try {
                                                    null === (N2 = _3._openTelemetry) || void 0 === N2 || N2.traceAutoComplete({
                                                      spanName: "Protoo Noti: newPeer ".concat(
                                                        A2.displayName
                                                      ),
                                                      attributes: {
                                                        peerData: JSON.stringify(
                                                          A2
                                                        )
                                                      }
                                                    });
                                                  } catch (e9) {
                                                    null === (j2 = _3._videosdkLogs) || void 0 === j2 || j2.pushLogs({
                                                      logText: "Error Protoo Noti: newPeer",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e9.message
                                                      }
                                                    }), console.error(e9);
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    172
                                                  );
                                                case 30:
                                                  return F2 = t5.data.peerId, U2 = K(F2), Ve.dispatch(U2), _3._eventEmitter.emit(
                                                    U2.type,
                                                    U2.payload
                                                  ), null === (B2 = _3._openTelemetry) || void 0 === B2 || B2.traceAutoComplete({
                                                    spanName: "Protoo Noti: peerClosed for ".concat(
                                                      F2
                                                    )
                                                  }), e8.abrupt("break", 172);
                                                case 36:
                                                  return W2 = t5.data, q2 = W2.peerId, V2 = W2.displayName, G2 = W2.oldDisplayName, Ve.dispatch(J(V2, q2)), Ve.dispatch(
                                                    ie({
                                                      text: "".concat(
                                                        G2,
                                                        " is now "
                                                      ).concat(V2)
                                                    })
                                                  ), e8.abrupt("break", 172);
                                                case 40:
                                                  return Ye.debug(
                                                    "'downlinkBwe' event:%o",
                                                    t5.data
                                                  ), e8.abrupt("break", 172);
                                                case 42:
                                                  if (Q2 = t5.data.consumerId, te2 = _3._consumers.get(Q2)) {
                                                    e8.next = 46;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    172
                                                  );
                                                case 46:
                                                  return te2.close(), _3._consumers.delete(Q2), re2 = te2.appData.peerId, ne2 = Y(Q2, re2), Ve.dispatch(ne2), _3._eventEmitter.emit(
                                                    ne2.type,
                                                    ne2.payload
                                                  ), null === (z2 = _3._openTelemetry) || void 0 === z2 || z2.traceAutoComplete({
                                                    spanName: "Protoo Noti: consumerClosed for id ".concat(
                                                      Q2
                                                    ),
                                                    attributes: {
                                                      consumerData: JSON.stringify(
                                                        te2
                                                      )
                                                    }
                                                  }), e8.abrupt("break", 172);
                                                case 54:
                                                  if (oe2 = t5.data.consumerId, ce2 = _3._consumers.get(oe2)) {
                                                    e8.next = 58;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    172
                                                  );
                                                case 58:
                                                  return ce2.pause(), Ve.dispatch(
                                                    X(oe2, "remote")
                                                  ), e8.abrupt("break", 172);
                                                case 61:
                                                  if (de3 = t5.data.consumerId, le3 = _3._consumers.get(de3)) {
                                                    e8.next = 65;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    172
                                                  );
                                                case 65:
                                                  return le3.resume(), Ve.dispatch(
                                                    Z(de3, "remote")
                                                  ), e8.abrupt("break", 172);
                                                case 68:
                                                  if (ue3 = t5.data, he3 = ue3.consumerId, me3 = ue3.spatialLayer, fe3 = ue3.temporalLayer, (ge3 = _3._consumers.get(
                                                    he3
                                                  )).currentSpatialLayer = me3, ge3.currentTemporalLayer = fe3, ge3) {
                                                    e8.next = 74;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    172
                                                  );
                                                case 74:
                                                  return (null === (pe3 = ge3.appData) || void 0 === pe3 || null === (pe3 = pe3.encodings) || void 0 === pe3 ? void 0 : pe3.length) > 1 ? (_3._eventEmitter.emit(
                                                    "VIDEO_QUALITY_CHANGED",
                                                    {
                                                      peerId: ge3.appData.peerId,
                                                      prevQuality: ge3.spatialLayers - 1 - ge3.currentSpatialLayer == 0 ? "HIGH" : ge3.spatialLayers - 1 - ge3.currentSpatialLayer == 1 ? "MEDIUM" : "LOW",
                                                      currentQuality: ge3.spatialLayers - 1 - me3 == 0 ? "HIGH" : ge3.spatialLayers - 1 - me3 == 1 ? "MEDIUM" : "LOW"
                                                    }
                                                  ), null === (_e3 = _3._videosdkLogs) || void 0 === _e3 || _e3.pushLogs({
                                                    logText: "Consumer Peer ".concat(
                                                      ge3.appData.peerId,
                                                      " changed to "
                                                    ).concat(
                                                      ge3.spatialLayers - 1 - me3 == 0 ? "HIGH" : ge3.spatialLayers - 1 - me3 == 1 ? "MEDIUM" : "LOW",
                                                      ", previous quality was "
                                                    ).concat(
                                                      ge3.spatialLayers - 1 - ge3.currentSpatialLayer == 0 ? "HIGH" : ge3.spatialLayers - 1 - ge3.currentSpatialLayer == 1 ? "MEDIUM" : "LOW"
                                                    ),
                                                    logType: "INFO",
                                                    attributes: {
                                                      consumerId: he3
                                                    }
                                                  })) : (_3._eventEmitter.emit(
                                                    "VIDEO_QUALITY_CHANGED",
                                                    {
                                                      peerId: ge3.appData.peerId,
                                                      prevQuality: "HIGH",
                                                      currentQuality: "HIGH"
                                                    }
                                                  ), null === (ve3 = _3._videosdkLogs) || void 0 === ve3 || ve3.pushLogs({
                                                    logText: "Consumer Peer ".concat(
                                                      ge3.appData.peerId,
                                                      " changed to HIGH, previous quality was HIGH"
                                                    ),
                                                    logType: "INFO",
                                                    attributes: {
                                                      consumerId: he3
                                                    }
                                                  })), ge3.currentSpatialLayer = me3, ge3.currentTemporalLayer = fe3, Ve.dispatch(
                                                    ee(he3, me3, fe3)
                                                  ), e8.abrupt("break", 172);
                                                case 79:
                                                  return be3 = t5.data, ye3 = be3.consumerId, we2 = be3.score, Ve.dispatch(ae(ye3, we2)), e8.abrupt("break", 172);
                                                case 82:
                                                  if (Se3 = t5.data.dataConsumerId, Re3 = _3._dataConsumers.get(
                                                    Se3
                                                  )) {
                                                    e8.next = 86;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    172
                                                  );
                                                case 86:
                                                  return Re3.close(), _3._dataConsumers.delete(
                                                    Se3
                                                  ), Ee2 = Re3.appData.peerId, Ve.dispatch(se(Se3, Ee2)), e8.abrupt("break", 172);
                                                case 91:
                                                  return ke2 = t5.data.peerId, Te2 = I(ke2), Ve.dispatch(Te2), _3._eventEmitter.emit(
                                                    Te2.type,
                                                    Te2.payload
                                                  ), e8.abrupt("break", 172);
                                                case 96:
                                                  return _3._eventEmitter.emit(
                                                    "TRANSCRIPTION_STATE_CHANGED",
                                                    t5.data
                                                  ), null === (Ce2 = _3._openTelemetry) || void 0 === Ce2 || Ce2.traceAutoComplete({
                                                    spanName: "Emitted TRANSCRIPTION_STATE_CHANGED, status : ".concat(
                                                      t5.data.status
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        t5.data
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 172);
                                                case 99:
                                                  return _3._eventEmitter.emit(
                                                    "TRANSCRIPTION_TEXT",
                                                    t5.data
                                                  ), e8.abrupt("break", 172);
                                                case 101:
                                                  return _3._eventEmitter.emit(
                                                    "RECORDING_STATE_CHANGED",
                                                    t5.data
                                                  ), null === (Oe3 = _3._openTelemetry) || void 0 === Oe3 || Oe3.traceAutoComplete({
                                                    spanName: "Emitted RECORDING_STATE_CHANGED, status : ".concat(
                                                      t5.data.status
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        t5.data
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 172);
                                                case 104:
                                                  return _3._eventEmitter.emit(
                                                    "RECORDING_STARTED",
                                                    {}
                                                  ), e8.abrupt("break", 172);
                                                case 106:
                                                  return _3._eventEmitter.emit(
                                                    "RECORDING_STOPPED",
                                                    {}
                                                  ), e8.abrupt("break", 172);
                                                case 108:
                                                  return _3._eventEmitter.emit(
                                                    "LIVESTREAM_STATE_CHANGED",
                                                    t5.data
                                                  ), null === (De3 = _3._openTelemetry) || void 0 === De3 || De3.traceAutoComplete({
                                                    spanName: "Emitted LIVESTREAM_STATE_CHANGED, status : ".concat(
                                                      t5.data.status
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        t5.data
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 172);
                                                case 111:
                                                  return _3._eventEmitter.emit(
                                                    "LIVESTREAM_STARTED",
                                                    {}
                                                  ), e8.abrupt("break", 172);
                                                case 113:
                                                  return _3._eventEmitter.emit(
                                                    "LIVESTREAM_STOPPED",
                                                    {}
                                                  ), e8.abrupt("break", 172);
                                                case 115:
                                                  return _3._eventEmitter.emit(
                                                    "HLS_STATE_CHANGED",
                                                    t5.data
                                                  ), null === (xe3 = _3._openTelemetry) || void 0 === xe3 || xe3.traceAutoComplete({
                                                    spanName: "Emitted HLS_STATE_CHANGED, status : ".concat(
                                                      t5.data.status
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        t5.data
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 172);
                                                case 118:
                                                  return t5.data.isPlayable && (_3._eventEmitter.emit(
                                                    "HLS_STATE_CHANGED",
                                                    He(
                                                      He({}, t5.data),
                                                      {},
                                                      {
                                                        status: Pe.V.HLS_PLAYABLE
                                                      }
                                                    )
                                                  ), null === (Ie3 = _3._openTelemetry) || void 0 === Ie3 || Ie3.traceAutoComplete(
                                                    {
                                                      spanName: "Protoo Noti: hlsPlayableStateChanged",
                                                      status: 1
                                                    }
                                                  )), e8.abrupt("break", 172);
                                                case 120:
                                                  return Me3 = t5.data.downstreamUrl, _3._eventEmitter.emit(
                                                    "HLS_STARTED",
                                                    Me3
                                                  ), e8.abrupt("break", 172);
                                                case 123:
                                                  return _3._eventEmitter.emit(
                                                    "HLS_STOPPED",
                                                    {}
                                                  ), e8.abrupt("break", 172);
                                                case 125:
                                                  return Ae3 = t5.data.state, _3._eventEmitter.emit(
                                                    "WHITEBOARD_STARTED",
                                                    { state: Ae3 }
                                                  ), e8.abrupt("break", 172);
                                                case 128:
                                                  return _3._eventEmitter.emit(
                                                    "WHITEBOARD_STOPPED",
                                                    {}
                                                  ), e8.abrupt("break", 172);
                                                case 130:
                                                  return Ne3 = t5.data, je3 = $(
                                                    He(
                                                      He({}, Ne3),
                                                      {},
                                                      {
                                                        consumers: [],
                                                        dataConsumers: []
                                                      }
                                                    )
                                                  ), Ve.dispatch(je3), _3._eventEmitter.emit(
                                                    "ADD_CHARACTER",
                                                    t5.data
                                                  ), null === (Le2 = _3._openTelemetry) || void 0 === Le2 || Le2.traceAutoComplete({
                                                    spanName: "Emitted ADD_CHARACTER : ".concat(
                                                      t5.data
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        t5.data
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 172);
                                                case 136:
                                                  return Ue2 = t5.data.id, We3 = K(Ue2), Ve.dispatch(We3), _3._eventEmitter.emit(
                                                    "REMOVE_CHARACTER",
                                                    t5.data
                                                  ), null === (Fe2 = _3._openTelemetry) || void 0 === Fe2 || Fe2.traceAutoComplete({
                                                    spanName: "Emitted REMOVE_CHARACTER : ".concat(
                                                      t5.data
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        t5.data
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 172);
                                                case 142:
                                                  return _3._eventEmitter.emit(
                                                    "CHARACTER_STATE_CHANGED",
                                                    t5.data
                                                  ), null === (qe3 = _3._openTelemetry) || void 0 === qe3 || qe3.traceAutoComplete({
                                                    spanName: "Emitted CHARACTER_STATE_CHANGED, status : ".concat(
                                                      t5.data.status
                                                    ),
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        t5.data
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 172);
                                                case 145:
                                                  return _3._eventEmitter.emit(
                                                    "CHARACTER_MESSAGE",
                                                    t5.data
                                                  ), e8.abrupt("break", 172);
                                                case 147:
                                                  return _3._eventEmitter.emit(
                                                    "VIDEO_STATE_CHANGED",
                                                    t5.data
                                                  ), e8.abrupt("break", 172);
                                                case 149:
                                                  return Ge2 = t5.data.currentTime, _3._eventEmitter.emit(
                                                    "VIDEO_SEEKED",
                                                    { currentTime: Ge2 }
                                                  ), e8.abrupt("break", 172);
                                                case 152:
                                                  return _3._eventEmitter.emit(
                                                    "CONNECTION_OPEN",
                                                    t5.data
                                                  ), e8.abrupt("break", 172);
                                                case 154:
                                                  return _3._eventEmitter.emit(
                                                    "CONNECTION_CLOSE",
                                                    t5.data
                                                  ), e8.abrupt("break", 172);
                                                case 156:
                                                  return _3._eventEmitter.emit(
                                                    "CONNECTION_CHAT_MESSAGE",
                                                    t5.data
                                                  ), e8.abrupt("break", 172);
                                                case 158:
                                                  return _3._eventEmitter.emit(
                                                    "CONNECTION_PARTICIPANT_JOIN",
                                                    t5.data
                                                  ), e8.abrupt("break", 172);
                                                case 160:
                                                  return _3._eventEmitter.emit(
                                                    "CONNECTION_PARTICIPANT_LEFT",
                                                    t5.data
                                                  ), e8.abrupt("break", 172);
                                                case 162:
                                                  return _3._eventEmitter.emit(
                                                    "PUBSUB_MESSAGE",
                                                    t5.data
                                                  ), e8.abrupt("break", 172);
                                                case 164:
                                                  return _3._eventEmitter.emit(
                                                    "PEER_MODE_CHANGED",
                                                    t5.data
                                                  ), null === (ze2 = _3._openTelemetry) || void 0 === ze2 || ze2.traceAutoComplete({
                                                    spanName: "Emitted PEER_MODE_CHANGED",
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        t5.data
                                                      )
                                                    },
                                                    status: 1
                                                  }), e8.abrupt("break", 172);
                                                case 167:
                                                  return Ke2 = t5.data, Je2 = Ke2.transportId, Qe2 = Ke2.iceParameters, Xe3 = null === ($e2 = _3._openTelemetry) || void 0 === $e2 ? void 0 : $e2.trace({
                                                    spanName: "Protoo Noti: restartIce for transportId :".concat(
                                                      Je2
                                                    ),
                                                    attributes: {
                                                      iceParameters: JSON.stringify(
                                                        Qe2
                                                      )
                                                    }
                                                  }), _3.handleRemoteRestartIce(
                                                    {
                                                      transportId: Je2,
                                                      iceParameters: Qe2,
                                                      internalSpan: Xe3
                                                    }
                                                  ), e8.abrupt("break", 172);
                                                case 171:
                                                  Ye.error(
                                                    'unknown protoo notification.method "%s"',
                                                    t5.method
                                                  );
                                                case 172:
                                                case "end":
                                                  return e8.stop();
                                              }
                                          }, e7);
                                        })
                                      );
                                      return function(t5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  );
                                case 27:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return ir.apply(this, arguments);
                    })
                  },
                  {
                    key: "requestEntry",
                    value: (sr = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return a3 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "Requesting Entry",
                                    span: this._joinSpan
                                  }), e5.next = 3, this._protoo.request("requestEntry", {
                                    name: this._displayName
                                  });
                                case 3:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: a3,
                                    status: 1,
                                    message: "Entry Requested Successfully"
                                  });
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return sr.apply(this, arguments);
                    })
                  },
                  {
                    key: "respondEntry",
                    value: (nr = (0, s.A)(
                      l().mark(function e4(t4, r4) {
                        var a3, n2, s2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return s2 = null === (a3 = this._openTelemetry) || void 0 === a3 ? void 0 : a3.trace({
                                    spanName: "Responding Entry",
                                    attributes: {
                                      peerId: t4,
                                      decision: r4
                                    },
                                    span: this._joinSpan
                                  }), e5.next = 3, this._protoo.request("respondEntry", {
                                    id: t4,
                                    decision: r4
                                  });
                                case 3:
                                  null === (n2 = this._openTelemetry) || void 0 === n2 || n2.completeSpan({
                                    message: "Entry Responded Successfully",
                                    span: s2,
                                    status: 1
                                  });
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return nr.apply(this, arguments);
                    })
                  },
                  {
                    key: "startTranscription",
                    value: (ar = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2, s2, i2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("startTranscription()"), n2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "startTranscription() Start",
                                    attributes: {
                                      config: t4 ? JSON.stringify(t4) : "config Not Specify"
                                    }
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "startTranscription",
                                    { config: t4 }
                                  );
                                case 5:
                                  e5.next = 13;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Ye.error(
                                    "startTranscription() | failed:%o",
                                    e5.t0
                                  ), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "startTranscription() failed"
                                  }), null === (i2 = this._videosdkLogs) || void 0 === i2 || i2.pushLogs({
                                    logText: "Error startTranscription() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4031,
                                    message: e5.t0.message
                                  });
                                case 13:
                                  null === (a3 = this._openTelemetry) || void 0 === a3 || a3.completeSpan({
                                    span: n2,
                                    status: 1,
                                    message: "startTranscription() End"
                                  });
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return ar.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopTranscription",
                    value: (rr = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("stopTranscription()"), a3 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "stopTranscription() Start"
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "stopTranscription",
                                    {}
                                  );
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (n2 = this._openTelemetry) || void 0 === n2 || n2.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "stopTranscription() failed"
                                  }), null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: "Error stopTranscription() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4032,
                                    message: e5.t0.message
                                  });
                                case 12:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: a3,
                                    status: 1,
                                    message: "stopTranscription() End"
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function() {
                      return rr.apply(this, arguments);
                    })
                  },
                  {
                    key: "startRecording",
                    value: (tr = (0, s.A)(
                      l().mark(function e4(t4, r4, a3, n2) {
                        var s2, i2, o2, c2, d3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("startRecording()"), o2 = null === (s2 = this._openTelemetry) || void 0 === s2 ? void 0 : s2.trace({
                                    spanName: "startRecording() Start",
                                    attributes: {
                                      webhookUrl: t4 || "webhookUrl Not Specify",
                                      awsDirPath: r4 || "awsDirPath Not Specify",
                                      config: a3 ? JSON.stringify(a3) : "config Not Specify",
                                      transcription: n2 ? JSON.stringify(n2) : "transcription Not Specify"
                                    }
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request("startRecording", {
                                    webhookUrl: t4,
                                    awsDirPath: r4,
                                    config: a3,
                                    transcription: n2
                                  });
                                case 5:
                                  e5.next = 13;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Ye.error(
                                    "startRecording() | failed:%o",
                                    e5.t0
                                  ), null === (c2 = this._openTelemetry) || void 0 === c2 || c2.completeSpan({
                                    span: o2,
                                    status: 2,
                                    message: "startRecording() failed"
                                  }), null === (d3 = this._videosdkLogs) || void 0 === d3 || d3.pushLogs({
                                    logText: "Error startRecording() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4011,
                                    message: e5.t0.message
                                  });
                                case 13:
                                  null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: o2,
                                    status: 1,
                                    message: "startRecording() End"
                                  });
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4, t4, r4, a3) {
                      return tr.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopRecording",
                    value: (er = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return Ye.debug("stopRecording()"), a3 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "stopRecording() Start"
                                  }), e5.prev = 4, e5.next = 7, this._protoo.request("stopRecording", {});
                                case 7:
                                  e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(4), null === (n2 = this._openTelemetry) || void 0 === n2 || n2.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "stopRecording() failed"
                                  }), null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: "Error stopRecording() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4012,
                                    message: e5.t0.message
                                  });
                                case 14:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: a3,
                                    status: 1,
                                    message: "stopRecording() End"
                                  });
                                case 15:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 9]]
                        );
                      })
                    ), function() {
                      return er.apply(this, arguments);
                    })
                  },
                  {
                    key: "startLivestream",
                    value: (Zt = (0, s.A)(
                      l().mark(function e4(t4, r4) {
                        var a3, n2, s2, i2, o2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("startLivestream()"), s2 = null === (a3 = this._openTelemetry) || void 0 === a3 ? void 0 : a3.trace({
                                    spanName: "startLivestream() Start",
                                    attributes: {
                                      outputs: t4 ? JSON.stringify(t4) : "outputs Not Specify",
                                      config: r4 ? JSON.stringify(r4) : "config Not Specify"
                                    }
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request("startLivestream", {
                                    outputs: t4,
                                    config: r4
                                  });
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "startLivestream() End"
                                  }), null === (o2 = this._videosdkLogs) || void 0 === o2 || o2.pushLogs({
                                    logText: "Error startLivestream() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4013,
                                    message: e5.t0.message
                                  });
                                case 12:
                                  null === (n2 = this._openTelemetry) || void 0 === n2 || n2.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "startLivestream() End"
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4, t4) {
                      return Zt.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopLivestream",
                    value: (Xt = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("stopLivestream()"), a3 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "stopLivestream() Start"
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request("stopLivestream", {});
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (n2 = this._videosdkLogs) || void 0 === n2 || n2.pushLogs({
                                    logText: "Error stopLivestream() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "Error stopLivestream() failed"
                                  }), this._emitError({
                                    code: 4014,
                                    message: e5.t0.message
                                  });
                                case 12:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: a3,
                                    status: 1,
                                    message: "stopLivestream() End"
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function() {
                      return Xt.apply(this, arguments);
                    })
                  },
                  {
                    key: "startHls",
                    value: (Yt = (0, s.A)(
                      l().mark(function e4(t4, r4) {
                        var a3, n2, s2, i2, o2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return t4 = t4 || {}, r4 = r4 || {}, Ye.debug("startHls()"), s2 = null === (a3 = this._openTelemetry) || void 0 === a3 ? void 0 : a3.trace({
                                    spanName: "startHls() Start",
                                    attributes: {
                                      config: t4 ? JSON.stringify(t4) : "config Not Specify",
                                      transcription: r4 ? JSON.stringify(r4) : "transcription Not Specify"
                                    }
                                  }), e5.prev = 4, e5.next = 7, this._protoo.request("startHls", {
                                    config: t4,
                                    transcription: r4
                                  });
                                case 7:
                                  e5.next = 15;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(4), null === (i2 = this._videosdkLogs) || void 0 === i2 || i2.pushLogs({
                                    logText: "Error startHls() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "Error startHls() failed"
                                  }), this._emitError({
                                    code: 4016,
                                    message: e5.t0.message
                                  }), Ye.error("startHls() | failed:%o", e5.t0);
                                case 15:
                                  null === (n2 = this._openTelemetry) || void 0 === n2 || n2.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "startHlsSpan() End"
                                  });
                                case 16:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 9]]
                        );
                      })
                    ), function(e4, t4) {
                      return Yt.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopHls",
                    value: (Qt = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("stopHls()"), a3 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "stopHls() Start"
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request("stopHls", {});
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (n2 = this._videosdkLogs) || void 0 === n2 || n2.pushLogs({
                                    logText: "Error stopHls() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "Error stopHls() failed"
                                  }), this._emitError({
                                    code: 4017,
                                    message: e5.t0.message
                                  });
                                case 12:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: a3,
                                    status: 1,
                                    message: "stopHls() End"
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function() {
                      return Qt.apply(this, arguments);
                    })
                  },
                  {
                    key: "startWhiteboard",
                    value: (Jt = (0, s.A)(
                      l().mark(function e4() {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("startWhiteboard()"), e5.prev = 1, e5.next = 4, this._protoo.request(
                                    "startWhiteboard",
                                    {}
                                  );
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Ye.error(
                                    "startWhiteboard() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3021,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function() {
                      return Jt.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopWhiteboard",
                    value: (Kt = (0, s.A)(
                      l().mark(function e4() {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("stopWhiteboard()"), e5.prev = 1, e5.next = 4, this._protoo.request("stopWhiteboard", {});
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Ye.error(
                                    "stopWhiteboard() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3022,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function() {
                      return Kt.apply(this, arguments);
                    })
                  },
                  {
                    key: "joinCharacter",
                    value: ($t = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2, s2, i2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("joinCharacter()"), n2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "joinCharacter() Start",
                                    attributes: {
                                      config: t4 ? JSON.stringify(t4) : "config Not Specify"
                                    }
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request("joinCharacter", {
                                    config: t4
                                  });
                                case 5:
                                  return e5.abrupt("return", e5.sent);
                                case 8:
                                  e5.prev = 8, e5.t0 = e5.catch(2), Ye.error(
                                    "joinCharacter() | failed:%o",
                                    e5.t0
                                  ), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "joinCharacter() failed"
                                  }), null === (i2 = this._videosdkLogs) || void 0 === i2 || i2.pushLogs({
                                    logText: "Error joinCharacter() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4033,
                                    message: e5.t0.message
                                  });
                                case 14:
                                  return null === (a3 = this._openTelemetry) || void 0 === a3 || a3.completeSpan({
                                    span: n2,
                                    status: 1,
                                    message: "joinCharacter() End"
                                  }), e5.abrupt("return", false);
                                case 16:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 8]]
                        );
                      })
                    ), function(e4) {
                      return $t.apply(this, arguments);
                    })
                  },
                  {
                    key: "removeCharacter",
                    value: (zt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2, s2, i2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("removeCharacter()"), n2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "removeCharacter() Start"
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request("leaveCharacter", {
                                    config: t4
                                  });
                                case 5:
                                  e5.next = 14;
                                  break;
                                case 7:
                                  return e5.prev = 7, e5.t0 = e5.catch(2), Ye.error(
                                    "removeCharacter() | failed:%o",
                                    e5.t0
                                  ), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "removeCharacter() failed"
                                  }), null === (i2 = this._videosdkLogs) || void 0 === i2 || i2.pushLogs({
                                    logText: "Error removeCharacter() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 4034,
                                    message: e5.t0.message
                                  }), e5.abrupt("return", false);
                                case 14:
                                  return null === (a3 = this._openTelemetry) || void 0 === a3 || a3.completeSpan({
                                    span: n2,
                                    status: 1,
                                    message: "removeCharacter() End"
                                  }), e5.abrupt("return", true);
                                case 16:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return zt.apply(this, arguments);
                    })
                  },
                  {
                    key: "sendCharacterMessage",
                    value: (Gt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.interactionId, a3 = t4.text, Ye.debug("sendCharacterMessage()"), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "sendCharacterMessage",
                                    { interactionId: r4, text: a3 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Ye.error(
                                    "sendCharacterMessage() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 4035,
                                    message: e5.t0.message
                                  });
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Gt.apply(this, arguments);
                    })
                  },
                  {
                    key: "interruptCharacter",
                    value: (Vt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.interactionId, Ye.debug("interruptCharacter()"), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "interruptCharacter",
                                    { interactionId: r4 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Ye.error(
                                    "interruptCharacter() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 4036,
                                    message: e5.t0.message
                                  });
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Vt.apply(this, arguments);
                    })
                  },
                  {
                    key: "pinStateChange",
                    value: (Ht = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2, s2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return a3 = t4.peerId, n2 = t4.state, null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Pin state Change for ".concat(a3),
                                    attributes: {
                                      state: n2 ? JSON.stringify(n2) : null
                                    },
                                    status: 1
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request("pinStateChanged", {
                                    peerId: a3,
                                    state: n2
                                  });
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: "Error pinStateChange() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error("pinStateChange() | failed");
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Ht.apply(this, arguments);
                    })
                  },
                  {
                    key: "startVideo",
                    value: (qt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return a3 = t4.link, Ye.debug("startVideo()"), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "startVideo() Calling",
                                    logType: "INFO"
                                  }), e5.prev = 3, e5.next = 6, this._protoo.request("startVideo", {
                                    link: a3
                                  });
                                case 6:
                                  e5.next = 13;
                                  break;
                                case 8:
                                  e5.prev = 8, e5.t0 = e5.catch(3), null === (n2 = this._videosdkLogs) || void 0 === n2 || n2.pushLogs({
                                    logText: "Error startVideo() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error(
                                    "startVideo() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3023,
                                    message: e5.t0.message
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 8]]
                        );
                      })
                    ), function(e4) {
                      return qt.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopVideo",
                    value: (Wt = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("stopVideo()"), null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "stopVideo() Calling",
                                    logType: "INFO"
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request("stopVideo", {});
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Error stopVideo() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error("stopVideo() | failed:%o", e5.t0), this._emitError({
                                    code: 3024,
                                    message: e5.t0.message
                                  });
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function() {
                      return Wt.apply(this, arguments);
                    })
                  },
                  {
                    key: "pauseVideo",
                    value: (Ut = (0, s.A)(
                      l().mark(function e4(t4) {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("pauseVideo()"), e5.prev = 1, e5.next = 4, this._protoo.request("pauseVideo", {
                                    currentTime: t4
                                  });
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Ye.error(
                                    "pauseVideo() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3025,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function(e4) {
                      return Ut.apply(this, arguments);
                    })
                  },
                  {
                    key: "resumeVideo",
                    value: (Ft = (0, s.A)(
                      l().mark(function e4() {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("resumeVideo()"), e5.prev = 1, e5.next = 4, this._protoo.request("resumeVideo", {});
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Ye.error(
                                    "resumeVideo() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3026,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function() {
                      return Ft.apply(this, arguments);
                    })
                  },
                  {
                    key: "seekVideo",
                    value: (Bt = (0, s.A)(
                      l().mark(function e4(t4) {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("seekVideo()"), e5.prev = 1, e5.next = 4, this._protoo.request("seekVideo", {
                                    currentTime: t4
                                  });
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Ye.error("seekVideo() | failed:%o", e5.t0), this._emitError({
                                    code: 3031,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function(e4) {
                      return Bt.apply(this, arguments);
                    })
                  },
                  {
                    key: "enablePeerMic",
                    value: (jt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Enabling peer ".concat(
                                      t4,
                                      " Mic"
                                    ),
                                    status: 1
                                  }), Ye.debug("enablePeerMic()"), e5.prev = 2, e5.next = 5, this._protoo.request("enablePeerMic", {
                                    peerId: t4
                                  });
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (a3 = this._videosdkLogs) || void 0 === a3 || a3.pushLogs({
                                    logText: "Error enablePeerMic() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error(
                                    "enablePeerMic() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return jt.apply(this, arguments);
                    })
                  },
                  {
                    key: "disablePeerMic",
                    value: (Nt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Disabling peer ".concat(
                                      t4,
                                      " Mic"
                                    ),
                                    status: 1
                                  }), Ye.debug("disablePeerMic()"), e5.prev = 2, e5.next = 5, this._protoo.request("disablePeerMic", {
                                    peerId: t4
                                  });
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (a3 = this._videosdkLogs) || void 0 === a3 || a3.pushLogs({
                                    logText: "Error disablePeerMic() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error(
                                    "disablePeerMic() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Nt.apply(this, arguments);
                    })
                  },
                  {
                    key: "consumeWebcamStreams",
                    value: (Lt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return Ye.debug("consumeWebcamStreams()"), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "consumeWebcamStreams() Calling",
                                    logType: "INFO",
                                    attributes: { peerId: t4 }
                                  }), e5.prev = 4, e5.next = 7, this._protoo.request(
                                    "consumeVideoStreams",
                                    { peerId: t4 }
                                  );
                                case 7:
                                  e5.next = 13;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(4), null === (a3 = this._videosdkLogs) || void 0 === a3 || a3.pushLogs({
                                    logText: "Error consumeWebcamStreams() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error(
                                    "consumeWebcamStreams() | failed:%o",
                                    e5.t0
                                  );
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 9]]
                        );
                      })
                    ), function(e4) {
                      return Lt.apply(this, arguments);
                    })
                  },
                  {
                    key: "consumeMicStreams",
                    value: (At = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("consumeMicStreams()"), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "consumeMicStreams() Calling",
                                    logType: "INFO",
                                    attributes: { peerId: t4 }
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "consumeAudioStreams",
                                    { peerId: t4 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (a3 = this._videosdkLogs) || void 0 === a3 || a3.pushLogs({
                                    logText: "Error consumeMicStreams() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error(
                                    "consumeMicStreams() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return At.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopConsumingMicStreams",
                    value: (Mt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return Ye.debug("stopConsumingAudioStreams()"), e5.prev = 3, e5.next = 6, this._protoo.request(
                                    "stopConsumingAudioStreams",
                                    { peerId: t4 }
                                  );
                                case 6:
                                  null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "stopConsumingAudioStreams() Calling",
                                    logType: "INFO",
                                    attributes: { peerId: t4 }
                                  }), e5.next = 13;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(3), null === (a3 = this._videosdkLogs) || void 0 === a3 || a3.pushLogs({
                                    logText: "Error stopConsumingMicStreams() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error(
                                    "stopConsumingMicStreams() | failed:%o",
                                    e5.t0
                                  );
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 9]]
                        );
                      })
                    ), function(e4) {
                      return Mt.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopConsumingWebcamStreams",
                    value: (It = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("stopConsumingWebcamStreams()"), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "stopConsumingWebcamStreams() Calling",
                                    logType: "INFO",
                                    attributes: { peerId: t4 }
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "stopConsumingVideoStreams",
                                    { peerId: t4 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (a3 = this._videosdkLogs) || void 0 === a3 || a3.pushLogs({
                                    logText: "Error stopConsumingWebcamStreams() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error(
                                    "stopConsumingWebcamStreams() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return It.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeMode",
                    value: (xt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2, s2, i2, o2, c2, d3, p2, h3, m3, f3, g3, _3, v3, b3, y2, w3, S3, R3, E3, k3, T3, C2, O3, D3, x2, I2 = this;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (a3 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "changeMode() Calling with mode : ".concat(
                                      t4
                                    )
                                  }), n2 = this._mode, e5.prev = 2, n2 !== t4) {
                                    e5.next = 7;
                                    break;
                                  }
                                  throw null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "changeMode() Ending"
                                  }), null === (i2 = this._videosdkLogs) || void 0 === i2 || i2.pushLogs({
                                    logText: "You are already in ".concat(
                                      t4,
                                      " mode"
                                    ),
                                    logType: "INFO"
                                  }), new Error(
                                    "You are already in ".concat(t4, " mode")
                                  );
                                case 7:
                                  if (this._mode = t4, t4 !== Ce.n.CONFERENCE) {
                                    e5.next = 38;
                                    break;
                                  }
                                  return this._consume = true, this._produce = true, this._mediasoupDevice = new u.Device({
                                    handlerName: this._handlerName
                                  }), e5.next = 14, this._protoo.request(
                                    "getRouterRtpCapabilities"
                                  );
                                case 14:
                                  return d3 = e5.sent, e5.next = 17, this._mediasoupDevice.load({
                                    routerRtpCapabilities: d3
                                  });
                                case 17:
                                  if (!this._produce) {
                                    e5.next = 22;
                                    break;
                                  }
                                  return e5.next = 20, this._protoo.request(
                                    "createWebRtcTransport",
                                    {
                                      preferredProtocol: this._preferredProtocol,
                                      producing: true,
                                      consuming: false,
                                      sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : void 0
                                    }
                                  );
                                case 20:
                                  p2 = e5.sent, this.createProducerTransport(p2, a3);
                                case 22:
                                  if (!this._consume) {
                                    e5.next = 29;
                                    break;
                                  }
                                  return e5.next = 25, this._protoo.request(
                                    "createWebRtcTransport",
                                    {
                                      preferredProtocol: this._preferredProtocol,
                                      producing: false,
                                      consuming: true,
                                      sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : void 0
                                    }
                                  );
                                case 25:
                                  h3 = e5.sent, m3 = h3.id, f3 = h3.iceParameters, g3 = h3.iceCandidates, _3 = h3.dtlsParameters, v3 = h3.sctpParameters, this._recvTransport = this._mediasoupDevice.createRecvTransport(
                                    {
                                      id: m3,
                                      iceParameters: f3,
                                      iceCandidates: g3,
                                      dtlsParameters: _3,
                                      sctpParameters: v3,
                                      iceServers: this._iceServers
                                    }
                                  ), this._recvTransport.on(
                                    "connect",
                                    function(e6, t5, r5) {
                                      var a4 = e6.dtlsParameters;
                                      I2._protoo.request("connectWebRtcTransport", {
                                        transportId: I2._recvTransport.id,
                                        dtlsParameters: a4
                                      }).then(t5).catch(r5);
                                    }
                                  );
                                case 29:
                                  return null === (o2 = this._openTelemetry) || void 0 === o2 || o2.traceAutoComplete({
                                    spanName: "Sending changeMode request to server",
                                    span: a3,
                                    status: 1
                                  }), e5.next = 32, this._protoo.request("changeMode", {
                                    mode: t4
                                  });
                                case 32:
                                  this._produce && (Ve.dispatch(
                                    A({
                                      canSendMic: this._mediasoupDevice.canProduce(
                                        "audio"
                                      ),
                                      canSendWebcam: this._mediasoupDevice.canProduce(
                                        "video"
                                      )
                                    })
                                  ), this._micEnabled && this.enableMic(
                                    this.customMicrophoneAudioTrack
                                  ), b3 = P(), this._webcamEnabled && (!b3 || b3.webcamEnabled || this._externalVideo) && this.enableWebcam(
                                    this.customCameraVideoTrack,
                                    a3
                                  ), this.enableChatDataProducer()), window.SHOW_INFO && (y2 = Ve.getState(), w3 = y2.me, Ve.dispatch(M(w3.id))), null === (c2 = this._openTelemetry) || void 0 === c2 || c2.traceAutoComplete({
                                    spanName: "Emitting PEER_MODE_CHANGED for Peer : ".concat(
                                      this._peerId,
                                      " "
                                    ),
                                    span: a3,
                                    status: 1
                                  }), this._eventEmitter.emit(
                                    "PEER_MODE_CHANGED",
                                    {
                                      peerId: this._peerId,
                                      mode: "CONFERENCE"
                                    }
                                  ), e5.next = 52;
                                  break;
                                case 38:
                                  if (t4 !== Ce.n.VIEWER) {
                                    e5.next = 52;
                                    break;
                                  }
                                  return null === (S3 = this._openTelemetry) || void 0 === S3 || S3.traceAutoComplete({
                                    spanName: "Sending changeMode request to server",
                                    span: a3,
                                    status: 1
                                  }), e5.next = 42, this._protoo.request("changeMode", {
                                    mode: t4
                                  });
                                case 42:
                                  this._consume = false, this._produce = false, this._dataConsumers.clear(), O3 = null === (R3 = this._openTelemetry) || void 0 === R3 ? void 0 : R3.trace({
                                    spanName: "Closing Trasnport",
                                    span: a3
                                  }), null === (E3 = this._sendTransport) || void 0 === E3 || E3.close(), this._sendTransport = null, null === (k3 = this._recvTransport) || void 0 === k3 || k3.close(), this._recvTransport = null, null === (T3 = this._openTelemetry) || void 0 === T3 || T3.completeSpan({
                                    span: O3,
                                    status: 1,
                                    message: "Closed Trasnport"
                                  }), null === (C2 = this._openTelemetry) || void 0 === C2 || C2.completeSpan({
                                    span: O3,
                                    status: 1,
                                    message: "changeMode() Ending"
                                  });
                                case 52:
                                  e5.next = 58;
                                  break;
                                case 54:
                                  e5.prev = 54, e5.t0 = e5.catch(2), null === (D3 = this._videosdkLogs) || void 0 === D3 || D3.pushLogs({
                                    logText: "Error changeMode(".concat(
                                      t4,
                                      ") | failed"
                                    ),
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (x2 = this._openTelemetry) || void 0 === x2 || x2.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "changeMode(".concat(
                                      t4,
                                      ") | failed"
                                    )
                                  });
                                case 58:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 54]]
                        );
                      })
                    ), function(e4) {
                      return xt.apply(this, arguments);
                    })
                  },
                  {
                    key: "enablePeerWebcam",
                    value: (Dt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Enabling peer ".concat(
                                      t4,
                                      " Webcam"
                                    ),
                                    status: 1
                                  }), Ye.debug("enablePeerWebcam()"), e5.prev = 2, e5.next = 5, this._protoo.request("enablePeerWebcam", {
                                    peerId: t4
                                  });
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (a3 = this._videosdkLogs) || void 0 === a3 || a3.pushLogs({
                                    logText: "Error enablePeerWebcam | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error(
                                    "enablePeerWebcam() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Dt.apply(this, arguments);
                    })
                  },
                  {
                    key: "disablePeerWebcam",
                    value: (Ot = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Disabling peer ".concat(
                                      t4,
                                      " Webcam"
                                    ),
                                    status: 1
                                  }), Ye.debug("disablePeerWebcam()"), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "disablePeerWebcam",
                                    { peerId: t4 }
                                  );
                                case 5:
                                  e5.next = 10;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), null === (a3 = this._videosdkLogs) || void 0 === a3 || a3.pushLogs({
                                    logText: "Error disablePeerWebcam | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Ot.apply(this, arguments);
                    })
                  },
                  {
                    key: "getMicStats",
                    value: function(e4) {
                      var t4 = this;
                      if (this._micProducer) {
                        var r4 = 0;
                        e4.onStatsCollected = function(e5) {
                          var a3;
                          (t4._stats.producerStats || (t4._stats.producerStats = {}), t4._stats.producerStats.audio || (t4._stats.producerStats.audio = []), t4._micProducer) && (t4._latestStats[null === (a3 = t4._micProducer) || void 0 === a3 ? void 0 : a3.id] = []);
                          e5.audio.forEach(function(e6) {
                            var r5;
                            t4._micProducer && t4._latestStats[null === (r5 = t4._micProducer) || void 0 === r5 ? void 0 : r5.id].push(e6);
                          }), r4 % 5 == 0 && null != t4._micProducer && t4._stats.producerStats.audio.push(
                            He(
                              { timestamp: /* @__PURE__ */ new Date() },
                              t4._latestStats[t4._micProducer.id] ? t4._latestStats[t4._micProducer.id][0] : {}
                            )
                          ), r4++;
                        };
                      }
                    }
                  },
                  {
                    key: "enableMic",
                    value: (Pt = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2, i2, o2, c2, d3, p2, u2, h3, m3, f3, g3, _3, v3, b3, y2, w3, S3, R3, E3, k3, T3, C2, P2, O3, D3, x2, I2, M2, A2, L2, N2, j2, B2, F2, q2, H2, V2, G2, z2, $2, K2, J2, Q2, Y2, X2, Z2, ee2, te2, re2, ae2, ne2, se2, oe2, de3, le3, pe3, ue3, he3, me3, fe3, ge3, _e3, ve3, be3, ye3, we2, Se3, Re3 = this, Ee2 = arguments;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (i2 = Ee2.length > 0 && void 0 !== Ee2[0] ? Ee2[0] : void 0, o2 = Ee2.length > 1 && void 0 !== Ee2[1] ? Ee2[1] : void 0, c2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "enableMic() Calling ".concat(
                                      i2 ? "With Custom Audio Track" : "Without Custom Audio Track "
                                    ),
                                    attributes: {
                                      customAudioConfig: i2 ? JSON.stringify(i2) : "Not Specify Custom Track"
                                    },
                                    span: o2 || null
                                  }), Ye.debug("enableMic()"), this._micEnabled = true, !this._micProducer) {
                                    e5.next = 27;
                                    break;
                                  }
                                  if (u2 = null === (d3 = this._openTelemetry) || void 0 === d3 ? void 0 : d3.trace({
                                    spanName: "Mic Producer found",
                                    span: c2
                                  }), i2 && (null === (h3 = this._openTelemetry) || void 0 === h3 || h3.traceAutoComplete({
                                    spanName: "Stopping customAudioTrack",
                                    span: c2,
                                    status: 1
                                  }), i2.getTracks().forEach(function(e6) {
                                    e6.stop();
                                  })), null === (p2 = this._openTelemetry) || void 0 === p2 || p2.completeSpan({
                                    span: u2,
                                    status: 1,
                                    message: "Resuming Mic Producer"
                                  }), this._micProducer.resume(), m3 = this._micProducer, !this._sendTransport) {
                                    e5.next = 18;
                                    break;
                                  }
                                  return e5.next = 14, this._sendTransport.produce({
                                    track: this._micProducer.track,
                                    encodings: this._micProducer._appData.encodings,
                                    codecOptions: this._micProducer._appData.codecOptions
                                  });
                                case 14:
                                  this._micProducer = e5.sent, this._micProducer ? (g3 = U({
                                    id: this._micProducer.id,
                                    paused: this._micProducer.paused,
                                    track: this._micProducer.track,
                                    rtpParameters: this._micProducer.rtpParameters,
                                    codec: this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    encodings: m3._appData.encodings,
                                    codecOptions: m3._appData.codecOptions,
                                    instance: this._micProducer
                                  }), this._micProducer.track.getConstraints().deviceId && (this._mic.device = this._mics.get(
                                    this._micProducer.track.getConstraints().deviceId
                                  )), Ve.dispatch(g3), this._eventEmitter.emit(
                                    g3.type,
                                    g3.payload
                                  ), null === (f3 = this._openTelemetry) || void 0 === f3 || f3.completeSpan({
                                    span: c2,
                                    status: 1,
                                    message: "Enable Mic Successful"
                                  })) : null === (_3 = this._openTelemetry) || void 0 === _3 || _3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableMic() :: micProducer null"
                                  }), e5.next = 21;
                                  break;
                                case 18:
                                  return null === (v3 = this._videosdkLogs) || void 0 === v3 || v3.pushLogs({
                                    logText: ke.q.ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED.message,
                                    attributes: {
                                      error: "Error in enableMic() :: Transport is not setup"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), this._emitError(
                                    ke.q.ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                  ), e5.abrupt("return");
                                case 21:
                                  return this._micProducer.observer.on(
                                    "pause",
                                    function() {
                                      var e6 = Re3._metrics.getProbe(
                                        "mic_producer"
                                      );
                                      null == e6 || e6.stop(), Re3._latestStats[Re3._micProducer.id] = [], Re3._metrics.removeExistingProbe(e6);
                                    }
                                  ), this._micProducer.observer.on(
                                    "close",
                                    function() {
                                      var e6 = Re3._metrics.getProbe(
                                        "mic_producer"
                                      );
                                      null == e6 || e6.stop(), Re3._latestStats[Re3._micProducer.id] = [], Re3._metrics.removeExistingProbe(e6);
                                    }
                                  ), b3 = this._metrics.addNewProbe(
                                    this._micProducer,
                                    { name: "mic_producer" }
                                  ), this.getMicStats(b3), b3.start(), e5.abrupt("return");
                                case 27:
                                  if (!this._mediasoupDevice) {
                                    e5.next = 36;
                                    break;
                                  }
                                  if (this._mediasoupDevice.canProduce("audio")) {
                                    e5.next = 34;
                                    break;
                                  }
                                  return S3 = "react-native" == this._deviceInfo.sdkType ? ke.q.ERROR_RN_MIC_ACCESS_UNAVAILABLE.message : ke.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE.message, null === (y2 = this._videosdkLogs) || void 0 === y2 || y2.pushLogs({
                                    logText: S3,
                                    attributes: {
                                      error: "Error in enableMic() :: Microphone access unavailable"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), Ye.error(
                                    "enableMic() | cannot produce audio"
                                  ), null === (w3 = this._openTelemetry) || void 0 === w3 || w3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableMic() :: ".concat(
                                      S3
                                    )
                                  }), e5.abrupt("return");
                                case 34:
                                  e5.next = 39;
                                  break;
                                case 36:
                                  return null === (R3 = this._videosdkLogs) || void 0 === R3 || R3.pushLogs({
                                    logText: "Oops! Something went wrong, and we're unable to enable the mic. Please try again.",
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic(): Something went wrong."
                                    },
                                    dashboardLog: true
                                  }), null === (E3 = this._openTelemetry) || void 0 === E3 || E3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableMic() :: mediasoupDevice is undefined"
                                  }), e5.abrupt("return");
                                case 39:
                                  if (e5.prev = 39, this._externalVideo) {
                                    e5.next = 106;
                                    break;
                                  }
                                  return Ye.debug(
                                    "enableMic() | calling getUserMedia()"
                                  ), e5.next = 44, this._updateMics(c2);
                                case 44:
                                  if (this._mic.device) {
                                    e5.next = 47;
                                    break;
                                  }
                                  throw new Error(
                                    "Whoops! No Microphone Found: We couldn't find your microphone. Is it plugged in and turned on? If so, try restarting your computer or checking your device settings. Also, ensure you're on a secure website (https://)."
                                  );
                                case 47:
                                  try {
                                    i2 && "ended" == (k3 = i2.getAudioTracks()[0]).readyState && (k3 = null, M2 = ke.q.ERROR_CUSTOM_AUDIO_TRACK_ENDED, null === (I2 = this._videosdkLogs) || void 0 === I2 || I2.pushLogs({
                                      logText: M2.message,
                                      logType: "INFO",
                                      attributes: {
                                        error: "In enableMic() :: Invalid Custom Track Passed"
                                      },
                                      dashboardLog: true
                                    }), this._emitError(M2));
                                  } catch (e6) {
                                    L2 = ke.q.ERROR_INVALID_CUSTOM_AUDIO_TRACK, null === (A2 = this._videosdkLogs) || void 0 === A2 || A2.pushLogs({
                                      logText: L2.message,
                                      logType: "INFO",
                                      attributes: {
                                        error: "In enableMic() :: Invalid Custom Track Passed"
                                      }
                                    }), this._emitError(L2), console.log(
                                      "Invalid Custom Audio Track Passed. Reverting to default Error: ".concat(
                                        e6
                                      )
                                    );
                                  }
                                  if (k3) {
                                    e5.next = 104;
                                    break;
                                  }
                                  return B2 = null === (N2 = this._openTelemetry) || void 0 === N2 ? void 0 : N2.trace({
                                    spanName: "Creating Track",
                                    span: c2
                                  }), e5.prev = 50, e5.next = 53, navigator.mediaDevices.getUserMedia({
                                    audio: {
                                      deviceId: {
                                        ideal: this._mic.device.deviceId
                                      },
                                      channelCount: 1,
                                      noiseSuppression: true,
                                      echoCancellation: true,
                                      googEchoCancellation: true,
                                      googEchoCancellation2: true,
                                      googAutoGainControl: true,
                                      googAutoGainControl2: true,
                                      googNoiseSuppression: true,
                                      googNoiseSuppression2: true,
                                      googHighpassFilter: true
                                    }
                                  });
                                case 53:
                                  F2 = e5.sent, e5.next = 102;
                                  break;
                                case 56:
                                  if (e5.prev = 56, e5.t0 = e5.catch(50), null === (q2 = this._openTelemetry) || void 0 === q2 || q2.completeSpan({
                                    message: "Error in enableMic() :: ".concat(
                                      e5.t0.message
                                    ),
                                    span: B2,
                                    status: 2
                                  }), "SecurityError" !== e5.t0.name) {
                                    e5.next = 67;
                                    break;
                                  }
                                  G2 = ke.q.ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED, z2 = G2.message, this._emitError(G2), null === (H2 = this._videosdkLogs) || void 0 === H2 || H2.pushLogs({
                                    logText: z2,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic() :: Microphone Permission Denied or Dismissed"
                                    },
                                    dashboardLog: true
                                  }), null === (V2 = this._openTelemetry) || void 0 === V2 || V2.completeSpan({
                                    message: "Error in enableMic() :: occurred in creating audio track, ".concat(
                                      z2
                                    ),
                                    span: c2,
                                    status: 2
                                  }), e5.next = 101;
                                  break;
                                case 67:
                                  if ("DOMException" !== e5.t0.name) {
                                    e5.next = 75;
                                    break;
                                  }
                                  J2 = ke.q.ERROR_RN_MIC_NOT_FOUND, Q2 = J2.message, this._emitError(J2), null === ($2 = this._videosdkLogs) || void 0 === $2 || $2.pushLogs({
                                    logText: Q2,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic() :: No Microphone Device Found"
                                    },
                                    dashboardLog: true
                                  }), null === (K2 = this._openTelemetry) || void 0 === K2 || K2.completeSpan({
                                    message: "Error in enableMic() :: occurred in creating audio track, ".concat(
                                      Q2
                                    ),
                                    span: c2,
                                    status: 2
                                  }), e5.next = 101;
                                  break;
                                case 75:
                                  if (!(e5.t0 instanceof DOMException)) {
                                    e5.next = 98;
                                    break;
                                  }
                                  e5.t1 = e5.t0.name, e5.next = "NotAllowedError" === e5.t1 ? 79 : "NotReadableError" === e5.t1 ? 82 : "NotFoundError" === e5.t1 ? 85 : 92;
                                  break;
                                case 79:
                                  return Y2 = this.handleNotAllowedError(
                                    e5.t0,
                                    this._openTelemetry,
                                    this._videosdkLogs,
                                    c2,
                                    "audio"
                                  ), this._emitError(Y2), e5.abrupt("break", 96);
                                case 82:
                                  return X2 = this.handleNotReadableError(
                                    e5.t0,
                                    this._openTelemetry,
                                    this._videosdkLogs,
                                    c2,
                                    "audio"
                                  ), this._emitError(X2), e5.abrupt("break", 96);
                                case 85:
                                  return Z2 = ke.q.ERROR_MICROPHONE_NOT_FOUND, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                    "Firefox"
                                  ) && (Z2 = ke.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS), ee2 = Z2.message, this._emitError(Z2), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: ee2,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic() :: No Microphone Device Found"
                                    },
                                    dashboardLog: true
                                  }), null === (a3 = this._openTelemetry) || void 0 === a3 || a3.completeSpan({
                                    message: "Error in enableMic() :: occurred in creating audio track, ".concat(
                                      ee2
                                    ),
                                    span: c2,
                                    status: 2
                                  }), e5.abrupt("break", 96);
                                case 92:
                                  return te2 = "An error occurred in creating audio track, ".concat(
                                    e5.t0.message
                                  ), null === (n2 = this._videosdkLogs) || void 0 === n2 || n2.pushLogs({
                                    logText: e5.t0.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic() :: ".concat(
                                        te2
                                      )
                                    },
                                    dashboardLog: true
                                  }), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    message: "Error in enableMic() :: ".concat(
                                      te2
                                    ),
                                    span: c2,
                                    status: 2
                                  }), e5.abrupt("break", 96);
                                case 96:
                                  e5.next = 101;
                                  break;
                                case 98:
                                  ne2 = "An error occurred in creating audio track, ".concat(
                                    e5.t0.message
                                  ), null === (re2 = this._videosdkLogs) || void 0 === re2 || re2.pushLogs({
                                    logText: e5.t0.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic() :: ".concat(
                                        ne2
                                      )
                                    },
                                    dashboardLog: true
                                  }), null === (ae2 = this._openTelemetry) || void 0 === ae2 || ae2.completeSpan({
                                    message: "Error in enableMic() :: ".concat(
                                      ne2
                                    ),
                                    span: c2,
                                    status: 2
                                  });
                                case 101:
                                  return e5.abrupt("return");
                                case 102:
                                  k3 = F2.getAudioTracks()[0], null === (j2 = this._openTelemetry) || void 0 === j2 || j2.completeSpan({
                                    message: "Audio Track Generated",
                                    span: B2,
                                    status: 1
                                  });
                                case 104:
                                  e5.next = 110;
                                  break;
                                case 106:
                                  return e5.next = 108, this._getExternalVideoStream();
                                case 108:
                                  se2 = e5.sent, k3 = se2.getAudioTracks()[0].clone();
                                case 110:
                                  if (T3 = null === (C2 = this._openTelemetry) || void 0 === C2 ? void 0 : C2.trace({
                                    spanName: "Generating Producer Configuration",
                                    span: c2
                                  }), oe2 = { opusStereo: 1, opusDtx: 1 }, i2 && (de3 = i2.encoderConfig ? ce.$.audioProfiles[i2.encoderConfig] : ce.$.audioProfiles.speech_standard, oe2 = {
                                    opusStereo: de3.stereo ? 1 : 0,
                                    opusFec: de3.fec ? 1 : 0,
                                    opusDtx: de3.dtx ? 1 : 0,
                                    opusMaxPlaybackRate: de3.maxPlaybackRate,
                                    opusPtime: de3.packetTime
                                  }), pe3 = {
                                    encodings: le3 = [
                                      { networkPriority: "high" }
                                    ],
                                    codecOptions: oe2
                                  }, null === (P2 = this._openTelemetry) || void 0 === P2 || P2.traceAutoComplete({
                                    spanName: "Generated AppData",
                                    span: T3,
                                    attributes: {
                                      appData: JSON.stringify(pe3)
                                    },
                                    status: 1
                                  }), null === (O3 = this._openTelemetry) || void 0 === O3 || O3.completeSpan({
                                    span: T3,
                                    status: 1,
                                    message: "Producer Configuration Generated"
                                  }), T3 = null === (D3 = this._openTelemetry) || void 0 === D3 ? void 0 : D3.trace({
                                    spanName: "Creating Mic Producer",
                                    span: c2
                                  }), null === (x2 = k3) || void 0 === x2 || x2.addEventListener(
                                    "ended",
                                    function() {
                                      console.log("Track Ended Error");
                                      try {
                                        var e6, t5, r5 = "react-native" == Re3._deviceInfo.sdkType ? ke.q.ERROR_RN_MIC_TRACK_ENDED : ke.q.ERROR_MICROPHONE_TRACK_ENDED;
                                        null === (e6 = Re3._videosdkLogs) || void 0 === e6 || e6.pushLogs({
                                          logText: r5.message,
                                          logType: "ERROR",
                                          attributes: {
                                            error: "Error Track Ended :: ".concat(
                                              r5.message
                                            )
                                          },
                                          dashboardLog: true
                                        }), null === (t5 = Re3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                          spanName: "this._micProducer trackended or Microphone disconnected!",
                                          span: c2,
                                          message: r5.message,
                                          status: 2
                                        }), Ve.dispatch(
                                          ie({
                                            type: "error",
                                            text: "Microphone disconnected!"
                                          })
                                        ), Re3.disableMic(true, c2).catch(
                                          function() {
                                          }
                                        );
                                      } catch (e7) {
                                        console.error(e7);
                                      }
                                    }
                                  ), !this._sendTransport) {
                                    e5.next = 126;
                                    break;
                                  }
                                  return e5.next = 123, this._sendTransport.produce({
                                    track: k3,
                                    encodings: le3,
                                    codecOptions: oe2,
                                    appData: pe3
                                  });
                                case 123:
                                  this._micProducer = e5.sent, e5.next = 129;
                                  break;
                                case 126:
                                  return null === (ue3 = this._videosdkLogs) || void 0 === ue3 || ue3.pushLogs({
                                    logText: ke.q.ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED.message,
                                    attributes: {
                                      error: "Error in enableMic() :: Transport is not setup"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), this._emitError(
                                    ke.q.ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                  ), e5.abrupt("return");
                                case 129:
                                  this._micProducer ? (k3.getConstraints().deviceId && (this._mic.device = this._mics.get(
                                    k3.getConstraints().deviceId
                                  )), fe3 = U({
                                    id: this._micProducer.id,
                                    paused: this._micProducer.paused,
                                    track: this._micProducer.track,
                                    rtpParameters: this._micProducer.rtpParameters,
                                    codec: this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    encodings: le3,
                                    codecOptions: oe2,
                                    instance: this._micProducer
                                  }), Ve.dispatch(fe3), this._eventEmitter.emit(
                                    fe3.type,
                                    fe3.payload
                                  ), (ge3 = this._metrics.addNewProbe(
                                    this._micProducer,
                                    { name: "mic_producer" }
                                  )).start(), this.getMicStats(ge3), this._micProducer.on(
                                    "transportclose",
                                    function() {
                                      var e6, t5 = W(Re3._micProducer.id);
                                      Ve.dispatch(t5), Re3._eventEmitter.emit(
                                        t5.type,
                                        t5.payload
                                      ), null === (e6 = Re3._micProducer) || void 0 === e6 || e6.close(), Re3._micProducer = null;
                                    }
                                  ), this._micProducer.observer.on(
                                    "pause",
                                    function() {
                                      var e6 = Re3._metrics.getProbe(
                                        "mic_producer"
                                      );
                                      null == e6 || e6.stop(), Re3._latestStats[Re3._micProducer.id] = [], Re3._metrics.removeExistingProbe(
                                        e6
                                      );
                                    }
                                  ), this._micProducer.observer.on(
                                    "close",
                                    function() {
                                      var e6 = Re3._metrics.getProbe(
                                        "mic_producer"
                                      );
                                      null == e6 || e6.stop(), Re3._latestStats[Re3._micProducer.id] = [], Re3._metrics.removeExistingProbe(
                                        e6
                                      );
                                    }
                                  ), this._micProducer.on(
                                    "trackended",
                                    function() {
                                      var e6, t5, r5 = "react-native" == Re3._deviceInfo.sdkType ? ke.q.ERROR_RN_MIC_TRACK_ENDED : ke.q.ERROR_MICROPHONE_TRACK_ENDED;
                                      null === (e6 = Re3._videosdkLogs) || void 0 === e6 || e6.pushLogs({
                                        logText: message,
                                        logType: "ERROR",
                                        attributes: {
                                          error: "Error in enableMic() :: ".concat(
                                            r5.message
                                          )
                                        },
                                        dashboardLog: true
                                      }), null === (t5 = Re3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                        spanName: "this._micProducer trackended or Microphone disconnected!",
                                        span: c2,
                                        message: r5.message,
                                        status: 2
                                      }), Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Microphone disconnected!"
                                        })
                                      ), Re3.disableMic(true, c2).catch(
                                        function() {
                                        }
                                      );
                                    }
                                  ), null === (he3 = this._openTelemetry) || void 0 === he3 || he3.completeSpan({
                                    span: T3,
                                    status: 1,
                                    message: "Mic Producer Created"
                                  }), null === (me3 = this._openTelemetry) || void 0 === me3 || me3.completeSpan({
                                    span: c2,
                                    status: 1,
                                    message: "Enable Mic Successful"
                                  })) : (null === (_e3 = this._videosdkLogs) || void 0 === _e3 || _e3.pushLogs({
                                    logText: "Oops! Something went wrong, and we're unable to enable the mic. Please try again.",
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic(): Something went wrong."
                                    },
                                    dashboardLog: true
                                  }), null === (ve3 = this._openTelemetry) || void 0 === ve3 || ve3.completeSpan({
                                    span: T3,
                                    status: 2,
                                    message: "Error in enableMic() :: micProducer null"
                                  }), null === (be3 = this._openTelemetry) || void 0 === be3 || be3.completeSpan({
                                    span: enableWebcamSpan,
                                    status: 2,
                                    message: "Error in enableMic() :: micProducer null"
                                  })), e5.next = 142;
                                  break;
                                case 132:
                                  return e5.prev = 132, e5.t2 = e5.catch(39), null === (ye3 = this._openTelemetry) || void 0 === ye3 || ye3.completeSpan({
                                    span: T3,
                                    status: 2,
                                    message: "Error in enableMic() :: occurred in creating mic producer, ".concat(
                                      e5.t2.message
                                    )
                                  }), null === (we2 = this._openTelemetry) || void 0 === we2 || we2.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableMic :: ".concat(
                                      e5.t2.message
                                    )
                                  }), null === (Se3 = this._videosdkLogs) || void 0 === Se3 || Se3.pushLogs({
                                    logText: e5.t2.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableMic() :: ".concat(
                                        e5.t2.message
                                      )
                                    },
                                    dashboardLog: true
                                  }), Ye.error("enableMic() | failed:%o", e5.t2), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error enabling microphone: ".concat(
                                        e5.t2
                                      )
                                    })
                                  ), e5.next = 141, this._protoo.request("produceError", {
                                    mediaType: "audio",
                                    message: e5.t2.message
                                  });
                                case 141:
                                  k3 && k3.stop();
                                case 142:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [39, 132],
                            [50, 56]
                          ]
                        );
                      })
                    ), function() {
                      return Pt.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableMic",
                    value: (Ct = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2, i2, o2, c2, d3, p2, u2, h3, m3, f3, g3, _3, v3, b3, y2, w3, S3, R3, E3, k3, T3, C2 = arguments;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (a3 = C2.length > 0 && void 0 !== C2[0] && C2[0], n2 = C2.length > 1 && void 0 !== C2[1] ? C2[1] : void 0, Ye.debug("disableMic()"), s2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "disableMic() Calling",
                                    status: 1,
                                    span: n2 || null
                                  }), this._micProducer) {
                                    e5.next = 8;
                                    break;
                                  }
                                  return null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "Error in disableMic() :: Mic Producer Not found"
                                  }), null === (o2 = this._videosdkLogs) || void 0 === o2 || o2.pushLogs({
                                    logText: "Attempted to call disableMic() multiple times",
                                    attributes: {
                                      error: "Error in disableMic() :: Microphone is already disabled"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), e5.abrupt("return");
                                case 8:
                                  if (c2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "Closing Mic Producer",
                                    span: s2,
                                    status: 1
                                  }), this._micEnabled = false, !this._micProducer || a3) {
                                    e5.next = 32;
                                    break;
                                  }
                                  return h3 = null === (d3 = this._openTelemetry) || void 0 === d3 ? void 0 : d3.trace({
                                    spanName: "Pausing Mic Producer",
                                    span: c2,
                                    status: 1
                                  }), this._micProducer.pause(), m3 = W(this._micProducer.id), null === (p2 = this._openTelemetry) || void 0 === p2 || p2.completeSpan({
                                    span: h3,
                                    status: 1,
                                    message: "Pause Mic Successfully"
                                  }), Ve.dispatch(m3), this._eventEmitter.emit(
                                    m3.type,
                                    m3.payload
                                  ), e5.prev = 17, e5.next = 20, this._protoo.request("closeProducer", {
                                    producerId: this._micProducer.id
                                  });
                                case 20:
                                  null === (f3 = this._openTelemetry) || void 0 === f3 || f3.completeSpan({
                                    span: c2,
                                    status: 1,
                                    message: "Requested Server to Close Producer"
                                  }), e5.next = 30;
                                  break;
                                case 23:
                                  e5.prev = 23, e5.t0 = e5.catch(17), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error closing server-side mic Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), b3 = "Error in disableMic() :: Failed to close server-side microphone producer. closeProducer status: ".concat(
                                    a3
                                  ), null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in disableMic() :: ".concat(
                                      e5.t0.message
                                    )
                                  }), null === (_3 = this._openTelemetry) || void 0 === _3 || _3.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: b3
                                  }), null === (v3 = this._videosdkLogs) || void 0 === v3 || v3.pushLogs({
                                    logText: b3,
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message },
                                    dashboardLog: true
                                  });
                                case 30:
                                  return null === (u2 = this._openTelemetry) || void 0 === u2 || u2.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "Mic Disabled Successfully"
                                  }), e5.abrupt("return");
                                case 32:
                                  return this._micProducer.close(), y2 = W(this._micProducer.id), Ve.dispatch(y2), this._eventEmitter.emit(
                                    y2.type,
                                    y2.payload
                                  ), e5.prev = 36, e5.next = 39, this._protoo.request("closeProducer", {
                                    producerId: this._micProducer.id
                                  });
                                case 39:
                                  null === (w3 = this._openTelemetry) || void 0 === w3 || w3.completeSpan({
                                    span: c2,
                                    status: 1,
                                    message: "Requested Server to Close Producer"
                                  }), null === (S3 = this._openTelemetry) || void 0 === S3 || S3.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "Mic Disabled Successfully"
                                  }), e5.next = 50;
                                  break;
                                case 43:
                                  e5.prev = 43, e5.t1 = e5.catch(36), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error closing server-side mic Producer: ".concat(
                                        e5.t1
                                      )
                                    })
                                  ), T3 = "Error in disableMic() :: Failed to close server-side microphone producer. closeProducer status: ".concat(
                                    a3
                                  ), null === (R3 = this._openTelemetry) || void 0 === R3 || R3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in disableMic() :: ".concat(
                                      e5.t1.message
                                    )
                                  }), null === (E3 = this._openTelemetry) || void 0 === E3 || E3.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: T3
                                  }), null === (k3 = this._videosdkLogs) || void 0 === k3 || k3.pushLogs({
                                    logText: T3,
                                    logType: "ERROR",
                                    attributes: { error: e5.t1.message },
                                    dashboardLog: true
                                  });
                                case 50:
                                  this._micProducer = null;
                                case 51:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [17, 23],
                            [36, 43]
                          ]
                        );
                      })
                    ), function() {
                      return Ct.apply(this, arguments);
                    })
                  },
                  {
                    key: "muteMic",
                    value: (Tt = (0, s.A)(
                      l().mark(function e4() {
                        var t4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("muteMic()"), this._micEnabled = false, this._micProducer.pause(), e5.prev = 3, e5.next = 6, this._protoo.request("pauseProducer", {
                                    producerId: this._micProducer.id
                                  });
                                case 6:
                                  Ve.dispatch({
                                    type: "SET_PRODUCER_PAUSED",
                                    payload: {
                                      producerId: this._micProducer.id
                                    }
                                  }), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(3), Ye.error("muteMic() | failed: %o", e5.t0), null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "Error pausing server-side mic Producer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error pausing server-side mic Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 9]]
                        );
                      })
                    ), function() {
                      return Tt.apply(this, arguments);
                    })
                  },
                  {
                    key: "unmuteMic",
                    value: (kt = (0, s.A)(
                      l().mark(function e4() {
                        var t4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("unmuteMic()"), this._micEnabled = true, this._micProducer.resume(), e5.prev = 3, e5.next = 6, this._protoo.request("resumeProducer", {
                                    producerId: this._micProducer.id
                                  });
                                case 6:
                                  Ve.dispatch({
                                    type: "SET_PRODUCER_RESUMED",
                                    payload: {
                                      producerId: this._micProducer.id
                                    }
                                  }), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(3), Ye.error(
                                    "unmuteMic() | failed: %o",
                                    e5.t0
                                  ), null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "Error resuming server-side mic Producer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error resuming server-side mic Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 9]]
                        );
                      })
                    ), function() {
                      return kt.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableWebcam",
                    value: (Et = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2, i2, o2, c2, d3, p2, u2, h3, m3, f3, g3, _3, v3, b3, y2, w3, S3, R3, E3, k3, T3, C2, P2, O3, D3, x2, I2, M2, A2, L2, N2, j2, B2, F2, q2, H2, V2, z2, $2, K2, J2, Q2, Y2, X2, Z2, ee2, te2, re2, ae2, ne2, se2, oe2, ce2, de3, le3, pe3, ue3, he3, me3, fe3, ge3, _e3, ve3, be3, ye3, Se3, Re3 = this, Ee2 = arguments;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (i2 = Ee2.length > 0 && void 0 !== Ee2[0] ? Ee2[0] : void 0, o2 = Ee2.length > 1 && void 0 !== Ee2[1] ? Ee2[1] : void 0, c2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "enableWebcam() Calling ".concat(
                                      i2 ? "With Custom Video Track" : "Without Custom Video Track "
                                    ),
                                    attributes: {
                                      customVideoConfig: i2 ? JSON.stringify(i2) : "Not Specify Custom Track"
                                    },
                                    span: o2 || null
                                  }), Ye.debug("enableWebcam()"), this._webcamEnabled = true, !this._webcamProducer) {
                                    e5.next = 9;
                                    break;
                                  }
                                  return null === (d3 = this._openTelemetry) || void 0 === d3 || d3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableWebcam() :: Webcam Producer found"
                                  }), null === (p2 = this._videosdkLogs) || void 0 === p2 || p2.pushLogs({
                                    logText: "Attempted to call enableWebcam() multiple times",
                                    attributes: {
                                      error: "Error in enableWebcam() :: Webcam is already enabled"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), e5.abrupt("return");
                                case 9:
                                  if (!this._mediasoupDevice) {
                                    e5.next = 18;
                                    break;
                                  }
                                  if (this._mediasoupDevice.canProduce("video")) {
                                    e5.next = 16;
                                    break;
                                  }
                                  return m3 = "react-native" == this._deviceInfo.sdkType ? ke.q.ERROR_RN_CAMERA_ACCESS_UNAVAILABLE.message : ke.q.ERROR_CAMERA_ACCESS_UNAVAILABLE.message, null === (u2 = this._openTelemetry) || void 0 === u2 || u2.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableWebcam() :: ".concat(
                                      m3
                                    )
                                  }), null === (h3 = this._videosdkLogs) || void 0 === h3 || h3.pushLogs({
                                    logText: m3,
                                    attributes: {
                                      error: "Error in enableWebcam() :: Camera access unavailable"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), Ye.error(
                                    "enableWebcam() | cannot produce video"
                                  ), e5.abrupt("return");
                                case 16:
                                  e5.next = 21;
                                  break;
                                case 18:
                                  return null === (f3 = this._videosdkLogs) || void 0 === f3 || f3.pushLogs({
                                    logText: "Oops! Something went wrong, and we're unable to enable the webcam. Please try again.",
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam(): Something went wrong."
                                    }
                                  }), null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableWebcam() :: mediasoupDevice is undefined"
                                  }), e5.abrupt("return");
                                case 21:
                                  if (Ve.dispatch(G(true)), b3 = this._webcam.resolution, e5.prev = 23, this._externalVideo) {
                                    e5.next = 100;
                                    break;
                                  }
                                  return e5.next = 27, this._updateWebcams(c2);
                                case 27:
                                  if (v3 = this._webcam.device) {
                                    e5.next = 31;
                                    break;
                                  }
                                  throw new Error(
                                    "Whoops! No Webcam Found: We couldn't find your camera. Is it plugged in and turned on? If so, try restarting your computer or checking your device settings. If you need help, check out troubleshooter at https://test.8x8.vc/. Also, ensure you're on a secure website (https://)."
                                  );
                                case 31:
                                  Ye.debug(
                                    "enableWebcam() | calling getUserMedia()"
                                  );
                                  try {
                                    i2 && "ended" == (_3 = i2.getVideoTracks()[0]).readyState && (_3 = null, k3 = ke.q.ERROR_CUSTOM_VIDEO_TRACK_ENDED, null === (E3 = this._videosdkLogs) || void 0 === E3 || E3.pushLogs({
                                      logText: k3.message,
                                      logType: "INFO",
                                      attributes: {
                                        error: "In enableWebcam() :: Invalid Custom Track Passed"
                                      },
                                      dashboardLog: true
                                    }), this._emitError(k3));
                                  } catch (e6) {
                                    C2 = ke.q.ERROR_INVALID_CUSTOM_VIDEO_TRACK, null === (T3 = this._videosdkLogs) || void 0 === T3 || T3.pushLogs({
                                      logText: C2.message,
                                      logType: "INFO",
                                      attributes: {
                                        error: "In enableWebcam() :: Invalid Custom Track Passed"
                                      }
                                    }), this._emitError(C2), console.log(
                                      "Invalid Custom Video Track Passed. Reverting to default Error: ".concat(
                                        e6
                                      )
                                    );
                                  }
                                  if (_3) {
                                    e5.next = 98;
                                    break;
                                  }
                                  if (O3 = null === (P2 = this._openTelemetry) || void 0 === P2 ? void 0 : P2.trace({
                                    spanName: "Creating Track",
                                    span: c2
                                  }), D3 = null, e5.prev = 36, "hd" != this._webcam.resolution) {
                                    e5.next = 44;
                                    break;
                                  }
                                  return e5.next = 40, this.createCameraVideoTrack({
                                    cameraId: v3.deviceId,
                                    encoderConfig: "h720p_w1280p",
                                    multiStream: this._useSimulcast,
                                    facingMode: v3.facing
                                  });
                                case 40:
                                  i2 = e5.sent, D3 = JSON.stringify({
                                    encoderConfig: "h720p_w1280p",
                                    multiStream: this._useSimulcast
                                  }), e5.next = 48;
                                  break;
                                case 44:
                                  return e5.next = 46, this.createCameraVideoTrack({
                                    cameraId: v3.deviceId,
                                    encoderConfig: "h540p_w960p",
                                    multiStream: this._useSimulcast,
                                    facingMode: v3.facing
                                  });
                                case 46:
                                  i2 = e5.sent, D3 = JSON.stringify({
                                    encoderConfig: "h540p_w960p",
                                    multiStream: this._useSimulcast
                                  });
                                case 48:
                                  _3 = i2.getVideoTracks()[0], null === (x2 = this._openTelemetry) || void 0 === x2 || x2.completeSpan({
                                    message: "Video Track Generated",
                                    span: O3,
                                    attributes: {
                                      customVideoTrackConfig: D3
                                    },
                                    status: 1
                                  }), e5.next = 98;
                                  break;
                                case 52:
                                  if (e5.prev = 52, e5.t0 = e5.catch(36), null === (I2 = this._openTelemetry) || void 0 === I2 || I2.completeSpan({
                                    message: "Error in enableWebcam() :: ".concat(
                                      e5.t0.message
                                    ),
                                    span: O3,
                                    status: 2
                                  }), "SecurityError" !== e5.t0.name) {
                                    e5.next = 63;
                                    break;
                                  }
                                  L2 = ke.q.ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED, N2 = L2.message, this._emitError(L2), null === (M2 = this._videosdkLogs) || void 0 === M2 || M2.pushLogs({
                                    logText: N2,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam() :: Camera Permission Denied or Dismissed"
                                    },
                                    dashboardLog: true
                                  }), null === (A2 = this._openTelemetry) || void 0 === A2 || A2.completeSpan({
                                    message: "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                      N2
                                    ),
                                    span: enableMicSpan,
                                    status: 2
                                  }), e5.next = 97;
                                  break;
                                case 63:
                                  if ("DOMException" !== e5.t0.name) {
                                    e5.next = 71;
                                    break;
                                  }
                                  F2 = ke.q.ERROR_RN_CAMERA_NOT_FOUND, q2 = F2.message, this._emitError(F2), null === (j2 = this._videosdkLogs) || void 0 === j2 || j2.pushLogs({
                                    logText: q2,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam() :: No Camra Device Found"
                                    },
                                    dashboardLog: true
                                  }), null === (B2 = this._openTelemetry) || void 0 === B2 || B2.completeSpan({
                                    message: "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                      q2
                                    ),
                                    span: enableMicSpan,
                                    status: 2
                                  }), e5.next = 97;
                                  break;
                                case 71:
                                  if (!(e5.t0 instanceof DOMException)) {
                                    e5.next = 94;
                                    break;
                                  }
                                  e5.t1 = e5.t0.name, e5.next = "NotAllowedError" === e5.t1 ? 75 : "NotReadableError" === e5.t1 ? 78 : "NotFoundError" === e5.t1 ? 81 : 88;
                                  break;
                                case 75:
                                  return H2 = this.handleNotAllowedError(
                                    e5.t0,
                                    this._openTelemetry,
                                    this._videosdkLogs,
                                    c2,
                                    "video"
                                  ), this._emitError(H2), e5.abrupt("break", 92);
                                case 78:
                                  return V2 = this.handleNotReadableError(
                                    e5.t0,
                                    this._openTelemetry,
                                    this._videosdkLogs,
                                    c2,
                                    "video"
                                  ), this._emitError(V2), e5.abrupt("break", 92);
                                case 81:
                                  return z2 = ke.q.ERROR_CAMERA_NOT_FOUND, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                    "Firefox"
                                  ) && (z2 = ke.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS), $2 = z2.message, this._emitError(z2), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: $2,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam() :: No Webcam Device Found"
                                    },
                                    dashboardLog: true
                                  }), null === (a3 = this._openTelemetry) || void 0 === a3 || a3.completeSpan({
                                    message: "Error in enableWebcam() :: occurred in creating video track, ".concat(
                                      $2
                                    ),
                                    span: c2,
                                    status: 2
                                  }), e5.abrupt("break", 92);
                                case 88:
                                  return K2 = "An error occurred in creating video track, ".concat(
                                    e5.t0.message
                                  ), null === (n2 = this._videosdkLogs) || void 0 === n2 || n2.pushLogs({
                                    logText: e5.t0.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam() :: ".concat(
                                        K2
                                      )
                                    },
                                    dashboardLog: true
                                  }), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    message: "Error in enableWebcam() :: ".concat(
                                      K2
                                    ),
                                    span: c2,
                                    status: 2
                                  }), e5.abrupt("break", 92);
                                case 92:
                                  e5.next = 97;
                                  break;
                                case 94:
                                  Y2 = "An error occurred in creating video track, ".concat(
                                    e5.t0.message
                                  ), null === (J2 = this._videosdkLogs) || void 0 === J2 || J2.pushLogs({
                                    logText: e5.t0.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam() :: ".concat(
                                        Y2
                                      )
                                    },
                                    dashboardLog: true
                                  }), null === (Q2 = this._openTelemetry) || void 0 === Q2 || Q2.completeSpan({
                                    message: "Error in enableWebcam() :: ".concat(
                                      Y2
                                    ),
                                    span: c2,
                                    status: 2
                                  });
                                case 97:
                                  return e5.abrupt("return");
                                case 98:
                                  e5.next = 105;
                                  break;
                                case 100:
                                  return v3 = { label: "external video" }, e5.next = 103, this._getExternalVideoStream();
                                case 103:
                                  X2 = e5.sent, _3 = X2.getVideoTracks()[0].clone();
                                case 105:
                                  if (Z2 = null === (y2 = this._openTelemetry) || void 0 === y2 ? void 0 : y2.trace({
                                    spanName: "Generating Producer Configuration",
                                    span: c2
                                  }), re2 = { videoGoogleStartBitrate: 1e3 }, !this._forceH264) {
                                    e5.next = 114;
                                    break;
                                  }
                                  if (te2 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video/h264" === e6.mimeType.toLowerCase();
                                    }
                                  )) {
                                    e5.next = 112;
                                    break;
                                  }
                                  throw new Error(
                                    "The desired H.264 codec and configuration are not supported"
                                  );
                                case 112:
                                  e5.next = 119;
                                  break;
                                case 114:
                                  if (!this._forceVP9) {
                                    e5.next = 119;
                                    break;
                                  }
                                  if (te2 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video/vp9" === e6.mimeType.toLowerCase();
                                    }
                                  )) {
                                    e5.next = 119;
                                    break;
                                  }
                                  throw new Error(
                                    "The desired VP9 codec and configuration are not supported"
                                  );
                                case 119:
                                  _3 ? (ae2 = _3.getConstraints(), ne2 = "react-native" == this._deviceInfo.sdkType && "ios" == this._deviceInfo.platform, ee2 = we(
                                    false,
                                    ae2.width,
                                    ae2.height,
                                    { simulcast: i2.multiStream },
                                    ne2
                                  )) : this._useSimulcast && (se2 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video" === e6.kind;
                                    }
                                  ), ee2 = this._forceVP9 && te2 || "video/vp9" === se2.mimeType.toLowerCase() ? Ke : $e[this._webcam.resolution]), oe2 = {};
                                  try {
                                    oe2 = {
                                      encodings: ee2,
                                      width: i2 ? null === (ce2 = _3) || void 0 === ce2 ? void 0 : ce2.getConstraints().width : ze[b3].width.ideal,
                                      height: i2 ? null === (de3 = _3) || void 0 === de3 ? void 0 : de3.getConstraints().height : ze[b3].height.ideal
                                    };
                                  } catch (e6) {
                                    null === (le3 = this._videosdkLogs) || void 0 === le3 || le3.pushLogs({
                                      logText: e6.message,
                                      logType: "INFO",
                                      attributes: {
                                        error: "In enableWebcam() :: ".concat(
                                          e6.message
                                        )
                                      },
                                      dashboardLog: true
                                    }), console.log(e6);
                                  }
                                  if (null === (w3 = this._openTelemetry) || void 0 === w3 || w3.traceAutoComplete({
                                    spanName: "Track Generated with height ".concat(oe2.height, " and width ").concat(
                                      oe2.width,
                                      " with multiStream "
                                    ).concat(this._useSimulcast),
                                    attributes: {
                                      appData: JSON.stringify(oe2)
                                    },
                                    span: c2,
                                    status: 1
                                  }), null === (S3 = this._openTelemetry) || void 0 === S3 || S3.completeSpan({
                                    span: Z2,
                                    status: 1,
                                    message: "Producer Configuration Generated"
                                  }), Z2 = null === (R3 = this._openTelemetry) || void 0 === R3 ? void 0 : R3.trace({
                                    spanName: "Creating Webcam Producer",
                                    span: c2
                                  }), !this._sendTransport) {
                                    e5.next = 131;
                                    break;
                                  }
                                  return e5.next = 128, this._sendTransport.produce({
                                    track: _3,
                                    encodings: ee2,
                                    codecOptions: re2,
                                    codec: te2,
                                    appData: oe2
                                  });
                                case 128:
                                  this._webcamProducer = e5.sent, e5.next = 134;
                                  break;
                                case 131:
                                  return null === (pe3 = this._videosdkLogs) || void 0 === pe3 || pe3.pushLogs({
                                    logText: ke.q.ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED.message,
                                    attributes: {
                                      error: "Error in enableWebcam() :: Transport is not setup"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), this._emitError(
                                    ke.q.ERROR_ACTION_PERFORMED_BEFORE_MEETING_JOINED
                                  ), e5.abrupt("return");
                                case 134:
                                  _3.getConstraints().deviceId && (this._webcam.device = this._webcams.get(
                                    _3.getConstraints().deviceId
                                  )), this._webcamProducer ? (me3 = U({
                                    id: this._webcamProducer.id,
                                    deviceLabel: v3.label,
                                    type: this._getWebcamType(v3),
                                    paused: this._webcamProducer.paused,
                                    track: this._webcamProducer.track,
                                    rtpParameters: this._webcamProducer.rtpParameters,
                                    codec: this._webcamProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    instance: this._webcamProducer
                                  }), Ve.dispatch(me3), this._eventEmitter.emit(
                                    me3.type,
                                    me3.payload
                                  ), fe3 = 0, (ge3 = this._metrics.addNewProbe(
                                    this._webcamProducer,
                                    "producer"
                                  )).onStatsCollected = function(e6) {
                                    try {
                                      var t5;
                                      Re3._stats.producerStats || (Re3._stats.producerStats = {}), Re3._stats.producerStats.video || (Re3._stats.producerStats.video = []), Re3._webcamProducer && (Re3._latestStats[null === (t5 = Re3._webcamProducer) || void 0 === t5 ? void 0 : t5.id] = []), e6.video.forEach(function(e7) {
                                        var t6;
                                        Re3._latestStats[null === (t6 = Re3._webcamProducer) || void 0 === t6 ? void 0 : t6.id].push(e7);
                                      }), fe3 % 5 == 0 && null != Re3._webcamProducer && Re3._stats.producerStats.video.push(
                                        {
                                          timestamp: /* @__PURE__ */ new Date(),
                                          stats: Re3._latestStats[Re3._webcamProducer.id]
                                        }
                                      ), fe3++;
                                    } catch (e7) {
                                      var r5;
                                      null === (r5 = Re3._videosdkLogs) || void 0 === r5 || r5.pushLogs({
                                        logText: "Error PRODUCER Stats ERROR",
                                        logType: "ERROR",
                                        attributes: {
                                          error: e7.message
                                        }
                                      }), console.log(
                                        "PRODUCER ERROR",
                                        e7
                                      );
                                    }
                                  }, ge3.start(), this._webcamProducer.observer.on(
                                    "close",
                                    function() {
                                      ge3.stop(), Re3._metrics.removeExistingProbe(
                                        ge3
                                      );
                                    }
                                  ), this._webcamProducer.on(
                                    "transportclose",
                                    function() {
                                      var e6, t5 = W(Re3._webcamProducer.id);
                                      Ve.dispatch(t5), Re3._eventEmitter.emit(
                                        t5.type,
                                        t5.payload
                                      ), null === (e6 = Re3._webcamProducer) || void 0 === e6 || e6.close(), Re3._webcamProducer = null;
                                    }
                                  ), this._webcamProducer.on(
                                    "trackended",
                                    function() {
                                      var e6, t5, r5 = "react-native" == Re3._deviceInfo.sdkType ? ke.q.ERROR_RN_CAMERA_TRACK_ENDED : ke.q.ERROR_WEBCAM_TRACK_ENDED;
                                      null === (e6 = Re3._videosdkLogs) || void 0 === e6 || e6.pushLogs({
                                        logText: message,
                                        logType: "ERROR",
                                        attributes: {
                                          error: "Error in enableWebcam() :: ".concat(
                                            r5.message
                                          )
                                        },
                                        dashboardLog: true
                                      }), null === (t5 = Re3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                        spanName: "this._webcamProducer trackended or Webcam disconnected!",
                                        span: c2,
                                        message: r5.message,
                                        status: 2
                                      }), Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Webcam disconnected!"
                                        })
                                      ), Re3._emitError(r5), Re3.disableWebcam(c2).catch(
                                        function() {
                                        }
                                      );
                                    }
                                  ), null === (ue3 = this._openTelemetry) || void 0 === ue3 || ue3.completeSpan({
                                    span: Z2,
                                    status: 1,
                                    message: "Webcam Producer Created"
                                  }), null === (he3 = this._openTelemetry) || void 0 === he3 || he3.completeSpan({
                                    span: c2,
                                    status: 1,
                                    message: "Enable Webcam Successful"
                                  })) : (null === (_e3 = this._videosdkLogs) || void 0 === _e3 || _e3.pushLogs({
                                    logText: "Oops! Something went wrong, and we're unable to enable the webcam. Please try again.",
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam(): Something went wrong."
                                    },
                                    dashboardLog: true
                                  }), null === (ve3 = this._openTelemetry) || void 0 === ve3 || ve3.completeSpan({
                                    span: Z2,
                                    status: 2,
                                    message: "Error in enableWebcam() :: webcamProducer null"
                                  }), null === (be3 = this._openTelemetry) || void 0 === be3 || be3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableWebcam() :: webcamProducer null"
                                  })), e5.next = 146;
                                  break;
                                case 138:
                                  return e5.prev = 138, e5.t2 = e5.catch(23), null === (ye3 = this._videosdkLogs) || void 0 === ye3 || ye3.pushLogs({
                                    logText: e5.t2.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in enableWebcam() :: ".concat(
                                        e5.t2.message
                                      )
                                    },
                                    dashboardLog: true
                                  }), null === (Se3 = this._openTelemetry) || void 0 === Se3 || Se3.completeSpan({
                                    span: c2,
                                    status: 2,
                                    message: "Error in enableWebcam() :: ".concat(
                                      e5.t2.message
                                    )
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error enabling webcam: ".concat(
                                        e5.t2
                                      )
                                    })
                                  ), e5.next = 145, this._protoo.request("produceError", {
                                    mediaType: "video",
                                    message: e5.t2.message
                                  });
                                case 145:
                                  _3 && _3.stop();
                                case 146:
                                  Ve.dispatch(G(false));
                                case 147:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [23, 138],
                            [36, 52]
                          ]
                        );
                      })
                    ), function() {
                      return Et.apply(this, arguments);
                    })
                  },
                  {
                    key: "handleNotAllowedError",
                    value: function(e4, t4, r4, a3, n2) {
                      var s2 = {};
                      return s2 = "Permission denied" === e4.message || "Permission dismissed" === e4.message ? "video" === n2 ? ke.q.ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED : ke.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED : e4.message.includes(
                        "The request is not allowed by the user agent"
                      ) ? "video" === n2 ? ke.q.ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE : ke.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED : "Permission denied by system" === e4.message ? "video" === n2 ? ke.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS : ke.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS : "video" === n2 ? ke.q.ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED : ke.q.ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED, r4.pushLogs({
                        logText: s2.message,
                        logType: "ERROR",
                        attributes: {
                          error: "Error in ".concat(
                            "video" === n2 ? "enableWebcam()" : "enableMic()",
                            " :: "
                          ).concat(e4.message)
                        },
                        dashboardLog: true
                      }), t4.completeSpan({
                        message: "video" === n2 ? "Error in enableWebcam() :: occurred in creating video track, ".concat(
                          s2.message
                        ) : "Error in enableMic() :: occurred in creating audio track, ".concat(
                          s2.message
                        ),
                        span: a3,
                        status: 2
                      }), s2;
                    }
                  },
                  {
                    key: "handleNotReadableError",
                    value: function(e4, t4, r4, a3, n2) {
                      var s2 = {};
                      return s2 = "Device in use" === e4.message ? "video" === n2 ? ke.q.ERROR_CAMERA_IN_USE : ke.q.ERROR_MICROPHONE_IN_USE : "video" === n2 ? ke.q.ERROR_VIDEO_SOURCE_INITIATION_FAILED : ke.q.ERROR_MICROPHONE_IN_USE, r4.pushLogs({
                        logText: s2.message,
                        logType: "ERROR",
                        attributes: {
                          error: "Error in ".concat(
                            "video" === n2 ? "enableWebcam()" : "enableMic()",
                            " :: "
                          ).concat(e4.message)
                        },
                        dashboardLog: true
                      }), t4.completeSpan({
                        message: "video" === n2 ? "Error in enableWebcam() :: occurred in creating video track, ".concat(
                          s2.message
                        ) : "Error in enableMic() :: occurred in creating audio track, ".concat(
                          s2.message
                        ),
                        span: a3,
                        status: 2
                      }), s2;
                    }
                  },
                  {
                    key: "createCameraVideoTrack",
                    value: (Rt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2, s2, i2, o2, c2, d3, p2, u2, h3, m3, f3;
                        return l().wrap(function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return r4 = t4.cameraId, a3 = void 0 === r4 ? void 0 : r4, n2 = t4.encoderConfig, s2 = void 0 === n2 ? void 0 : n2, i2 = t4.facingMode, o2 = void 0 === i2 ? void 0 : i2, c2 = t4.optimizationMode, d3 = void 0 === c2 ? void 0 : c2, p2 = t4.multiStream, u2 = void 0 === p2 || p2, h3 = s2 ? ce.$.videoProfiles[s2] : ce.$.videoProfiles.h360p_w640p, m3 = {
                                  video: {
                                    deviceId: a3 || void 0,
                                    facingMode: o2 || void 0,
                                    width: h3.width,
                                    height: h3.height,
                                    frameRate: h3.frameRate
                                  }
                                }, e5.next = 5, (0, Fe.lp)(m3);
                              case 5:
                                return f3 = e5.sent, d3 && (f3.contentHint = d3), f3.encoderConfig = s2 || "h360p_w640p", f3.contentHint = d3 || "", f3.multiStream = u2, f3.cameraId = a3, e5.abrupt("return", f3);
                              case 12:
                              case "end":
                                return e5.stop();
                            }
                        }, e4);
                      })
                    ), function(e4) {
                      return Rt.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableWebcam",
                    value: (St = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2, i2, o2, c2, d3, p2, u2, h3, m3, f3 = arguments;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (a3 = f3.length > 0 && void 0 !== f3[0] ? f3[0] : void 0, n2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "disableWebcam() Calling",
                                    status: 1,
                                    span: a3 || null
                                  }), Ye.debug("disableWebcam()"), this._webcamEnabled = false, this._webcamProducer) {
                                    e5.next = 8;
                                    break;
                                  }
                                  return null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "Error in disableWebcam() :: Webcam Producer Not found"
                                  }), null === (i2 = this._videosdkLogs) || void 0 === i2 || i2.pushLogs({
                                    logText: "Attempted to call disableWebcam() multiple times",
                                    attributes: {
                                      error: "Error in disableWebcam() :: Webcam is already disabled"
                                    },
                                    logType: "ERROR",
                                    dashboardLog: true
                                  }), e5.abrupt("return");
                                case 8:
                                  return o2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "Closing Webcam Producer",
                                    span: n2,
                                    status: 1
                                  }), this._webcamProducer.close(), c2 = W(this._webcamProducer.id), Ve.dispatch(c2), this._eventEmitter.emit(
                                    c2.type,
                                    c2.payload
                                  ), e5.prev = 13, e5.next = 16, this._protoo.request("closeProducer", {
                                    producerId: this._webcamProducer.id
                                  });
                                case 16:
                                  null === (d3 = this._openTelemetry) || void 0 === d3 || d3.completeSpan({
                                    span: o2,
                                    status: 1,
                                    message: "Requested Server to Close Producer"
                                  }), this._webcamProducer = null, null === (p2 = this._openTelemetry) || void 0 === p2 || p2.completeSpan({
                                    span: n2,
                                    status: 1,
                                    message: "Webcam Disabled Successfully"
                                  }), e5.next = 27;
                                  break;
                                case 21:
                                  e5.prev = 21, e5.t0 = e5.catch(13), null === (u2 = this._videosdkLogs) || void 0 === u2 || u2.pushLogs({
                                    logText: "Error in disableWebcam() :: Failed to close server-side webcam producer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message },
                                    dashboardLog: true
                                  }), null === (h3 = this._openTelemetry) || void 0 === h3 || h3.completeSpan({
                                    span: o2,
                                    status: 2,
                                    message: "Error in disableWebcam() :: closing server-side webcam Producer: ".concat(
                                      e5.t0
                                    )
                                  }), null === (m3 = this._openTelemetry) || void 0 === m3 || m3.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "Error in disableWebcam() :: closing server-side webcam Producer: ".concat(
                                      e5.t0
                                    )
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error closing server-side webcam Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 27:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[13, 21]]
                        );
                      })
                    ), function() {
                      return St.apply(this, arguments);
                    })
                  },
                  {
                    key: "getMics",
                    value: (wt = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return t4 = [], e5.prev = 1, e5.next = 4, this._updateMics();
                                case 4:
                                  this._mics.forEach(function(e6, r5) {
                                    t4.push({ deviceId: r5, label: e6.label });
                                  }), e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(1), Ye.error("getMics() | Error", e5.t0), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: e5.t0.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in getMics() :: Not able to get Mic List"
                                    },
                                    dashboardLog: true
                                  });
                                case 11:
                                  return e5.abrupt("return", t4);
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 7]]
                        );
                      })
                    ), function() {
                      return wt.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeMic",
                    value: (yt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, s2, i2, o2, c2, d3, p2, u2, h3, m3, f3, g3, _3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (a3 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "changeMic() Calling"
                                  }), e5.prev = 1, "object" != (0, n.A)(t4)) {
                                    e5.next = 9;
                                    break;
                                  }
                                  return e5.next = 5, this.disableMic(true, a3);
                                case 5:
                                  return e5.next = 7, this.enableMic(t4, a3);
                                case 7:
                                  e5.next = 27;
                                  break;
                                case 9:
                                  return c2 = t4, e5.next = 12, this._updateMics();
                                case 12:
                                  if (d3 = Array.from(this._mics.keys()), p2 = d3.length, u2 = this._mic.device ? this._mic.device.deviceId : void 0, null != c2 && null != c2 ? h3 = d3.indexOf(c2) : (h3 = d3.indexOf(u2)) < p2 - 1 ? h3++ : h3 = 0, this._mic.device = this._mics.get(d3[h3]), m3 = null === (s2 = this._openTelemetry) || void 0 === s2 ? void 0 : s2.trace({
                                    spanName: "Getting Selected Mic",
                                    span: a3,
                                    attributes: {
                                      selectedWebcam: this._mic.device ? JSON.stringify(
                                        this._mic.device
                                      ) : "No Mic devices"
                                    }
                                  }), this._mic.device) {
                                    e5.next = 21;
                                    break;
                                  }
                                  throw null === (f3 = this._videosdkLogs) || void 0 === f3 || f3.pushLogs({
                                    logText: "Error changeMic : No mic Found",
                                    logType: "ERROR"
                                  }), new Error("No mic Found");
                                case 21:
                                  return e5.next = 23, this.disableMic(true, a3);
                                case 23:
                                  return e5.next = 25, this.enableMic(void 0, a3);
                                case 25:
                                  null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: m3,
                                    status: 1,
                                    message: "Done"
                                  }), null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: a3,
                                    status: 1,
                                    message: "changeMic() Ending"
                                  });
                                case 27:
                                  e5.next = 33;
                                  break;
                                case 29:
                                  e5.prev = 29, e5.t0 = e5.catch(1), null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "changeMic() | Error ".concat(e5.t0)
                                  }), null === (_3 = this._videosdkLogs) || void 0 === _3 || _3.pushLogs({
                                    logText: "Error changeMic() | Error",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 33:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 29]]
                        );
                      })
                    ), function(e4) {
                      return yt.apply(this, arguments);
                    })
                  },
                  {
                    key: "getWebcams",
                    value: (bt = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return t4 = [], e5.prev = 1, e5.next = 4, this._updateWebcams();
                                case 4:
                                  this._webcams.forEach(function(e6, r5) {
                                    t4.push({
                                      deviceId: r5,
                                      label: e6.label,
                                      facingMode: e6.facing || "environment"
                                    });
                                  }), e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(1), Ye.error(
                                    "getWebcams() | failed %o",
                                    e5.t0
                                  ), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: e5.t0.message,
                                    logType: "ERROR",
                                    attributes: {
                                      error: "Error in getWebcams() :: Not able to get Webcam List"
                                    },
                                    dashboardLog: true
                                  });
                                case 11:
                                  return e5.abrupt("return", t4);
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 7]]
                        );
                      })
                    ), function() {
                      return bt.apply(this, arguments);
                    })
                  },
                  {
                    key: "replaceWebcamStream",
                    value: (vt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._webcamProducer) {
                                    e5.next = 7;
                                    break;
                                  }
                                  return r4 = t4.getVideoTracks()[0], e5.next = 4, this._webcamProducer.replaceTrack({
                                    track: r4
                                  });
                                case 4:
                                  this._eventEmitter.emit("UPDATE_PRODUCER", {
                                    producer: this._webcamProducer
                                  }), e5.next = 11;
                                  break;
                                case 7:
                                  return e5.next = 9, this.disableWebcam();
                                case 9:
                                  return e5.next = 11, this.enableWebcam(t4);
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return vt.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeWebcam",
                    value: (_t = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, s2, i2, o2, c2, d3, p2, u2, h3, m3, f3, g3, _3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (a3 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "changeWebcam() Calling"
                                  }), Ve.dispatch(G(true)), "object" !== (0, n.A)(t4)) {
                                    e5.next = 17;
                                    break;
                                  }
                                  return e5.prev = 3, e5.next = 6, this.disableWebcam(a3);
                                case 6:
                                  return e5.next = 8, this.enableWebcam(t4, a3);
                                case 8:
                                  e5.next = 15;
                                  break;
                                case 10:
                                  e5.prev = 10, e5.t0 = e5.catch(3), Ye.error(
                                    "changeWebcam() | failed: %o",
                                    e5.t0
                                  ), null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: "Error Could not change webcam",
                                    logType: "ERROR",
                                    attributes: {
                                      object: JSON.stringify(t4),
                                      error: e5.t0.message
                                    }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Could not change webcam: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 15:
                                  e5.next = 46;
                                  break;
                                case 17:
                                  return e5.prev = 17, e5.next = 20, this._updateWebcams(a3);
                                case 20:
                                  if (d3 = Array.from(this._webcams.keys()), p2 = d3.length, u2 = this._webcam.device ? this._webcam.device.deviceId : void 0, null != t4 && null != t4 ? h3 = d3.indexOf(t4) : (h3 = d3.indexOf(u2)) < p2 - 1 ? h3++ : h3 = 0, this._webcam.device = this._webcams.get(
                                    d3[h3]
                                  ), Ye.debug(
                                    "changeWebcam() | new selected webcam [device:%o]",
                                    this._webcam.device
                                  ), this._webcam.resolution = this._webcam.resolution || "hd", m3 = null === (i2 = this._openTelemetry) || void 0 === i2 ? void 0 : i2.trace({
                                    spanName: "Getting Selected Webcam",
                                    span: a3,
                                    attributes: {
                                      selectedWebcam: this._webcam.device ? JSON.stringify(
                                        this._webcam.device
                                      ) : "No webcam devices"
                                    }
                                  }), this._webcam.device) {
                                    e5.next = 31;
                                    break;
                                  }
                                  throw null === (f3 = this._videosdkLogs) || void 0 === f3 || f3.pushLogs({
                                    logText: "Error changeWebcam : No webcam Found",
                                    logType: "ERROR"
                                  }), new Error("no webcam devices");
                                case 31:
                                  return e5.next = 33, this.disableWebcam(a3);
                                case 33:
                                  return e5.next = 35, this.enableWebcam(void 0, a3);
                                case 35:
                                  return null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: m3,
                                    status: 1,
                                    message: "Done"
                                  }), null === (c2 = this._openTelemetry) || void 0 === c2 || c2.completeSpan({
                                    span: a3,
                                    status: 1,
                                    message: "changeWebcam() Ending"
                                  }), e5.abrupt("return");
                                case 40:
                                  e5.prev = 40, e5.t1 = e5.catch(17), Ye.error(
                                    "changeWebcam() | failed: %o",
                                    e5.t1
                                  ), null === (g3 = this._videosdkLogs) || void 0 === g3 || g3.pushLogs({
                                    logText: "Error Could not change webcam",
                                    logType: "ERROR",
                                    attributes: {
                                      object: JSON.stringify(t4),
                                      error: e5.t1.message
                                    }
                                  }), null === (_3 = this._openTelemetry) || void 0 === _3 || _3.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "Could not change webcam ".concat(
                                      e5.t1
                                    )
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Could not change webcam: ".concat(
                                        e5.t1
                                      )
                                    })
                                  );
                                case 46:
                                  Ve.dispatch(G(false));
                                case 47:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [3, 10],
                            [17, 40]
                          ]
                        );
                      })
                    ), function(e4) {
                      return _t.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeWebcamResolution",
                    value: (gt = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  Ye.debug("changeWebcamResolution()"), Ve.dispatch(G(true)), e5.prev = 2, e5.t0 = this._webcam.resolution, e5.next = "qvga" === e5.t0 ? 6 : "vga" === e5.t0 ? 8 : "hd" === e5.t0 ? 10 : 12;
                                  break;
                                case 6:
                                  return this._webcam.resolution = "vga", e5.abrupt("break", 13);
                                case 8:
                                  return this._webcam.resolution = "hd", e5.abrupt("break", 13);
                                case 10:
                                  return this._webcam.resolution = "qvga", e5.abrupt("break", 13);
                                case 12:
                                  this._webcam.resolution = "hd";
                                case 13:
                                  return Ye.debug(
                                    "changeWebcamResolution() | calling getUserMedia()"
                                  ), e5.prev = 14, e5.next = 17, navigator.mediaDevices.getUserMedia({
                                    video: He(
                                      {
                                        deviceId: {
                                          exact: this._webcam.device.deviceId
                                        }
                                      },
                                      ze[this._webcam.resolution]
                                    )
                                  });
                                case 17:
                                  t4 = e5.sent, e5.next = 25;
                                  break;
                                case 20:
                                  return e5.prev = 20, e5.t1 = e5.catch(14), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Error in getUserMedia for changeWebcamResolution",
                                    logType: "ERROR",
                                    attributes: {
                                      error: JSON.stringify(e5.t1)
                                    }
                                  }), "Permission denied" === e5.t1.message || "NotAllowedError" === e5.t1.name ? this._emitError(
                                    ke.q.ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
                                  ) : this._emitError(
                                    ke.q.ERROR_GET_VIDEO_MEDIA
                                  ), e5.abrupt("return");
                                case 25:
                                  return a3 = t4.getVideoTracks()[0], e5.next = 28, this._webcamProducer.replaceTrack({
                                    track: a3
                                  });
                                case 28:
                                  Ve.dispatch(q(this._webcamProducer.id, a3)), e5.next = 36;
                                  break;
                                case 31:
                                  e5.prev = 31, e5.t2 = e5.catch(2), Ye.error(
                                    "changeWebcamResolution() | failed: %o",
                                    e5.t2
                                  ), null === (n2 = this._videosdkLogs) || void 0 === n2 || n2.pushLogs({
                                    logText: "Error Could not change webcam resolution",
                                    logType: "ERROR",
                                    attributes: { error: e5.t2.message }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Could not change webcam resolution: ".concat(
                                        e5.t2
                                      )
                                    })
                                  );
                                case 36:
                                  Ve.dispatch(G(false));
                                case 37:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [2, 31],
                            [14, 20]
                          ]
                        );
                      })
                    ), function() {
                      return gt.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableShare",
                    value: (ft = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2, i2, o2, c2, d3, p2, u2, h3, m3, f3, g3, _3, v3, b3, y2, w3, S3, R3, E3, k3, T3, C2, P2, O3, D3, x2, I2, M2, A2, L2, N2, j2, B2, F2, q2 = this, H2 = arguments;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (r4 = H2.length > 0 && void 0 !== H2[0] ? H2[0] : void 0, a3 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "enableShare() Calling ".concat(
                                      r4 ? "With Custom Video Track" : "Without Custom Video Track "
                                    ),
                                    attributes: {
                                      customShareConfig: r4 ? JSON.stringify(r4) : "Not Specify Custom Track"
                                    }
                                  }), Ye.debug("enableShare()"), !this._shareProducer) {
                                    e5.next = 6;
                                    break;
                                  }
                                  return null === (n2 = this._openTelemetry) || void 0 === n2 || n2.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "Screen Share Producer found"
                                  }), e5.abrupt("return");
                                case 6:
                                  if (this._mediasoupDevice.canProduce("video")) {
                                    e5.next = 10;
                                    break;
                                  }
                                  return null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "enableShare() | cannot produce video"
                                  }), Ye.error(
                                    "enableShare() | cannot produce video"
                                  ), e5.abrupt("return");
                                case 10:
                                  if (Ve.dispatch(z(true)), e5.prev = 11, Ye.debug(
                                    "enableShare() | calling getUserMedia()"
                                  ), f3 = null === (c2 = this._openTelemetry) || void 0 === c2 ? void 0 : c2.trace({
                                    spanName: "Creating Track",
                                    span: a3
                                  }), !r4 || !r4.active) {
                                    e5.next = 19;
                                    break;
                                  }
                                  i2 = r4.getVideoTracks()[0], o2 = r4.getAudioTracks()[0], e5.next = 38;
                                  break;
                                case 19:
                                  return e5.prev = 19, e5.next = 22, navigator.mediaDevices.getDisplayMedia({
                                    audio: true,
                                    video: {
                                      width: { max: 1920 },
                                      height: { max: 1080 },
                                      frameRate: { max: 10 }
                                    }
                                  });
                                case 22:
                                  _3 = e5.sent, e5.next = 31;
                                  break;
                                case 25:
                                  return e5.prev = 25, e5.t0 = e5.catch(19), null === (v3 = this._videosdkLogs) || void 0 === v3 || v3.pushLogs({
                                    logText: "Error in getDisplayMedia for screen share",
                                    logType: "ERROR",
                                    attributes: {
                                      error: JSON.stringify(e5.t0)
                                    }
                                  }), null === (b3 = this._openTelemetry) || void 0 === b3 || b3.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "Error in getDisplayMedia for screen share ".concat(
                                      e5.t0
                                    )
                                  }), "Permission denied" === e5.t0.message || "NotAllowedError" === e5.t0.name ? this._emitError(
                                    ke.q.ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED
                                  ) : this._emitError(
                                    ke.q.ERROR_GET_DISPLAY_MEDIA
                                  ), e5.abrupt("return");
                                case 31:
                                  if (_3) {
                                    e5.next = 35;
                                    break;
                                  }
                                  return Ve.dispatch(z(true)), null === (y2 = this._openTelemetry) || void 0 === y2 || y2.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "Stream not found"
                                  }), e5.abrupt("return");
                                case 35:
                                  i2 = _3.getVideoTracks()[0], o2 = _3.getAudioTracks()[0], null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    message: "Track Generated with height ".concat(
                                      i2.getSettings().height,
                                      " and width "
                                    ).concat(i2.getSettings().width),
                                    span: f3,
                                    status: 1
                                  });
                                case 38:
                                  if (w3 = null === (d3 = this._openTelemetry) || void 0 === d3 ? void 0 : d3.trace({
                                    spanName: "Generating Producer Configuration",
                                    span: a3
                                  }), E3 = { videoGoogleStartBitrate: 1e3 }, !this._forceH264) {
                                    e5.next = 47;
                                    break;
                                  }
                                  if (R3 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video/h264" === e6.mimeType.toLowerCase();
                                    }
                                  )) {
                                    e5.next = 45;
                                    break;
                                  }
                                  throw null === (k3 = this._videosdkLogs) || void 0 === k3 || k3.pushLogs({
                                    logText: "Error EnableShare : desired H264 codec+configuration is not supported",
                                    logType: "ERROR"
                                  }), new Error(
                                    "desired H264 codec+configuration is not supported"
                                  );
                                case 45:
                                  e5.next = 52;
                                  break;
                                case 47:
                                  if (!this._forceVP9) {
                                    e5.next = 52;
                                    break;
                                  }
                                  if (R3 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video/vp9" === e6.mimeType.toLowerCase();
                                    }
                                  )) {
                                    e5.next = 52;
                                    break;
                                  }
                                  throw null === (T3 = this._videosdkLogs) || void 0 === T3 || T3.pushLogs({
                                    logText: "Error EnableShare :desired VP9 codec+configuration is not supported",
                                    logType: "ERROR"
                                  }), new Error(
                                    "desired VP9 codec+configuration is not supported"
                                  );
                                case 52:
                                  return this._useSharingSimulcast && (C2 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video" === e6.kind;
                                    }
                                  ), S3 = this._forceVP9 && R3 || "video/vp9" === C2.mimeType.toLowerCase() ? Qe : Je.map(function(e6) {
                                    return He(
                                      He({}, e6),
                                      {},
                                      { dtx: true }
                                    );
                                  })), null === (p2 = this._openTelemetry) || void 0 === p2 || p2.completeSpan({
                                    span: w3,
                                    status: 1,
                                    message: "Producer Configuration Generated"
                                  }), w3 = null === (u2 = this._openTelemetry) || void 0 === u2 ? void 0 : u2.trace({
                                    spanName: "Creating Share Producer",
                                    span: a3
                                  }), e5.next = 57, this._sendTransport.produce({
                                    track: i2,
                                    encodings: S3,
                                    codecOptions: E3,
                                    codec: R3,
                                    appData: { share: true }
                                  });
                                case 57:
                                  if (this._shareProducer = e5.sent, P2 = U({
                                    id: this._shareProducer.id,
                                    type: "share",
                                    paused: this._shareProducer.paused,
                                    track: this._shareProducer.track,
                                    rtpParameters: this._shareProducer.rtpParameters,
                                    codec: this._shareProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    appData: { share: true },
                                    instance: this._shareProducer
                                  }), Ve.dispatch(P2), this._eventEmitter.emit(
                                    P2.type,
                                    P2.payload
                                  ), this._shareProducer.on(
                                    "transportclose",
                                    function() {
                                      var e6, t5 = W(q2._shareProducer.id);
                                      Ve.dispatch(t5), q2._eventEmitter.emit(
                                        t5.type,
                                        t5.payload
                                      ), null === (e6 = q2._shareProducer) || void 0 === e6 || e6.close(), q2._shareProducer = null;
                                    }
                                  ), this._shareProducer.on(
                                    "trackended",
                                    function() {
                                      var e6;
                                      null === (e6 = q2._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                        spanName: "this._shareProducer trackended or Share disconnected!",
                                        span: a3,
                                        status: 2
                                      }), Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Share disconnected!"
                                        })
                                      ), q2.disableShare().catch(function() {
                                      });
                                    }
                                  ), null === (h3 = this._openTelemetry) || void 0 === h3 || h3.completeSpan({
                                    span: w3,
                                    status: 1,
                                    message: "Share Producer Created"
                                  }), !o2) {
                                    e5.next = 84;
                                    break;
                                  }
                                  return e5.prev = 65, x2 = { opusStereo: 1, opusDtx: 1 }, w3 = null === (O3 = this._openTelemetry) || void 0 === O3 ? void 0 : O3.trace({
                                    spanName: "Creating Share Audio Producer",
                                    span: a3
                                  }), e5.next = 70, this._sendTransport.produce({
                                    track: o2,
                                    codecOptions: x2,
                                    appData: { share: true }
                                  });
                                case 70:
                                  this._shareAudioProducer = e5.sent, I2 = U({
                                    id: this._shareAudioProducer.id,
                                    type: "share",
                                    paused: this._shareAudioProducer.paused,
                                    track: this._shareAudioProducer.track,
                                    rtpParameters: this._shareAudioProducer.rtpParameters,
                                    codec: this._shareAudioProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    appData: { share: true },
                                    instance: this._shareAudioProducer
                                  }), Ve.dispatch(I2), this._eventEmitter.emit(
                                    I2.type,
                                    I2.payload
                                  ), this._shareAudioProducer.on(
                                    "transportclose",
                                    function() {
                                      var e6, t5 = W(q2._shareAudioProducer.id);
                                      Ve.dispatch(t5), q2._eventEmitter.emit(
                                        t5.type,
                                        t5.payload
                                      ), null === (e6 = q2._shareAudioProducer) || void 0 === e6 || e6.close(), q2._shareAudioProducer = null;
                                    }
                                  ), this._shareAudioProducer.on(
                                    "trackended",
                                    function() {
                                      var e6;
                                      null === (e6 = q2._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                        spanName: "this._shareAudioProducer trackended",
                                        span: a3,
                                        status: 2
                                      }), Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Share disconnected!"
                                        })
                                      );
                                    }
                                  ), null === (D3 = this._openTelemetry) || void 0 === D3 || D3.completeSpan({
                                    span: w3,
                                    status: 1,
                                    message: "Share Audio Producer Created"
                                  }), e5.next = 84;
                                  break;
                                case 79:
                                  return e5.prev = 79, e5.t1 = e5.catch(65), e5.next = 83, this._protoo.request("produceError", {
                                    mediaType: "shareAudio",
                                    message: e5.t1.message
                                  });
                                case 83:
                                  null === (M2 = this._videosdkLogs) || void 0 === M2 || M2.pushLogs({
                                    logText: "Error in shareAudio produceError",
                                    logType: "ERROR",
                                    attributes: { error: e5.t1.message }
                                  });
                                case 84:
                                  null === (m3 = this._openTelemetry) || void 0 === m3 || m3.completeSpan({
                                    span: a3,
                                    status: 1,
                                    message: "Enable Share Successful"
                                  }), e5.next = 98;
                                  break;
                                case 87:
                                  return e5.prev = 87, e5.t2 = e5.catch(11), Ye.error(
                                    "enableShare() | failed:%o",
                                    e5.t2
                                  ), null === (A2 = this._openTelemetry) || void 0 === A2 || A2.completeSpan({
                                    span: a3,
                                    status: 2,
                                    attributes: { error: e5.t2.message },
                                    message: "Error in enableShare video produceError"
                                  }), console.log(
                                    "screen share catch",
                                    e5.t2.message
                                  ), null === (L2 = this._videosdkLogs) || void 0 === L2 || L2.pushLogs({
                                    logText: "Error in enableShare video produceError",
                                    logType: "ERROR",
                                    attributes: { error: e5.t2.message }
                                  }), "NotAllowedError" !== e5.t2.name && Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error sharing: ".concat(
                                        e5.t2
                                      )
                                    })
                                  ), e5.next = 96, this._protoo.request("produceError", {
                                    mediaType: "share",
                                    message: e5.t2.message
                                  });
                                case 96:
                                  i2 && i2.stop(), o2 && o2.stop();
                                case 98:
                                  Ve.dispatch(z(false)), this._shareProducer && (N2 = 0, (j2 = this._metrics.addNewProbe(
                                    this._shareProducer,
                                    "share_producer"
                                  )).onStatsCollected = function(e6) {
                                    try {
                                      var t5;
                                      q2._stats.producerStats || (q2._stats.producerStats = {}), q2._stats.producerStats.share || (q2._stats.producerStats.share = []), q2._shareProducer && (q2._latestStats[null === (t5 = q2._shareProducer) || void 0 === t5 ? void 0 : t5.id] = []), e6.video.forEach(function(e7) {
                                        var t6;
                                        q2._shareProducer && q2._latestStats[null === (t6 = q2._shareProducer) || void 0 === t6 ? void 0 : t6.id].push(e7);
                                      }), N2 % 5 == 0 && null != q2._shareProducer && q2._stats.producerStats.share.push(
                                        {
                                          timestamp: /* @__PURE__ */ new Date(),
                                          stats: q2._latestStats[q2._shareProducer.id]
                                        }
                                      ), N2++;
                                    } catch (e7) {
                                      var r5;
                                      null === (r5 = q2._videosdkLogs) || void 0 === r5 || r5.pushLogs({
                                        logText: "Error PRODUCER Stats ERROR",
                                        logType: "ERROR",
                                        attributes: {
                                          error: e7.message
                                        }
                                      }), console.log("PRODUCER ERROR", e7);
                                    }
                                  }, j2.start(), this._shareProducer.observer.on(
                                    "close",
                                    function() {
                                      j2.stop(), q2._metrics.removeExistingProbe(j2);
                                    }
                                  )), this._shareAudioProducer && (B2 = 0, (F2 = this._metrics.addNewProbe(
                                    this._shareAudioProducer,
                                    "share_audio_producer"
                                  )).onStatsCollected = function(e6) {
                                    try {
                                      var t5;
                                      q2._stats.producerStats || (q2._stats.producerStats = {}), q2._stats.producerStats.shareAudio || (q2._stats.producerStats.shareAudio = []), q2._shareAudioProducer && (q2._latestStats[null === (t5 = q2._shareAudioProducer) || void 0 === t5 ? void 0 : t5.id] = []), e6.audio.forEach(function(e7) {
                                        var t6;
                                        q2._shareAudioProducer && q2._latestStats[null === (t6 = q2._shareAudioProducer) || void 0 === t6 ? void 0 : t6.id].push(e7);
                                      }), B2 % 5 == 0 && null != q2._shareAudioProducer && q2._stats.producerStats.shareAudio.push(
                                        He(
                                          { timestamp: /* @__PURE__ */ new Date() },
                                          q2._latestStats[q2._shareAudioProducer.id] ? q2._latestStats[q2._shareAudioProducer.id][0] : {}
                                        )
                                      ), B2++;
                                    } catch (e7) {
                                      var r5;
                                      null === (r5 = q2._videosdkLogs) || void 0 === r5 || r5.pushLogs({
                                        logText: "Error PRODUCER Stats ERROR",
                                        logType: "ERROR",
                                        attributes: {
                                          error: e7.message
                                        }
                                      }), console.log("PRODUCER ERROR", e7);
                                    }
                                  }, F2.start(), this._shareAudioProducer.observer.on(
                                    "close",
                                    function() {
                                      F2.stop(), q2._metrics.removeExistingProbe(F2);
                                    }
                                  ));
                                case 101:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [11, 87],
                            [19, 25],
                            [65, 79]
                          ]
                        );
                      })
                    ), function() {
                      return ft.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableShare",
                    value: (mt = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2, i2, o2, c2, d3, p2, u2, h3, m3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("disableShare()"), n2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "disableShare() Calling",
                                    status: 1
                                  }), this._shareProducer) {
                                    e5.next = 5;
                                    break;
                                  }
                                  return null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "Share Producer Not found"
                                  }), e5.abrupt("return");
                                case 5:
                                  return i2 = null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "Closing Share Producer",
                                    span: n2,
                                    status: 1
                                  }), this._shareProducer.close(), o2 = W(this._shareProducer.id), Ve.dispatch(o2), this._eventEmitter.emit(
                                    o2.type,
                                    o2.payload
                                  ), this._shareAudioProducer && (p2 = null === (c2 = this._openTelemetry) || void 0 === c2 ? void 0 : c2.trace({
                                    spanName: "Closing Share Audio Producer",
                                    span: n2,
                                    status: 1
                                  }), this._shareAudioProducer.close(), o2 = W(this._shareAudioProducer.id), Ve.dispatch(o2), this._eventEmitter.emit(
                                    o2.type,
                                    o2.payload
                                  ), null === (d3 = this._openTelemetry) || void 0 === d3 || d3.completeSpan({
                                    span: p2,
                                    status: 1,
                                    message: "Closed Share Audio Producer"
                                  })), e5.prev = 11, e5.next = 14, this._protoo.request("closeProducer", {
                                    producerId: this._shareProducer.id
                                  });
                                case 14:
                                  if (!this._shareAudioProducer) {
                                    e5.next = 17;
                                    break;
                                  }
                                  return e5.next = 17, this._protoo.request("closeProducer", {
                                    producerId: this._shareAudioProducer.id
                                  });
                                case 17:
                                  null === (u2 = this._openTelemetry) || void 0 === u2 || u2.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "Requested Server to Close Producer"
                                  }), e5.next = 25;
                                  break;
                                case 20:
                                  e5.prev = 20, e5.t0 = e5.catch(11), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error closing server-side share Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), null === (h3 = this._openTelemetry) || void 0 === h3 || h3.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "Error closing server-side share Producer ".concat(
                                      e5.t0
                                    )
                                  }), null === (m3 = this._videosdkLogs) || void 0 === m3 || m3.pushLogs({
                                    logText: "Error closing server-side share Producer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 25:
                                  this._shareProducer = null, this._shareAudioProducer = null, null === (a3 = this._openTelemetry) || void 0 === a3 || a3.completeSpan({
                                    span: n2,
                                    status: 1,
                                    message: "Screen Share Disabled Successfully"
                                  });
                                case 28:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[11, 20]]
                        );
                      })
                    ), function() {
                      return mt.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableAudioOnly",
                    value: (ht = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  Ye.debug("enableAudioOnly()"), Ve.dispatch(j(true)), this.disableWebcam(), t4 = Ue(this._consumers.values()), e5.prev = 4, t4.s();
                                case 6:
                                  if ((r4 = t4.n()).done) {
                                    e5.next = 13;
                                    break;
                                  }
                                  if ("video" === (a3 = r4.value).kind) {
                                    e5.next = 10;
                                    break;
                                  }
                                  return e5.abrupt("continue", 11);
                                case 10:
                                  this._pauseConsumer(a3);
                                case 11:
                                  e5.next = 6;
                                  break;
                                case 13:
                                  e5.next = 18;
                                  break;
                                case 15:
                                  e5.prev = 15, e5.t0 = e5.catch(4), t4.e(e5.t0);
                                case 18:
                                  return e5.prev = 18, t4.f(), e5.finish(18);
                                case 21:
                                  Ve.dispatch(N(true)), Ve.dispatch(j(false));
                                case 23:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 15, 18, 21]]
                        );
                      })
                    ), function() {
                      return ht.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableAudioOnly",
                    value: (ut = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  Ye.debug("disableAudioOnly()"), Ve.dispatch(j(true)), !this._webcamProducer && this._produce && (P() || {}).webcamEnabled && this.enableWebcam(), t4 = Ue(this._consumers.values()), e5.prev = 4, t4.s();
                                case 6:
                                  if ((r4 = t4.n()).done) {
                                    e5.next = 13;
                                    break;
                                  }
                                  if ("video" === (a3 = r4.value).kind) {
                                    e5.next = 10;
                                    break;
                                  }
                                  return e5.abrupt("continue", 11);
                                case 10:
                                  this._resumeConsumer(a3);
                                case 11:
                                  e5.next = 6;
                                  break;
                                case 13:
                                  e5.next = 18;
                                  break;
                                case 15:
                                  e5.prev = 15, e5.t0 = e5.catch(4), t4.e(e5.t0);
                                case 18:
                                  return e5.prev = 18, t4.f(), e5.finish(18);
                                case 21:
                                  Ve.dispatch(N(false)), Ve.dispatch(j(false));
                                case 23:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 15, 18, 21]]
                        );
                      })
                    ), function() {
                      return ut.apply(this, arguments);
                    })
                  },
                  {
                    key: "muteAudio",
                    value: (pt = (0, s.A)(
                      l().mark(function e4() {
                        return l().wrap(function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                Ye.debug("muteAudio()"), Ve.dispatch(B(true));
                              case 2:
                              case "end":
                                return e5.stop();
                            }
                        }, e4);
                      })
                    ), function() {
                      return pt.apply(this, arguments);
                    })
                  },
                  {
                    key: "unmuteAudio",
                    value: (lt = (0, s.A)(
                      l().mark(function e4() {
                        return l().wrap(function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                Ye.debug("unmuteAudio()"), Ve.dispatch(B(false));
                              case 2:
                              case "end":
                                return e5.stop();
                            }
                        }, e4);
                      })
                    ), function() {
                      return lt.apply(this, arguments);
                    })
                  },
                  {
                    key: "handleRemoteRestartIce",
                    value: (dt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2, s2, i2, o2, c2, d3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return n2 = t4.iceParameters, s2 = t4.transportId, i2 = t4.internalSpan, s2 === (null === (r4 = this._sendTransport) || void 0 === r4 ? void 0 : r4.id) && this._sendTransport.restartIce({
                                    iceParameters: n2
                                  }), s2 === (null === (a3 = this._recvTransport) || void 0 === a3 ? void 0 : a3.id) && this._recvTransport.restartIce({
                                    iceParameters: n2
                                  }), e5.prev = 3, e5.next = 6, this._protoo.request("iceRestarted", {
                                    transportId: s2
                                  });
                                case 6:
                                  null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "iceRestarted"
                                  }), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(3), null === (c2 = this._openTelemetry) || void 0 === c2 || c2.completeSpan({
                                    span: i2,
                                    status: 2,
                                    message: "handleRemoteRestartIce() ICE restart failed ".concat(
                                      e5.t0
                                    )
                                  }), null === (d3 = this._videosdkLogs) || void 0 === d3 || d3.pushLogs({
                                    logText: "Error handleRemoteRestartIce() ICE restart failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "ICE restart failed: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 9]]
                        );
                      })
                    ), function(e4) {
                      return dt.apply(this, arguments);
                    })
                  },
                  {
                    key: "restartIce",
                    value: (ct = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("restartIce()"), Ve.dispatch(F(true)), e5.prev = 2, !this._sendTransport) {
                                    e5.next = 9;
                                    break;
                                  }
                                  return e5.next = 6, this._protoo.request("restartIce", {
                                    transportId: this._sendTransport.id
                                  });
                                case 6:
                                  return t4 = e5.sent, e5.next = 9, this._sendTransport.restartIce({
                                    iceParameters: t4
                                  });
                                case 9:
                                  if (!this._recvTransport) {
                                    e5.next = 15;
                                    break;
                                  }
                                  return e5.next = 12, this._protoo.request("restartIce", {
                                    transportId: this._recvTransport.id
                                  });
                                case 12:
                                  return r4 = e5.sent, e5.next = 15, this._recvTransport.restartIce({
                                    iceParameters: r4
                                  });
                                case 15:
                                  Ve.dispatch(ie({ text: "ICE restarted" })), e5.next = 23;
                                  break;
                                case 18:
                                  e5.prev = 18, e5.t0 = e5.catch(2), Ye.error(
                                    "restartIce() | failed:%o",
                                    e5.t0
                                  ), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "ICE restart failed: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), null === (a3 = this._videosdkLogs) || void 0 === a3 || a3.pushLogs({
                                    logText: "Error restartIce() ICE restart failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 23:
                                  Ve.dispatch(F(false));
                                case 24:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 18]]
                        );
                      })
                    ), function() {
                      return ct.apply(this, arguments);
                    })
                  },
                  {
                    key: "setMaxSendingSpatialLayer",
                    value: (ot = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug(
                                    "setMaxSendingSpatialLayer() [spatialLayer:%s]",
                                    t4
                                  ), e5.prev = 1, !this._webcamProducer) {
                                    e5.next = 7;
                                    break;
                                  }
                                  return e5.next = 5, this._webcamProducer.setMaxSpatialLayer(t4);
                                case 5:
                                  e5.next = 10;
                                  break;
                                case 7:
                                  if (!this._shareProducer) {
                                    e5.next = 10;
                                    break;
                                  }
                                  return e5.next = 10, this._shareProducer.setMaxSpatialLayer(t4);
                                case 10:
                                  e5.next = 17;
                                  break;
                                case 12:
                                  e5.prev = 12, e5.t0 = e5.catch(1), Ye.error(
                                    "setMaxSendingSpatialLayer() | failed:%o",
                                    e5.t0
                                  ), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Error setting max sending video spatial layer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error setting max sending video spatial layer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 17:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 12]]
                        );
                      })
                    ), function(e4) {
                      return ot.apply(this, arguments);
                    })
                  },
                  {
                    key: "setWebcamQuality",
                    value: (it = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (this._webcamProducer) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  if (r4 = this._webcam.resolution, a3 = Ge[r4][t4].s, this._webcamProducer.maxSpatialLayer != a3) {
                                    e5.next = 6;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 6:
                                  return e5.next = 8, this._webcamProducer.setMaxSpatialLayer(a3);
                                case 8:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return it.apply(this, arguments);
                    })
                  },
                  {
                    key: "setConsumerQuality",
                    value: (st = (0, s.A)(
                      l().mark(function e4(t4, r4) {
                        var a3, n2, s2, i2, o2, c2, d3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return i2 = this._webcam.resolution, o2 = null === (a3 = this._openTelemetry) || void 0 === a3 ? void 0 : a3.trace({
                                    spanName: 'Setting "'.concat(
                                      r4,
                                      '" Quality'
                                    )
                                  }), c2 = Ge[i2][r4].s, d3 = Ge[i2][r4].t, null === (n2 = this._openTelemetry) || void 0 === n2 || n2.traceAutoComplete({
                                    spanName: "Getting spatial & temporal layers",
                                    span: o2,
                                    attributes: {
                                      spatialLayers: JSON.parse(c2),
                                      temporalLayers: JSON.parse(d3)
                                    },
                                    status: 1
                                  }), e5.next = 7, this.setConsumerPreferredLayers(t4, c2, d3);
                                case 7:
                                  null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    message: "Done",
                                    span: o2,
                                    status: 1
                                  });
                                case 8:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return st.apply(this, arguments);
                    })
                  },
                  {
                    key: "setViewPort",
                    value: (nt = (0, s.A)(
                      l().mark(function e4(t4, r4, a3) {
                        var n2, s2, i2, o2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (this._consumers.get(t4.id)) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  if (n2 = Ee(
                                    this._consumers.get(t4.id),
                                    r4,
                                    a3
                                  ), s2 = n2.consumerId, i2 = n2.newPreferredSpatialLayer, o2 = n2.newPreferredTemporalLayer, !s2) {
                                    e5.next = 6;
                                    break;
                                  }
                                  return e5.next = 6, this.setConsumerPreferredLayers(s2, i2, o2);
                                case 6:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4, r4) {
                      return nt.apply(this, arguments);
                    })
                  },
                  {
                    key: "setConsumerPreferredLayers",
                    value: (at = (0, s.A)(
                      l().mark(function e4(t4, r4, a3) {
                        var n2, s2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug(
                                    "setConsumerPreferredLayers() [consumerId:%s, spatialLayer:%s, temporalLayer:%s]",
                                    t4,
                                    r4,
                                    a3
                                  ), e5.prev = 1, (n2 = this._consumers.get(t4)).spatialLayers > 1 && (n2.preferredSpatialLayer = r4, n2.preferredTemporalLayer = a3), e5.next = 6, this._protoo.request(
                                    "setConsumerPreferredLayers",
                                    {
                                      consumerId: t4,
                                      spatialLayer: r4,
                                      temporalLayer: a3
                                    }
                                  );
                                case 6:
                                  Ve.dispatch(te(t4, r4, a3)), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(1), Ye.error(
                                    "setConsumerPreferredLayers() | failed:%o",
                                    e5.t0
                                  ), null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: "Error setting Consumer preferred layers:",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error setting Consumer preferred layers: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 9]]
                        );
                      })
                    ), function(e4, t4, r4) {
                      return at.apply(this, arguments);
                    })
                  },
                  {
                    key: "setConsumerPriority",
                    value: (rt = (0, s.A)(
                      l().mark(function e4(t4, r4) {
                        var a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug(
                                    "setConsumerPriority() [consumerId:%s, priority:%d]",
                                    t4,
                                    r4
                                  ), e5.prev = 1, e5.next = 4, this._protoo.request(
                                    "setConsumerPriority",
                                    { consumerId: t4, priority: r4 }
                                  );
                                case 4:
                                  Ve.dispatch(re(t4, r4)), e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(1), Ye.error(
                                    "setConsumerPriority() | failed:%o",
                                    e5.t0
                                  ), null === (a3 = this._videosdkLogs) || void 0 === a3 || a3.pushLogs({
                                    logText: "Error setting Consumer priority",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error setting Consumer priority: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 7]]
                        );
                      })
                    ), function(e4, t4) {
                      return rt.apply(this, arguments);
                    })
                  },
                  {
                    key: "requestConsumerKeyFrame",
                    value: (tt = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug(
                                    "requestConsumerKeyFrame() [consumerId:%s]",
                                    t4
                                  ), e5.prev = 1, e5.next = 4, this._protoo.request(
                                    "requestConsumerKeyFrame",
                                    { consumerId: t4 }
                                  );
                                case 4:
                                  Ve.dispatch(
                                    ie({
                                      text: "Keyframe requested for video consumer"
                                    })
                                  ), e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(1), Ye.error(
                                    "requestConsumerKeyFrame() | failed:%o",
                                    e5.t0
                                  ), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Error requesting key frame for Consumer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error requesting key frame for Consumer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 7]]
                        );
                      })
                    ), function(e4) {
                      return tt.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableChatDataProducer",
                    value: (et = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4 = this;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("enableChatDataProducer()"), this._useDataChannel) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.prev = 3, e5.next = 6, this._sendTransport.produceData({
                                    ordered: false,
                                    maxRetransmits: 1,
                                    label: "chat",
                                    priority: "medium",
                                    appData: {
                                      info: "my-chat-DataProducer"
                                    }
                                  });
                                case 6:
                                  this._chatDataProducer = e5.sent, Ve.dispatch(
                                    V({
                                      id: this._chatDataProducer.id,
                                      sctpStreamParameters: this._chatDataProducer.sctpStreamParameters,
                                      label: this._chatDataProducer.label,
                                      protocol: this._chatDataProducer.protocol
                                    })
                                  ), this._chatDataProducer.on(
                                    "transportclose",
                                    function() {
                                      r4._chatDataProducer = null;
                                    }
                                  ), this._chatDataProducer.on(
                                    "open",
                                    function() {
                                      Ye.debug(
                                        'chat DataProducer "open" event'
                                      );
                                    }
                                  ), this._chatDataProducer.on(
                                    "close",
                                    function() {
                                      Ye.error(
                                        'chat DataProducer "close" event'
                                      ), r4._chatDataProducer = null, Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Chat DataProducer closed"
                                        })
                                      );
                                    }
                                  ), this._chatDataProducer.on(
                                    "error",
                                    function(e6) {
                                      Ye.error(
                                        'chat DataProducer "error" event:%o',
                                        e6
                                      ), Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Chat DataProducer error: ".concat(
                                            e6
                                          )
                                        })
                                      );
                                    }
                                  ), this._chatDataProducer.on(
                                    "bufferedamountlow",
                                    function() {
                                      Ye.debug(
                                        'chat DataProducer "bufferedamountlow" event'
                                      );
                                    }
                                  ), e5.next = 21;
                                  break;
                                case 15:
                                  throw e5.prev = 15, e5.t0 = e5.catch(3), Ye.error(
                                    "enableChatDataProducer() | failed:%o",
                                    e5.t0
                                  ), null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "Error enabling chat DataProducer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error enabling chat DataProducer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), e5.t0;
                                case 21:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 15]]
                        );
                      })
                    ), function() {
                      return et.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableBotDataProducer",
                    value: (Ze = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4 = this;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("enableBotDataProducer()"), this._useDataChannel) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.prev = 3, e5.next = 6, this._sendTransport.produceData({
                                    ordered: false,
                                    maxPacketLifeTime: 2e3,
                                    label: "bot",
                                    priority: "medium",
                                    appData: {
                                      info: "my-bot-DataProducer"
                                    }
                                  });
                                case 6:
                                  this._botDataProducer = e5.sent, Ve.dispatch(
                                    V({
                                      id: this._botDataProducer.id,
                                      sctpStreamParameters: this._botDataProducer.sctpStreamParameters,
                                      label: this._botDataProducer.label,
                                      protocol: this._botDataProducer.protocol
                                    })
                                  ), this._botDataProducer.on(
                                    "transportclose",
                                    function() {
                                      r4._botDataProducer = null;
                                    }
                                  ), this._botDataProducer.on(
                                    "open",
                                    function() {
                                      Ye.debug(
                                        'bot DataProducer "open" event'
                                      );
                                    }
                                  ), this._botDataProducer.on(
                                    "close",
                                    function() {
                                      Ye.error(
                                        'bot DataProducer "close" event'
                                      ), r4._botDataProducer = null, Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Bot DataProducer closed"
                                        })
                                      );
                                    }
                                  ), this._botDataProducer.on(
                                    "error",
                                    function(e6) {
                                      Ye.error(
                                        'bot DataProducer "error" event:%o',
                                        e6
                                      ), Ve.dispatch(
                                        ie({
                                          type: "error",
                                          text: "Bot DataProducer error: ".concat(
                                            e6
                                          )
                                        })
                                      );
                                    }
                                  ), this._botDataProducer.on(
                                    "bufferedamountlow",
                                    function() {
                                      Ye.debug(
                                        'bot DataProducer "bufferedamountlow" event'
                                      );
                                    }
                                  ), e5.next = 21;
                                  break;
                                case 15:
                                  throw e5.prev = 15, e5.t0 = e5.catch(3), Ye.error(
                                    "enableBotDataProducer() | failed:%o",
                                    e5.t0
                                  ), null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "Error enabling bot DataProducer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error enabling bot DataProducer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), e5.t0;
                                case 21:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 15]]
                        );
                      })
                    ), function() {
                      return Ze.apply(this, arguments);
                    })
                  },
                  {
                    key: "sendChatMessage",
                    value: (Xe2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug(
                                    'sendChatMessage() [text:"%s]',
                                    t4
                                  ), this._chatDataProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "No chat DataProducer"
                                    })
                                  ), e5.abrupt("return");
                                case 4:
                                  try {
                                    this._chatDataProducer.send(t4);
                                  } catch (e6) {
                                    Ye.error(
                                      "chat DataProducer.send() failed:%o",
                                      e6
                                    ), Ve.dispatch(
                                      ie({
                                        type: "error",
                                        text: "chat DataProducer.send() failed: ".concat(
                                          e6
                                        )
                                      })
                                    );
                                  }
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Xe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "sendBotMessage",
                    value: (qe2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug(
                                    'sendBotMessage() [text:"%s]',
                                    t4
                                  ), this._botDataProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "No bot DataProducer"
                                    })
                                  ), e5.abrupt("return");
                                case 4:
                                  try {
                                    this._botDataProducer.send(t4);
                                  } catch (e6) {
                                    Ye.error(
                                      "bot DataProducer.send() failed:%o",
                                      e6
                                    ), Ve.dispatch(
                                      ie({
                                        type: "error",
                                        text: "bot DataProducer.send() failed: ".concat(
                                          e6
                                        )
                                      })
                                    );
                                  }
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return qe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeDisplayName",
                    value: (We2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug(
                                    'changeDisplayName() [displayName:"%s"]',
                                    t4
                                  ), C({ displayName: t4 }), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "changeDisplayName",
                                    { displayName: t4 }
                                  );
                                case 5:
                                  this._displayName = t4, Ve.dispatch(L(t4)), Ve.dispatch(
                                    ie({ text: "Display name changed" })
                                  ), e5.next = 15;
                                  break;
                                case 10:
                                  e5.prev = 10, e5.t0 = e5.catch(2), Ye.error(
                                    "changeDisplayName() | failed: %o",
                                    e5.t0
                                  ), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Could not change display name: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), Ve.dispatch(L());
                                case 15:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 10]]
                        );
                      })
                    ), function(e4) {
                      return We2.apply(this, arguments);
                    })
                  },
                  {
                    key: "openConnection",
                    value: (je2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, a3 = t4.payload, e5.next = 3, this._protoo.request("openConnection", {
                                    roomId: r4,
                                    payload: a3
                                  }).catch(function(e6) {
                                    throw new Error(e6);
                                  });
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return je2.apply(this, arguments);
                    })
                  },
                  {
                    key: "closeConnection",
                    value: (Ne2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, this._protoo.request("closeConnection", {
                                    roomId: t4
                                  });
                                case 2:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Ne2.apply(this, arguments);
                    })
                  },
                  {
                    key: "switchTo",
                    value: (Ae2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, a3 = t4.peerIds, n2 = t4.payload, e5.next = 3, this._protoo.request(
                                    "requestSwitchRoom",
                                    { roomId: r4, peerIds: a3, payload: n2 }
                                  );
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Ae2.apply(this, arguments);
                    })
                  },
                  {
                    key: "switchPeerRoom",
                    value: (Me2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2, s2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.peerId, a3 = t4.roomId, n2 = t4.payload, s2 = t4.token, e5.next = 3, this._protoo.request("switchPeerRoom", {
                                    roomId: a3,
                                    peerId: r4,
                                    payload: n2,
                                    token: s2
                                  });
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Me2.apply(this, arguments);
                    })
                  },
                  {
                    key: "connectionSwitchPeerRoom",
                    value: (Ie2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2, s2, i2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, a3 = t4.connectionRoomId, n2 = t4.peerId, s2 = t4.payload, i2 = t4.token, e5.next = 3, this._protoo.request(
                                    "connectionSwitchPeerRoom",
                                    {
                                      roomId: r4,
                                      connectionRoomId: a3,
                                      peerId: n2,
                                      payload: s2,
                                      token: i2
                                    }
                                  );
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Ie2.apply(this, arguments);
                    })
                  },
                  {
                    key: "connectionSendChatMessage",
                    value: (xe2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, a3 = t4.message, e5.next = 3, this._protoo.request(
                                    "connectionSendChatMessage",
                                    { roomId: r4, message: a3 }
                                  );
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return xe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "connectionEndMeeting",
                    value: (De2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, e5.next = 3, this._protoo.request(
                                    "connectionCloseRoom",
                                    { roomId: r4 }
                                  );
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return De2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pubsubPublish",
                    value: (Oe2 = (0, s.A)(
                      l().mark(function e4(t4, r4, a3, n2) {
                        var s2, i2, o2, c2, d3, p2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (e5.prev = 0, null != a3 && a3.sendOnly) {
                                    if (s2 = a3.sendOnly, i2 = [], s2) {
                                      o2 = Ue(s2);
                                      try {
                                        for (o2.s(); !(c2 = o2.n()).done; )
                                          (d3 = c2.value) && i2.push(d3.toString());
                                      } catch (e6) {
                                        o2.e(e6);
                                      } finally {
                                        o2.f();
                                      }
                                    }
                                    a3.sendOnly = i2;
                                  }
                                  return e5.next = 4, this._protoo.request("pubsubPublish", {
                                    topic: t4,
                                    message: r4,
                                    options: a3,
                                    payload: n2
                                  });
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(0), null === (p2 = this._videosdkLogs) || void 0 === p2 || p2.pushLogs({
                                    logText: "Error pubsubPublish() | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error(
                                    "pubsubPublish() | failed: %o",
                                    e5.t0
                                  );
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[0, 6]]
                        );
                      })
                    ), function(e4, t4, r4, a3) {
                      return Oe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pubsubSubscribe",
                    value: (Re2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return e5.prev = 2, e5.next = 5, this._protoo.request("pubsubSubscribe", {
                                    topic: t4
                                  });
                                case 5:
                                  return r4 = e5.sent, e5.abrupt("return", r4);
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(2), null === (a3 = this._videosdkLogs) || void 0 === a3 || a3.pushLogs({
                                    logText: "Error pubsubSubscribe() | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error(
                                    "pubsubSubscribe() | failed: %o",
                                    e5.t0
                                  );
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 9]]
                        );
                      })
                    ), function(e4) {
                      return Re2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pubsubUnsubscribe",
                    value: (Se2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "pubsubUnsubscribe",
                                    { topic: t4 }
                                  );
                                case 5:
                                  null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Pubsub Unsubscribing Successfully for topic ".concat(
                                      t4
                                    ),
                                    logType: "INFO"
                                  }), e5.next = 12;
                                  break;
                                case 8:
                                  e5.prev = 8, e5.t0 = e5.catch(2), null === (a3 = this._videosdkLogs) || void 0 === a3 || a3.pushLogs({
                                    logText: "Error pubsubUnsubscribe() | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ye.error(
                                    "pubsubUnsubscribe() | failed: %o",
                                    e5.t0
                                  );
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 8]]
                        );
                      })
                    ), function(e4) {
                      return Se2.apply(this, arguments);
                    })
                  },
                  {
                    key: "closeRoom",
                    value: (ye2 = (0, s.A)(
                      l().mark(function e4() {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, this._protoo.request("closeRoom", {});
                                case 2:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return ye2.apply(this, arguments);
                    })
                  },
                  {
                    key: "removePeer",
                    value: (be2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Removing peer ".concat(t4),
                                    status: 1
                                  }), null != t4) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.next = 5, this._protoo.request("removePeer", {
                                    peerId: t4
                                  });
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return be2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startPingPong",
                    value: (ve2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4 = this;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  null != this._pingWebsocketInterval && clearInterval(
                                    this._pingWebsocketInterval
                                  ), this._pingWebsocketInterval = setInterval(function() {
                                    t4.pingWebSocket();
                                  }, 2e3);
                                case 2:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return ve2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pingWebSocket",
                    value: (_e2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4 = this;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  t4 = false, this._protoo.request("ping").then(function(e6) {
                                    e6 && (t4 = true);
                                  }).catch(function(e6) {
                                  }), setTimeout(function() {
                                    t4 ? (!r4._isWebsocketAlive || r4._pingWebsocketFailedCounter > 1 ? (r4._eventEmitter.emit(
                                      "MEETING_STATE_CHANGED",
                                      { state: "CONNECTED" }
                                    ), r4._isWebsocketAlive = true, r4._pingWebsocketFailedCounter = 0, r4.restartIce()) : "failed" != r4._transportState && "disconnected" != r4._transportState || (console.log(
                                      "Calling Restart Ice based on transport state",
                                      r4._transportState
                                    ), r4.restartIce()), r4._pingWebsocketFailedCounter = 0) : (r4._isWebsocketAlive && r4._pingWebsocketFailedCounter > 1 && (r4._eventEmitter.emit(
                                      "MEETING_STATE_CHANGED",
                                      { state: "DISCONNECTED" }
                                    ), r4._isWebsocketAlive = false, r4.startInternetPingPong()), r4._pingWebsocketFailedCounter = r4._pingWebsocketFailedCounter + 1);
                                  }, 1e3);
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return _e2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startInternetPingPong",
                    value: (ge2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4 = this;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  null != this._pingInternetInterval && clearInterval(this._pingInternetInterval), this._pingInternetInterval = setInterval(
                                    function() {
                                      t4.pingInternet();
                                    },
                                    2e3
                                  );
                                case 2:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return ge2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pingInternet",
                    value: (fe2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2, i2, o2 = this;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return null === (t4 = this._videosdkLogs) || void 0 === t4 || t4.pushLogs({
                                    logText: "pinging internet",
                                    logType: "INFO"
                                  }), r4 = new AbortController(), a3 = r4.signal, n2 = setTimeout(function() {
                                    r4.abort();
                                  }, 1e3), e5.next = 8, fetch(
                                    "https://".concat(
                                      this._signalingBaseUrl,
                                      "/ping"
                                    ),
                                    { method: "GET", signal: a3 }
                                  ).then(function(e6) {
                                    return clearTimeout(n2), e6.text();
                                  }).catch(function(e6) {
                                    var t5;
                                    return null === (t5 = o2._videosdkLogs) || void 0 === t5 || t5.pushLogs({
                                      logText: "Error pingInternet failed",
                                      logType: "ERROR",
                                      attributes: {
                                        error: e6.message
                                      }
                                    }), "failed";
                                  });
                                case 8:
                                  if ("pong" != e5.sent) {
                                    e5.next = 19;
                                    break;
                                  }
                                  if (null === (s2 = this._videosdkLogs) || void 0 === s2 || s2.pushLogs({
                                    logText: "Pong",
                                    logType: "INFO"
                                  }), !(this._pingWebsocketFailedCounter > 5 && this._pongInternetCounter > 3) || this._isWebsocketAlive) {
                                    e5.next = 17;
                                    break;
                                  }
                                  return this._pongInternetCounter = 0, this.close({ sendLeft: false }), null === (i2 = this._videosdkLogs) || void 0 === i2 || i2.pushLogs({
                                    logText: "Re-join the meeting, after diconnect",
                                    logType: "INFO"
                                  }), e5.next = 17, this.join();
                                case 17:
                                  this._pongInternetCounter = this._pongInternetCounter + 1, this._isWebsocketAlive && (this._pongInternetCounter = 0, null != this._pingInternetInterval && (clearInterval(
                                    this._pingInternetInterval
                                  ), this._pingInternetInterval = null));
                                case 19:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return fe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getSendTransportRemoteStats",
                    value: (me2 = (0, s.A)(
                      l().mark(function e4() {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug(
                                    "getSendTransportRemoteStats()"
                                  ), this._sendTransport) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._protoo.request(
                                      "getTransportStats",
                                      { transportId: this._sendTransport.id }
                                    )
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return me2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getRecvTransportRemoteStats",
                    value: (he2 = (0, s.A)(
                      l().mark(function e4() {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug(
                                    "getRecvTransportRemoteStats()"
                                  ), this._recvTransport) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._protoo.request(
                                      "getTransportStats",
                                      { transportId: this._recvTransport.id }
                                    )
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return he2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getAudioRemoteStats",
                    value: (ue2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("getAudioRemoteStats()"), t4 = this._micProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._latestStats[t4.id]
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return ue2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getVideoRemoteStats",
                    value: (pe2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("getVideoRemoteStats()"), t4 = this._webcamProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._latestStats[t4.id]
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return pe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getShareRemoteStats",
                    value: (le2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("getVideoRemoteStats()"), t4 = this._shareProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._latestStats[t4.id]
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return le2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getShareAudioRemoteStats",
                    value: (de2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (t4 = this._shareAudioProducer) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._latestStats[t4.id]
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return de2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getConsumerRemoteStats",
                    value: (D2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("getConsumerRemoteStats()"), r4 = this._consumers.get(t4)) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return this._latestStats[t4] && (this._latestStats[t4][0].currentSpatialLayer = r4.currentSpatialLayer, this._latestStats[t4][0].currentTemporalLayer = r4.currentTemporalLayer, this._latestStats[t4][0].preferredSpatialLayer = r4.preferredSpatialLayer, this._latestStats[t4][0].preferredTemporalLayer = r4.preferredTemporalLayer), a3 = r4.track.id.replace(/[{}]/g, ""), e5.abrupt("return", this._latestStats[a3]);
                                case 7:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return D2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getChatDataProducerRemoteStats",
                    value: (O2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug(
                                    "getChatDataProducerRemoteStats()"
                                  ), t4 = this._chatDataProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._protoo.request(
                                      "getDataProducerStats",
                                      { dataProducerId: t4.id }
                                    )
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return O2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getBotDataProducerRemoteStats",
                    value: (T2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug(
                                    "getBotDataProducerRemoteStats()"
                                  ), t4 = this._botDataProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._protoo.request(
                                      "getDataProducerStats",
                                      { dataProducerId: t4.id }
                                    )
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return T2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getDataConsumerRemoteStats",
                    value: (k2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("getDataConsumerRemoteStats()"), this._dataConsumers.get(t4)) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._protoo.request(
                                      "getDataConsumerStats",
                                      { dataConsumerId: t4 }
                                    )
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return k2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getSendTransportLocalStats",
                    value: (E2 = (0, s.A)(
                      l().mark(function e4() {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("getSendTransportLocalStats()"), this._sendTransport) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._sendTransport.getStats()
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return E2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getRecvTransportLocalStats",
                    value: (R2 = (0, s.A)(
                      l().mark(function e4() {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("getRecvTransportLocalStats()"), this._recvTransport) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._recvTransport.getStats()
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return R2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getAudioLocalStats",
                    value: (S2 = (0, s.A)(
                      l().mark(function e4() {
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("getAudioLocalStats()"), this._micProducer) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._micProducer.getStats()
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return S2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getVideoLocalStats",
                    value: (w2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ye.debug("getVideoLocalStats()"), t4 = this._webcamProducer || this._shareProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt("return", t4.getStats());
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return w2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getConsumerLocalStats",
                    value: (b2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (r4 = this._consumers.get(t4)) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt("return", r4.getStats());
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return b2.apply(this, arguments);
                    })
                  },
                  {
                    key: "applyNetworkThrottle",
                    value: (v2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2, s2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.uplink, a3 = t4.downlink, n2 = t4.rtt, s2 = t4.secret, Ye.debug(
                                    "applyNetworkThrottle() [uplink:%s, downlink:%s, rtt:%s]",
                                    r4,
                                    a3,
                                    n2
                                  ), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "applyNetworkThrottle",
                                    {
                                      uplink: r4,
                                      downlink: a3,
                                      rtt: n2,
                                      secret: s2
                                    }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Ye.error(
                                    "applyNetworkThrottle() | failed:%o",
                                    e5.t0
                                  ), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error applying network throttle: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return v2.apply(this, arguments);
                    })
                  },
                  {
                    key: "resetNetworkThrottle",
                    value: (_2 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4, a3, n2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.silent, a3 = void 0 !== r4 && r4, n2 = t4.secret, Ye.debug("resetNetworkThrottle()"), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "resetNetworkThrottle",
                                    { secret: n2 }
                                  );
                                case 5:
                                  e5.next = 10;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), a3 || (Ye.error(
                                    "resetNetworkThrottle() | failed:%o",
                                    e5.t0
                                  ), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error resetting network throttle: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ));
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return _2.apply(this, arguments);
                    })
                  },
                  {
                    key: "createProducerTransport",
                    value: (g2 = (0, s.A)(
                      l().mark(function e4(t4, r4) {
                        var a3, n2, i2, o2, c2, d3, p2, u2, h3 = this;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  i2 = t4.id, o2 = t4.iceParameters, c2 = t4.iceCandidates, d3 = t4.dtlsParameters, p2 = t4.sctpParameters, u2 = null === (a3 = this._openTelemetry) || void 0 === a3 ? void 0 : a3.trace({
                                    spanName: "Creating Send Transport",
                                    span: r4 || null
                                  }), this._sendTransport = this._mediasoupDevice.createSendTransport(
                                    {
                                      id: i2,
                                      iceParameters: o2,
                                      iceCandidates: c2,
                                      dtlsParameters: d3,
                                      sctpParameters: p2,
                                      iceServers: this._iceServers
                                    }
                                  ), this._sendTransport.on(
                                    "connect",
                                    function(e6, t5, r5) {
                                      var a4, n3 = e6.dtlsParameters;
                                      null === (a4 = h3._openTelemetry) || void 0 === a4 || a4.traceAutoComplete({
                                        spanName: "this._sendTransport `connect` Event : Transport is about to establish the ICE+DTLS connection",
                                        span: u2,
                                        status: 1
                                      }), h3._protoo.request(
                                        "connectWebRtcTransport",
                                        {
                                          transportId: h3._sendTransport.id,
                                          dtlsParameters: n3
                                        }
                                      ).then(t5).catch(r5);
                                    }
                                  ), this._sendTransport.on(
                                    "produce",
                                    function() {
                                      var e6 = (0, s.A)(
                                        l().mark(function e7(t5, r5, a4) {
                                          var n3, s2, i3, o3, c3, d4, p3;
                                          return l().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    return n3 = t5.kind, s2 = t5.rtpParameters, i3 = t5.appData, e8.prev = 1, null === (o3 = h3._openTelemetry) || void 0 === o3 || o3.traceAutoComplete(
                                                      {
                                                        spanName: "this._sendTransport `produce` Event : Transmit information about a new producer ",
                                                        span: u2,
                                                        status: 1
                                                      }
                                                    ), e8.next = 5, h3._protoo.request(
                                                      "produce",
                                                      {
                                                        transportId: h3._sendTransport.id,
                                                        kind: n3,
                                                        rtpParameters: s2,
                                                        appData: i3
                                                      }
                                                    );
                                                  case 5:
                                                    c3 = e8.sent, d4 = c3.id, r5({ id: d4 }), e8.next = 14;
                                                    break;
                                                  case 10:
                                                    e8.prev = 10, e8.t0 = e8.catch(1), null === (p3 = h3._videosdkLogs) || void 0 === p3 || p3.pushLogs({
                                                      logText: 'Error this._sendTransport "produce" Event catch',
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e8.t0.message
                                                      }
                                                    }), a4(e8.t0);
                                                  case 14:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [[1, 10]]
                                          );
                                        })
                                      );
                                      return function(t5, r5, a4) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._sendTransport.on(
                                    "producedata",
                                    function() {
                                      var e6 = (0, s.A)(
                                        l().mark(function e7(t5, r5, a4) {
                                          var n3, s2, i3, o3, c3, d4, p3;
                                          return l().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    return n3 = t5.sctpStreamParameters, s2 = t5.label, i3 = t5.protocol, o3 = t5.appData, Ye.debug(
                                                      '"producedata" event: [sctpStreamParameters:%o, appData:%o]',
                                                      n3,
                                                      o3
                                                    ), e8.prev = 2, e8.next = 5, h3._protoo.request(
                                                      "produceData",
                                                      {
                                                        transportId: h3._sendTransport.id,
                                                        sctpStreamParameters: n3,
                                                        label: s2,
                                                        protocol: i3,
                                                        appData: o3
                                                      }
                                                    );
                                                  case 5:
                                                    c3 = e8.sent, d4 = c3.id, r5({ id: d4 }), e8.next = 14;
                                                    break;
                                                  case 10:
                                                    e8.prev = 10, e8.t0 = e8.catch(2), null === (p3 = h3._videosdkLogs) || void 0 === p3 || p3.pushLogs({
                                                      logText: "Error producedata event catch",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: e8.t0.message
                                                      }
                                                    }), a4(e8.t0);
                                                  case 14:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [[2, 10]]
                                          );
                                        })
                                      );
                                      return function(t5, r5, a4) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._sendTransport.on(
                                    "connectionstatechange",
                                    function(e6) {
                                      var t5;
                                      null === (t5 = h3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                        spanName: "_sendTransport Event connectionstatechange ".concat(
                                          e6
                                        ),
                                        span: u2,
                                        status: 1
                                      }), "failed" === e6 && h3.restartIce(), h3._transportState = e6;
                                    }
                                  ), null === (n2 = this._openTelemetry) || void 0 === n2 || n2.completeSpan({
                                    span: u2,
                                    status: 1,
                                    message: "Send Transport Created Successfully"
                                  });
                                case 8:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return g2.apply(this, arguments);
                    })
                  },
                  {
                    key: "createConsumerTransport",
                    value: (f2 = (0, s.A)(
                      l().mark(function e4(t4, r4) {
                        var n2, s2, i2, o2, c2, d3, p2, u2, h3, m3, f3 = this;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  i2 = t4.id, o2 = t4.iceParameters, c2 = t4.iceCandidates, d3 = t4.dtlsParameters, p2 = t4.sctpParameters, u2 = null === (n2 = this._openTelemetry) || void 0 === n2 ? void 0 : n2.trace({
                                    spanName: "Creating Recieve Transport",
                                    span: r4 || null
                                  }), this._recvTransport = this._mediasoupDevice.createRecvTransport(
                                    {
                                      id: i2,
                                      iceParameters: o2,
                                      iceCandidates: c2,
                                      dtlsParameters: d3,
                                      sctpParameters: p2,
                                      iceServers: this._iceServers
                                    }
                                  ), this._recvTransport.on(
                                    "connect",
                                    function(e6, t5, r5) {
                                      var a3, n3 = e6.dtlsParameters;
                                      null === (a3 = f3._openTelemetry) || void 0 === a3 || a3.traceAutoComplete({
                                        spanName: "this._recvTransport `connect` Event : Recieve Transport is about to establish the ICE+DTLS connection",
                                        span: u2,
                                        status: 1
                                      }), f3._protoo.request(
                                        "connectWebRtcTransport",
                                        {
                                          transportId: f3._recvTransport.id,
                                          dtlsParameters: n3
                                        }
                                      ).then(t5).catch(r5);
                                    }
                                  ), this._recvTransport.on(
                                    "connectionstatechange",
                                    function(e6) {
                                      var t5;
                                      null === (t5 = f3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                        spanName: "_recvTransport Event connectionstatechange ".concat(
                                          e6
                                        ),
                                        span: u2,
                                        status: 1
                                      }), "failed" === e6 && f3.restartIce(), f3._transportState = e6;
                                    }
                                  ), h3 = 0, (m3 = this._metrics.addNewProbe(
                                    this._recvTransport,
                                    "transport"
                                  )).onStatsCollected = function(e6) {
                                    try {
                                      var t5 = function(e7, t6, r6) {
                                        f3._stats.consumerStats || (f3._stats.consumerStats = {});
                                        var a3 = t6.appData.peerId;
                                        f3._stats.consumerStats[a3] || (f3._stats.consumerStats[a3] = {}), f3._stats.consumerStats[a3][r6] || (f3._stats.consumerStats[a3][r6] = []), f3._latestStats[t6.track.id.replace(
                                          /[{}]/g,
                                          ""
                                        )] = [e7], h3 % 5 == 0 && f3._stats.consumerStats[a3][r6].push(e7);
                                      }, r5 = function(r6) {
                                        e6[r6].forEach(function(e7) {
                                          var r7, n4 = Ue(f3._consumers);
                                          try {
                                            for (n4.s(); !(r7 = n4.n()).done; ) {
                                              var s3 = (0, a2.A)(
                                                r7.value,
                                                2
                                              ), i3 = (s3[0], s3[1]);
                                              if (i3.track.id.replace(
                                                /[{}]/g,
                                                ""
                                              ) === e7.trackId) {
                                                var o3 = i3.appData.share ? "audio" === i3.kind ? "shareAudio" : "share" : i3.kind;
                                                t5(e7, i3, o3);
                                              }
                                            }
                                          } catch (e8) {
                                            n4.e(e8);
                                          } finally {
                                            n4.f();
                                          }
                                        });
                                      };
                                      r5("audio"), r5("video"), h3++;
                                    } catch (e7) {
                                      var n3;
                                      null === (n3 = f3._videosdkLogs) || void 0 === n3 || n3.pushLogs({
                                        logText: "Error CONSUMER Stats ERROR",
                                        logType: "ERROR",
                                        attributes: { error: e7.message }
                                      }), console.log("CONSUMER CATCH", e7);
                                    }
                                  }, m3.start(), this._recvTransport.observer.on(
                                    "close",
                                    function() {
                                      m3.stop(), f3._metrics.removeExistingProbe(m3);
                                    }
                                  ), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: u2,
                                    status: 1,
                                    message: "Recieve Transport Created Successfully"
                                  });
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return f2.apply(this, arguments);
                    })
                  },
                  {
                    key: "joinRoom",
                    value: (m2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2, i2, o2, c2, d3, p2, h3, m3, f3, g3, _3, v3, b3, y2, w3, S3, R3, E3, k3, T3, C2;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ye.debug("joinRoom()"), e5.prev = 1, o2 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "Loading Router Capabilities",
                                    span: this._joinSpan
                                  }), this._mediasoupDevice = new u.Device({
                                    handlerName: this._handlerName
                                  }), e5.next = 6, this._protoo.request(
                                    "getRouterRtpCapabilities"
                                  );
                                case 6:
                                  return c2 = e5.sent, e5.next = 9, this._mediasoupDevice.load({
                                    routerRtpCapabilities: c2
                                  });
                                case 9:
                                  if (null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: o2,
                                    status: 1,
                                    attributes: {
                                      routerRtpCapabilities: JSON.stringify(c2).toString()
                                    },
                                    message: "Router Capabilities Loaded"
                                  }), !this._produce) {
                                    e5.next = 15;
                                    break;
                                  }
                                  return e5.next = 13, this._protoo.request(
                                    "createWebRtcTransport",
                                    {
                                      preferredProtocol: this._preferredProtocol,
                                      producing: true,
                                      consuming: false,
                                      sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : void 0
                                    }
                                  );
                                case 13:
                                  d3 = e5.sent, this.createProducerTransport(
                                    d3,
                                    this._joinSpan
                                  );
                                case 15:
                                  if (!this._consume) {
                                    e5.next = 20;
                                    break;
                                  }
                                  return e5.next = 18, this._protoo.request(
                                    "createWebRtcTransport",
                                    {
                                      preferredProtocol: this._preferredProtocol,
                                      producing: false,
                                      consuming: true,
                                      sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : void 0
                                    }
                                  );
                                case 18:
                                  p2 = e5.sent, this.createConsumerTransport(
                                    p2,
                                    this._joinSpan
                                  );
                                case 20:
                                  return e5.next = 22, this._protoo.request("join", {
                                    displayName: this._displayName,
                                    device: this._device,
                                    secret: this._secret,
                                    rtpCapabilities: null === (a3 = this._mediasoupDevice) || void 0 === a3 ? void 0 : a3.rtpCapabilities,
                                    sctpCapabilities: null === (n2 = this._mediasoupDevice) || void 0 === n2 ? void 0 : n2.sctpCapabilities,
                                    deviceInfo: this._deviceInfo,
                                    debugMode: this._debugMode,
                                    autoConsume: this._autoConsume,
                                    metaData: this._metaData
                                  });
                                case 22:
                                  h3 = e5.sent, m3 = h3.peers, f3 = h3.poll, g3 = h3.messages, Ve.dispatch(x("connected")), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.traceAutoComplete({
                                    spanName: "Emitted `MEETING_JOINED` Event",
                                    span: this._joinSpan,
                                    status: 1
                                  }), this._eventEmitter.emit(
                                    "MEETING_JOINED",
                                    {
                                      peers: m3,
                                      poll: f3,
                                      messages: g3,
                                      baseUrl: this._baseUrl
                                    }
                                  ), Ve.dispatch({
                                    type: "REMOVE_ALL_NOTIFICATIONS"
                                  }), Ve.dispatch(
                                    ie({
                                      text: "You are in the room!",
                                      timeout: 3e3
                                    })
                                  ), _3 = Ue(m3);
                                  try {
                                    for (_3.s(); !(v3 = _3.n()).done; )
                                      b3 = v3.value, y2 = $(
                                        He(
                                          He({}, b3),
                                          {},
                                          {
                                            consumers: [],
                                            dataConsumers: []
                                          }
                                        )
                                      ), Ve.dispatch(y2), this._eventEmitter.emit(
                                        y2.type,
                                        y2.payload
                                      );
                                  } catch (e6) {
                                    _3.e(e6);
                                  } finally {
                                    _3.f();
                                  }
                                  this._produce && (Ve.dispatch(
                                    A({
                                      canSendMic: this._mediasoupDevice.canProduce(
                                        "audio"
                                      ),
                                      canSendWebcam: this._mediasoupDevice.canProduce(
                                        "video"
                                      )
                                    })
                                  ), this._micEnabled ? this.enableMic(
                                    this.customMicrophoneAudioTrack,
                                    this._joinSpan
                                  ) : this.customMicrophoneAudioTrack && (null === (w3 = this._openTelemetry) || void 0 === w3 || w3.traceAutoComplete({
                                    spanName: "Disposing Audio Track",
                                    span: this._joinSpan,
                                    status: 2
                                  }), this.customMicrophoneAudioTrack.getTracks().forEach(function(e6) {
                                    e6.stop();
                                  })), S3 = P(), this._webcamEnabled && (!S3 || S3.webcamEnabled || this._externalVideo) ? this.enableWebcam(
                                    this.customCameraVideoTrack,
                                    this._joinSpan
                                  ) : this.customCameraVideoTrack && (null === (R3 = this._openTelemetry) || void 0 === R3 || R3.traceAutoComplete({
                                    spanName: "Disposing Video Track",
                                    span: this._joinSpan,
                                    status: 2
                                  }), this.customCameraVideoTrack.getTracks().forEach(function(e6) {
                                    e6.stop();
                                  })), this.enableChatDataProducer()), window.SHOW_INFO && (E3 = Ve.getState(), k3 = E3.me, Ve.dispatch(M(k3.id))), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: this._joinSpan,
                                    status: 1,
                                    message: "Room Joined"
                                  }), e5.next = 45;
                                  break;
                                case 38:
                                  e5.prev = 38, e5.t0 = e5.catch(1), Ye.error("joinRoom() failed:%o", e5.t0), null === (T3 = this._videosdkLogs) || void 0 === T3 || T3.pushLogs({
                                    logText: "Error Could not join the room",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (C2 = this._openTelemetry) || void 0 === C2 || C2.completeSpan({
                                    span: this._joinSpan,
                                    status: 2,
                                    message: "Could not join the room ".concat(
                                      e5.t0
                                    )
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Could not join the room: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), this.close({ sendLeft: true });
                                case 45:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 38]]
                        );
                      })
                    ), function() {
                      return m2.apply(this, arguments);
                    })
                  },
                  {
                    key: "_updateMics",
                    value: (h2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2, i2, o2, c2, d3, p2, u2, h3, m3, f3, g3, _3 = arguments;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = _3.length > 0 && void 0 !== _3[0] ? _3[0] : void 0, this._mics = /* @__PURE__ */ new Map(), Ye.debug("_updateMics() |"), a3 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "_updateMics() Calling for Getting System Mic list",
                                    span: r4 || null
                                  }), e5.prev = 4, e5.next = 7, navigator.mediaDevices.enumerateDevices();
                                case 7:
                                  i2 = e5.sent, null === (n2 = this._openTelemetry) || void 0 === n2 || n2.traceAutoComplete({
                                    spanName: "Getting System Mic list",
                                    span: a3,
                                    status: 1,
                                    attributes: {
                                      systemDevice: i2 ? JSON.stringify(i2) : "Device not found"
                                    }
                                  }), o2 = Ue(i2);
                                  try {
                                    for (o2.s(); !(c2 = o2.n()).done; )
                                      "audioinput" == (d3 = c2.value).kind && this._mics.set(d3.deviceId, d3);
                                  } catch (e6) {
                                    o2.e(e6);
                                  } finally {
                                    o2.f();
                                  }
                                  p2 = Array.from(this._mics.values()), u2 = p2.length, h3 = this._mic.device ? this._mic.device.deviceId : void 0, 0 === u2 ? this._mic.device = null : this._mics.has(h3) || (this._mic.device = p2[0]), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: a3,
                                    status: 1,
                                    message: "Update Mic"
                                  }), e5.next = 30;
                                  break;
                                case 18:
                                  if (e5.prev = 18, e5.t0 = e5.catch(4), !(e5.t0 instanceof TypeError)) {
                                    e5.next = 30;
                                    break;
                                  }
                                  if ("TypeError" !== e5.t0.name) {
                                    e5.next = 28;
                                    break;
                                  }
                                  throw f3 = ke.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE, this._emitError(f3), null === (m3 = this._openTelemetry) || void 0 === m3 || m3.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "Error in updateMics() :: ".concat(
                                      f3.message
                                    )
                                  }), new Error(f3.message);
                                case 28:
                                  throw null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "Error in updateMics() :: ".concat(
                                      e5.t0.message
                                    )
                                  }), new Error(e5.t0.message);
                                case 30:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 18]]
                        );
                      })
                    ), function() {
                      return h2.apply(this, arguments);
                    })
                  },
                  {
                    key: "_updateWebcams",
                    value: (d2 = (0, s.A)(
                      l().mark(function e4() {
                        var t4, r4, a3, n2, s2, i2, o2, c2, d3, p2, u2, h3, m3, f3, g3, _3 = arguments;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = _3.length > 0 && void 0 !== _3[0] ? _3[0] : void 0, Ye.debug("_updateWebcams()"), this._webcams = /* @__PURE__ */ new Map(), Ye.debug(
                                    "_updateWebcams() | calling enumerateDevices()"
                                  ), a3 = null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "_updateWebcams() Calling for Getting System Webcam list",
                                    span: r4 || null
                                  }), e5.prev = 5, e5.next = 8, navigator.mediaDevices.enumerateDevices();
                                case 8:
                                  i2 = e5.sent, null === (n2 = this._openTelemetry) || void 0 === n2 || n2.traceAutoComplete({
                                    spanName: "Getting System Webcam list",
                                    span: a3,
                                    status: 1,
                                    attributes: {
                                      systemDevice: i2 ? JSON.stringify(i2) : "Device not found"
                                    }
                                  }), o2 = Ue(i2), e5.prev = 11, o2.s();
                                case 13:
                                  if ((c2 = o2.n()).done) {
                                    e5.next = 20;
                                    break;
                                  }
                                  if ("videoinput" === (d3 = c2.value).kind) {
                                    e5.next = 17;
                                    break;
                                  }
                                  return e5.abrupt("continue", 18);
                                case 17:
                                  this._webcams.set(d3.deviceId, d3);
                                case 18:
                                  e5.next = 13;
                                  break;
                                case 20:
                                  e5.next = 25;
                                  break;
                                case 22:
                                  e5.prev = 22, e5.t0 = e5.catch(11), o2.e(e5.t0);
                                case 25:
                                  return e5.prev = 25, o2.f(), e5.finish(25);
                                case 28:
                                  p2 = Array.from(this._webcams.values()), u2 = p2.length, (h3 = this._webcam.device ? this._webcam.device.deviceId : void 0) && (this._defaultCameraIndex = h3), Ye.debug(
                                    "_updateWebcams() [webcams:%o]",
                                    p2
                                  ), 0 === u2 ? this._webcam.device = null : this._webcams.has(h3) || (this._webcam.device = p2[this._defaultCameraIndex]), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: a3,
                                    status: 1,
                                    message: "Update Webcam"
                                  }), Ve.dispatch({
                                    type: "SET_CAN_CHANGE_WEBCAM",
                                    payload: this._webcams.size > 1
                                  }), e5.next = 50;
                                  break;
                                case 38:
                                  if (e5.prev = 38, e5.t1 = e5.catch(5), !(e5.t1 instanceof TypeError)) {
                                    e5.next = 50;
                                    break;
                                  }
                                  if ("TypeError" !== e5.t1.name) {
                                    e5.next = 48;
                                    break;
                                  }
                                  throw f3 = ke.q.ERROR_CAMERA_ACCESS_UNAVAILABLE, this._emitError(f3), null === (m3 = this._openTelemetry) || void 0 === m3 || m3.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "Error in updateWebcams() :: ".concat(
                                      f3.message
                                    )
                                  }), new Error(f3.message);
                                case 48:
                                  throw null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    span: a3,
                                    status: 2,
                                    message: "Error in updateWebcams() :: ".concat(
                                      e5.t1.message
                                    )
                                  }), new Error(e5.t1.message);
                                case 50:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [5, 38],
                            [11, 22, 25, 28]
                          ]
                        );
                      })
                    ), function() {
                      return d2.apply(this, arguments);
                    })
                  },
                  {
                    key: "_getWebcamType",
                    value: function(e4) {
                      return /(back|rear)/i.test(e4.label) ? (Ye.debug(
                        "_getWebcamType() | it seems to be a back camera"
                      ), "back") : (Ye.debug(
                        "_getWebcamType() | it seems to be a front camera"
                      ), "front");
                    }
                  },
                  {
                    key: "_pauseConsumer",
                    value: (r3 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!t4.paused) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return e5.prev = 2, e5.next = 5, this._protoo.request("pauseConsumer", {
                                    consumerId: t4.id
                                  });
                                case 5:
                                  t4.pause(), Ve.dispatch(X(t4.id, "local")), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(2), Ye.error(
                                    "_pauseConsumer() | failed:%o",
                                    e5.t0
                                  ), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Error pausing Consumer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error pausing Consumer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 9]]
                        );
                      })
                    ), function(e4) {
                      return r3.apply(this, arguments);
                    })
                  },
                  {
                    key: "_resumeConsumer",
                    value: (t3 = (0, s.A)(
                      l().mark(function e4(t4) {
                        var r4;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (t4.paused) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return e5.prev = 2, e5.next = 5, this._protoo.request("resumeConsumer", {
                                    consumerId: t4.id
                                  });
                                case 5:
                                  t4.resume(), Ve.dispatch(Z(t4.id, "local")), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(2), Ye.error(
                                    "_resumeConsumer() | failed:%o",
                                    e5.t0
                                  ), null === (r4 = this._videosdkLogs) || void 0 === r4 || r4.pushLogs({
                                    logText: "Error resuming Consumer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ve.dispatch(
                                    ie({
                                      type: "error",
                                      text: "Error resuming Consumer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 9]]
                        );
                      })
                    ), function(e4) {
                      return t3.apply(this, arguments);
                    })
                  },
                  {
                    key: "_getExternalVideoStream",
                    value: (e3 = (0, s.A)(
                      l().mark(function e4() {
                        var t4 = this;
                        return l().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._externalVideoStream) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt(
                                    "return",
                                    this._externalVideoStream
                                  );
                                case 2:
                                  if (!(this._externalVideo.readyState < 3)) {
                                    e5.next = 5;
                                    break;
                                  }
                                  return e5.next = 5, new Promise(function(e6) {
                                    return t4._externalVideo.addEventListener(
                                      "canplay",
                                      e6
                                    );
                                  });
                                case 5:
                                  if (!this._externalVideo.captureStream) {
                                    e5.next = 9;
                                    break;
                                  }
                                  this._externalVideoStream = this._externalVideo.captureStream(), e5.next = 14;
                                  break;
                                case 9:
                                  if (!this._externalVideo.mozCaptureStream) {
                                    e5.next = 13;
                                    break;
                                  }
                                  this._externalVideoStream = this._externalVideo.mozCaptureStream(), e5.next = 14;
                                  break;
                                case 13:
                                  throw new Error(
                                    "video.captureStream() not supported"
                                  );
                                case 14:
                                  return e5.abrupt(
                                    "return",
                                    this._externalVideoStream
                                  );
                                case 15:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return e3.apply(this, arguments);
                    })
                  },
                  {
                    key: "_emitError",
                    value: function(e4) {
                      this._eventEmitter.emit("ERROR", e4);
                    }
                  }
                ],
                [
                  {
                    key: "init",
                    value: function(e4) {
                      Ve = e4.store;
                    }
                  }
                ]
              );
              var e3, t3, r3, d2, h2, m2, f2, g2, _2, v2, b2, w2, S2, R2, E2, k2, T2, O2, D2, de2, le2, pe2, ue2, he2, me2, fe2, ge2, _e2, ve2, be2, ye2, Se2, Re2, Oe2, De2, xe2, Ie2, Me2, Ae2, Ne2, je2, We2, qe2, Xe2, Ze, et, tt, rt, at, nt, st, it, ot, ct, dt, lt, pt, ut, ht, mt, ft, gt, _t, vt, bt, yt, wt, St, Rt, Et, kt, Tt, Ct, Pt, Ot, Dt, xt, It, Mt, At, Lt, Nt, jt, Bt, Ft, Ut, Wt, qt, Ht, Vt, Gt, zt, $t, Kt, Jt, Qt, Yt, Xt, Zt, er, tr, rr, ar, nr, sr, ir;
            }();
          },
          4973: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { Zu: () => o, lp: () => i });
            var a2 = r2(467), n = r2(4756), s = r2.n(n), i = (r2(9027), function() {
              var e3 = (0, a2.A)(
                s().mark(function e4(t3) {
                  return s().wrap(function(e5) {
                    for (; ; )
                      switch (e5.prev = e5.next) {
                        case 0:
                          return void 0 === navigator.mediaDevices && (navigator.mediaDevices = {}), void 0 === navigator.mediaDevices.getUserMedia && (navigator.mediaDevices.getUserMedia = function(e6) {
                            var t4 = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                            return t4 ? new Promise(function(r3, a3) {
                              t4.call(navigator, e6, r3, a3);
                            }) : Promise.reject(
                              new Error(
                                "getUserMedia is not implemented in this browser"
                              )
                            );
                          }), e5.next = 4, navigator.mediaDevices.getUserMedia(t3);
                        case 4:
                          return e5.abrupt("return", e5.sent);
                        case 5:
                        case "end":
                          return e5.stop();
                      }
                  }, e4);
                })
              );
              return function(t3) {
                return e3.apply(this, arguments);
              };
            }()), o = function() {
              var e3 = (0, a2.A)(
                s().mark(function e4(t3) {
                  return s().wrap(function(e5) {
                    for (; ; )
                      switch (e5.prev = e5.next) {
                        case 0:
                          return void 0 === navigator.mediaDevices && (navigator.mediaDevices = {}), void 0 === navigator.mediaDevices.getDisplayMedia && (navigator.mediaDevices.getDisplayMedia = function(e6) {
                            var t4 = navigator.webkitGetDisplayMedia || navigator.mozGetDisplayMedia;
                            return t4 ? new Promise(function(r3, a3) {
                              t4.call(navigator, e6, r3, a3);
                            }) : Promise.reject(
                              new Error(
                                "getDisplayMedia is not implemented in this browser"
                              )
                            );
                          }), e5.next = 4, navigator.mediaDevices.getDisplayMedia(t3);
                        case 4:
                          return e5.abrupt("return", e5.sent);
                        case 5:
                        case "end":
                          return e5.stop();
                      }
                  }, e4);
                })
              );
              return function(t3) {
                return e3.apply(this, arguments);
              };
            }();
          },
          6880: function(e2) {
            e2.exports = function(e3) {
              var t2 = {};
              function r2(a2) {
                if (t2[a2]) return t2[a2].exports;
                var n = t2[a2] = { i: a2, l: false, exports: {} };
                return e3[a2].call(n.exports, n, n.exports, r2), n.l = true, n.exports;
              }
              return r2.m = e3, r2.c = t2, r2.d = function(e4, t3, a2) {
                r2.o(e4, t3) || Object.defineProperty(e4, t3, { enumerable: true, get: a2 });
              }, r2.r = function(e4) {
                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e4, Symbol.toStringTag, {
                  value: "Module"
                }), Object.defineProperty(e4, "__esModule", { value: true });
              }, r2.t = function(e4, t3) {
                if (1 & t3 && (e4 = r2(e4)), 8 & t3) return e4;
                if (4 & t3 && "object" == typeof e4 && e4 && e4.__esModule)
                  return e4;
                var a2 = /* @__PURE__ */ Object.create(null);
                if (r2.r(a2), Object.defineProperty(a2, "default", {
                  enumerable: true,
                  value: e4
                }), 2 & t3 && "string" != typeof e4)
                  for (var n in e4)
                    r2.d(
                      a2,
                      n,
                      (function(t4) {
                        return e4[t4];
                      }).bind(null, n)
                    );
                return a2;
              }, r2.n = function(e4) {
                var t3 = e4 && e4.__esModule ? function() {
                  return e4.default;
                } : function() {
                  return e4;
                };
                return r2.d(t3, "a", t3), t3;
              }, r2.o = function(e4, t3) {
                return Object.prototype.hasOwnProperty.call(e4, t3);
              }, r2.p = "", r2(r2.s = 90);
            }({
              17: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var a2 = r2(18), n = function() {
                  function e4() {
                  }
                  return e4.getFirstMatch = function(e5, t3) {
                    var r3 = t3.match(e5);
                    return r3 && r3.length > 0 && r3[1] || "";
                  }, e4.getSecondMatch = function(e5, t3) {
                    var r3 = t3.match(e5);
                    return r3 && r3.length > 1 && r3[2] || "";
                  }, e4.matchAndReturnConst = function(e5, t3, r3) {
                    if (e5.test(t3)) return r3;
                  }, e4.getWindowsVersionName = function(e5) {
                    switch (e5) {
                      case "NT":
                        return "NT";
                      case "XP":
                      case "NT 5.1":
                        return "XP";
                      case "NT 5.0":
                        return "2000";
                      case "NT 5.2":
                        return "2003";
                      case "NT 6.0":
                        return "Vista";
                      case "NT 6.1":
                        return "7";
                      case "NT 6.2":
                        return "8";
                      case "NT 6.3":
                        return "8.1";
                      case "NT 10.0":
                        return "10";
                      default:
                        return;
                    }
                  }, e4.getMacOSVersionName = function(e5) {
                    var t3 = e5.split(".").splice(0, 2).map(function(e6) {
                      return parseInt(e6, 10) || 0;
                    });
                    if (t3.push(0), 10 === t3[0])
                      switch (t3[1]) {
                        case 5:
                          return "Leopard";
                        case 6:
                          return "Snow Leopard";
                        case 7:
                          return "Lion";
                        case 8:
                          return "Mountain Lion";
                        case 9:
                          return "Mavericks";
                        case 10:
                          return "Yosemite";
                        case 11:
                          return "El Capitan";
                        case 12:
                          return "Sierra";
                        case 13:
                          return "High Sierra";
                        case 14:
                          return "Mojave";
                        case 15:
                          return "Catalina";
                        default:
                          return;
                      }
                  }, e4.getAndroidVersionName = function(e5) {
                    var t3 = e5.split(".").splice(0, 2).map(function(e6) {
                      return parseInt(e6, 10) || 0;
                    });
                    if (t3.push(0), !(1 === t3[0] && t3[1] < 5))
                      return 1 === t3[0] && t3[1] < 6 ? "Cupcake" : 1 === t3[0] && t3[1] >= 6 ? "Donut" : 2 === t3[0] && t3[1] < 2 ? "Eclair" : 2 === t3[0] && 2 === t3[1] ? "Froyo" : 2 === t3[0] && t3[1] > 2 ? "Gingerbread" : 3 === t3[0] ? "Honeycomb" : 4 === t3[0] && t3[1] < 1 ? "Ice Cream Sandwich" : 4 === t3[0] && t3[1] < 4 ? "Jelly Bean" : 4 === t3[0] && t3[1] >= 4 ? "KitKat" : 5 === t3[0] ? "Lollipop" : 6 === t3[0] ? "Marshmallow" : 7 === t3[0] ? "Nougat" : 8 === t3[0] ? "Oreo" : 9 === t3[0] ? "Pie" : void 0;
                  }, e4.getVersionPrecision = function(e5) {
                    return e5.split(".").length;
                  }, e4.compareVersions = function(t3, r3, a3) {
                    void 0 === a3 && (a3 = false);
                    var n2 = e4.getVersionPrecision(t3), s = e4.getVersionPrecision(r3), i = Math.max(n2, s), o = 0, c = e4.map([t3, r3], function(t4) {
                      var r4 = i - e4.getVersionPrecision(t4), a4 = t4 + new Array(r4 + 1).join(".0");
                      return e4.map(a4.split("."), function(e5) {
                        return new Array(20 - e5.length).join("0") + e5;
                      }).reverse();
                    });
                    for (a3 && (o = i - Math.min(n2, s)), i -= 1; i >= o; ) {
                      if (c[0][i] > c[1][i]) return 1;
                      if (c[0][i] === c[1][i]) {
                        if (i === o) return 0;
                        i -= 1;
                      } else if (c[0][i] < c[1][i]) return -1;
                    }
                  }, e4.map = function(e5, t3) {
                    var r3, a3 = [];
                    if (Array.prototype.map)
                      return Array.prototype.map.call(e5, t3);
                    for (r3 = 0; r3 < e5.length; r3 += 1) a3.push(t3(e5[r3]));
                    return a3;
                  }, e4.find = function(e5, t3) {
                    var r3, a3;
                    if (Array.prototype.find)
                      return Array.prototype.find.call(e5, t3);
                    for (r3 = 0, a3 = e5.length; r3 < a3; r3 += 1) {
                      var n2 = e5[r3];
                      if (t3(n2, r3)) return n2;
                    }
                  }, e4.assign = function(e5) {
                    for (var t3, r3, a3 = e5, n2 = arguments.length, s = new Array(n2 > 1 ? n2 - 1 : 0), i = 1; i < n2; i++)
                      s[i - 1] = arguments[i];
                    if (Object.assign)
                      return Object.assign.apply(Object, [e5].concat(s));
                    var o = function() {
                      var e6 = s[t3];
                      "object" == typeof e6 && null !== e6 && Object.keys(e6).forEach(function(t4) {
                        a3[t4] = e6[t4];
                      });
                    };
                    for (t3 = 0, r3 = s.length; t3 < r3; t3 += 1) o();
                    return e5;
                  }, e4.getBrowserAlias = function(e5) {
                    return a2.BROWSER_ALIASES_MAP[e5];
                  }, e4.getBrowserTypeByAlias = function(e5) {
                    return a2.BROWSER_MAP[e5] || "";
                  }, e4;
                }();
                t2.default = n, e3.exports = t2.default;
              },
              18: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.ENGINE_MAP = t2.OS_MAP = t2.PLATFORMS_MAP = t2.BROWSER_MAP = t2.BROWSER_ALIASES_MAP = void 0, t2.BROWSER_ALIASES_MAP = {
                  "Amazon Silk": "amazon_silk",
                  "Android Browser": "android",
                  Bada: "bada",
                  BlackBerry: "blackberry",
                  Chrome: "chrome",
                  Chromium: "chromium",
                  Electron: "electron",
                  Epiphany: "epiphany",
                  Firefox: "firefox",
                  Focus: "focus",
                  Generic: "generic",
                  "Google Search": "google_search",
                  Googlebot: "googlebot",
                  "Internet Explorer": "ie",
                  "K-Meleon": "k_meleon",
                  Maxthon: "maxthon",
                  "Microsoft Edge": "edge",
                  "MZ Browser": "mz",
                  "NAVER Whale Browser": "naver",
                  Opera: "opera",
                  "Opera Coast": "opera_coast",
                  PhantomJS: "phantomjs",
                  Puffin: "puffin",
                  QupZilla: "qupzilla",
                  QQ: "qq",
                  QQLite: "qqlite",
                  Safari: "safari",
                  Sailfish: "sailfish",
                  "Samsung Internet for Android": "samsung_internet",
                  SeaMonkey: "seamonkey",
                  Sleipnir: "sleipnir",
                  Swing: "swing",
                  Tizen: "tizen",
                  "UC Browser": "uc",
                  Vivaldi: "vivaldi",
                  "WebOS Browser": "webos",
                  WeChat: "wechat",
                  "Yandex Browser": "yandex",
                  Roku: "roku"
                }, t2.BROWSER_MAP = {
                  amazon_silk: "Amazon Silk",
                  android: "Android Browser",
                  bada: "Bada",
                  blackberry: "BlackBerry",
                  chrome: "Chrome",
                  chromium: "Chromium",
                  electron: "Electron",
                  epiphany: "Epiphany",
                  firefox: "Firefox",
                  focus: "Focus",
                  generic: "Generic",
                  googlebot: "Googlebot",
                  google_search: "Google Search",
                  ie: "Internet Explorer",
                  k_meleon: "K-Meleon",
                  maxthon: "Maxthon",
                  edge: "Microsoft Edge",
                  mz: "MZ Browser",
                  naver: "NAVER Whale Browser",
                  opera: "Opera",
                  opera_coast: "Opera Coast",
                  phantomjs: "PhantomJS",
                  puffin: "Puffin",
                  qupzilla: "QupZilla",
                  qq: "QQ Browser",
                  qqlite: "QQ Browser Lite",
                  safari: "Safari",
                  sailfish: "Sailfish",
                  samsung_internet: "Samsung Internet for Android",
                  seamonkey: "SeaMonkey",
                  sleipnir: "Sleipnir",
                  swing: "Swing",
                  tizen: "Tizen",
                  uc: "UC Browser",
                  vivaldi: "Vivaldi",
                  webos: "WebOS Browser",
                  wechat: "WeChat",
                  yandex: "Yandex Browser"
                }, t2.PLATFORMS_MAP = {
                  tablet: "tablet",
                  mobile: "mobile",
                  desktop: "desktop",
                  tv: "tv"
                }, t2.OS_MAP = {
                  WindowsPhone: "Windows Phone",
                  Windows: "Windows",
                  MacOS: "macOS",
                  iOS: "iOS",
                  Android: "Android",
                  WebOS: "WebOS",
                  BlackBerry: "BlackBerry",
                  Bada: "Bada",
                  Tizen: "Tizen",
                  Linux: "Linux",
                  ChromeOS: "Chrome OS",
                  PlayStation4: "PlayStation 4",
                  Roku: "Roku"
                }, t2.ENGINE_MAP = {
                  EdgeHTML: "EdgeHTML",
                  Blink: "Blink",
                  Trident: "Trident",
                  Presto: "Presto",
                  Gecko: "Gecko",
                  WebKit: "WebKit"
                };
              },
              90: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var a2, n = (a2 = r2(91)) && a2.__esModule ? a2 : { default: a2 }, s = r2(18);
                function i(e4, t3) {
                  for (var r3 = 0; r3 < t3.length; r3++) {
                    var a3 = t3[r3];
                    a3.enumerable = a3.enumerable || false, a3.configurable = true, "value" in a3 && (a3.writable = true), Object.defineProperty(e4, a3.key, a3);
                  }
                }
                var o = function() {
                  function e4() {
                  }
                  var t3, r3, a3;
                  return e4.getParser = function(e5, t4) {
                    if (void 0 === t4 && (t4 = false), "string" != typeof e5)
                      throw new Error("UserAgent should be a string");
                    return new n.default(e5, t4);
                  }, e4.parse = function(e5) {
                    return new n.default(e5).getResult();
                  }, t3 = e4, a3 = [
                    {
                      key: "BROWSER_MAP",
                      get: function() {
                        return s.BROWSER_MAP;
                      }
                    },
                    {
                      key: "ENGINE_MAP",
                      get: function() {
                        return s.ENGINE_MAP;
                      }
                    },
                    {
                      key: "OS_MAP",
                      get: function() {
                        return s.OS_MAP;
                      }
                    },
                    {
                      key: "PLATFORMS_MAP",
                      get: function() {
                        return s.PLATFORMS_MAP;
                      }
                    }
                  ], (r3 = null) && i(t3.prototype, r3), a3 && i(t3, a3), e4;
                }();
                t2.default = o, e3.exports = t2.default;
              },
              91: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var a2 = c(r2(92)), n = c(r2(93)), s = c(r2(94)), i = c(r2(95)), o = c(r2(17));
                function c(e4) {
                  return e4 && e4.__esModule ? e4 : { default: e4 };
                }
                var d = function() {
                  function e4(e5, t4) {
                    if (void 0 === t4 && (t4 = false), null == e5 || "" === e5)
                      throw new Error("UserAgent parameter can't be empty");
                    this._ua = e5, this.parsedResult = {}, true !== t4 && this.parse();
                  }
                  var t3 = e4.prototype;
                  return t3.getUA = function() {
                    return this._ua;
                  }, t3.test = function(e5) {
                    return e5.test(this._ua);
                  }, t3.parseBrowser = function() {
                    var e5 = this;
                    this.parsedResult.browser = {};
                    var t4 = o.default.find(a2.default, function(t5) {
                      if ("function" == typeof t5.test) return t5.test(e5);
                      if (t5.test instanceof Array)
                        return t5.test.some(function(t6) {
                          return e5.test(t6);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return t4 && (this.parsedResult.browser = t4.describe(this.getUA())), this.parsedResult.browser;
                  }, t3.getBrowser = function() {
                    return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
                  }, t3.getBrowserName = function(e5) {
                    return e5 ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
                  }, t3.getBrowserVersion = function() {
                    return this.getBrowser().version;
                  }, t3.getOS = function() {
                    return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
                  }, t3.parseOS = function() {
                    var e5 = this;
                    this.parsedResult.os = {};
                    var t4 = o.default.find(n.default, function(t5) {
                      if ("function" == typeof t5.test) return t5.test(e5);
                      if (t5.test instanceof Array)
                        return t5.test.some(function(t6) {
                          return e5.test(t6);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return t4 && (this.parsedResult.os = t4.describe(this.getUA())), this.parsedResult.os;
                  }, t3.getOSName = function(e5) {
                    var t4 = this.getOS().name;
                    return e5 ? String(t4).toLowerCase() || "" : t4 || "";
                  }, t3.getOSVersion = function() {
                    return this.getOS().version;
                  }, t3.getPlatform = function() {
                    return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
                  }, t3.getPlatformType = function(e5) {
                    void 0 === e5 && (e5 = false);
                    var t4 = this.getPlatform().type;
                    return e5 ? String(t4).toLowerCase() || "" : t4 || "";
                  }, t3.parsePlatform = function() {
                    var e5 = this;
                    this.parsedResult.platform = {};
                    var t4 = o.default.find(s.default, function(t5) {
                      if ("function" == typeof t5.test) return t5.test(e5);
                      if (t5.test instanceof Array)
                        return t5.test.some(function(t6) {
                          return e5.test(t6);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return t4 && (this.parsedResult.platform = t4.describe(this.getUA())), this.parsedResult.platform;
                  }, t3.getEngine = function() {
                    return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
                  }, t3.getEngineName = function(e5) {
                    return e5 ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
                  }, t3.parseEngine = function() {
                    var e5 = this;
                    this.parsedResult.engine = {};
                    var t4 = o.default.find(i.default, function(t5) {
                      if ("function" == typeof t5.test) return t5.test(e5);
                      if (t5.test instanceof Array)
                        return t5.test.some(function(t6) {
                          return e5.test(t6);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return t4 && (this.parsedResult.engine = t4.describe(this.getUA())), this.parsedResult.engine;
                  }, t3.parse = function() {
                    return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
                  }, t3.getResult = function() {
                    return o.default.assign({}, this.parsedResult);
                  }, t3.satisfies = function(e5) {
                    var t4 = this, r3 = {}, a3 = 0, n2 = {}, s2 = 0;
                    if (Object.keys(e5).forEach(function(t5) {
                      var i3 = e5[t5];
                      "string" == typeof i3 ? (n2[t5] = i3, s2 += 1) : "object" == typeof i3 && (r3[t5] = i3, a3 += 1);
                    }), a3 > 0) {
                      var i2 = Object.keys(r3), c2 = o.default.find(i2, function(e6) {
                        return t4.isOS(e6);
                      });
                      if (c2) {
                        var d2 = this.satisfies(r3[c2]);
                        if (void 0 !== d2) return d2;
                      }
                      var l = o.default.find(i2, function(e6) {
                        return t4.isPlatform(e6);
                      });
                      if (l) {
                        var p = this.satisfies(r3[l]);
                        if (void 0 !== p) return p;
                      }
                    }
                    if (s2 > 0) {
                      var u = Object.keys(n2), h = o.default.find(u, function(e6) {
                        return t4.isBrowser(e6, true);
                      });
                      if (void 0 !== h) return this.compareVersion(n2[h]);
                    }
                  }, t3.isBrowser = function(e5, t4) {
                    void 0 === t4 && (t4 = false);
                    var r3 = this.getBrowserName().toLowerCase(), a3 = e5.toLowerCase(), n2 = o.default.getBrowserTypeByAlias(a3);
                    return t4 && n2 && (a3 = n2.toLowerCase()), a3 === r3;
                  }, t3.compareVersion = function(e5) {
                    var t4 = [0], r3 = e5, a3 = false, n2 = this.getBrowserVersion();
                    if ("string" == typeof n2)
                      return ">" === e5[0] || "<" === e5[0] ? (r3 = e5.substr(1), "=" === e5[1] ? (a3 = true, r3 = e5.substr(2)) : t4 = [], ">" === e5[0] ? t4.push(1) : t4.push(-1)) : "=" === e5[0] ? r3 = e5.substr(1) : "~" === e5[0] && (a3 = true, r3 = e5.substr(1)), t4.indexOf(o.default.compareVersions(n2, r3, a3)) > -1;
                  }, t3.isOS = function(e5) {
                    return this.getOSName(true) === String(e5).toLowerCase();
                  }, t3.isPlatform = function(e5) {
                    return this.getPlatformType(true) === String(e5).toLowerCase();
                  }, t3.isEngine = function(e5) {
                    return this.getEngineName(true) === String(e5).toLowerCase();
                  }, t3.is = function(e5, t4) {
                    return void 0 === t4 && (t4 = false), this.isBrowser(e5, t4) || this.isOS(e5) || this.isPlatform(e5);
                  }, t3.some = function(e5) {
                    var t4 = this;
                    return void 0 === e5 && (e5 = []), e5.some(function(e6) {
                      return t4.is(e6);
                    });
                  }, e4;
                }();
                t2.default = d, e3.exports = t2.default;
              },
              92: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var a2, n = (a2 = r2(17)) && a2.__esModule ? a2 : { default: a2 }, s = /version\/(\d+(\.?_?\d+)+)/i, i = [
                  {
                    test: [/googlebot/i],
                    describe: function(e4) {
                      var t3 = { name: "Googlebot" }, r3 = n.default.getFirstMatch(
                        /googlebot\/(\d+(\.\d+))/i,
                        e4
                      ) || n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/opera/i],
                    describe: function(e4) {
                      var t3 = { name: "Opera" }, r3 = n.default.getFirstMatch(s, e4) || n.default.getFirstMatch(
                        /(?:opera)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/opr\/|opios/i],
                    describe: function(e4) {
                      var t3 = { name: "Opera" }, r3 = n.default.getFirstMatch(
                        /(?:opr|opios)[\s/](\S+)/i,
                        e4
                      ) || n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/SamsungBrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "Samsung Internet for Android" }, r3 = n.default.getFirstMatch(s, e4) || n.default.getFirstMatch(
                        /(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/Whale/i],
                    describe: function(e4) {
                      var t3 = { name: "NAVER Whale Browser" }, r3 = n.default.getFirstMatch(s, e4) || n.default.getFirstMatch(
                        /(?:whale)[\s/](\d+(?:\.\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/MZBrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "MZ Browser" }, r3 = n.default.getFirstMatch(
                        /(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,
                        e4
                      ) || n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/focus/i],
                    describe: function(e4) {
                      var t3 = { name: "Focus" }, r3 = n.default.getFirstMatch(
                        /(?:focus)[\s/](\d+(?:\.\d+)+)/i,
                        e4
                      ) || n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/swing/i],
                    describe: function(e4) {
                      var t3 = { name: "Swing" }, r3 = n.default.getFirstMatch(
                        /(?:swing)[\s/](\d+(?:\.\d+)+)/i,
                        e4
                      ) || n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/coast/i],
                    describe: function(e4) {
                      var t3 = { name: "Opera Coast" }, r3 = n.default.getFirstMatch(s, e4) || n.default.getFirstMatch(
                        /(?:coast)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/opt\/\d+(?:.?_?\d+)+/i],
                    describe: function(e4) {
                      var t3 = { name: "Opera Touch" }, r3 = n.default.getFirstMatch(
                        /(?:opt)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/yabrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "Yandex Browser" }, r3 = n.default.getFirstMatch(
                        /(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/ucbrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "UC Browser" }, r3 = n.default.getFirstMatch(s, e4) || n.default.getFirstMatch(
                        /(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/Maxthon|mxios/i],
                    describe: function(e4) {
                      var t3 = { name: "Maxthon" }, r3 = n.default.getFirstMatch(s, e4) || n.default.getFirstMatch(
                        /(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/epiphany/i],
                    describe: function(e4) {
                      var t3 = { name: "Epiphany" }, r3 = n.default.getFirstMatch(s, e4) || n.default.getFirstMatch(
                        /(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/puffin/i],
                    describe: function(e4) {
                      var t3 = { name: "Puffin" }, r3 = n.default.getFirstMatch(s, e4) || n.default.getFirstMatch(
                        /(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/sleipnir/i],
                    describe: function(e4) {
                      var t3 = { name: "Sleipnir" }, r3 = n.default.getFirstMatch(s, e4) || n.default.getFirstMatch(
                        /(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/k-meleon/i],
                    describe: function(e4) {
                      var t3 = { name: "K-Meleon" }, r3 = n.default.getFirstMatch(s, e4) || n.default.getFirstMatch(
                        /(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/micromessenger/i],
                    describe: function(e4) {
                      var t3 = { name: "WeChat" }, r3 = n.default.getFirstMatch(
                        /(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/qqbrowser/i],
                    describe: function(e4) {
                      var t3 = {
                        name: /qqbrowserlite/i.test(e4) ? "QQ Browser Lite" : "QQ Browser"
                      }, r3 = n.default.getFirstMatch(
                        /(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/msie|trident/i],
                    describe: function(e4) {
                      var t3 = { name: "Internet Explorer" }, r3 = n.default.getFirstMatch(
                        /(?:msie |rv:)(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/\sedg\//i],
                    describe: function(e4) {
                      var t3 = { name: "Microsoft Edge" }, r3 = n.default.getFirstMatch(
                        /\sedg\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/edg([ea]|ios)/i],
                    describe: function(e4) {
                      var t3 = { name: "Microsoft Edge" }, r3 = n.default.getSecondMatch(
                        /edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/vivaldi/i],
                    describe: function(e4) {
                      var t3 = { name: "Vivaldi" }, r3 = n.default.getFirstMatch(
                        /vivaldi\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/seamonkey/i],
                    describe: function(e4) {
                      var t3 = { name: "SeaMonkey" }, r3 = n.default.getFirstMatch(
                        /seamonkey\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/sailfish/i],
                    describe: function(e4) {
                      var t3 = { name: "Sailfish" }, r3 = n.default.getFirstMatch(
                        /sailfish\s?browser\/(\d+(\.\d+)?)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/silk/i],
                    describe: function(e4) {
                      var t3 = { name: "Amazon Silk" }, r3 = n.default.getFirstMatch(
                        /silk\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/phantom/i],
                    describe: function(e4) {
                      var t3 = { name: "PhantomJS" }, r3 = n.default.getFirstMatch(
                        /phantomjs\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/slimerjs/i],
                    describe: function(e4) {
                      var t3 = { name: "SlimerJS" }, r3 = n.default.getFirstMatch(
                        /slimerjs\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function(e4) {
                      var t3 = { name: "BlackBerry" }, r3 = n.default.getFirstMatch(s, e4) || n.default.getFirstMatch(
                        /blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function(e4) {
                      var t3 = { name: "WebOS Browser" }, r3 = n.default.getFirstMatch(s, e4) || n.default.getFirstMatch(
                        /w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/bada/i],
                    describe: function(e4) {
                      var t3 = { name: "Bada" }, r3 = n.default.getFirstMatch(
                        /dolfin\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/tizen/i],
                    describe: function(e4) {
                      var t3 = { name: "Tizen" }, r3 = n.default.getFirstMatch(
                        /(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,
                        e4
                      ) || n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/qupzilla/i],
                    describe: function(e4) {
                      var t3 = { name: "QupZilla" }, r3 = n.default.getFirstMatch(
                        /(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/firefox|iceweasel|fxios/i],
                    describe: function(e4) {
                      var t3 = { name: "Firefox" }, r3 = n.default.getFirstMatch(
                        /(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/electron/i],
                    describe: function(e4) {
                      var t3 = { name: "Electron" }, r3 = n.default.getFirstMatch(
                        /(?:electron)\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/MiuiBrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "Miui" }, r3 = n.default.getFirstMatch(
                        /(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/chromium/i],
                    describe: function(e4) {
                      var t3 = { name: "Chromium" }, r3 = n.default.getFirstMatch(
                        /(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/chrome|crios|crmo/i],
                    describe: function(e4) {
                      var t3 = { name: "Chrome" }, r3 = n.default.getFirstMatch(
                        /(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/GSA/i],
                    describe: function(e4) {
                      var t3 = { name: "Google Search" }, r3 = n.default.getFirstMatch(
                        /(?:GSA)\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = !e4.test(/like android/i), r3 = e4.test(/android/i);
                      return t3 && r3;
                    },
                    describe: function(e4) {
                      var t3 = { name: "Android Browser" }, r3 = n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/playstation 4/i],
                    describe: function(e4) {
                      var t3 = { name: "PlayStation 4" }, r3 = n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/safari|applewebkit/i],
                    describe: function(e4) {
                      var t3 = { name: "Safari" }, r3 = n.default.getFirstMatch(s, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/.*/i],
                    describe: function(e4) {
                      var t3 = -1 !== e4.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
                      return {
                        name: n.default.getFirstMatch(t3, e4),
                        version: n.default.getSecondMatch(t3, e4)
                      };
                    }
                  }
                ];
                t2.default = i, e3.exports = t2.default;
              },
              93: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var a2, n = (a2 = r2(17)) && a2.__esModule ? a2 : { default: a2 }, s = r2(18), i = [
                  {
                    test: [/Roku\/DVP/],
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(
                        /Roku\/DVP-(\d+\.\d+)/i,
                        e4
                      );
                      return { name: s.OS_MAP.Roku, version: t3 };
                    }
                  },
                  {
                    test: [/windows phone/i],
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(
                        /windows phone (?:os)?\s?(\d+(\.\d+)*)/i,
                        e4
                      );
                      return { name: s.OS_MAP.WindowsPhone, version: t3 };
                    }
                  },
                  {
                    test: [/windows /i],
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(
                        /Windows ((NT|XP)( \d\d?.\d)?)/i,
                        e4
                      ), r3 = n.default.getWindowsVersionName(t3);
                      return {
                        name: s.OS_MAP.Windows,
                        version: t3,
                        versionName: r3
                      };
                    }
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function(e4) {
                      var t3 = { name: s.OS_MAP.iOS }, r3 = n.default.getSecondMatch(
                        /(Version\/)(\d[\d.]+)/,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/macintosh/i],
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e4).replace(/[_\s]/g, "."), r3 = n.default.getMacOSVersionName(t3), a3 = { name: s.OS_MAP.MacOS, version: t3 };
                      return r3 && (a3.versionName = r3), a3;
                    }
                  },
                  {
                    test: [/(ipod|iphone|ipad)/i],
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e4).replace(/[_\s]/g, ".");
                      return { name: s.OS_MAP.iOS, version: t3 };
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = !e4.test(/like android/i), r3 = e4.test(/android/i);
                      return t3 && r3;
                    },
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(
                        /android[\s/-](\d+(\.\d+)*)/i,
                        e4
                      ), r3 = n.default.getAndroidVersionName(t3), a3 = { name: s.OS_MAP.Android, version: t3 };
                      return r3 && (a3.versionName = r3), a3;
                    }
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(
                        /(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,
                        e4
                      ), r3 = { name: s.OS_MAP.WebOS };
                      return t3 && t3.length && (r3.version = t3), r3;
                    }
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(
                        /rim\stablet\sos\s(\d+(\.\d+)*)/i,
                        e4
                      ) || n.default.getFirstMatch(
                        /blackberry\d+\/(\d+([_\s]\d+)*)/i,
                        e4
                      ) || n.default.getFirstMatch(/\bbb(\d+)/i, e4);
                      return { name: s.OS_MAP.BlackBerry, version: t3 };
                    }
                  },
                  {
                    test: [/bada/i],
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(
                        /bada\/(\d+(\.\d+)*)/i,
                        e4
                      );
                      return { name: s.OS_MAP.Bada, version: t3 };
                    }
                  },
                  {
                    test: [/tizen/i],
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(
                        /tizen[/\s](\d+(\.\d+)*)/i,
                        e4
                      );
                      return { name: s.OS_MAP.Tizen, version: t3 };
                    }
                  },
                  {
                    test: [/linux/i],
                    describe: function() {
                      return { name: s.OS_MAP.Linux };
                    }
                  },
                  {
                    test: [/CrOS/],
                    describe: function() {
                      return { name: s.OS_MAP.ChromeOS };
                    }
                  },
                  {
                    test: [/PlayStation 4/],
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(
                        /PlayStation 4[/\s](\d+(\.\d+)*)/i,
                        e4
                      );
                      return { name: s.OS_MAP.PlayStation4, version: t3 };
                    }
                  }
                ];
                t2.default = i, e3.exports = t2.default;
              },
              94: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var a2, n = (a2 = r2(17)) && a2.__esModule ? a2 : { default: a2 }, s = r2(18), i = [
                  {
                    test: [/googlebot/i],
                    describe: function() {
                      return { type: "bot", vendor: "Google" };
                    }
                  },
                  {
                    test: [/huawei/i],
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(/(can-l01)/i, e4) && "Nova", r3 = { type: s.PLATFORMS_MAP.mobile, vendor: "Huawei" };
                      return t3 && (r3.model = t3), r3;
                    }
                  },
                  {
                    test: [/nexus\s*(?:7|8|9|10).*/i],
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.tablet, vendor: "Nexus" };
                    }
                  },
                  {
                    test: [/ipad/i],
                    describe: function() {
                      return {
                        type: s.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad"
                      };
                    }
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function() {
                      return {
                        type: s.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad"
                      };
                    }
                  },
                  {
                    test: [/kftt build/i],
                    describe: function() {
                      return {
                        type: s.PLATFORMS_MAP.tablet,
                        vendor: "Amazon",
                        model: "Kindle Fire HD 7"
                      };
                    }
                  },
                  {
                    test: [/silk/i],
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.tablet, vendor: "Amazon" };
                    }
                  },
                  {
                    test: [/tablet(?! pc)/i],
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.tablet };
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = e4.test(/ipod|iphone/i), r3 = e4.test(/like (ipod|iphone)/i);
                      return t3 && !r3;
                    },
                    describe: function(e4) {
                      var t3 = n.default.getFirstMatch(/(ipod|iphone)/i, e4);
                      return {
                        type: s.PLATFORMS_MAP.mobile,
                        vendor: "Apple",
                        model: t3
                      };
                    }
                  },
                  {
                    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.mobile, vendor: "Nexus" };
                    }
                  },
                  {
                    test: [/[^-]mobi/i],
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.mobile };
                    }
                  },
                  {
                    test: function(e4) {
                      return "blackberry" === e4.getBrowserName(true);
                    },
                    describe: function() {
                      return {
                        type: s.PLATFORMS_MAP.mobile,
                        vendor: "BlackBerry"
                      };
                    }
                  },
                  {
                    test: function(e4) {
                      return "bada" === e4.getBrowserName(true);
                    },
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.mobile };
                    }
                  },
                  {
                    test: function(e4) {
                      return "windows phone" === e4.getBrowserName();
                    },
                    describe: function() {
                      return {
                        type: s.PLATFORMS_MAP.mobile,
                        vendor: "Microsoft"
                      };
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = Number(String(e4.getOSVersion()).split(".")[0]);
                      return "android" === e4.getOSName(true) && t3 >= 3;
                    },
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.tablet };
                    }
                  },
                  {
                    test: function(e4) {
                      return "android" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.mobile };
                    }
                  },
                  {
                    test: function(e4) {
                      return "macos" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.desktop, vendor: "Apple" };
                    }
                  },
                  {
                    test: function(e4) {
                      return "windows" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.desktop };
                    }
                  },
                  {
                    test: function(e4) {
                      return "linux" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.desktop };
                    }
                  },
                  {
                    test: function(e4) {
                      return "playstation 4" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.tv };
                    }
                  },
                  {
                    test: function(e4) {
                      return "roku" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: s.PLATFORMS_MAP.tv };
                    }
                  }
                ];
                t2.default = i, e3.exports = t2.default;
              },
              95: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var a2, n = (a2 = r2(17)) && a2.__esModule ? a2 : { default: a2 }, s = r2(18), i = [
                  {
                    test: function(e4) {
                      return "microsoft edge" === e4.getBrowserName(true);
                    },
                    describe: function(e4) {
                      if (/\sedg\//i.test(e4))
                        return { name: s.ENGINE_MAP.Blink };
                      var t3 = n.default.getFirstMatch(
                        /edge\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return { name: s.ENGINE_MAP.EdgeHTML, version: t3 };
                    }
                  },
                  {
                    test: [/trident/i],
                    describe: function(e4) {
                      var t3 = { name: s.ENGINE_MAP.Trident }, r3 = n.default.getFirstMatch(
                        /trident\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: function(e4) {
                      return e4.test(/presto/i);
                    },
                    describe: function(e4) {
                      var t3 = { name: s.ENGINE_MAP.Presto }, r3 = n.default.getFirstMatch(
                        /presto\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = e4.test(/gecko/i), r3 = e4.test(/like gecko/i);
                      return t3 && !r3;
                    },
                    describe: function(e4) {
                      var t3 = { name: s.ENGINE_MAP.Gecko }, r3 = n.default.getFirstMatch(
                        /gecko\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/(apple)?webkit\/537\.36/i],
                    describe: function() {
                      return { name: s.ENGINE_MAP.Blink };
                    }
                  },
                  {
                    test: [/(apple)?webkit/i],
                    describe: function(e4) {
                      var t3 = { name: s.ENGINE_MAP.WebKit }, r3 = n.default.getFirstMatch(
                        /webkit\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  }
                ];
                t2.default = i, e3.exports = t2.default;
              }
            });
          },
          955: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(754), r2(4636), r2(9506), r2(7165), function() {
              var e3 = a2, t3 = e3.lib.BlockCipher, r3 = e3.algo, n = [], s = [], i = [], o = [], c = [], d = [], l = [], p = [], u = [], h = [];
              !function() {
                for (var e4 = [], t4 = 0; t4 < 256; t4++)
                  e4[t4] = t4 < 128 ? t4 << 1 : t4 << 1 ^ 283;
                var r4 = 0, a3 = 0;
                for (t4 = 0; t4 < 256; t4++) {
                  var m2 = a3 ^ a3 << 1 ^ a3 << 2 ^ a3 << 3 ^ a3 << 4;
                  m2 = m2 >>> 8 ^ 255 & m2 ^ 99, n[r4] = m2, s[m2] = r4;
                  var f2 = e4[r4], g = e4[f2], _ = e4[g], v = 257 * e4[m2] ^ 16843008 * m2;
                  i[r4] = v << 24 | v >>> 8, o[r4] = v << 16 | v >>> 16, c[r4] = v << 8 | v >>> 24, d[r4] = v, v = 16843009 * _ ^ 65537 * g ^ 257 * f2 ^ 16843008 * r4, l[m2] = v << 24 | v >>> 8, p[m2] = v << 16 | v >>> 16, u[m2] = v << 8 | v >>> 24, h[m2] = v, r4 ? (r4 = f2 ^ e4[e4[e4[_ ^ f2]]], a3 ^= e4[e4[a3]]) : r4 = a3 = 1;
                }
              }();
              var m = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], f = r3.AES = t3.extend({
                _doReset: function() {
                  if (!this._nRounds || this._keyPriorReset !== this._key) {
                    for (var e4 = this._keyPriorReset = this._key, t4 = e4.words, r4 = e4.sigBytes / 4, a3 = 4 * ((this._nRounds = r4 + 6) + 1), s2 = this._keySchedule = [], i2 = 0; i2 < a3; i2++)
                      i2 < r4 ? s2[i2] = t4[i2] : (d2 = s2[i2 - 1], i2 % r4 ? r4 > 6 && i2 % r4 == 4 && (d2 = n[d2 >>> 24] << 24 | n[d2 >>> 16 & 255] << 16 | n[d2 >>> 8 & 255] << 8 | n[255 & d2]) : (d2 = n[(d2 = d2 << 8 | d2 >>> 24) >>> 24] << 24 | n[d2 >>> 16 & 255] << 16 | n[d2 >>> 8 & 255] << 8 | n[255 & d2], d2 ^= m[i2 / r4 | 0] << 24), s2[i2] = s2[i2 - r4] ^ d2);
                    for (var o2 = this._invKeySchedule = [], c2 = 0; c2 < a3; c2++) {
                      if (i2 = a3 - c2, c2 % 4) var d2 = s2[i2];
                      else d2 = s2[i2 - 4];
                      o2[c2] = c2 < 4 || i2 <= 4 ? d2 : l[n[d2 >>> 24]] ^ p[n[d2 >>> 16 & 255]] ^ u[n[d2 >>> 8 & 255]] ^ h[n[255 & d2]];
                    }
                  }
                },
                encryptBlock: function(e4, t4) {
                  this._doCryptBlock(e4, t4, this._keySchedule, i, o, c, d, n);
                },
                decryptBlock: function(e4, t4) {
                  var r4 = e4[t4 + 1];
                  e4[t4 + 1] = e4[t4 + 3], e4[t4 + 3] = r4, this._doCryptBlock(
                    e4,
                    t4,
                    this._invKeySchedule,
                    l,
                    p,
                    u,
                    h,
                    s
                  ), r4 = e4[t4 + 1], e4[t4 + 1] = e4[t4 + 3], e4[t4 + 3] = r4;
                },
                _doCryptBlock: function(e4, t4, r4, a3, n2, s2, i2, o2) {
                  for (var c2 = this._nRounds, d2 = e4[t4] ^ r4[0], l2 = e4[t4 + 1] ^ r4[1], p2 = e4[t4 + 2] ^ r4[2], u2 = e4[t4 + 3] ^ r4[3], h2 = 4, m2 = 1; m2 < c2; m2++) {
                    var f2 = a3[d2 >>> 24] ^ n2[l2 >>> 16 & 255] ^ s2[p2 >>> 8 & 255] ^ i2[255 & u2] ^ r4[h2++], g = a3[l2 >>> 24] ^ n2[p2 >>> 16 & 255] ^ s2[u2 >>> 8 & 255] ^ i2[255 & d2] ^ r4[h2++], _ = a3[p2 >>> 24] ^ n2[u2 >>> 16 & 255] ^ s2[d2 >>> 8 & 255] ^ i2[255 & l2] ^ r4[h2++], v = a3[u2 >>> 24] ^ n2[d2 >>> 16 & 255] ^ s2[l2 >>> 8 & 255] ^ i2[255 & p2] ^ r4[h2++];
                    d2 = f2, l2 = g, p2 = _, u2 = v;
                  }
                  f2 = (o2[d2 >>> 24] << 24 | o2[l2 >>> 16 & 255] << 16 | o2[p2 >>> 8 & 255] << 8 | o2[255 & u2]) ^ r4[h2++], g = (o2[l2 >>> 24] << 24 | o2[p2 >>> 16 & 255] << 16 | o2[u2 >>> 8 & 255] << 8 | o2[255 & d2]) ^ r4[h2++], _ = (o2[p2 >>> 24] << 24 | o2[u2 >>> 16 & 255] << 16 | o2[d2 >>> 8 & 255] << 8 | o2[255 & l2]) ^ r4[h2++], v = (o2[u2 >>> 24] << 24 | o2[d2 >>> 16 & 255] << 16 | o2[l2 >>> 8 & 255] << 8 | o2[255 & p2]) ^ r4[h2++], e4[t4] = f2, e4[t4 + 1] = g, e4[t4 + 2] = _, e4[t4 + 3] = v;
                },
                keySize: 8
              });
              e3.AES = t3._createHelper(f);
            }(), a2.AES);
          },
          3128: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(754), r2(4636), r2(9506), r2(7165), function() {
              var e3 = a2, t3 = e3.lib.BlockCipher, r3 = e3.algo;
              const n = 16, s = [
                608135816,
                2242054355,
                320440878,
                57701188,
                2752067618,
                698298832,
                137296536,
                3964562569,
                1160258022,
                953160567,
                3193202383,
                887688300,
                3232508343,
                3380367581,
                1065670069,
                3041331479,
                2450970073,
                2306472731
              ], i = [
                [
                  3509652390,
                  2564797868,
                  805139163,
                  3491422135,
                  3101798381,
                  1780907670,
                  3128725573,
                  4046225305,
                  614570311,
                  3012652279,
                  134345442,
                  2240740374,
                  1667834072,
                  1901547113,
                  2757295779,
                  4103290238,
                  227898511,
                  1921955416,
                  1904987480,
                  2182433518,
                  2069144605,
                  3260701109,
                  2620446009,
                  720527379,
                  3318853667,
                  677414384,
                  3393288472,
                  3101374703,
                  2390351024,
                  1614419982,
                  1822297739,
                  2954791486,
                  3608508353,
                  3174124327,
                  2024746970,
                  1432378464,
                  3864339955,
                  2857741204,
                  1464375394,
                  1676153920,
                  1439316330,
                  715854006,
                  3033291828,
                  289532110,
                  2706671279,
                  2087905683,
                  3018724369,
                  1668267050,
                  732546397,
                  1947742710,
                  3462151702,
                  2609353502,
                  2950085171,
                  1814351708,
                  2050118529,
                  680887927,
                  999245976,
                  1800124847,
                  3300911131,
                  1713906067,
                  1641548236,
                  4213287313,
                  1216130144,
                  1575780402,
                  4018429277,
                  3917837745,
                  3693486850,
                  3949271944,
                  596196993,
                  3549867205,
                  258830323,
                  2213823033,
                  772490370,
                  2760122372,
                  1774776394,
                  2652871518,
                  566650946,
                  4142492826,
                  1728879713,
                  2882767088,
                  1783734482,
                  3629395816,
                  2517608232,
                  2874225571,
                  1861159788,
                  326777828,
                  3124490320,
                  2130389656,
                  2716951837,
                  967770486,
                  1724537150,
                  2185432712,
                  2364442137,
                  1164943284,
                  2105845187,
                  998989502,
                  3765401048,
                  2244026483,
                  1075463327,
                  1455516326,
                  1322494562,
                  910128902,
                  469688178,
                  1117454909,
                  936433444,
                  3490320968,
                  3675253459,
                  1240580251,
                  122909385,
                  2157517691,
                  634681816,
                  4142456567,
                  3825094682,
                  3061402683,
                  2540495037,
                  79693498,
                  3249098678,
                  1084186820,
                  1583128258,
                  426386531,
                  1761308591,
                  1047286709,
                  322548459,
                  995290223,
                  1845252383,
                  2603652396,
                  3431023940,
                  2942221577,
                  3202600964,
                  3727903485,
                  1712269319,
                  422464435,
                  3234572375,
                  1170764815,
                  3523960633,
                  3117677531,
                  1434042557,
                  442511882,
                  3600875718,
                  1076654713,
                  1738483198,
                  4213154764,
                  2393238008,
                  3677496056,
                  1014306527,
                  4251020053,
                  793779912,
                  2902807211,
                  842905082,
                  4246964064,
                  1395751752,
                  1040244610,
                  2656851899,
                  3396308128,
                  445077038,
                  3742853595,
                  3577915638,
                  679411651,
                  2892444358,
                  2354009459,
                  1767581616,
                  3150600392,
                  3791627101,
                  3102740896,
                  284835224,
                  4246832056,
                  1258075500,
                  768725851,
                  2589189241,
                  3069724005,
                  3532540348,
                  1274779536,
                  3789419226,
                  2764799539,
                  1660621633,
                  3471099624,
                  4011903706,
                  913787905,
                  3497959166,
                  737222580,
                  2514213453,
                  2928710040,
                  3937242737,
                  1804850592,
                  3499020752,
                  2949064160,
                  2386320175,
                  2390070455,
                  2415321851,
                  4061277028,
                  2290661394,
                  2416832540,
                  1336762016,
                  1754252060,
                  3520065937,
                  3014181293,
                  791618072,
                  3188594551,
                  3933548030,
                  2332172193,
                  3852520463,
                  3043980520,
                  413987798,
                  3465142937,
                  3030929376,
                  4245938359,
                  2093235073,
                  3534596313,
                  375366246,
                  2157278981,
                  2479649556,
                  555357303,
                  3870105701,
                  2008414854,
                  3344188149,
                  4221384143,
                  3956125452,
                  2067696032,
                  3594591187,
                  2921233993,
                  2428461,
                  544322398,
                  577241275,
                  1471733935,
                  610547355,
                  4027169054,
                  1432588573,
                  1507829418,
                  2025931657,
                  3646575487,
                  545086370,
                  48609733,
                  2200306550,
                  1653985193,
                  298326376,
                  1316178497,
                  3007786442,
                  2064951626,
                  458293330,
                  2589141269,
                  3591329599,
                  3164325604,
                  727753846,
                  2179363840,
                  146436021,
                  1461446943,
                  4069977195,
                  705550613,
                  3059967265,
                  3887724982,
                  4281599278,
                  3313849956,
                  1404054877,
                  2845806497,
                  146425753,
                  1854211946
                ],
                [
                  1266315497,
                  3048417604,
                  3681880366,
                  3289982499,
                  290971e4,
                  1235738493,
                  2632868024,
                  2414719590,
                  3970600049,
                  1771706367,
                  1449415276,
                  3266420449,
                  422970021,
                  1963543593,
                  2690192192,
                  3826793022,
                  1062508698,
                  1531092325,
                  1804592342,
                  2583117782,
                  2714934279,
                  4024971509,
                  1294809318,
                  4028980673,
                  1289560198,
                  2221992742,
                  1669523910,
                  35572830,
                  157838143,
                  1052438473,
                  1016535060,
                  1802137761,
                  1753167236,
                  1386275462,
                  3080475397,
                  2857371447,
                  1040679964,
                  2145300060,
                  2390574316,
                  1461121720,
                  2956646967,
                  4031777805,
                  4028374788,
                  33600511,
                  2920084762,
                  1018524850,
                  629373528,
                  3691585981,
                  3515945977,
                  2091462646,
                  2486323059,
                  586499841,
                  988145025,
                  935516892,
                  3367335476,
                  2599673255,
                  2839830854,
                  265290510,
                  3972581182,
                  2759138881,
                  3795373465,
                  1005194799,
                  847297441,
                  406762289,
                  1314163512,
                  1332590856,
                  1866599683,
                  4127851711,
                  750260880,
                  613907577,
                  1450815602,
                  3165620655,
                  3734664991,
                  3650291728,
                  3012275730,
                  3704569646,
                  1427272223,
                  778793252,
                  1343938022,
                  2676280711,
                  2052605720,
                  1946737175,
                  3164576444,
                  3914038668,
                  3967478842,
                  3682934266,
                  1661551462,
                  3294938066,
                  4011595847,
                  840292616,
                  3712170807,
                  616741398,
                  312560963,
                  711312465,
                  1351876610,
                  322626781,
                  1910503582,
                  271666773,
                  2175563734,
                  1594956187,
                  70604529,
                  3617834859,
                  1007753275,
                  1495573769,
                  4069517037,
                  2549218298,
                  2663038764,
                  504708206,
                  2263041392,
                  3941167025,
                  2249088522,
                  1514023603,
                  1998579484,
                  1312622330,
                  694541497,
                  2582060303,
                  2151582166,
                  1382467621,
                  776784248,
                  2618340202,
                  3323268794,
                  2497899128,
                  2784771155,
                  503983604,
                  4076293799,
                  907881277,
                  423175695,
                  432175456,
                  1378068232,
                  4145222326,
                  3954048622,
                  3938656102,
                  3820766613,
                  2793130115,
                  2977904593,
                  26017576,
                  3274890735,
                  3194772133,
                  1700274565,
                  1756076034,
                  4006520079,
                  3677328699,
                  720338349,
                  1533947780,
                  354530856,
                  688349552,
                  3973924725,
                  1637815568,
                  332179504,
                  3949051286,
                  53804574,
                  2852348879,
                  3044236432,
                  1282449977,
                  3583942155,
                  3416972820,
                  4006381244,
                  1617046695,
                  2628476075,
                  3002303598,
                  1686838959,
                  431878346,
                  2686675385,
                  1700445008,
                  1080580658,
                  1009431731,
                  832498133,
                  3223435511,
                  2605976345,
                  2271191193,
                  2516031870,
                  1648197032,
                  4164389018,
                  2548247927,
                  300782431,
                  375919233,
                  238389289,
                  3353747414,
                  2531188641,
                  2019080857,
                  1475708069,
                  455242339,
                  2609103871,
                  448939670,
                  3451063019,
                  1395535956,
                  2413381860,
                  1841049896,
                  1491858159,
                  885456874,
                  4264095073,
                  4001119347,
                  1565136089,
                  3898914787,
                  1108368660,
                  540939232,
                  1173283510,
                  2745871338,
                  3681308437,
                  4207628240,
                  3343053890,
                  4016749493,
                  1699691293,
                  1103962373,
                  3625875870,
                  2256883143,
                  3830138730,
                  1031889488,
                  3479347698,
                  1535977030,
                  4236805024,
                  3251091107,
                  2132092099,
                  1774941330,
                  1199868427,
                  1452454533,
                  157007616,
                  2904115357,
                  342012276,
                  595725824,
                  1480756522,
                  206960106,
                  497939518,
                  591360097,
                  863170706,
                  2375253569,
                  3596610801,
                  1814182875,
                  2094937945,
                  3421402208,
                  1082520231,
                  3463918190,
                  2785509508,
                  435703966,
                  3908032597,
                  1641649973,
                  2842273706,
                  3305899714,
                  1510255612,
                  2148256476,
                  2655287854,
                  3276092548,
                  4258621189,
                  236887753,
                  3681803219,
                  274041037,
                  1734335097,
                  3815195456,
                  3317970021,
                  1899903192,
                  1026095262,
                  4050517792,
                  356393447,
                  2410691914,
                  3873677099,
                  3682840055
                ],
                [
                  3913112168,
                  2491498743,
                  4132185628,
                  2489919796,
                  1091903735,
                  1979897079,
                  3170134830,
                  3567386728,
                  3557303409,
                  857797738,
                  1136121015,
                  1342202287,
                  507115054,
                  2535736646,
                  337727348,
                  3213592640,
                  1301675037,
                  2528481711,
                  1895095763,
                  1721773893,
                  3216771564,
                  62756741,
                  2142006736,
                  835421444,
                  2531993523,
                  1442658625,
                  3659876326,
                  2882144922,
                  676362277,
                  1392781812,
                  170690266,
                  3921047035,
                  1759253602,
                  3611846912,
                  1745797284,
                  664899054,
                  1329594018,
                  3901205900,
                  3045908486,
                  2062866102,
                  2865634940,
                  3543621612,
                  3464012697,
                  1080764994,
                  553557557,
                  3656615353,
                  3996768171,
                  991055499,
                  499776247,
                  1265440854,
                  648242737,
                  3940784050,
                  980351604,
                  3713745714,
                  1749149687,
                  3396870395,
                  4211799374,
                  3640570775,
                  1161844396,
                  3125318951,
                  1431517754,
                  545492359,
                  4268468663,
                  3499529547,
                  1437099964,
                  2702547544,
                  3433638243,
                  2581715763,
                  2787789398,
                  1060185593,
                  1593081372,
                  2418618748,
                  4260947970,
                  69676912,
                  2159744348,
                  86519011,
                  2512459080,
                  3838209314,
                  1220612927,
                  3339683548,
                  133810670,
                  1090789135,
                  1078426020,
                  1569222167,
                  845107691,
                  3583754449,
                  4072456591,
                  1091646820,
                  628848692,
                  1613405280,
                  3757631651,
                  526609435,
                  236106946,
                  48312990,
                  2942717905,
                  3402727701,
                  1797494240,
                  859738849,
                  992217954,
                  4005476642,
                  2243076622,
                  3870952857,
                  3732016268,
                  765654824,
                  3490871365,
                  2511836413,
                  1685915746,
                  3888969200,
                  1414112111,
                  2273134842,
                  3281911079,
                  4080962846,
                  172450625,
                  2569994100,
                  980381355,
                  4109958455,
                  2819808352,
                  2716589560,
                  2568741196,
                  3681446669,
                  3329971472,
                  1835478071,
                  660984891,
                  3704678404,
                  4045999559,
                  3422617507,
                  3040415634,
                  1762651403,
                  1719377915,
                  3470491036,
                  2693910283,
                  3642056355,
                  3138596744,
                  1364962596,
                  2073328063,
                  1983633131,
                  926494387,
                  3423689081,
                  2150032023,
                  4096667949,
                  1749200295,
                  3328846651,
                  309677260,
                  2016342300,
                  1779581495,
                  3079819751,
                  111262694,
                  1274766160,
                  443224088,
                  298511866,
                  1025883608,
                  3806446537,
                  1145181785,
                  168956806,
                  3641502830,
                  3584813610,
                  1689216846,
                  3666258015,
                  3200248200,
                  1692713982,
                  2646376535,
                  4042768518,
                  1618508792,
                  1610833997,
                  3523052358,
                  4130873264,
                  2001055236,
                  3610705100,
                  2202168115,
                  4028541809,
                  2961195399,
                  1006657119,
                  2006996926,
                  3186142756,
                  1430667929,
                  3210227297,
                  1314452623,
                  4074634658,
                  4101304120,
                  2273951170,
                  1399257539,
                  3367210612,
                  3027628629,
                  1190975929,
                  2062231137,
                  2333990788,
                  2221543033,
                  2438960610,
                  1181637006,
                  548689776,
                  2362791313,
                  3372408396,
                  3104550113,
                  3145860560,
                  296247880,
                  1970579870,
                  3078560182,
                  3769228297,
                  1714227617,
                  3291629107,
                  3898220290,
                  166772364,
                  1251581989,
                  493813264,
                  448347421,
                  195405023,
                  2709975567,
                  677966185,
                  3703036547,
                  1463355134,
                  2715995803,
                  1338867538,
                  1343315457,
                  2802222074,
                  2684532164,
                  233230375,
                  2599980071,
                  2000651841,
                  3277868038,
                  1638401717,
                  4028070440,
                  3237316320,
                  6314154,
                  819756386,
                  300326615,
                  590932579,
                  1405279636,
                  3267499572,
                  3150704214,
                  2428286686,
                  3959192993,
                  3461946742,
                  1862657033,
                  1266418056,
                  963775037,
                  2089974820,
                  2263052895,
                  1917689273,
                  448879540,
                  3550394620,
                  3981727096,
                  150775221,
                  3627908307,
                  1303187396,
                  508620638,
                  2975983352,
                  2726630617,
                  1817252668,
                  1876281319,
                  1457606340,
                  908771278,
                  3720792119,
                  3617206836,
                  2455994898,
                  1729034894,
                  1080033504
                ],
                [
                  976866871,
                  3556439503,
                  2881648439,
                  1522871579,
                  1555064734,
                  1336096578,
                  3548522304,
                  2579274686,
                  3574697629,
                  3205460757,
                  3593280638,
                  3338716283,
                  3079412587,
                  564236357,
                  2993598910,
                  1781952180,
                  1464380207,
                  3163844217,
                  3332601554,
                  1699332808,
                  1393555694,
                  1183702653,
                  3581086237,
                  1288719814,
                  691649499,
                  2847557200,
                  2895455976,
                  3193889540,
                  2717570544,
                  1781354906,
                  1676643554,
                  2592534050,
                  3230253752,
                  1126444790,
                  2770207658,
                  2633158820,
                  2210423226,
                  2615765581,
                  2414155088,
                  3127139286,
                  673620729,
                  2805611233,
                  1269405062,
                  4015350505,
                  3341807571,
                  4149409754,
                  1057255273,
                  2012875353,
                  2162469141,
                  2276492801,
                  2601117357,
                  993977747,
                  3918593370,
                  2654263191,
                  753973209,
                  36408145,
                  2530585658,
                  25011837,
                  3520020182,
                  2088578344,
                  530523599,
                  2918365339,
                  1524020338,
                  1518925132,
                  3760827505,
                  3759777254,
                  1202760957,
                  3985898139,
                  3906192525,
                  674977740,
                  4174734889,
                  2031300136,
                  2019492241,
                  3983892565,
                  4153806404,
                  3822280332,
                  352677332,
                  2297720250,
                  60907813,
                  90501309,
                  3286998549,
                  1016092578,
                  2535922412,
                  2839152426,
                  457141659,
                  509813237,
                  4120667899,
                  652014361,
                  1966332200,
                  2975202805,
                  55981186,
                  2327461051,
                  676427537,
                  3255491064,
                  2882294119,
                  3433927263,
                  1307055953,
                  942726286,
                  933058658,
                  2468411793,
                  3933900994,
                  4215176142,
                  1361170020,
                  2001714738,
                  2830558078,
                  3274259782,
                  1222529897,
                  1679025792,
                  2729314320,
                  3714953764,
                  1770335741,
                  151462246,
                  3013232138,
                  1682292957,
                  1483529935,
                  471910574,
                  1539241949,
                  458788160,
                  3436315007,
                  1807016891,
                  3718408830,
                  978976581,
                  1043663428,
                  3165965781,
                  1927990952,
                  4200891579,
                  2372276910,
                  3208408903,
                  3533431907,
                  1412390302,
                  2931980059,
                  4132332400,
                  1947078029,
                  3881505623,
                  4168226417,
                  2941484381,
                  1077988104,
                  1320477388,
                  886195818,
                  18198404,
                  3786409e3,
                  2509781533,
                  112762804,
                  3463356488,
                  1866414978,
                  891333506,
                  18488651,
                  661792760,
                  1628790961,
                  3885187036,
                  3141171499,
                  876946877,
                  2693282273,
                  1372485963,
                  791857591,
                  2686433993,
                  3759982718,
                  3167212022,
                  3472953795,
                  2716379847,
                  445679433,
                  3561995674,
                  3504004811,
                  3574258232,
                  54117162,
                  3331405415,
                  2381918588,
                  3769707343,
                  4154350007,
                  1140177722,
                  4074052095,
                  668550556,
                  3214352940,
                  367459370,
                  261225585,
                  2610173221,
                  4209349473,
                  3468074219,
                  3265815641,
                  314222801,
                  3066103646,
                  3808782860,
                  282218597,
                  3406013506,
                  3773591054,
                  379116347,
                  1285071038,
                  846784868,
                  2669647154,
                  3771962079,
                  3550491691,
                  2305946142,
                  453669953,
                  1268987020,
                  3317592352,
                  3279303384,
                  3744833421,
                  2610507566,
                  3859509063,
                  266596637,
                  3847019092,
                  517658769,
                  3462560207,
                  3443424879,
                  370717030,
                  4247526661,
                  2224018117,
                  4143653529,
                  4112773975,
                  2788324899,
                  2477274417,
                  1456262402,
                  2901442914,
                  1517677493,
                  1846949527,
                  2295493580,
                  3734397586,
                  2176403920,
                  1280348187,
                  1908823572,
                  3871786941,
                  846861322,
                  1172426758,
                  3287448474,
                  3383383037,
                  1655181056,
                  3139813346,
                  901632758,
                  1897031941,
                  2986607138,
                  3066810236,
                  3447102507,
                  1393639104,
                  373351379,
                  950779232,
                  625454576,
                  3124240540,
                  4148612726,
                  2007998917,
                  544563296,
                  2244738638,
                  2330496472,
                  2058025392,
                  1291430526,
                  424198748,
                  50039436,
                  29584100,
                  3605783033,
                  2429876329,
                  2791104160,
                  1057563949,
                  3255363231,
                  3075367218,
                  3463963227,
                  1469046755,
                  985887462
                ]
              ];
              var o = { pbox: [], sbox: [] };
              function c(e4, t4) {
                let r4 = t4 >> 24 & 255, a3 = t4 >> 16 & 255, n2 = t4 >> 8 & 255, s2 = 255 & t4, i2 = e4.sbox[0][r4] + e4.sbox[1][a3];
                return i2 ^= e4.sbox[2][n2], i2 += e4.sbox[3][s2], i2;
              }
              function d(e4, t4, r4) {
                let a3, s2 = t4, i2 = r4;
                for (let t5 = 0; t5 < n; ++t5)
                  s2 ^= e4.pbox[t5], i2 = c(e4, s2) ^ i2, a3 = s2, s2 = i2, i2 = a3;
                return a3 = s2, s2 = i2, i2 = a3, i2 ^= e4.pbox[n], s2 ^= e4.pbox[n + 1], { left: s2, right: i2 };
              }
              function l(e4, t4, r4) {
                let a3, s2 = t4, i2 = r4;
                for (let t5 = n + 1; t5 > 1; --t5)
                  s2 ^= e4.pbox[t5], i2 = c(e4, s2) ^ i2, a3 = s2, s2 = i2, i2 = a3;
                return a3 = s2, s2 = i2, i2 = a3, i2 ^= e4.pbox[1], s2 ^= e4.pbox[0], { left: s2, right: i2 };
              }
              function p(e4, t4, r4) {
                for (let t5 = 0; t5 < 4; t5++) {
                  e4.sbox[t5] = [];
                  for (let r5 = 0; r5 < 256; r5++) e4.sbox[t5][r5] = i[t5][r5];
                }
                let a3 = 0;
                for (let i2 = 0; i2 < n + 2; i2++)
                  e4.pbox[i2] = s[i2] ^ t4[a3], a3++, a3 >= r4 && (a3 = 0);
                let o2 = 0, c2 = 0, l2 = 0;
                for (let t5 = 0; t5 < n + 2; t5 += 2)
                  l2 = d(e4, o2, c2), o2 = l2.left, c2 = l2.right, e4.pbox[t5] = o2, e4.pbox[t5 + 1] = c2;
                for (let t5 = 0; t5 < 4; t5++)
                  for (let r5 = 0; r5 < 256; r5 += 2)
                    l2 = d(e4, o2, c2), o2 = l2.left, c2 = l2.right, e4.sbox[t5][r5] = o2, e4.sbox[t5][r5 + 1] = c2;
                return true;
              }
              var u = r3.Blowfish = t3.extend({
                _doReset: function() {
                  if (this._keyPriorReset !== this._key) {
                    var e4 = this._keyPriorReset = this._key, t4 = e4.words, r4 = e4.sigBytes / 4;
                    p(o, t4, r4);
                  }
                },
                encryptBlock: function(e4, t4) {
                  var r4 = d(o, e4[t4], e4[t4 + 1]);
                  e4[t4] = r4.left, e4[t4 + 1] = r4.right;
                },
                decryptBlock: function(e4, t4) {
                  var r4 = l(o, e4[t4], e4[t4 + 1]);
                  e4[t4] = r4.left, e4[t4 + 1] = r4.right;
                },
                blockSize: 2,
                keySize: 4,
                ivSize: 2
              });
              e3.Blowfish = t3._createHelper(u);
            }(), a2.Blowfish);
          },
          7165: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(9506), void (a2.lib.Cipher || function(e3) {
              var t3 = a2, r3 = t3.lib, n = r3.Base, s = r3.WordArray, i = r3.BufferedBlockAlgorithm, o = t3.enc, c = (o.Utf8, o.Base64), d = t3.algo.EvpKDF, l = r3.Cipher = i.extend({
                cfg: n.extend(),
                createEncryptor: function(e4, t4) {
                  return this.create(this._ENC_XFORM_MODE, e4, t4);
                },
                createDecryptor: function(e4, t4) {
                  return this.create(this._DEC_XFORM_MODE, e4, t4);
                },
                init: function(e4, t4, r4) {
                  this.cfg = this.cfg.extend(r4), this._xformMode = e4, this._key = t4, this.reset();
                },
                reset: function() {
                  i.reset.call(this), this._doReset();
                },
                process: function(e4) {
                  return this._append(e4), this._process();
                },
                finalize: function(e4) {
                  return e4 && this._append(e4), this._doFinalize();
                },
                keySize: 4,
                ivSize: 4,
                _ENC_XFORM_MODE: 1,
                _DEC_XFORM_MODE: 2,
                _createHelper: /* @__PURE__ */ function() {
                  function e4(e5) {
                    return "string" == typeof e5 ? b : _;
                  }
                  return function(t4) {
                    return {
                      encrypt: function(r4, a3, n2) {
                        return e4(a3).encrypt(t4, r4, a3, n2);
                      },
                      decrypt: function(r4, a3, n2) {
                        return e4(a3).decrypt(t4, r4, a3, n2);
                      }
                    };
                  };
                }()
              }), p = (r3.StreamCipher = l.extend({
                _doFinalize: function() {
                  return this._process(true);
                },
                blockSize: 1
              }), t3.mode = {}), u = r3.BlockCipherMode = n.extend({
                createEncryptor: function(e4, t4) {
                  return this.Encryptor.create(e4, t4);
                },
                createDecryptor: function(e4, t4) {
                  return this.Decryptor.create(e4, t4);
                },
                init: function(e4, t4) {
                  this._cipher = e4, this._iv = t4;
                }
              }), h = p.CBC = function() {
                var t4 = u.extend();
                function r4(t5, r5, a3) {
                  var n2, s2 = this._iv;
                  s2 ? (n2 = s2, this._iv = e3) : n2 = this._prevBlock;
                  for (var i2 = 0; i2 < a3; i2++) t5[r5 + i2] ^= n2[i2];
                }
                return t4.Encryptor = t4.extend({
                  processBlock: function(e4, t5) {
                    var a3 = this._cipher, n2 = a3.blockSize;
                    r4.call(this, e4, t5, n2), a3.encryptBlock(e4, t5), this._prevBlock = e4.slice(t5, t5 + n2);
                  }
                }), t4.Decryptor = t4.extend({
                  processBlock: function(e4, t5) {
                    var a3 = this._cipher, n2 = a3.blockSize, s2 = e4.slice(t5, t5 + n2);
                    a3.decryptBlock(e4, t5), r4.call(this, e4, t5, n2), this._prevBlock = s2;
                  }
                }), t4;
              }(), m = (t3.pad = {}).Pkcs7 = {
                pad: function(e4, t4) {
                  for (var r4 = 4 * t4, a3 = r4 - e4.sigBytes % r4, n2 = a3 << 24 | a3 << 16 | a3 << 8 | a3, i2 = [], o2 = 0; o2 < a3; o2 += 4)
                    i2.push(n2);
                  var c2 = s.create(i2, a3);
                  e4.concat(c2);
                },
                unpad: function(e4) {
                  var t4 = 255 & e4.words[e4.sigBytes - 1 >>> 2];
                  e4.sigBytes -= t4;
                }
              }, f = (r3.BlockCipher = l.extend({
                cfg: l.cfg.extend({ mode: h, padding: m }),
                reset: function() {
                  var e4;
                  l.reset.call(this);
                  var t4 = this.cfg, r4 = t4.iv, a3 = t4.mode;
                  this._xformMode == this._ENC_XFORM_MODE ? e4 = a3.createEncryptor : (e4 = a3.createDecryptor, this._minBufferSize = 1), this._mode && this._mode.__creator == e4 ? this._mode.init(this, r4 && r4.words) : (this._mode = e4.call(a3, this, r4 && r4.words), this._mode.__creator = e4);
                },
                _doProcessBlock: function(e4, t4) {
                  this._mode.processBlock(e4, t4);
                },
                _doFinalize: function() {
                  var e4, t4 = this.cfg.padding;
                  return this._xformMode == this._ENC_XFORM_MODE ? (t4.pad(this._data, this.blockSize), e4 = this._process(true)) : (e4 = this._process(true), t4.unpad(e4)), e4;
                },
                blockSize: 4
              }), r3.CipherParams = n.extend({
                init: function(e4) {
                  this.mixIn(e4);
                },
                toString: function(e4) {
                  return (e4 || this.formatter).stringify(this);
                }
              })), g = (t3.format = {}).OpenSSL = {
                stringify: function(e4) {
                  var t4 = e4.ciphertext, r4 = e4.salt;
                  return (r4 ? s.create([1398893684, 1701076831]).concat(r4).concat(t4) : t4).toString(c);
                },
                parse: function(e4) {
                  var t4, r4 = c.parse(e4), a3 = r4.words;
                  return 1398893684 == a3[0] && 1701076831 == a3[1] && (t4 = s.create(a3.slice(2, 4)), a3.splice(0, 4), r4.sigBytes -= 16), f.create({ ciphertext: r4, salt: t4 });
                }
              }, _ = r3.SerializableCipher = n.extend({
                cfg: n.extend({ format: g }),
                encrypt: function(e4, t4, r4, a3) {
                  a3 = this.cfg.extend(a3);
                  var n2 = e4.createEncryptor(r4, a3), s2 = n2.finalize(t4), i2 = n2.cfg;
                  return f.create({
                    ciphertext: s2,
                    key: r4,
                    iv: i2.iv,
                    algorithm: e4,
                    mode: i2.mode,
                    padding: i2.padding,
                    blockSize: e4.blockSize,
                    formatter: a3.format
                  });
                },
                decrypt: function(e4, t4, r4, a3) {
                  return a3 = this.cfg.extend(a3), t4 = this._parse(t4, a3.format), e4.createDecryptor(r4, a3).finalize(t4.ciphertext);
                },
                _parse: function(e4, t4) {
                  return "string" == typeof e4 ? t4.parse(e4, this) : e4;
                }
              }), v = (t3.kdf = {}).OpenSSL = {
                execute: function(e4, t4, r4, a3, n2) {
                  if (a3 || (a3 = s.random(8)), n2)
                    i2 = d.create({ keySize: t4 + r4, hasher: n2 }).compute(e4, a3);
                  else var i2 = d.create({ keySize: t4 + r4 }).compute(e4, a3);
                  var o2 = s.create(i2.words.slice(t4), 4 * r4);
                  return i2.sigBytes = 4 * t4, f.create({ key: i2, iv: o2, salt: a3 });
                }
              }, b = r3.PasswordBasedCipher = _.extend({
                cfg: _.cfg.extend({ kdf: v }),
                encrypt: function(e4, t4, r4, a3) {
                  var n2 = (a3 = this.cfg.extend(a3)).kdf.execute(
                    r4,
                    e4.keySize,
                    e4.ivSize,
                    a3.salt,
                    a3.hasher
                  );
                  a3.iv = n2.iv;
                  var s2 = _.encrypt.call(this, e4, t4, n2.key, a3);
                  return s2.mixIn(n2), s2;
                },
                decrypt: function(e4, t4, r4, a3) {
                  a3 = this.cfg.extend(a3), t4 = this._parse(t4, a3.format);
                  var n2 = a3.kdf.execute(
                    r4,
                    e4.keySize,
                    e4.ivSize,
                    t4.salt,
                    a3.hasher
                  );
                  return a3.iv = n2.iv, _.decrypt.call(this, e4, t4, n2.key, a3);
                }
              });
            }()));
          },
          9021: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = a2 || function(e3, t3) {
              var a3;
              if ("undefined" != typeof window && window.crypto && (a3 = window.crypto), "undefined" != typeof self && self.crypto && (a3 = self.crypto), "undefined" != typeof globalThis && globalThis.crypto && (a3 = globalThis.crypto), !a3 && "undefined" != typeof window && window.msCrypto && (a3 = window.msCrypto), !a3 && void 0 !== r2.g && r2.g.crypto && (a3 = r2.g.crypto), !a3)
                try {
                  a3 = r2(477);
                } catch (e4) {
                }
              var n = function() {
                if (a3) {
                  if ("function" == typeof a3.getRandomValues)
                    try {
                      return a3.getRandomValues(new Uint32Array(1))[0];
                    } catch (e4) {
                    }
                  if ("function" == typeof a3.randomBytes)
                    try {
                      return a3.randomBytes(4).readInt32LE();
                    } catch (e4) {
                    }
                }
                throw new Error(
                  "Native crypto module could not be used to get secure random number."
                );
              }, s = Object.create || /* @__PURE__ */ function() {
                function e4() {
                }
                return function(t4) {
                  var r3;
                  return e4.prototype = t4, r3 = new e4(), e4.prototype = null, r3;
                };
              }(), i = {}, o = i.lib = {}, c = o.Base = {
                extend: function(e4) {
                  var t4 = s(this);
                  return e4 && t4.mixIn(e4), t4.hasOwnProperty("init") && this.init !== t4.init || (t4.init = function() {
                    t4.$super.init.apply(this, arguments);
                  }), t4.init.prototype = t4, t4.$super = this, t4;
                },
                create: function() {
                  var e4 = this.extend();
                  return e4.init.apply(e4, arguments), e4;
                },
                init: function() {
                },
                mixIn: function(e4) {
                  for (var t4 in e4) e4.hasOwnProperty(t4) && (this[t4] = e4[t4]);
                  e4.hasOwnProperty("toString") && (this.toString = e4.toString);
                },
                clone: function() {
                  return this.init.prototype.extend(this);
                }
              }, d = o.WordArray = c.extend({
                init: function(e4, r3) {
                  e4 = this.words = e4 || [], this.sigBytes = r3 != t3 ? r3 : 4 * e4.length;
                },
                toString: function(e4) {
                  return (e4 || p).stringify(this);
                },
                concat: function(e4) {
                  var t4 = this.words, r3 = e4.words, a4 = this.sigBytes, n2 = e4.sigBytes;
                  if (this.clamp(), a4 % 4)
                    for (var s2 = 0; s2 < n2; s2++) {
                      var i2 = r3[s2 >>> 2] >>> 24 - s2 % 4 * 8 & 255;
                      t4[a4 + s2 >>> 2] |= i2 << 24 - (a4 + s2) % 4 * 8;
                    }
                  else
                    for (var o2 = 0; o2 < n2; o2 += 4)
                      t4[a4 + o2 >>> 2] = r3[o2 >>> 2];
                  return this.sigBytes += n2, this;
                },
                clamp: function() {
                  var t4 = this.words, r3 = this.sigBytes;
                  t4[r3 >>> 2] &= 4294967295 << 32 - r3 % 4 * 8, t4.length = e3.ceil(r3 / 4);
                },
                clone: function() {
                  var e4 = c.clone.call(this);
                  return e4.words = this.words.slice(0), e4;
                },
                random: function(e4) {
                  for (var t4 = [], r3 = 0; r3 < e4; r3 += 4) t4.push(n());
                  return new d.init(t4, e4);
                }
              }), l = i.enc = {}, p = l.Hex = {
                stringify: function(e4) {
                  for (var t4 = e4.words, r3 = e4.sigBytes, a4 = [], n2 = 0; n2 < r3; n2++) {
                    var s2 = t4[n2 >>> 2] >>> 24 - n2 % 4 * 8 & 255;
                    a4.push((s2 >>> 4).toString(16)), a4.push((15 & s2).toString(16));
                  }
                  return a4.join("");
                },
                parse: function(e4) {
                  for (var t4 = e4.length, r3 = [], a4 = 0; a4 < t4; a4 += 2)
                    r3[a4 >>> 3] |= parseInt(e4.substr(a4, 2), 16) << 24 - a4 % 8 * 4;
                  return new d.init(r3, t4 / 2);
                }
              }, u = l.Latin1 = {
                stringify: function(e4) {
                  for (var t4 = e4.words, r3 = e4.sigBytes, a4 = [], n2 = 0; n2 < r3; n2++) {
                    var s2 = t4[n2 >>> 2] >>> 24 - n2 % 4 * 8 & 255;
                    a4.push(String.fromCharCode(s2));
                  }
                  return a4.join("");
                },
                parse: function(e4) {
                  for (var t4 = e4.length, r3 = [], a4 = 0; a4 < t4; a4++)
                    r3[a4 >>> 2] |= (255 & e4.charCodeAt(a4)) << 24 - a4 % 4 * 8;
                  return new d.init(r3, t4);
                }
              }, h = l.Utf8 = {
                stringify: function(e4) {
                  try {
                    return decodeURIComponent(escape(u.stringify(e4)));
                  } catch (e5) {
                    throw new Error("Malformed UTF-8 data");
                  }
                },
                parse: function(e4) {
                  return u.parse(unescape(encodeURIComponent(e4)));
                }
              }, m = o.BufferedBlockAlgorithm = c.extend({
                reset: function() {
                  this._data = new d.init(), this._nDataBytes = 0;
                },
                _append: function(e4) {
                  "string" == typeof e4 && (e4 = h.parse(e4)), this._data.concat(e4), this._nDataBytes += e4.sigBytes;
                },
                _process: function(t4) {
                  var r3, a4 = this._data, n2 = a4.words, s2 = a4.sigBytes, i2 = this.blockSize, o2 = s2 / (4 * i2), c2 = (o2 = t4 ? e3.ceil(o2) : e3.max((0 | o2) - this._minBufferSize, 0)) * i2, l2 = e3.min(4 * c2, s2);
                  if (c2) {
                    for (var p2 = 0; p2 < c2; p2 += i2)
                      this._doProcessBlock(n2, p2);
                    r3 = n2.splice(0, c2), a4.sigBytes -= l2;
                  }
                  return new d.init(r3, l2);
                },
                clone: function() {
                  var e4 = c.clone.call(this);
                  return e4._data = this._data.clone(), e4;
                },
                _minBufferSize: 0
              }), f = (o.Hasher = m.extend({
                cfg: c.extend(),
                init: function(e4) {
                  this.cfg = this.cfg.extend(e4), this.reset();
                },
                reset: function() {
                  m.reset.call(this), this._doReset();
                },
                update: function(e4) {
                  return this._append(e4), this._process(), this;
                },
                finalize: function(e4) {
                  return e4 && this._append(e4), this._doFinalize();
                },
                blockSize: 16,
                _createHelper: function(e4) {
                  return function(t4, r3) {
                    return new e4.init(r3).finalize(t4);
                  };
                },
                _createHmacHelper: function(e4) {
                  return function(t4, r3) {
                    return new f.HMAC.init(e4, r3).finalize(t4);
                  };
                }
              }), i.algo = {});
              return i;
            }(Math), a2);
          },
          754: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), function() {
              var e3 = a2, t3 = e3.lib.WordArray;
              function r3(e4, r4, a3) {
                for (var n = [], s = 0, i = 0; i < r4; i++)
                  if (i % 4) {
                    var o = a3[e4.charCodeAt(i - 1)] << i % 4 * 2 | a3[e4.charCodeAt(i)] >>> 6 - i % 4 * 2;
                    n[s >>> 2] |= o << 24 - s % 4 * 8, s++;
                  }
                return t3.create(n, s);
              }
              e3.enc.Base64 = {
                stringify: function(e4) {
                  var t4 = e4.words, r4 = e4.sigBytes, a3 = this._map;
                  e4.clamp();
                  for (var n = [], s = 0; s < r4; s += 3)
                    for (var i = (t4[s >>> 2] >>> 24 - s % 4 * 8 & 255) << 16 | (t4[s + 1 >>> 2] >>> 24 - (s + 1) % 4 * 8 & 255) << 8 | t4[s + 2 >>> 2] >>> 24 - (s + 2) % 4 * 8 & 255, o = 0; o < 4 && s + 0.75 * o < r4; o++)
                      n.push(a3.charAt(i >>> 6 * (3 - o) & 63));
                  var c = a3.charAt(64);
                  if (c) for (; n.length % 4; ) n.push(c);
                  return n.join("");
                },
                parse: function(e4) {
                  var t4 = e4.length, a3 = this._map, n = this._reverseMap;
                  if (!n) {
                    n = this._reverseMap = [];
                    for (var s = 0; s < a3.length; s++) n[a3.charCodeAt(s)] = s;
                  }
                  var i = a3.charAt(64);
                  if (i) {
                    var o = e4.indexOf(i);
                    -1 !== o && (t4 = o);
                  }
                  return r3(e4, t4, n);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
              };
            }(), a2.enc.Base64);
          },
          4725: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), function() {
              var e3 = a2, t3 = e3.lib.WordArray;
              function r3(e4, r4, a3) {
                for (var n = [], s = 0, i = 0; i < r4; i++)
                  if (i % 4) {
                    var o = a3[e4.charCodeAt(i - 1)] << i % 4 * 2 | a3[e4.charCodeAt(i)] >>> 6 - i % 4 * 2;
                    n[s >>> 2] |= o << 24 - s % 4 * 8, s++;
                  }
                return t3.create(n, s);
              }
              e3.enc.Base64url = {
                stringify: function(e4, t4) {
                  void 0 === t4 && (t4 = true);
                  var r4 = e4.words, a3 = e4.sigBytes, n = t4 ? this._safe_map : this._map;
                  e4.clamp();
                  for (var s = [], i = 0; i < a3; i += 3)
                    for (var o = (r4[i >>> 2] >>> 24 - i % 4 * 8 & 255) << 16 | (r4[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255) << 8 | r4[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255, c = 0; c < 4 && i + 0.75 * c < a3; c++)
                      s.push(n.charAt(o >>> 6 * (3 - c) & 63));
                  var d = n.charAt(64);
                  if (d) for (; s.length % 4; ) s.push(d);
                  return s.join("");
                },
                parse: function(e4, t4) {
                  void 0 === t4 && (t4 = true);
                  var a3 = e4.length, n = t4 ? this._safe_map : this._map, s = this._reverseMap;
                  if (!s) {
                    s = this._reverseMap = [];
                    for (var i = 0; i < n.length; i++) s[n.charCodeAt(i)] = i;
                  }
                  var o = n.charAt(64);
                  if (o) {
                    var c = e4.indexOf(o);
                    -1 !== c && (a3 = c);
                  }
                  return r3(e4, a3, s);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
              };
            }(), a2.enc.Base64url);
          },
          5503: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), function() {
              var e3 = a2, t3 = e3.lib.WordArray, r3 = e3.enc;
              function n(e4) {
                return e4 << 8 & 4278255360 | e4 >>> 8 & 16711935;
              }
              r3.Utf16 = r3.Utf16BE = {
                stringify: function(e4) {
                  for (var t4 = e4.words, r4 = e4.sigBytes, a3 = [], n2 = 0; n2 < r4; n2 += 2) {
                    var s = t4[n2 >>> 2] >>> 16 - n2 % 4 * 8 & 65535;
                    a3.push(String.fromCharCode(s));
                  }
                  return a3.join("");
                },
                parse: function(e4) {
                  for (var r4 = e4.length, a3 = [], n2 = 0; n2 < r4; n2++)
                    a3[n2 >>> 1] |= e4.charCodeAt(n2) << 16 - n2 % 2 * 16;
                  return t3.create(a3, 2 * r4);
                }
              }, r3.Utf16LE = {
                stringify: function(e4) {
                  for (var t4 = e4.words, r4 = e4.sigBytes, a3 = [], s = 0; s < r4; s += 2) {
                    var i = n(t4[s >>> 2] >>> 16 - s % 4 * 8 & 65535);
                    a3.push(String.fromCharCode(i));
                  }
                  return a3.join("");
                },
                parse: function(e4) {
                  for (var r4 = e4.length, a3 = [], s = 0; s < r4; s++)
                    a3[s >>> 1] |= n(e4.charCodeAt(s) << 16 - s % 2 * 16);
                  return t3.create(a3, 2 * r4);
                }
              };
            }(), a2.enc.Utf16);
          },
          9506: function(e2, t2, r2) {
            var a2, n, s, i, o, c, d, l;
            e2.exports = (l = r2(9021), r2(5471), r2(1025), n = (a2 = l).lib, s = n.Base, i = n.WordArray, o = a2.algo, c = o.MD5, d = o.EvpKDF = s.extend({
              cfg: s.extend({ keySize: 4, hasher: c, iterations: 1 }),
              init: function(e3) {
                this.cfg = this.cfg.extend(e3);
              },
              compute: function(e3, t3) {
                for (var r3, a3 = this.cfg, n2 = a3.hasher.create(), s2 = i.create(), o2 = s2.words, c2 = a3.keySize, d2 = a3.iterations; o2.length < c2; ) {
                  r3 && n2.update(r3), r3 = n2.update(e3).finalize(t3), n2.reset();
                  for (var l2 = 1; l2 < d2; l2++) r3 = n2.finalize(r3), n2.reset();
                  s2.concat(r3);
                }
                return s2.sigBytes = 4 * c2, s2;
              }
            }), a2.EvpKDF = function(e3, t3, r3) {
              return d.create(r3).compute(e3, t3);
            }, l.EvpKDF);
          },
          25: function(e2, t2, r2) {
            var a2, n, s, i;
            e2.exports = (i = r2(9021), r2(7165), n = (a2 = i).lib.CipherParams, s = a2.enc.Hex, a2.format.Hex = {
              stringify: function(e3) {
                return e3.ciphertext.toString(s);
              },
              parse: function(e3) {
                var t3 = s.parse(e3);
                return n.create({ ciphertext: t3 });
              }
            }, i.format.Hex);
          },
          1025: function(e2, t2, r2) {
            var a2, n, s, i;
            e2.exports = (a2 = r2(9021), s = (n = a2).lib.Base, i = n.enc.Utf8, void (n.algo.HMAC = s.extend({
              init: function(e3, t3) {
                e3 = this._hasher = new e3.init(), "string" == typeof t3 && (t3 = i.parse(t3));
                var r3 = e3.blockSize, a3 = 4 * r3;
                t3.sigBytes > a3 && (t3 = e3.finalize(t3)), t3.clamp();
                for (var n2 = this._oKey = t3.clone(), s2 = this._iKey = t3.clone(), o = n2.words, c = s2.words, d = 0; d < r3; d++)
                  o[d] ^= 1549556828, c[d] ^= 909522486;
                n2.sigBytes = s2.sigBytes = a3, this.reset();
              },
              reset: function() {
                var e3 = this._hasher;
                e3.reset(), e3.update(this._iKey);
              },
              update: function(e3) {
                return this._hasher.update(e3), this;
              },
              finalize: function(e3) {
                var t3 = this._hasher, r3 = t3.finalize(e3);
                return t3.reset(), t3.finalize(this._oKey.clone().concat(r3));
              }
            })));
          },
          1396: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(3240), r2(6440), r2(5503), r2(754), r2(4725), r2(4636), r2(5471), r2(3009), r2(6308), r2(1380), r2(9557), r2(5953), r2(8056), r2(1025), r2(19), r2(9506), r2(7165), r2(2169), r2(6939), r2(6372), r2(3797), r2(8454), r2(2073), r2(4905), r2(482), r2(2155), r2(8124), r2(25), r2(955), r2(7628), r2(7193), r2(6298), r2(2696), r2(3128), a2);
          },
          6440: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), function() {
              if ("function" == typeof ArrayBuffer) {
                var e3 = a2.lib.WordArray, t3 = e3.init, r3 = e3.init = function(e4) {
                  if (e4 instanceof ArrayBuffer && (e4 = new Uint8Array(e4)), (e4 instanceof Int8Array || "undefined" != typeof Uint8ClampedArray && e4 instanceof Uint8ClampedArray || e4 instanceof Int16Array || e4 instanceof Uint16Array || e4 instanceof Int32Array || e4 instanceof Uint32Array || e4 instanceof Float32Array || e4 instanceof Float64Array) && (e4 = new Uint8Array(
                    e4.buffer,
                    e4.byteOffset,
                    e4.byteLength
                  )), e4 instanceof Uint8Array) {
                    for (var r4 = e4.byteLength, a3 = [], n = 0; n < r4; n++)
                      a3[n >>> 2] |= e4[n] << 24 - n % 4 * 8;
                    t3.call(this, a3, r4);
                  } else t3.apply(this, arguments);
                };
                r3.prototype = e3;
              }
            }(), a2.lib.WordArray);
          },
          4636: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), function(e3) {
              var t3 = a2, r3 = t3.lib, n = r3.WordArray, s = r3.Hasher, i = t3.algo, o = [];
              !function() {
                for (var t4 = 0; t4 < 64; t4++)
                  o[t4] = 4294967296 * e3.abs(e3.sin(t4 + 1)) | 0;
              }();
              var c = i.MD5 = s.extend({
                _doReset: function() {
                  this._hash = new n.init([
                    1732584193,
                    4023233417,
                    2562383102,
                    271733878
                  ]);
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = 0; r4 < 16; r4++) {
                    var a3 = t4 + r4, n2 = e4[a3];
                    e4[a3] = 16711935 & (n2 << 8 | n2 >>> 24) | 4278255360 & (n2 << 24 | n2 >>> 8);
                  }
                  var s2 = this._hash.words, i2 = e4[t4 + 0], c2 = e4[t4 + 1], h = e4[t4 + 2], m = e4[t4 + 3], f = e4[t4 + 4], g = e4[t4 + 5], _ = e4[t4 + 6], v = e4[t4 + 7], b = e4[t4 + 8], y = e4[t4 + 9], w = e4[t4 + 10], S = e4[t4 + 11], R = e4[t4 + 12], E = e4[t4 + 13], k = e4[t4 + 14], T = e4[t4 + 15], C = s2[0], P = s2[1], O = s2[2], D = s2[3];
                  C = d(C, P, O, D, i2, 7, o[0]), D = d(D, C, P, O, c2, 12, o[1]), O = d(O, D, C, P, h, 17, o[2]), P = d(P, O, D, C, m, 22, o[3]), C = d(C, P, O, D, f, 7, o[4]), D = d(D, C, P, O, g, 12, o[5]), O = d(O, D, C, P, _, 17, o[6]), P = d(P, O, D, C, v, 22, o[7]), C = d(C, P, O, D, b, 7, o[8]), D = d(D, C, P, O, y, 12, o[9]), O = d(O, D, C, P, w, 17, o[10]), P = d(P, O, D, C, S, 22, o[11]), C = d(C, P, O, D, R, 7, o[12]), D = d(D, C, P, O, E, 12, o[13]), O = d(O, D, C, P, k, 17, o[14]), C = l(
                    C,
                    P = d(P, O, D, C, T, 22, o[15]),
                    O,
                    D,
                    c2,
                    5,
                    o[16]
                  ), D = l(D, C, P, O, _, 9, o[17]), O = l(O, D, C, P, S, 14, o[18]), P = l(P, O, D, C, i2, 20, o[19]), C = l(C, P, O, D, g, 5, o[20]), D = l(D, C, P, O, w, 9, o[21]), O = l(O, D, C, P, T, 14, o[22]), P = l(P, O, D, C, f, 20, o[23]), C = l(C, P, O, D, y, 5, o[24]), D = l(D, C, P, O, k, 9, o[25]), O = l(O, D, C, P, m, 14, o[26]), P = l(P, O, D, C, b, 20, o[27]), C = l(C, P, O, D, E, 5, o[28]), D = l(D, C, P, O, h, 9, o[29]), O = l(O, D, C, P, v, 14, o[30]), C = p(
                    C,
                    P = l(P, O, D, C, R, 20, o[31]),
                    O,
                    D,
                    g,
                    4,
                    o[32]
                  ), D = p(D, C, P, O, b, 11, o[33]), O = p(O, D, C, P, S, 16, o[34]), P = p(P, O, D, C, k, 23, o[35]), C = p(C, P, O, D, c2, 4, o[36]), D = p(D, C, P, O, f, 11, o[37]), O = p(O, D, C, P, v, 16, o[38]), P = p(P, O, D, C, w, 23, o[39]), C = p(C, P, O, D, E, 4, o[40]), D = p(D, C, P, O, i2, 11, o[41]), O = p(O, D, C, P, m, 16, o[42]), P = p(P, O, D, C, _, 23, o[43]), C = p(C, P, O, D, y, 4, o[44]), D = p(D, C, P, O, R, 11, o[45]), O = p(O, D, C, P, T, 16, o[46]), C = u(
                    C,
                    P = p(P, O, D, C, h, 23, o[47]),
                    O,
                    D,
                    i2,
                    6,
                    o[48]
                  ), D = u(D, C, P, O, v, 10, o[49]), O = u(O, D, C, P, k, 15, o[50]), P = u(P, O, D, C, g, 21, o[51]), C = u(C, P, O, D, R, 6, o[52]), D = u(D, C, P, O, m, 10, o[53]), O = u(O, D, C, P, w, 15, o[54]), P = u(P, O, D, C, c2, 21, o[55]), C = u(C, P, O, D, b, 6, o[56]), D = u(D, C, P, O, T, 10, o[57]), O = u(O, D, C, P, _, 15, o[58]), P = u(P, O, D, C, E, 21, o[59]), C = u(C, P, O, D, f, 6, o[60]), D = u(D, C, P, O, S, 10, o[61]), O = u(O, D, C, P, h, 15, o[62]), P = u(P, O, D, C, y, 21, o[63]), s2[0] = s2[0] + C | 0, s2[1] = s2[1] + P | 0, s2[2] = s2[2] + O | 0, s2[3] = s2[3] + D | 0;
                },
                _doFinalize: function() {
                  var t4 = this._data, r4 = t4.words, a3 = 8 * this._nDataBytes, n2 = 8 * t4.sigBytes;
                  r4[n2 >>> 5] |= 128 << 24 - n2 % 32;
                  var s2 = e3.floor(a3 / 4294967296), i2 = a3;
                  r4[15 + (n2 + 64 >>> 9 << 4)] = 16711935 & (s2 << 8 | s2 >>> 24) | 4278255360 & (s2 << 24 | s2 >>> 8), r4[14 + (n2 + 64 >>> 9 << 4)] = 16711935 & (i2 << 8 | i2 >>> 24) | 4278255360 & (i2 << 24 | i2 >>> 8), t4.sigBytes = 4 * (r4.length + 1), this._process();
                  for (var o2 = this._hash, c2 = o2.words, d2 = 0; d2 < 4; d2++) {
                    var l2 = c2[d2];
                    c2[d2] = 16711935 & (l2 << 8 | l2 >>> 24) | 4278255360 & (l2 << 24 | l2 >>> 8);
                  }
                  return o2;
                },
                clone: function() {
                  var e4 = s.clone.call(this);
                  return e4._hash = this._hash.clone(), e4;
                }
              });
              function d(e4, t4, r4, a3, n2, s2, i2) {
                var o2 = e4 + (t4 & r4 | ~t4 & a3) + n2 + i2;
                return (o2 << s2 | o2 >>> 32 - s2) + t4;
              }
              function l(e4, t4, r4, a3, n2, s2, i2) {
                var o2 = e4 + (t4 & a3 | r4 & ~a3) + n2 + i2;
                return (o2 << s2 | o2 >>> 32 - s2) + t4;
              }
              function p(e4, t4, r4, a3, n2, s2, i2) {
                var o2 = e4 + (t4 ^ r4 ^ a3) + n2 + i2;
                return (o2 << s2 | o2 >>> 32 - s2) + t4;
              }
              function u(e4, t4, r4, a3, n2, s2, i2) {
                var o2 = e4 + (r4 ^ (t4 | ~a3)) + n2 + i2;
                return (o2 << s2 | o2 >>> 32 - s2) + t4;
              }
              t3.MD5 = s._createHelper(c), t3.HmacMD5 = s._createHmacHelper(c);
            }(Math), a2.MD5);
          },
          2169: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(7165), a2.mode.CFB = function() {
              var e3 = a2.lib.BlockCipherMode.extend();
              function t3(e4, t4, r3, a3) {
                var n, s = this._iv;
                s ? (n = s.slice(0), this._iv = void 0) : n = this._prevBlock, a3.encryptBlock(n, 0);
                for (var i = 0; i < r3; i++) e4[t4 + i] ^= n[i];
              }
              return e3.Encryptor = e3.extend({
                processBlock: function(e4, r3) {
                  var a3 = this._cipher, n = a3.blockSize;
                  t3.call(this, e4, r3, n, a3), this._prevBlock = e4.slice(r3, r3 + n);
                }
              }), e3.Decryptor = e3.extend({
                processBlock: function(e4, r3) {
                  var a3 = this._cipher, n = a3.blockSize, s = e4.slice(r3, r3 + n);
                  t3.call(this, e4, r3, n, a3), this._prevBlock = s;
                }
              }), e3;
            }(), a2.mode.CFB);
          },
          6372: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(7165), a2.mode.CTRGladman = function() {
              var e3 = a2.lib.BlockCipherMode.extend();
              function t3(e4) {
                if (255 & ~(e4 >> 24)) e4 += 1 << 24;
                else {
                  var t4 = e4 >> 16 & 255, r4 = e4 >> 8 & 255, a3 = 255 & e4;
                  255 === t4 ? (t4 = 0, 255 === r4 ? (r4 = 0, 255 === a3 ? a3 = 0 : ++a3) : ++r4) : ++t4, e4 = 0, e4 += t4 << 16, e4 += r4 << 8, e4 += a3;
                }
                return e4;
              }
              function r3(e4) {
                return 0 === (e4[0] = t3(e4[0])) && (e4[1] = t3(e4[1])), e4;
              }
              var n = e3.Encryptor = e3.extend({
                processBlock: function(e4, t4) {
                  var a3 = this._cipher, n2 = a3.blockSize, s = this._iv, i = this._counter;
                  s && (i = this._counter = s.slice(0), this._iv = void 0), r3(i);
                  var o = i.slice(0);
                  a3.encryptBlock(o, 0);
                  for (var c = 0; c < n2; c++) e4[t4 + c] ^= o[c];
                }
              });
              return e3.Decryptor = n, e3;
            }(), a2.mode.CTRGladman);
          },
          6939: function(e2, t2, r2) {
            var a2, n, s;
            e2.exports = (s = r2(9021), r2(7165), s.mode.CTR = (a2 = s.lib.BlockCipherMode.extend(), n = a2.Encryptor = a2.extend({
              processBlock: function(e3, t3) {
                var r3 = this._cipher, a3 = r3.blockSize, n2 = this._iv, s2 = this._counter;
                n2 && (s2 = this._counter = n2.slice(0), this._iv = void 0);
                var i = s2.slice(0);
                r3.encryptBlock(i, 0), s2[a3 - 1] = s2[a3 - 1] + 1 | 0;
                for (var o = 0; o < a3; o++) e3[t3 + o] ^= i[o];
              }
            }), a2.Decryptor = n, a2), s.mode.CTR);
          },
          8454: function(e2, t2, r2) {
            var a2, n;
            e2.exports = (n = r2(9021), r2(7165), n.mode.ECB = ((a2 = n.lib.BlockCipherMode.extend()).Encryptor = a2.extend({
              processBlock: function(e3, t3) {
                this._cipher.encryptBlock(e3, t3);
              }
            }), a2.Decryptor = a2.extend({
              processBlock: function(e3, t3) {
                this._cipher.decryptBlock(e3, t3);
              }
            }), a2), n.mode.ECB);
          },
          3797: function(e2, t2, r2) {
            var a2, n, s;
            e2.exports = (s = r2(9021), r2(7165), s.mode.OFB = (a2 = s.lib.BlockCipherMode.extend(), n = a2.Encryptor = a2.extend({
              processBlock: function(e3, t3) {
                var r3 = this._cipher, a3 = r3.blockSize, n2 = this._iv, s2 = this._keystream;
                n2 && (s2 = this._keystream = n2.slice(0), this._iv = void 0), r3.encryptBlock(s2, 0);
                for (var i = 0; i < a3; i++) e3[t3 + i] ^= s2[i];
              }
            }), a2.Decryptor = n, a2), s.mode.OFB);
          },
          2073: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(7165), a2.pad.AnsiX923 = {
              pad: function(e3, t3) {
                var r3 = e3.sigBytes, a3 = 4 * t3, n = a3 - r3 % a3, s = r3 + n - 1;
                e3.clamp(), e3.words[s >>> 2] |= n << 24 - s % 4 * 8, e3.sigBytes += n;
              },
              unpad: function(e3) {
                var t3 = 255 & e3.words[e3.sigBytes - 1 >>> 2];
                e3.sigBytes -= t3;
              }
            }, a2.pad.Ansix923);
          },
          4905: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(7165), a2.pad.Iso10126 = {
              pad: function(e3, t3) {
                var r3 = 4 * t3, n = r3 - e3.sigBytes % r3;
                e3.concat(a2.lib.WordArray.random(n - 1)).concat(
                  a2.lib.WordArray.create([n << 24], 1)
                );
              },
              unpad: function(e3) {
                var t3 = 255 & e3.words[e3.sigBytes - 1 >>> 2];
                e3.sigBytes -= t3;
              }
            }, a2.pad.Iso10126);
          },
          482: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(7165), a2.pad.Iso97971 = {
              pad: function(e3, t3) {
                e3.concat(a2.lib.WordArray.create([2147483648], 1)), a2.pad.ZeroPadding.pad(e3, t3);
              },
              unpad: function(e3) {
                a2.pad.ZeroPadding.unpad(e3), e3.sigBytes--;
              }
            }, a2.pad.Iso97971);
          },
          8124: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(7165), a2.pad.NoPadding = { pad: function() {
            }, unpad: function() {
            } }, a2.pad.NoPadding);
          },
          2155: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(7165), a2.pad.ZeroPadding = {
              pad: function(e3, t3) {
                var r3 = 4 * t3;
                e3.clamp(), e3.sigBytes += r3 - (e3.sigBytes % r3 || r3);
              },
              unpad: function(e3) {
                var t3 = e3.words, r3 = e3.sigBytes - 1;
                for (r3 = e3.sigBytes - 1; r3 >= 0; r3--)
                  if (t3[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255) {
                    e3.sigBytes = r3 + 1;
                    break;
                  }
              }
            }, a2.pad.ZeroPadding);
          },
          19: function(e2, t2, r2) {
            var a2, n, s, i, o, c, d, l, p;
            e2.exports = (p = r2(9021), r2(3009), r2(1025), n = (a2 = p).lib, s = n.Base, i = n.WordArray, o = a2.algo, c = o.SHA256, d = o.HMAC, l = o.PBKDF2 = s.extend({
              cfg: s.extend({ keySize: 4, hasher: c, iterations: 25e4 }),
              init: function(e3) {
                this.cfg = this.cfg.extend(e3);
              },
              compute: function(e3, t3) {
                for (var r3 = this.cfg, a3 = d.create(r3.hasher, e3), n2 = i.create(), s2 = i.create([1]), o2 = n2.words, c2 = s2.words, l2 = r3.keySize, p2 = r3.iterations; o2.length < l2; ) {
                  var u = a3.update(t3).finalize(s2);
                  a3.reset();
                  for (var h = u.words, m = h.length, f = u, g = 1; g < p2; g++) {
                    f = a3.finalize(f), a3.reset();
                    for (var _ = f.words, v = 0; v < m; v++) h[v] ^= _[v];
                  }
                  n2.concat(u), c2[0]++;
                }
                return n2.sigBytes = 4 * l2, n2;
              }
            }), a2.PBKDF2 = function(e3, t3, r3) {
              return l.create(r3).compute(e3, t3);
            }, p.PBKDF2);
          },
          2696: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(754), r2(4636), r2(9506), r2(7165), function() {
              var e3 = a2, t3 = e3.lib.StreamCipher, r3 = e3.algo, n = [], s = [], i = [], o = r3.RabbitLegacy = t3.extend({
                _doReset: function() {
                  var e4 = this._key.words, t4 = this.cfg.iv, r4 = this._X = [
                    e4[0],
                    e4[3] << 16 | e4[2] >>> 16,
                    e4[1],
                    e4[0] << 16 | e4[3] >>> 16,
                    e4[2],
                    e4[1] << 16 | e4[0] >>> 16,
                    e4[3],
                    e4[2] << 16 | e4[1] >>> 16
                  ], a3 = this._C = [
                    e4[2] << 16 | e4[2] >>> 16,
                    4294901760 & e4[0] | 65535 & e4[1],
                    e4[3] << 16 | e4[3] >>> 16,
                    4294901760 & e4[1] | 65535 & e4[2],
                    e4[0] << 16 | e4[0] >>> 16,
                    4294901760 & e4[2] | 65535 & e4[3],
                    e4[1] << 16 | e4[1] >>> 16,
                    4294901760 & e4[3] | 65535 & e4[0]
                  ];
                  this._b = 0;
                  for (var n2 = 0; n2 < 4; n2++) c.call(this);
                  for (n2 = 0; n2 < 8; n2++) a3[n2] ^= r4[n2 + 4 & 7];
                  if (t4) {
                    var s2 = t4.words, i2 = s2[0], o2 = s2[1], d = 16711935 & (i2 << 8 | i2 >>> 24) | 4278255360 & (i2 << 24 | i2 >>> 8), l = 16711935 & (o2 << 8 | o2 >>> 24) | 4278255360 & (o2 << 24 | o2 >>> 8), p = d >>> 16 | 4294901760 & l, u = l << 16 | 65535 & d;
                    for (a3[0] ^= d, a3[1] ^= p, a3[2] ^= l, a3[3] ^= u, a3[4] ^= d, a3[5] ^= p, a3[6] ^= l, a3[7] ^= u, n2 = 0; n2 < 4; n2++)
                      c.call(this);
                  }
                },
                _doProcessBlock: function(e4, t4) {
                  var r4 = this._X;
                  c.call(this), n[0] = r4[0] ^ r4[5] >>> 16 ^ r4[3] << 16, n[1] = r4[2] ^ r4[7] >>> 16 ^ r4[5] << 16, n[2] = r4[4] ^ r4[1] >>> 16 ^ r4[7] << 16, n[3] = r4[6] ^ r4[3] >>> 16 ^ r4[1] << 16;
                  for (var a3 = 0; a3 < 4; a3++)
                    n[a3] = 16711935 & (n[a3] << 8 | n[a3] >>> 24) | 4278255360 & (n[a3] << 24 | n[a3] >>> 8), e4[t4 + a3] ^= n[a3];
                },
                blockSize: 4,
                ivSize: 2
              });
              function c() {
                for (var e4 = this._X, t4 = this._C, r4 = 0; r4 < 8; r4++)
                  s[r4] = t4[r4];
                for (t4[0] = t4[0] + 1295307597 + this._b | 0, t4[1] = t4[1] + 3545052371 + (t4[0] >>> 0 < s[0] >>> 0 ? 1 : 0) | 0, t4[2] = t4[2] + 886263092 + (t4[1] >>> 0 < s[1] >>> 0 ? 1 : 0) | 0, t4[3] = t4[3] + 1295307597 + (t4[2] >>> 0 < s[2] >>> 0 ? 1 : 0) | 0, t4[4] = t4[4] + 3545052371 + (t4[3] >>> 0 < s[3] >>> 0 ? 1 : 0) | 0, t4[5] = t4[5] + 886263092 + (t4[4] >>> 0 < s[4] >>> 0 ? 1 : 0) | 0, t4[6] = t4[6] + 1295307597 + (t4[5] >>> 0 < s[5] >>> 0 ? 1 : 0) | 0, t4[7] = t4[7] + 3545052371 + (t4[6] >>> 0 < s[6] >>> 0 ? 1 : 0) | 0, this._b = t4[7] >>> 0 < s[7] >>> 0 ? 1 : 0, r4 = 0; r4 < 8; r4++) {
                  var a3 = e4[r4] + t4[r4], n2 = 65535 & a3, o2 = a3 >>> 16, c2 = ((n2 * n2 >>> 17) + n2 * o2 >>> 15) + o2 * o2, d = ((4294901760 & a3) * a3 | 0) + ((65535 & a3) * a3 | 0);
                  i[r4] = c2 ^ d;
                }
                e4[0] = i[0] + (i[7] << 16 | i[7] >>> 16) + (i[6] << 16 | i[6] >>> 16) | 0, e4[1] = i[1] + (i[0] << 8 | i[0] >>> 24) + i[7] | 0, e4[2] = i[2] + (i[1] << 16 | i[1] >>> 16) + (i[0] << 16 | i[0] >>> 16) | 0, e4[3] = i[3] + (i[2] << 8 | i[2] >>> 24) + i[1] | 0, e4[4] = i[4] + (i[3] << 16 | i[3] >>> 16) + (i[2] << 16 | i[2] >>> 16) | 0, e4[5] = i[5] + (i[4] << 8 | i[4] >>> 24) + i[3] | 0, e4[6] = i[6] + (i[5] << 16 | i[5] >>> 16) + (i[4] << 16 | i[4] >>> 16) | 0, e4[7] = i[7] + (i[6] << 8 | i[6] >>> 24) + i[5] | 0;
              }
              e3.RabbitLegacy = t3._createHelper(o);
            }(), a2.RabbitLegacy);
          },
          6298: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(754), r2(4636), r2(9506), r2(7165), function() {
              var e3 = a2, t3 = e3.lib.StreamCipher, r3 = e3.algo, n = [], s = [], i = [], o = r3.Rabbit = t3.extend({
                _doReset: function() {
                  for (var e4 = this._key.words, t4 = this.cfg.iv, r4 = 0; r4 < 4; r4++)
                    e4[r4] = 16711935 & (e4[r4] << 8 | e4[r4] >>> 24) | 4278255360 & (e4[r4] << 24 | e4[r4] >>> 8);
                  var a3 = this._X = [
                    e4[0],
                    e4[3] << 16 | e4[2] >>> 16,
                    e4[1],
                    e4[0] << 16 | e4[3] >>> 16,
                    e4[2],
                    e4[1] << 16 | e4[0] >>> 16,
                    e4[3],
                    e4[2] << 16 | e4[1] >>> 16
                  ], n2 = this._C = [
                    e4[2] << 16 | e4[2] >>> 16,
                    4294901760 & e4[0] | 65535 & e4[1],
                    e4[3] << 16 | e4[3] >>> 16,
                    4294901760 & e4[1] | 65535 & e4[2],
                    e4[0] << 16 | e4[0] >>> 16,
                    4294901760 & e4[2] | 65535 & e4[3],
                    e4[1] << 16 | e4[1] >>> 16,
                    4294901760 & e4[3] | 65535 & e4[0]
                  ];
                  for (this._b = 0, r4 = 0; r4 < 4; r4++) c.call(this);
                  for (r4 = 0; r4 < 8; r4++) n2[r4] ^= a3[r4 + 4 & 7];
                  if (t4) {
                    var s2 = t4.words, i2 = s2[0], o2 = s2[1], d = 16711935 & (i2 << 8 | i2 >>> 24) | 4278255360 & (i2 << 24 | i2 >>> 8), l = 16711935 & (o2 << 8 | o2 >>> 24) | 4278255360 & (o2 << 24 | o2 >>> 8), p = d >>> 16 | 4294901760 & l, u = l << 16 | 65535 & d;
                    for (n2[0] ^= d, n2[1] ^= p, n2[2] ^= l, n2[3] ^= u, n2[4] ^= d, n2[5] ^= p, n2[6] ^= l, n2[7] ^= u, r4 = 0; r4 < 4; r4++)
                      c.call(this);
                  }
                },
                _doProcessBlock: function(e4, t4) {
                  var r4 = this._X;
                  c.call(this), n[0] = r4[0] ^ r4[5] >>> 16 ^ r4[3] << 16, n[1] = r4[2] ^ r4[7] >>> 16 ^ r4[5] << 16, n[2] = r4[4] ^ r4[1] >>> 16 ^ r4[7] << 16, n[3] = r4[6] ^ r4[3] >>> 16 ^ r4[1] << 16;
                  for (var a3 = 0; a3 < 4; a3++)
                    n[a3] = 16711935 & (n[a3] << 8 | n[a3] >>> 24) | 4278255360 & (n[a3] << 24 | n[a3] >>> 8), e4[t4 + a3] ^= n[a3];
                },
                blockSize: 4,
                ivSize: 2
              });
              function c() {
                for (var e4 = this._X, t4 = this._C, r4 = 0; r4 < 8; r4++)
                  s[r4] = t4[r4];
                for (t4[0] = t4[0] + 1295307597 + this._b | 0, t4[1] = t4[1] + 3545052371 + (t4[0] >>> 0 < s[0] >>> 0 ? 1 : 0) | 0, t4[2] = t4[2] + 886263092 + (t4[1] >>> 0 < s[1] >>> 0 ? 1 : 0) | 0, t4[3] = t4[3] + 1295307597 + (t4[2] >>> 0 < s[2] >>> 0 ? 1 : 0) | 0, t4[4] = t4[4] + 3545052371 + (t4[3] >>> 0 < s[3] >>> 0 ? 1 : 0) | 0, t4[5] = t4[5] + 886263092 + (t4[4] >>> 0 < s[4] >>> 0 ? 1 : 0) | 0, t4[6] = t4[6] + 1295307597 + (t4[5] >>> 0 < s[5] >>> 0 ? 1 : 0) | 0, t4[7] = t4[7] + 3545052371 + (t4[6] >>> 0 < s[6] >>> 0 ? 1 : 0) | 0, this._b = t4[7] >>> 0 < s[7] >>> 0 ? 1 : 0, r4 = 0; r4 < 8; r4++) {
                  var a3 = e4[r4] + t4[r4], n2 = 65535 & a3, o2 = a3 >>> 16, c2 = ((n2 * n2 >>> 17) + n2 * o2 >>> 15) + o2 * o2, d = ((4294901760 & a3) * a3 | 0) + ((65535 & a3) * a3 | 0);
                  i[r4] = c2 ^ d;
                }
                e4[0] = i[0] + (i[7] << 16 | i[7] >>> 16) + (i[6] << 16 | i[6] >>> 16) | 0, e4[1] = i[1] + (i[0] << 8 | i[0] >>> 24) + i[7] | 0, e4[2] = i[2] + (i[1] << 16 | i[1] >>> 16) + (i[0] << 16 | i[0] >>> 16) | 0, e4[3] = i[3] + (i[2] << 8 | i[2] >>> 24) + i[1] | 0, e4[4] = i[4] + (i[3] << 16 | i[3] >>> 16) + (i[2] << 16 | i[2] >>> 16) | 0, e4[5] = i[5] + (i[4] << 8 | i[4] >>> 24) + i[3] | 0, e4[6] = i[6] + (i[5] << 16 | i[5] >>> 16) + (i[4] << 16 | i[4] >>> 16) | 0, e4[7] = i[7] + (i[6] << 8 | i[6] >>> 24) + i[5] | 0;
              }
              e3.Rabbit = t3._createHelper(o);
            }(), a2.Rabbit);
          },
          7193: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(754), r2(4636), r2(9506), r2(7165), function() {
              var e3 = a2, t3 = e3.lib.StreamCipher, r3 = e3.algo, n = r3.RC4 = t3.extend({
                _doReset: function() {
                  for (var e4 = this._key, t4 = e4.words, r4 = e4.sigBytes, a3 = this._S = [], n2 = 0; n2 < 256; n2++)
                    a3[n2] = n2;
                  n2 = 0;
                  for (var s2 = 0; n2 < 256; n2++) {
                    var i2 = n2 % r4, o = t4[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                    s2 = (s2 + a3[n2] + o) % 256;
                    var c = a3[n2];
                    a3[n2] = a3[s2], a3[s2] = c;
                  }
                  this._i = this._j = 0;
                },
                _doProcessBlock: function(e4, t4) {
                  e4[t4] ^= s.call(this);
                },
                keySize: 8,
                ivSize: 0
              });
              function s() {
                for (var e4 = this._S, t4 = this._i, r4 = this._j, a3 = 0, n2 = 0; n2 < 4; n2++) {
                  r4 = (r4 + e4[t4 = (t4 + 1) % 256]) % 256;
                  var s2 = e4[t4];
                  e4[t4] = e4[r4], e4[r4] = s2, a3 |= e4[(e4[t4] + e4[r4]) % 256] << 24 - 8 * n2;
                }
                return this._i = t4, this._j = r4, a3;
              }
              e3.RC4 = t3._createHelper(n);
              var i = r3.RC4Drop = n.extend({
                cfg: n.cfg.extend({ drop: 192 }),
                _doReset: function() {
                  n._doReset.call(this);
                  for (var e4 = this.cfg.drop; e4 > 0; e4--) s.call(this);
                }
              });
              e3.RC4Drop = t3._createHelper(i);
            }(), a2.RC4);
          },
          8056: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), function() {
              var e3 = a2, t3 = e3.lib, r3 = t3.WordArray, n = t3.Hasher, s = e3.algo, i = r3.create([
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                7,
                4,
                13,
                1,
                10,
                6,
                15,
                3,
                12,
                0,
                9,
                5,
                2,
                14,
                11,
                8,
                3,
                10,
                14,
                4,
                9,
                15,
                8,
                1,
                2,
                7,
                0,
                6,
                13,
                11,
                5,
                12,
                1,
                9,
                11,
                10,
                0,
                8,
                12,
                4,
                13,
                3,
                7,
                15,
                14,
                5,
                6,
                2,
                4,
                0,
                5,
                9,
                7,
                12,
                2,
                10,
                14,
                1,
                3,
                8,
                11,
                6,
                15,
                13
              ]), o = r3.create([
                5,
                14,
                7,
                0,
                9,
                2,
                11,
                4,
                13,
                6,
                15,
                8,
                1,
                10,
                3,
                12,
                6,
                11,
                3,
                7,
                0,
                13,
                5,
                10,
                14,
                15,
                8,
                12,
                4,
                9,
                1,
                2,
                15,
                5,
                1,
                3,
                7,
                14,
                6,
                9,
                11,
                8,
                12,
                2,
                10,
                0,
                4,
                13,
                8,
                6,
                4,
                1,
                3,
                11,
                15,
                0,
                5,
                12,
                2,
                13,
                9,
                7,
                10,
                14,
                12,
                15,
                10,
                4,
                1,
                5,
                8,
                7,
                6,
                2,
                13,
                14,
                0,
                3,
                9,
                11
              ]), c = r3.create([
                11,
                14,
                15,
                12,
                5,
                8,
                7,
                9,
                11,
                13,
                14,
                15,
                6,
                7,
                9,
                8,
                7,
                6,
                8,
                13,
                11,
                9,
                7,
                15,
                7,
                12,
                15,
                9,
                11,
                7,
                13,
                12,
                11,
                13,
                6,
                7,
                14,
                9,
                13,
                15,
                14,
                8,
                13,
                6,
                5,
                12,
                7,
                5,
                11,
                12,
                14,
                15,
                14,
                15,
                9,
                8,
                9,
                14,
                5,
                6,
                8,
                6,
                5,
                12,
                9,
                15,
                5,
                11,
                6,
                8,
                13,
                12,
                5,
                12,
                13,
                14,
                11,
                8,
                5,
                6
              ]), d = r3.create([
                8,
                9,
                9,
                11,
                13,
                15,
                15,
                5,
                7,
                7,
                8,
                11,
                14,
                14,
                12,
                6,
                9,
                13,
                15,
                7,
                12,
                8,
                9,
                11,
                7,
                7,
                12,
                7,
                6,
                15,
                13,
                11,
                9,
                7,
                15,
                11,
                8,
                6,
                6,
                14,
                12,
                13,
                5,
                14,
                13,
                13,
                7,
                5,
                15,
                5,
                8,
                11,
                14,
                14,
                6,
                14,
                6,
                9,
                12,
                9,
                12,
                5,
                15,
                8,
                8,
                5,
                12,
                9,
                12,
                5,
                14,
                6,
                8,
                13,
                6,
                5,
                15,
                13,
                11,
                11
              ]), l = r3.create([
                0,
                1518500249,
                1859775393,
                2400959708,
                2840853838
              ]), p = r3.create([
                1352829926,
                1548603684,
                1836072691,
                2053994217,
                0
              ]), u = s.RIPEMD160 = n.extend({
                _doReset: function() {
                  this._hash = r3.create([
                    1732584193,
                    4023233417,
                    2562383102,
                    271733878,
                    3285377520
                  ]);
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = 0; r4 < 16; r4++) {
                    var a3 = t4 + r4, n2 = e4[a3];
                    e4[a3] = 16711935 & (n2 << 8 | n2 >>> 24) | 4278255360 & (n2 << 24 | n2 >>> 8);
                  }
                  var s2, u2, b, y, w, S, R, E, k, T, C, P = this._hash.words, O = l.words, D = p.words, x = i.words, I = o.words, M = c.words, A = d.words;
                  for (S = s2 = P[0], R = u2 = P[1], E = b = P[2], k = y = P[3], T = w = P[4], r4 = 0; r4 < 80; r4 += 1)
                    C = s2 + e4[t4 + x[r4]] | 0, C += r4 < 16 ? h(u2, b, y) + O[0] : r4 < 32 ? m(u2, b, y) + O[1] : r4 < 48 ? f(u2, b, y) + O[2] : r4 < 64 ? g(u2, b, y) + O[3] : _(u2, b, y) + O[4], C = (C = v(C |= 0, M[r4])) + w | 0, s2 = w, w = y, y = v(b, 10), b = u2, u2 = C, C = S + e4[t4 + I[r4]] | 0, C += r4 < 16 ? _(R, E, k) + D[0] : r4 < 32 ? g(R, E, k) + D[1] : r4 < 48 ? f(R, E, k) + D[2] : r4 < 64 ? m(R, E, k) + D[3] : h(R, E, k) + D[4], C = (C = v(C |= 0, A[r4])) + T | 0, S = T, T = k, k = v(E, 10), E = R, R = C;
                  C = P[1] + b + k | 0, P[1] = P[2] + y + T | 0, P[2] = P[3] + w + S | 0, P[3] = P[4] + s2 + R | 0, P[4] = P[0] + u2 + E | 0, P[0] = C;
                },
                _doFinalize: function() {
                  var e4 = this._data, t4 = e4.words, r4 = 8 * this._nDataBytes, a3 = 8 * e4.sigBytes;
                  t4[a3 >>> 5] |= 128 << 24 - a3 % 32, t4[14 + (a3 + 64 >>> 9 << 4)] = 16711935 & (r4 << 8 | r4 >>> 24) | 4278255360 & (r4 << 24 | r4 >>> 8), e4.sigBytes = 4 * (t4.length + 1), this._process();
                  for (var n2 = this._hash, s2 = n2.words, i2 = 0; i2 < 5; i2++) {
                    var o2 = s2[i2];
                    s2[i2] = 16711935 & (o2 << 8 | o2 >>> 24) | 4278255360 & (o2 << 24 | o2 >>> 8);
                  }
                  return n2;
                },
                clone: function() {
                  var e4 = n.clone.call(this);
                  return e4._hash = this._hash.clone(), e4;
                }
              });
              function h(e4, t4, r4) {
                return e4 ^ t4 ^ r4;
              }
              function m(e4, t4, r4) {
                return e4 & t4 | ~e4 & r4;
              }
              function f(e4, t4, r4) {
                return (e4 | ~t4) ^ r4;
              }
              function g(e4, t4, r4) {
                return e4 & r4 | t4 & ~r4;
              }
              function _(e4, t4, r4) {
                return e4 ^ (t4 | ~r4);
              }
              function v(e4, t4) {
                return e4 << t4 | e4 >>> 32 - t4;
              }
              e3.RIPEMD160 = n._createHelper(u), e3.HmacRIPEMD160 = n._createHmacHelper(u);
            }(Math), a2.RIPEMD160);
          },
          5471: function(e2, t2, r2) {
            var a2, n, s, i, o, c, d, l;
            e2.exports = (l = r2(9021), n = (a2 = l).lib, s = n.WordArray, i = n.Hasher, o = a2.algo, c = [], d = o.SHA1 = i.extend({
              _doReset: function() {
                this._hash = new s.init([
                  1732584193,
                  4023233417,
                  2562383102,
                  271733878,
                  3285377520
                ]);
              },
              _doProcessBlock: function(e3, t3) {
                for (var r3 = this._hash.words, a3 = r3[0], n2 = r3[1], s2 = r3[2], i2 = r3[3], o2 = r3[4], d2 = 0; d2 < 80; d2++) {
                  if (d2 < 16) c[d2] = 0 | e3[t3 + d2];
                  else {
                    var l2 = c[d2 - 3] ^ c[d2 - 8] ^ c[d2 - 14] ^ c[d2 - 16];
                    c[d2] = l2 << 1 | l2 >>> 31;
                  }
                  var p = (a3 << 5 | a3 >>> 27) + o2 + c[d2];
                  p += d2 < 20 ? 1518500249 + (n2 & s2 | ~n2 & i2) : d2 < 40 ? 1859775393 + (n2 ^ s2 ^ i2) : d2 < 60 ? (n2 & s2 | n2 & i2 | s2 & i2) - 1894007588 : (n2 ^ s2 ^ i2) - 899497514, o2 = i2, i2 = s2, s2 = n2 << 30 | n2 >>> 2, n2 = a3, a3 = p;
                }
                r3[0] = r3[0] + a3 | 0, r3[1] = r3[1] + n2 | 0, r3[2] = r3[2] + s2 | 0, r3[3] = r3[3] + i2 | 0, r3[4] = r3[4] + o2 | 0;
              },
              _doFinalize: function() {
                var e3 = this._data, t3 = e3.words, r3 = 8 * this._nDataBytes, a3 = 8 * e3.sigBytes;
                return t3[a3 >>> 5] |= 128 << 24 - a3 % 32, t3[14 + (a3 + 64 >>> 9 << 4)] = Math.floor(
                  r3 / 4294967296
                ), t3[15 + (a3 + 64 >>> 9 << 4)] = r3, e3.sigBytes = 4 * t3.length, this._process(), this._hash;
              },
              clone: function() {
                var e3 = i.clone.call(this);
                return e3._hash = this._hash.clone(), e3;
              }
            }), a2.SHA1 = i._createHelper(d), a2.HmacSHA1 = i._createHmacHelper(d), l.SHA1);
          },
          6308: function(e2, t2, r2) {
            var a2, n, s, i, o, c;
            e2.exports = (c = r2(9021), r2(3009), n = (a2 = c).lib.WordArray, s = a2.algo, i = s.SHA256, o = s.SHA224 = i.extend({
              _doReset: function() {
                this._hash = new n.init([
                  3238371032,
                  914150663,
                  812702999,
                  4144912697,
                  4290775857,
                  1750603025,
                  1694076839,
                  3204075428
                ]);
              },
              _doFinalize: function() {
                var e3 = i._doFinalize.call(this);
                return e3.sigBytes -= 4, e3;
              }
            }), a2.SHA224 = i._createHelper(o), a2.HmacSHA224 = i._createHmacHelper(o), c.SHA224);
          },
          3009: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), function(e3) {
              var t3 = a2, r3 = t3.lib, n = r3.WordArray, s = r3.Hasher, i = t3.algo, o = [], c = [];
              !function() {
                function t4(t5) {
                  for (var r5 = e3.sqrt(t5), a4 = 2; a4 <= r5; a4++)
                    if (!(t5 % a4)) return false;
                  return true;
                }
                function r4(e4) {
                  return 4294967296 * (e4 - (0 | e4)) | 0;
                }
                for (var a3 = 2, n2 = 0; n2 < 64; )
                  t4(a3) && (n2 < 8 && (o[n2] = r4(e3.pow(a3, 0.5))), c[n2] = r4(e3.pow(a3, 1 / 3)), n2++), a3++;
              }();
              var d = [], l = i.SHA256 = s.extend({
                _doReset: function() {
                  this._hash = new n.init(o.slice(0));
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = this._hash.words, a3 = r4[0], n2 = r4[1], s2 = r4[2], i2 = r4[3], o2 = r4[4], l2 = r4[5], p = r4[6], u = r4[7], h = 0; h < 64; h++) {
                    if (h < 16) d[h] = 0 | e4[t4 + h];
                    else {
                      var m = d[h - 15], f = (m << 25 | m >>> 7) ^ (m << 14 | m >>> 18) ^ m >>> 3, g = d[h - 2], _ = (g << 15 | g >>> 17) ^ (g << 13 | g >>> 19) ^ g >>> 10;
                      d[h] = f + d[h - 7] + _ + d[h - 16];
                    }
                    var v = a3 & n2 ^ a3 & s2 ^ n2 & s2, b = (a3 << 30 | a3 >>> 2) ^ (a3 << 19 | a3 >>> 13) ^ (a3 << 10 | a3 >>> 22), y = u + ((o2 << 26 | o2 >>> 6) ^ (o2 << 21 | o2 >>> 11) ^ (o2 << 7 | o2 >>> 25)) + (o2 & l2 ^ ~o2 & p) + c[h] + d[h];
                    u = p, p = l2, l2 = o2, o2 = i2 + y | 0, i2 = s2, s2 = n2, n2 = a3, a3 = y + (b + v) | 0;
                  }
                  r4[0] = r4[0] + a3 | 0, r4[1] = r4[1] + n2 | 0, r4[2] = r4[2] + s2 | 0, r4[3] = r4[3] + i2 | 0, r4[4] = r4[4] + o2 | 0, r4[5] = r4[5] + l2 | 0, r4[6] = r4[6] + p | 0, r4[7] = r4[7] + u | 0;
                },
                _doFinalize: function() {
                  var t4 = this._data, r4 = t4.words, a3 = 8 * this._nDataBytes, n2 = 8 * t4.sigBytes;
                  return r4[n2 >>> 5] |= 128 << 24 - n2 % 32, r4[14 + (n2 + 64 >>> 9 << 4)] = e3.floor(
                    a3 / 4294967296
                  ), r4[15 + (n2 + 64 >>> 9 << 4)] = a3, t4.sigBytes = 4 * r4.length, this._process(), this._hash;
                },
                clone: function() {
                  var e4 = s.clone.call(this);
                  return e4._hash = this._hash.clone(), e4;
                }
              });
              t3.SHA256 = s._createHelper(l), t3.HmacSHA256 = s._createHmacHelper(l);
            }(Math), a2.SHA256);
          },
          5953: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(3240), function(e3) {
              var t3 = a2, r3 = t3.lib, n = r3.WordArray, s = r3.Hasher, i = t3.x64.Word, o = t3.algo, c = [], d = [], l = [];
              !function() {
                for (var e4 = 1, t4 = 0, r4 = 0; r4 < 24; r4++) {
                  c[e4 + 5 * t4] = (r4 + 1) * (r4 + 2) / 2 % 64;
                  var a3 = (2 * e4 + 3 * t4) % 5;
                  e4 = t4 % 5, t4 = a3;
                }
                for (e4 = 0; e4 < 5; e4++)
                  for (t4 = 0; t4 < 5; t4++)
                    d[e4 + 5 * t4] = t4 + (2 * e4 + 3 * t4) % 5 * 5;
                for (var n2 = 1, s2 = 0; s2 < 24; s2++) {
                  for (var o2 = 0, p2 = 0, u2 = 0; u2 < 7; u2++) {
                    if (1 & n2) {
                      var h = (1 << u2) - 1;
                      h < 32 ? p2 ^= 1 << h : o2 ^= 1 << h - 32;
                    }
                    128 & n2 ? n2 = n2 << 1 ^ 113 : n2 <<= 1;
                  }
                  l[s2] = i.create(o2, p2);
                }
              }();
              var p = [];
              !function() {
                for (var e4 = 0; e4 < 25; e4++) p[e4] = i.create();
              }();
              var u = o.SHA3 = s.extend({
                cfg: s.cfg.extend({ outputLength: 512 }),
                _doReset: function() {
                  for (var e4 = this._state = [], t4 = 0; t4 < 25; t4++)
                    e4[t4] = new i.init();
                  this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = this._state, a3 = this.blockSize / 2, n2 = 0; n2 < a3; n2++) {
                    var s2 = e4[t4 + 2 * n2], i2 = e4[t4 + 2 * n2 + 1];
                    s2 = 16711935 & (s2 << 8 | s2 >>> 24) | 4278255360 & (s2 << 24 | s2 >>> 8), i2 = 16711935 & (i2 << 8 | i2 >>> 24) | 4278255360 & (i2 << 24 | i2 >>> 8), (P = r4[n2]).high ^= i2, P.low ^= s2;
                  }
                  for (var o2 = 0; o2 < 24; o2++) {
                    for (var u2 = 0; u2 < 5; u2++) {
                      for (var h = 0, m = 0, f = 0; f < 5; f++)
                        h ^= (P = r4[u2 + 5 * f]).high, m ^= P.low;
                      var g = p[u2];
                      g.high = h, g.low = m;
                    }
                    for (u2 = 0; u2 < 5; u2++) {
                      var _ = p[(u2 + 4) % 5], v = p[(u2 + 1) % 5], b = v.high, y = v.low;
                      for (h = _.high ^ (b << 1 | y >>> 31), m = _.low ^ (y << 1 | b >>> 31), f = 0; f < 5; f++)
                        (P = r4[u2 + 5 * f]).high ^= h, P.low ^= m;
                    }
                    for (var w = 1; w < 25; w++) {
                      var S = (P = r4[w]).high, R = P.low, E = c[w];
                      E < 32 ? (h = S << E | R >>> 32 - E, m = R << E | S >>> 32 - E) : (h = R << E - 32 | S >>> 64 - E, m = S << E - 32 | R >>> 64 - E);
                      var k = p[d[w]];
                      k.high = h, k.low = m;
                    }
                    var T = p[0], C = r4[0];
                    for (T.high = C.high, T.low = C.low, u2 = 0; u2 < 5; u2++)
                      for (f = 0; f < 5; f++) {
                        var P = r4[w = u2 + 5 * f], O = p[w], D = p[(u2 + 1) % 5 + 5 * f], x = p[(u2 + 2) % 5 + 5 * f];
                        P.high = O.high ^ ~D.high & x.high, P.low = O.low ^ ~D.low & x.low;
                      }
                    P = r4[0];
                    var I = l[o2];
                    P.high ^= I.high, P.low ^= I.low;
                  }
                },
                _doFinalize: function() {
                  var t4 = this._data, r4 = t4.words, a3 = (this._nDataBytes, 8 * t4.sigBytes), s2 = 32 * this.blockSize;
                  r4[a3 >>> 5] |= 1 << 24 - a3 % 32, r4[(e3.ceil((a3 + 1) / s2) * s2 >>> 5) - 1] |= 128, t4.sigBytes = 4 * r4.length, this._process();
                  for (var i2 = this._state, o2 = this.cfg.outputLength / 8, c2 = o2 / 8, d2 = [], l2 = 0; l2 < c2; l2++) {
                    var p2 = i2[l2], u2 = p2.high, h = p2.low;
                    u2 = 16711935 & (u2 << 8 | u2 >>> 24) | 4278255360 & (u2 << 24 | u2 >>> 8), h = 16711935 & (h << 8 | h >>> 24) | 4278255360 & (h << 24 | h >>> 8), d2.push(h), d2.push(u2);
                  }
                  return new n.init(d2, o2);
                },
                clone: function() {
                  for (var e4 = s.clone.call(this), t4 = e4._state = this._state.slice(0), r4 = 0; r4 < 25; r4++)
                    t4[r4] = t4[r4].clone();
                  return e4;
                }
              });
              t3.SHA3 = s._createHelper(u), t3.HmacSHA3 = s._createHmacHelper(u);
            }(Math), a2.SHA3);
          },
          9557: function(e2, t2, r2) {
            var a2, n, s, i, o, c, d, l;
            e2.exports = (l = r2(9021), r2(3240), r2(1380), n = (a2 = l).x64, s = n.Word, i = n.WordArray, o = a2.algo, c = o.SHA512, d = o.SHA384 = c.extend({
              _doReset: function() {
                this._hash = new i.init([
                  new s.init(3418070365, 3238371032),
                  new s.init(1654270250, 914150663),
                  new s.init(2438529370, 812702999),
                  new s.init(355462360, 4144912697),
                  new s.init(1731405415, 4290775857),
                  new s.init(2394180231, 1750603025),
                  new s.init(3675008525, 1694076839),
                  new s.init(1203062813, 3204075428)
                ]);
              },
              _doFinalize: function() {
                var e3 = c._doFinalize.call(this);
                return e3.sigBytes -= 16, e3;
              }
            }), a2.SHA384 = c._createHelper(d), a2.HmacSHA384 = c._createHmacHelper(d), l.SHA384);
          },
          1380: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(3240), function() {
              var e3 = a2, t3 = e3.lib.Hasher, r3 = e3.x64, n = r3.Word, s = r3.WordArray, i = e3.algo;
              function o() {
                return n.create.apply(n, arguments);
              }
              var c = [
                o(1116352408, 3609767458),
                o(1899447441, 602891725),
                o(3049323471, 3964484399),
                o(3921009573, 2173295548),
                o(961987163, 4081628472),
                o(1508970993, 3053834265),
                o(2453635748, 2937671579),
                o(2870763221, 3664609560),
                o(3624381080, 2734883394),
                o(310598401, 1164996542),
                o(607225278, 1323610764),
                o(1426881987, 3590304994),
                o(1925078388, 4068182383),
                o(2162078206, 991336113),
                o(2614888103, 633803317),
                o(3248222580, 3479774868),
                o(3835390401, 2666613458),
                o(4022224774, 944711139),
                o(264347078, 2341262773),
                o(604807628, 2007800933),
                o(770255983, 1495990901),
                o(1249150122, 1856431235),
                o(1555081692, 3175218132),
                o(1996064986, 2198950837),
                o(2554220882, 3999719339),
                o(2821834349, 766784016),
                o(2952996808, 2566594879),
                o(3210313671, 3203337956),
                o(3336571891, 1034457026),
                o(3584528711, 2466948901),
                o(113926993, 3758326383),
                o(338241895, 168717936),
                o(666307205, 1188179964),
                o(773529912, 1546045734),
                o(1294757372, 1522805485),
                o(1396182291, 2643833823),
                o(1695183700, 2343527390),
                o(1986661051, 1014477480),
                o(2177026350, 1206759142),
                o(2456956037, 344077627),
                o(2730485921, 1290863460),
                o(2820302411, 3158454273),
                o(3259730800, 3505952657),
                o(3345764771, 106217008),
                o(3516065817, 3606008344),
                o(3600352804, 1432725776),
                o(4094571909, 1467031594),
                o(275423344, 851169720),
                o(430227734, 3100823752),
                o(506948616, 1363258195),
                o(659060556, 3750685593),
                o(883997877, 3785050280),
                o(958139571, 3318307427),
                o(1322822218, 3812723403),
                o(1537002063, 2003034995),
                o(1747873779, 3602036899),
                o(1955562222, 1575990012),
                o(2024104815, 1125592928),
                o(2227730452, 2716904306),
                o(2361852424, 442776044),
                o(2428436474, 593698344),
                o(2756734187, 3733110249),
                o(3204031479, 2999351573),
                o(3329325298, 3815920427),
                o(3391569614, 3928383900),
                o(3515267271, 566280711),
                o(3940187606, 3454069534),
                o(4118630271, 4000239992),
                o(116418474, 1914138554),
                o(174292421, 2731055270),
                o(289380356, 3203993006),
                o(460393269, 320620315),
                o(685471733, 587496836),
                o(852142971, 1086792851),
                o(1017036298, 365543100),
                o(1126000580, 2618297676),
                o(1288033470, 3409855158),
                o(1501505948, 4234509866),
                o(1607167915, 987167468),
                o(1816402316, 1246189591)
              ], d = [];
              !function() {
                for (var e4 = 0; e4 < 80; e4++) d[e4] = o();
              }();
              var l = i.SHA512 = t3.extend({
                _doReset: function() {
                  this._hash = new s.init([
                    new n.init(1779033703, 4089235720),
                    new n.init(3144134277, 2227873595),
                    new n.init(1013904242, 4271175723),
                    new n.init(2773480762, 1595750129),
                    new n.init(1359893119, 2917565137),
                    new n.init(2600822924, 725511199),
                    new n.init(528734635, 4215389547),
                    new n.init(1541459225, 327033209)
                  ]);
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = this._hash.words, a3 = r4[0], n2 = r4[1], s2 = r4[2], i2 = r4[3], o2 = r4[4], l2 = r4[5], p = r4[6], u = r4[7], h = a3.high, m = a3.low, f = n2.high, g = n2.low, _ = s2.high, v = s2.low, b = i2.high, y = i2.low, w = o2.high, S = o2.low, R = l2.high, E = l2.low, k = p.high, T = p.low, C = u.high, P = u.low, O = h, D = m, x = f, I = g, M = _, A = v, L = b, N = y, j = w, B = S, F = R, U = E, W = k, q = T, H = C, V = P, G = 0; G < 80; G++) {
                    var z, $, K = d[G];
                    if (G < 16)
                      $ = K.high = 0 | e4[t4 + 2 * G], z = K.low = 0 | e4[t4 + 2 * G + 1];
                    else {
                      var J = d[G - 15], Q = J.high, Y = J.low, X = (Q >>> 1 | Y << 31) ^ (Q >>> 8 | Y << 24) ^ Q >>> 7, Z = (Y >>> 1 | Q << 31) ^ (Y >>> 8 | Q << 24) ^ (Y >>> 7 | Q << 25), ee = d[G - 2], te = ee.high, re = ee.low, ae = (te >>> 19 | re << 13) ^ (te << 3 | re >>> 29) ^ te >>> 6, ne = (re >>> 19 | te << 13) ^ (re << 3 | te >>> 29) ^ (re >>> 6 | te << 26), se = d[G - 7], ie = se.high, oe = se.low, ce = d[G - 16], de = ce.high, le = ce.low;
                      $ = ($ = ($ = X + ie + ((z = Z + oe) >>> 0 < Z >>> 0 ? 1 : 0)) + ae + ((z += ne) >>> 0 < ne >>> 0 ? 1 : 0)) + de + ((z += le) >>> 0 < le >>> 0 ? 1 : 0), K.high = $, K.low = z;
                    }
                    var pe, ue = j & F ^ ~j & W, he = B & U ^ ~B & q, me = O & x ^ O & M ^ x & M, fe = D & I ^ D & A ^ I & A, ge = (O >>> 28 | D << 4) ^ (O << 30 | D >>> 2) ^ (O << 25 | D >>> 7), _e = (D >>> 28 | O << 4) ^ (D << 30 | O >>> 2) ^ (D << 25 | O >>> 7), ve = (j >>> 14 | B << 18) ^ (j >>> 18 | B << 14) ^ (j << 23 | B >>> 9), be = (B >>> 14 | j << 18) ^ (B >>> 18 | j << 14) ^ (B << 23 | j >>> 9), ye = c[G], we = ye.high, Se = ye.low, Re = H + ve + ((pe = V + be) >>> 0 < V >>> 0 ? 1 : 0), Ee = _e + fe;
                    H = W, V = q, W = F, q = U, F = j, U = B, j = L + (Re = (Re = (Re = Re + ue + ((pe += he) >>> 0 < he >>> 0 ? 1 : 0)) + we + ((pe += Se) >>> 0 < Se >>> 0 ? 1 : 0)) + $ + ((pe += z) >>> 0 < z >>> 0 ? 1 : 0)) + ((B = N + pe | 0) >>> 0 < N >>> 0 ? 1 : 0) | 0, L = M, N = A, M = x, A = I, x = O, I = D, O = Re + (ge + me + (Ee >>> 0 < _e >>> 0 ? 1 : 0)) + ((D = pe + Ee | 0) >>> 0 < pe >>> 0 ? 1 : 0) | 0;
                  }
                  m = a3.low = m + D, a3.high = h + O + (m >>> 0 < D >>> 0 ? 1 : 0), g = n2.low = g + I, n2.high = f + x + (g >>> 0 < I >>> 0 ? 1 : 0), v = s2.low = v + A, s2.high = _ + M + (v >>> 0 < A >>> 0 ? 1 : 0), y = i2.low = y + N, i2.high = b + L + (y >>> 0 < N >>> 0 ? 1 : 0), S = o2.low = S + B, o2.high = w + j + (S >>> 0 < B >>> 0 ? 1 : 0), E = l2.low = E + U, l2.high = R + F + (E >>> 0 < U >>> 0 ? 1 : 0), T = p.low = T + q, p.high = k + W + (T >>> 0 < q >>> 0 ? 1 : 0), P = u.low = P + V, u.high = C + H + (P >>> 0 < V >>> 0 ? 1 : 0);
                },
                _doFinalize: function() {
                  var e4 = this._data, t4 = e4.words, r4 = 8 * this._nDataBytes, a3 = 8 * e4.sigBytes;
                  return t4[a3 >>> 5] |= 128 << 24 - a3 % 32, t4[30 + (a3 + 128 >>> 10 << 5)] = Math.floor(
                    r4 / 4294967296
                  ), t4[31 + (a3 + 128 >>> 10 << 5)] = r4, e4.sigBytes = 4 * t4.length, this._process(), this._hash.toX32();
                },
                clone: function() {
                  var e4 = t3.clone.call(this);
                  return e4._hash = this._hash.clone(), e4;
                },
                blockSize: 32
              });
              e3.SHA512 = t3._createHelper(l), e3.HmacSHA512 = t3._createHmacHelper(l);
            }(), a2.SHA512);
          },
          7628: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), r2(754), r2(4636), r2(9506), r2(7165), function() {
              var e3 = a2, t3 = e3.lib, r3 = t3.WordArray, n = t3.BlockCipher, s = e3.algo, i = [
                57,
                49,
                41,
                33,
                25,
                17,
                9,
                1,
                58,
                50,
                42,
                34,
                26,
                18,
                10,
                2,
                59,
                51,
                43,
                35,
                27,
                19,
                11,
                3,
                60,
                52,
                44,
                36,
                63,
                55,
                47,
                39,
                31,
                23,
                15,
                7,
                62,
                54,
                46,
                38,
                30,
                22,
                14,
                6,
                61,
                53,
                45,
                37,
                29,
                21,
                13,
                5,
                28,
                20,
                12,
                4
              ], o = [
                14,
                17,
                11,
                24,
                1,
                5,
                3,
                28,
                15,
                6,
                21,
                10,
                23,
                19,
                12,
                4,
                26,
                8,
                16,
                7,
                27,
                20,
                13,
                2,
                41,
                52,
                31,
                37,
                47,
                55,
                30,
                40,
                51,
                45,
                33,
                48,
                44,
                49,
                39,
                56,
                34,
                53,
                46,
                42,
                50,
                36,
                29,
                32
              ], c = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28], d = [
                {
                  0: 8421888,
                  268435456: 32768,
                  536870912: 8421378,
                  805306368: 2,
                  1073741824: 512,
                  1342177280: 8421890,
                  1610612736: 8389122,
                  1879048192: 8388608,
                  2147483648: 514,
                  2415919104: 8389120,
                  2684354560: 33280,
                  2952790016: 8421376,
                  3221225472: 32770,
                  3489660928: 8388610,
                  3758096384: 0,
                  4026531840: 33282,
                  134217728: 0,
                  402653184: 8421890,
                  671088640: 33282,
                  939524096: 32768,
                  1207959552: 8421888,
                  1476395008: 512,
                  1744830464: 8421378,
                  2013265920: 2,
                  2281701376: 8389120,
                  2550136832: 33280,
                  2818572288: 8421376,
                  3087007744: 8389122,
                  3355443200: 8388610,
                  3623878656: 32770,
                  3892314112: 514,
                  4160749568: 8388608,
                  1: 32768,
                  268435457: 2,
                  536870913: 8421888,
                  805306369: 8388608,
                  1073741825: 8421378,
                  1342177281: 33280,
                  1610612737: 512,
                  1879048193: 8389122,
                  2147483649: 8421890,
                  2415919105: 8421376,
                  2684354561: 8388610,
                  2952790017: 33282,
                  3221225473: 514,
                  3489660929: 8389120,
                  3758096385: 32770,
                  4026531841: 0,
                  134217729: 8421890,
                  402653185: 8421376,
                  671088641: 8388608,
                  939524097: 512,
                  1207959553: 32768,
                  1476395009: 8388610,
                  1744830465: 2,
                  2013265921: 33282,
                  2281701377: 32770,
                  2550136833: 8389122,
                  2818572289: 514,
                  3087007745: 8421888,
                  3355443201: 8389120,
                  3623878657: 0,
                  3892314113: 33280,
                  4160749569: 8421378
                },
                {
                  0: 1074282512,
                  16777216: 16384,
                  33554432: 524288,
                  50331648: 1074266128,
                  67108864: 1073741840,
                  83886080: 1074282496,
                  100663296: 1073758208,
                  117440512: 16,
                  134217728: 540672,
                  150994944: 1073758224,
                  167772160: 1073741824,
                  184549376: 540688,
                  201326592: 524304,
                  218103808: 0,
                  234881024: 16400,
                  251658240: 1074266112,
                  8388608: 1073758208,
                  25165824: 540688,
                  41943040: 16,
                  58720256: 1073758224,
                  75497472: 1074282512,
                  92274688: 1073741824,
                  109051904: 524288,
                  125829120: 1074266128,
                  142606336: 524304,
                  159383552: 0,
                  176160768: 16384,
                  192937984: 1074266112,
                  209715200: 1073741840,
                  226492416: 540672,
                  243269632: 1074282496,
                  260046848: 16400,
                  268435456: 0,
                  285212672: 1074266128,
                  301989888: 1073758224,
                  318767104: 1074282496,
                  335544320: 1074266112,
                  352321536: 16,
                  369098752: 540688,
                  385875968: 16384,
                  402653184: 16400,
                  419430400: 524288,
                  436207616: 524304,
                  452984832: 1073741840,
                  469762048: 540672,
                  486539264: 1073758208,
                  503316480: 1073741824,
                  520093696: 1074282512,
                  276824064: 540688,
                  293601280: 524288,
                  310378496: 1074266112,
                  327155712: 16384,
                  343932928: 1073758208,
                  360710144: 1074282512,
                  377487360: 16,
                  394264576: 1073741824,
                  411041792: 1074282496,
                  427819008: 1073741840,
                  444596224: 1073758224,
                  461373440: 524304,
                  478150656: 0,
                  494927872: 16400,
                  511705088: 1074266128,
                  528482304: 540672
                },
                {
                  0: 260,
                  1048576: 0,
                  2097152: 67109120,
                  3145728: 65796,
                  4194304: 65540,
                  5242880: 67108868,
                  6291456: 67174660,
                  7340032: 67174400,
                  8388608: 67108864,
                  9437184: 67174656,
                  10485760: 65792,
                  11534336: 67174404,
                  12582912: 67109124,
                  13631488: 65536,
                  14680064: 4,
                  15728640: 256,
                  524288: 67174656,
                  1572864: 67174404,
                  2621440: 0,
                  3670016: 67109120,
                  4718592: 67108868,
                  5767168: 65536,
                  6815744: 65540,
                  7864320: 260,
                  8912896: 4,
                  9961472: 256,
                  11010048: 67174400,
                  12058624: 65796,
                  13107200: 65792,
                  14155776: 67109124,
                  15204352: 67174660,
                  16252928: 67108864,
                  16777216: 67174656,
                  17825792: 65540,
                  18874368: 65536,
                  19922944: 67109120,
                  20971520: 256,
                  22020096: 67174660,
                  23068672: 67108868,
                  24117248: 0,
                  25165824: 67109124,
                  26214400: 67108864,
                  27262976: 4,
                  28311552: 65792,
                  29360128: 67174400,
                  30408704: 260,
                  31457280: 65796,
                  32505856: 67174404,
                  17301504: 67108864,
                  18350080: 260,
                  19398656: 67174656,
                  20447232: 0,
                  21495808: 65540,
                  22544384: 67109120,
                  23592960: 256,
                  24641536: 67174404,
                  25690112: 65536,
                  26738688: 67174660,
                  27787264: 65796,
                  28835840: 67108868,
                  29884416: 67109124,
                  30932992: 67174400,
                  31981568: 4,
                  33030144: 65792
                },
                {
                  0: 2151682048,
                  65536: 2147487808,
                  131072: 4198464,
                  196608: 2151677952,
                  262144: 0,
                  327680: 4198400,
                  393216: 2147483712,
                  458752: 4194368,
                  524288: 2147483648,
                  589824: 4194304,
                  655360: 64,
                  720896: 2147487744,
                  786432: 2151678016,
                  851968: 4160,
                  917504: 4096,
                  983040: 2151682112,
                  32768: 2147487808,
                  98304: 64,
                  163840: 2151678016,
                  229376: 2147487744,
                  294912: 4198400,
                  360448: 2151682112,
                  425984: 0,
                  491520: 2151677952,
                  557056: 4096,
                  622592: 2151682048,
                  688128: 4194304,
                  753664: 4160,
                  819200: 2147483648,
                  884736: 4194368,
                  950272: 4198464,
                  1015808: 2147483712,
                  1048576: 4194368,
                  1114112: 4198400,
                  1179648: 2147483712,
                  1245184: 0,
                  1310720: 4160,
                  1376256: 2151678016,
                  1441792: 2151682048,
                  1507328: 2147487808,
                  1572864: 2151682112,
                  1638400: 2147483648,
                  1703936: 2151677952,
                  1769472: 4198464,
                  1835008: 2147487744,
                  1900544: 4194304,
                  1966080: 64,
                  2031616: 4096,
                  1081344: 2151677952,
                  1146880: 2151682112,
                  1212416: 0,
                  1277952: 4198400,
                  1343488: 4194368,
                  1409024: 2147483648,
                  1474560: 2147487808,
                  1540096: 64,
                  1605632: 2147483712,
                  1671168: 4096,
                  1736704: 2147487744,
                  1802240: 2151678016,
                  1867776: 4160,
                  1933312: 2151682048,
                  1998848: 4194304,
                  2064384: 4198464
                },
                {
                  0: 128,
                  4096: 17039360,
                  8192: 262144,
                  12288: 536870912,
                  16384: 537133184,
                  20480: 16777344,
                  24576: 553648256,
                  28672: 262272,
                  32768: 16777216,
                  36864: 537133056,
                  40960: 536871040,
                  45056: 553910400,
                  49152: 553910272,
                  53248: 0,
                  57344: 17039488,
                  61440: 553648128,
                  2048: 17039488,
                  6144: 553648256,
                  10240: 128,
                  14336: 17039360,
                  18432: 262144,
                  22528: 537133184,
                  26624: 553910272,
                  30720: 536870912,
                  34816: 537133056,
                  38912: 0,
                  43008: 553910400,
                  47104: 16777344,
                  51200: 536871040,
                  55296: 553648128,
                  59392: 16777216,
                  63488: 262272,
                  65536: 262144,
                  69632: 128,
                  73728: 536870912,
                  77824: 553648256,
                  81920: 16777344,
                  86016: 553910272,
                  90112: 537133184,
                  94208: 16777216,
                  98304: 553910400,
                  102400: 553648128,
                  106496: 17039360,
                  110592: 537133056,
                  114688: 262272,
                  118784: 536871040,
                  122880: 0,
                  126976: 17039488,
                  67584: 553648256,
                  71680: 16777216,
                  75776: 17039360,
                  79872: 537133184,
                  83968: 536870912,
                  88064: 17039488,
                  92160: 128,
                  96256: 553910272,
                  100352: 262272,
                  104448: 553910400,
                  108544: 0,
                  112640: 553648128,
                  116736: 16777344,
                  120832: 262144,
                  124928: 537133056,
                  129024: 536871040
                },
                {
                  0: 268435464,
                  256: 8192,
                  512: 270532608,
                  768: 270540808,
                  1024: 268443648,
                  1280: 2097152,
                  1536: 2097160,
                  1792: 268435456,
                  2048: 0,
                  2304: 268443656,
                  2560: 2105344,
                  2816: 8,
                  3072: 270532616,
                  3328: 2105352,
                  3584: 8200,
                  3840: 270540800,
                  128: 270532608,
                  384: 270540808,
                  640: 8,
                  896: 2097152,
                  1152: 2105352,
                  1408: 268435464,
                  1664: 268443648,
                  1920: 8200,
                  2176: 2097160,
                  2432: 8192,
                  2688: 268443656,
                  2944: 270532616,
                  3200: 0,
                  3456: 270540800,
                  3712: 2105344,
                  3968: 268435456,
                  4096: 268443648,
                  4352: 270532616,
                  4608: 270540808,
                  4864: 8200,
                  5120: 2097152,
                  5376: 268435456,
                  5632: 268435464,
                  5888: 2105344,
                  6144: 2105352,
                  6400: 0,
                  6656: 8,
                  6912: 270532608,
                  7168: 8192,
                  7424: 268443656,
                  7680: 270540800,
                  7936: 2097160,
                  4224: 8,
                  4480: 2105344,
                  4736: 2097152,
                  4992: 268435464,
                  5248: 268443648,
                  5504: 8200,
                  5760: 270540808,
                  6016: 270532608,
                  6272: 270540800,
                  6528: 270532616,
                  6784: 8192,
                  7040: 2105352,
                  7296: 2097160,
                  7552: 0,
                  7808: 268435456,
                  8064: 268443656
                },
                {
                  0: 1048576,
                  16: 33555457,
                  32: 1024,
                  48: 1049601,
                  64: 34604033,
                  80: 0,
                  96: 1,
                  112: 34603009,
                  128: 33555456,
                  144: 1048577,
                  160: 33554433,
                  176: 34604032,
                  192: 34603008,
                  208: 1025,
                  224: 1049600,
                  240: 33554432,
                  8: 34603009,
                  24: 0,
                  40: 33555457,
                  56: 34604032,
                  72: 1048576,
                  88: 33554433,
                  104: 33554432,
                  120: 1025,
                  136: 1049601,
                  152: 33555456,
                  168: 34603008,
                  184: 1048577,
                  200: 1024,
                  216: 34604033,
                  232: 1,
                  248: 1049600,
                  256: 33554432,
                  272: 1048576,
                  288: 33555457,
                  304: 34603009,
                  320: 1048577,
                  336: 33555456,
                  352: 34604032,
                  368: 1049601,
                  384: 1025,
                  400: 34604033,
                  416: 1049600,
                  432: 1,
                  448: 0,
                  464: 34603008,
                  480: 33554433,
                  496: 1024,
                  264: 1049600,
                  280: 33555457,
                  296: 34603009,
                  312: 1,
                  328: 33554432,
                  344: 1048576,
                  360: 1025,
                  376: 34604032,
                  392: 33554433,
                  408: 34603008,
                  424: 0,
                  440: 34604033,
                  456: 1049601,
                  472: 1024,
                  488: 33555456,
                  504: 1048577
                },
                {
                  0: 134219808,
                  1: 131072,
                  2: 134217728,
                  3: 32,
                  4: 131104,
                  5: 134350880,
                  6: 134350848,
                  7: 2048,
                  8: 134348800,
                  9: 134219776,
                  10: 133120,
                  11: 134348832,
                  12: 2080,
                  13: 0,
                  14: 134217760,
                  15: 133152,
                  2147483648: 2048,
                  2147483649: 134350880,
                  2147483650: 134219808,
                  2147483651: 134217728,
                  2147483652: 134348800,
                  2147483653: 133120,
                  2147483654: 133152,
                  2147483655: 32,
                  2147483656: 134217760,
                  2147483657: 2080,
                  2147483658: 131104,
                  2147483659: 134350848,
                  2147483660: 0,
                  2147483661: 134348832,
                  2147483662: 134219776,
                  2147483663: 131072,
                  16: 133152,
                  17: 134350848,
                  18: 32,
                  19: 2048,
                  20: 134219776,
                  21: 134217760,
                  22: 134348832,
                  23: 131072,
                  24: 0,
                  25: 131104,
                  26: 134348800,
                  27: 134219808,
                  28: 134350880,
                  29: 133120,
                  30: 2080,
                  31: 134217728,
                  2147483664: 131072,
                  2147483665: 2048,
                  2147483666: 134348832,
                  2147483667: 133152,
                  2147483668: 32,
                  2147483669: 134348800,
                  2147483670: 134217728,
                  2147483671: 134219808,
                  2147483672: 134350880,
                  2147483673: 134217760,
                  2147483674: 134219776,
                  2147483675: 0,
                  2147483676: 133120,
                  2147483677: 2080,
                  2147483678: 131104,
                  2147483679: 134350848
                }
              ], l = [
                4160749569,
                528482304,
                33030144,
                2064384,
                129024,
                8064,
                504,
                2147483679
              ], p = s.DES = n.extend({
                _doReset: function() {
                  for (var e4 = this._key.words, t4 = [], r4 = 0; r4 < 56; r4++) {
                    var a3 = i[r4] - 1;
                    t4[r4] = e4[a3 >>> 5] >>> 31 - a3 % 32 & 1;
                  }
                  for (var n2 = this._subKeys = [], s2 = 0; s2 < 16; s2++) {
                    var d2 = n2[s2] = [], l2 = c[s2];
                    for (r4 = 0; r4 < 24; r4++)
                      d2[r4 / 6 | 0] |= t4[(o[r4] - 1 + l2) % 28] << 31 - r4 % 6, d2[4 + (r4 / 6 | 0)] |= t4[28 + (o[r4 + 24] - 1 + l2) % 28] << 31 - r4 % 6;
                    for (d2[0] = d2[0] << 1 | d2[0] >>> 31, r4 = 1; r4 < 7; r4++)
                      d2[r4] = d2[r4] >>> 4 * (r4 - 1) + 3;
                    d2[7] = d2[7] << 5 | d2[7] >>> 27;
                  }
                  var p2 = this._invSubKeys = [];
                  for (r4 = 0; r4 < 16; r4++) p2[r4] = n2[15 - r4];
                },
                encryptBlock: function(e4, t4) {
                  this._doCryptBlock(e4, t4, this._subKeys);
                },
                decryptBlock: function(e4, t4) {
                  this._doCryptBlock(e4, t4, this._invSubKeys);
                },
                _doCryptBlock: function(e4, t4, r4) {
                  this._lBlock = e4[t4], this._rBlock = e4[t4 + 1], u.call(this, 4, 252645135), u.call(this, 16, 65535), h.call(this, 2, 858993459), h.call(this, 8, 16711935), u.call(this, 1, 1431655765);
                  for (var a3 = 0; a3 < 16; a3++) {
                    for (var n2 = r4[a3], s2 = this._lBlock, i2 = this._rBlock, o2 = 0, c2 = 0; c2 < 8; c2++)
                      o2 |= d[c2][((i2 ^ n2[c2]) & l[c2]) >>> 0];
                    this._lBlock = i2, this._rBlock = s2 ^ o2;
                  }
                  var p2 = this._lBlock;
                  this._lBlock = this._rBlock, this._rBlock = p2, u.call(this, 1, 1431655765), h.call(this, 8, 16711935), h.call(this, 2, 858993459), u.call(this, 16, 65535), u.call(this, 4, 252645135), e4[t4] = this._lBlock, e4[t4 + 1] = this._rBlock;
                },
                keySize: 2,
                ivSize: 2,
                blockSize: 2
              });
              function u(e4, t4) {
                var r4 = (this._lBlock >>> e4 ^ this._rBlock) & t4;
                this._rBlock ^= r4, this._lBlock ^= r4 << e4;
              }
              function h(e4, t4) {
                var r4 = (this._rBlock >>> e4 ^ this._lBlock) & t4;
                this._lBlock ^= r4, this._rBlock ^= r4 << e4;
              }
              e3.DES = n._createHelper(p);
              var m = s.TripleDES = n.extend({
                _doReset: function() {
                  var e4 = this._key.words;
                  if (2 !== e4.length && 4 !== e4.length && e4.length < 6)
                    throw new Error(
                      "Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192."
                    );
                  var t4 = e4.slice(0, 2), a3 = e4.length < 4 ? e4.slice(0, 2) : e4.slice(2, 4), n2 = e4.length < 6 ? e4.slice(0, 2) : e4.slice(4, 6);
                  this._des1 = p.createEncryptor(r3.create(t4)), this._des2 = p.createEncryptor(r3.create(a3)), this._des3 = p.createEncryptor(r3.create(n2));
                },
                encryptBlock: function(e4, t4) {
                  this._des1.encryptBlock(e4, t4), this._des2.decryptBlock(e4, t4), this._des3.encryptBlock(e4, t4);
                },
                decryptBlock: function(e4, t4) {
                  this._des3.decryptBlock(e4, t4), this._des2.encryptBlock(e4, t4), this._des1.decryptBlock(e4, t4);
                },
                keySize: 6,
                ivSize: 2,
                blockSize: 2
              });
              e3.TripleDES = n._createHelper(m);
            }(), a2.TripleDES);
          },
          3240: function(e2, t2, r2) {
            var a2;
            e2.exports = (a2 = r2(9021), function(e3) {
              var t3 = a2, r3 = t3.lib, n = r3.Base, s = r3.WordArray, i = t3.x64 = {};
              i.Word = n.extend({
                init: function(e4, t4) {
                  this.high = e4, this.low = t4;
                }
              }), i.WordArray = n.extend({
                init: function(t4, r4) {
                  t4 = this.words = t4 || [], this.sigBytes = r4 != e3 ? r4 : 8 * t4.length;
                },
                toX32: function() {
                  for (var e4 = this.words, t4 = e4.length, r4 = [], a3 = 0; a3 < t4; a3++) {
                    var n2 = e4[a3];
                    r4.push(n2.high), r4.push(n2.low);
                  }
                  return s.create(r4, this.sigBytes);
                },
                clone: function() {
                  for (var e4 = n.clone.call(this), t4 = e4.words = this.words.slice(0), r4 = t4.length, a3 = 0; a3 < r4; a3++)
                    t4[a3] = t4[a3].clone();
                  return e4;
                }
              });
            }(), a2);
          },
          7833: (e2, t2, r2) => {
            t2.formatArgs = function(t3) {
              if (t3[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t3[0] + (this.useColors ? "%c " : " ") + "+" + e2.exports.humanize(this.diff), !this.useColors)
                return;
              const r3 = "color: " + this.color;
              t3.splice(1, 0, r3, "color: inherit");
              let a3 = 0, n = 0;
              t3[0].replace(/%[a-zA-Z%]/g, (e3) => {
                "%%" !== e3 && (a3++, "%c" === e3 && (n = a3));
              }), t3.splice(n, 0, r3);
            }, t2.save = function(e3) {
              try {
                e3 ? t2.storage.setItem("debug", e3) : t2.storage.removeItem("debug");
              } catch (e4) {
              }
            }, t2.load = function() {
              let e3;
              try {
                e3 = t2.storage.getItem("debug");
              } catch (e4) {
              }
              !e3 && "undefined" != typeof process && "env" in process && (e3 = process.env.DEBUG);
              return e3;
            }, t2.useColors = function() {
              if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs))
                return true;
              if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
                return false;
              let e3;
              return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && (e3 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(e3[1], 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
            }, t2.storage = function() {
              try {
                return localStorage;
              } catch (e3) {
              }
            }(), t2.destroy = /* @__PURE__ */ (() => {
              let e3 = false;
              return () => {
                e3 || (e3 = true, console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                ));
              };
            })(), t2.colors = [
              "#0000CC",
              "#0000FF",
              "#0033CC",
              "#0033FF",
              "#0066CC",
              "#0066FF",
              "#0099CC",
              "#0099FF",
              "#00CC00",
              "#00CC33",
              "#00CC66",
              "#00CC99",
              "#00CCCC",
              "#00CCFF",
              "#3300CC",
              "#3300FF",
              "#3333CC",
              "#3333FF",
              "#3366CC",
              "#3366FF",
              "#3399CC",
              "#3399FF",
              "#33CC00",
              "#33CC33",
              "#33CC66",
              "#33CC99",
              "#33CCCC",
              "#33CCFF",
              "#6600CC",
              "#6600FF",
              "#6633CC",
              "#6633FF",
              "#66CC00",
              "#66CC33",
              "#9900CC",
              "#9900FF",
              "#9933CC",
              "#9933FF",
              "#99CC00",
              "#99CC33",
              "#CC0000",
              "#CC0033",
              "#CC0066",
              "#CC0099",
              "#CC00CC",
              "#CC00FF",
              "#CC3300",
              "#CC3333",
              "#CC3366",
              "#CC3399",
              "#CC33CC",
              "#CC33FF",
              "#CC6600",
              "#CC6633",
              "#CC9900",
              "#CC9933",
              "#CCCC00",
              "#CCCC33",
              "#FF0000",
              "#FF0033",
              "#FF0066",
              "#FF0099",
              "#FF00CC",
              "#FF00FF",
              "#FF3300",
              "#FF3333",
              "#FF3366",
              "#FF3399",
              "#FF33CC",
              "#FF33FF",
              "#FF6600",
              "#FF6633",
              "#FF9900",
              "#FF9933",
              "#FFCC00",
              "#FFCC33"
            ], t2.log = console.debug || console.log || (() => {
            }), e2.exports = r2(736)(t2);
            const { formatters: a2 } = e2.exports;
            a2.j = function(e3) {
              try {
                return JSON.stringify(e3);
              } catch (e4) {
                return "[UnexpectedJSONParseError]: " + e4.message;
              }
            };
          },
          736: (e2, t2, r2) => {
            e2.exports = function(e3) {
              function t3(e4) {
                let r3, n2, s, i = null;
                function o(...e5) {
                  if (!o.enabled) return;
                  const a3 = o, n3 = Number(/* @__PURE__ */ new Date()), s2 = n3 - (r3 || n3);
                  a3.diff = s2, a3.prev = r3, a3.curr = n3, r3 = n3, e5[0] = t3.coerce(e5[0]), "string" != typeof e5[0] && e5.unshift("%O");
                  let i2 = 0;
                  e5[0] = e5[0].replace(/%([a-zA-Z%])/g, (r4, n4) => {
                    if ("%%" === r4) return "%";
                    i2++;
                    const s3 = t3.formatters[n4];
                    if ("function" == typeof s3) {
                      const t4 = e5[i2];
                      r4 = s3.call(a3, t4), e5.splice(i2, 1), i2--;
                    }
                    return r4;
                  }), t3.formatArgs.call(a3, e5);
                  (a3.log || t3.log).apply(a3, e5);
                }
                return o.namespace = e4, o.useColors = t3.useColors(), o.color = t3.selectColor(e4), o.extend = a2, o.destroy = t3.destroy, Object.defineProperty(o, "enabled", {
                  enumerable: true,
                  configurable: false,
                  get: () => null !== i ? i : (n2 !== t3.namespaces && (n2 = t3.namespaces, s = t3.enabled(e4)), s),
                  set: (e5) => {
                    i = e5;
                  }
                }), "function" == typeof t3.init && t3.init(o), o;
              }
              function a2(e4, r3) {
                const a3 = t3(this.namespace + (void 0 === r3 ? ":" : r3) + e4);
                return a3.log = this.log, a3;
              }
              function n(e4) {
                return e4.toString().substring(2, e4.toString().length - 2).replace(/\.\*\?$/, "*");
              }
              return t3.debug = t3, t3.default = t3, t3.coerce = function(e4) {
                if (e4 instanceof Error) return e4.stack || e4.message;
                return e4;
              }, t3.disable = function() {
                const e4 = [
                  ...t3.names.map(n),
                  ...t3.skips.map(n).map((e5) => "-" + e5)
                ].join(",");
                return t3.enable(""), e4;
              }, t3.enable = function(e4) {
                let r3;
                t3.save(e4), t3.namespaces = e4, t3.names = [], t3.skips = [];
                const a3 = ("string" == typeof e4 ? e4 : "").split(/[\s,]+/), n2 = a3.length;
                for (r3 = 0; r3 < n2; r3++)
                  a3[r3] && ("-" === (e4 = a3[r3].replace(/\*/g, ".*?"))[0] ? t3.skips.push(new RegExp("^" + e4.slice(1) + "$")) : t3.names.push(new RegExp("^" + e4 + "$")));
              }, t3.enabled = function(e4) {
                if ("*" === e4[e4.length - 1]) return true;
                let r3, a3;
                for (r3 = 0, a3 = t3.skips.length; r3 < a3; r3++)
                  if (t3.skips[r3].test(e4)) return false;
                for (r3 = 0, a3 = t3.names.length; r3 < a3; r3++)
                  if (t3.names[r3].test(e4)) return true;
                return false;
              }, t3.humanize = r2(6585), t3.destroy = function() {
                console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                );
              }, Object.keys(e3).forEach((r3) => {
                t3[r3] = e3[r3];
              }), t3.names = [], t3.skips = [], t3.formatters = {}, t3.selectColor = function(e4) {
                let r3 = 0;
                for (let t4 = 0; t4 < e4.length; t4++)
                  r3 = (r3 << 5) - r3 + e4.charCodeAt(t4), r3 |= 0;
                return t3.colors[Math.abs(r3) % t3.colors.length];
              }, t3.enable(t3.load()), t3;
            };
          },
          4903: (e2) => {
            var t2 = function() {
              if ("object" == typeof self && self) return self;
              if ("object" == typeof window && window) return window;
              throw new Error("Unable to resolve global `this`");
            };
            e2.exports = function() {
              if (this) return this;
              if ("object" == typeof globalThis && globalThis) return globalThis;
              try {
                Object.defineProperty(Object.prototype, "__global__", {
                  get: function() {
                    return this;
                  },
                  configurable: true
                });
              } catch (e3) {
                return t2();
              }
              try {
                return __global__ || t2();
              } finally {
                delete Object.prototype.__global__;
              }
            }();
          },
          7007: (e2) => {
            "use strict";
            var t2, r2 = "object" == typeof Reflect ? Reflect : null, a2 = r2 && "function" == typeof r2.apply ? r2.apply : function(e3, t3, r3) {
              return Function.prototype.apply.call(e3, t3, r3);
            };
            t2 = r2 && "function" == typeof r2.ownKeys ? r2.ownKeys : Object.getOwnPropertySymbols ? function(e3) {
              return Object.getOwnPropertyNames(e3).concat(
                Object.getOwnPropertySymbols(e3)
              );
            } : function(e3) {
              return Object.getOwnPropertyNames(e3);
            };
            var n = Number.isNaN || function(e3) {
              return e3 != e3;
            };
            function s() {
              s.init.call(this);
            }
            e2.exports = s, e2.exports.once = function(e3, t3) {
              return new Promise(function(r3, a3) {
                function n2(r4) {
                  e3.removeListener(t3, s2), a3(r4);
                }
                function s2() {
                  "function" == typeof e3.removeListener && e3.removeListener("error", n2), r3([].slice.call(arguments));
                }
                f(e3, t3, s2, { once: true }), "error" !== t3 && function(e4, t4, r4) {
                  "function" == typeof e4.on && f(e4, "error", t4, r4);
                }(e3, n2, { once: true });
              });
            }, s.EventEmitter = s, s.prototype._events = void 0, s.prototype._eventsCount = 0, s.prototype._maxListeners = void 0;
            var i = 10;
            function o(e3) {
              if ("function" != typeof e3)
                throw new TypeError(
                  'The "listener" argument must be of type Function. Received type ' + typeof e3
                );
            }
            function c(e3) {
              return void 0 === e3._maxListeners ? s.defaultMaxListeners : e3._maxListeners;
            }
            function d(e3, t3, r3, a3) {
              var n2, s2, i2, d2;
              if (o(r3), void 0 === (s2 = e3._events) ? (s2 = e3._events = /* @__PURE__ */ Object.create(null), e3._eventsCount = 0) : (void 0 !== s2.newListener && (e3.emit("newListener", t3, r3.listener ? r3.listener : r3), s2 = e3._events), i2 = s2[t3]), void 0 === i2)
                i2 = s2[t3] = r3, ++e3._eventsCount;
              else if ("function" == typeof i2 ? i2 = s2[t3] = a3 ? [r3, i2] : [i2, r3] : a3 ? i2.unshift(r3) : i2.push(r3), (n2 = c(e3)) > 0 && i2.length > n2 && !i2.warned) {
                i2.warned = true;
                var l2 = new Error(
                  "Possible EventEmitter memory leak detected. " + i2.length + " " + String(t3) + " listeners added. Use emitter.setMaxListeners() to increase limit"
                );
                l2.name = "MaxListenersExceededWarning", l2.emitter = e3, l2.type = t3, l2.count = i2.length, d2 = l2, console && console.warn && console.warn(d2);
              }
              return e3;
            }
            function l() {
              if (!this.fired)
                return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
            }
            function p(e3, t3, r3) {
              var a3 = {
                fired: false,
                wrapFn: void 0,
                target: e3,
                type: t3,
                listener: r3
              }, n2 = l.bind(a3);
              return n2.listener = r3, a3.wrapFn = n2, n2;
            }
            function u(e3, t3, r3) {
              var a3 = e3._events;
              if (void 0 === a3) return [];
              var n2 = a3[t3];
              return void 0 === n2 ? [] : "function" == typeof n2 ? r3 ? [n2.listener || n2] : [n2] : r3 ? function(e4) {
                for (var t4 = new Array(e4.length), r4 = 0; r4 < t4.length; ++r4)
                  t4[r4] = e4[r4].listener || e4[r4];
                return t4;
              }(n2) : m(n2, n2.length);
            }
            function h(e3) {
              var t3 = this._events;
              if (void 0 !== t3) {
                var r3 = t3[e3];
                if ("function" == typeof r3) return 1;
                if (void 0 !== r3) return r3.length;
              }
              return 0;
            }
            function m(e3, t3) {
              for (var r3 = new Array(t3), a3 = 0; a3 < t3; ++a3) r3[a3] = e3[a3];
              return r3;
            }
            function f(e3, t3, r3, a3) {
              if ("function" == typeof e3.on) a3.once ? e3.once(t3, r3) : e3.on(t3, r3);
              else {
                if ("function" != typeof e3.addEventListener)
                  throw new TypeError(
                    'The "emitter" argument must be of type EventEmitter. Received type ' + typeof e3
                  );
                e3.addEventListener(t3, function n2(s2) {
                  a3.once && e3.removeEventListener(t3, n2), r3(s2);
                });
              }
            }
            Object.defineProperty(s, "defaultMaxListeners", {
              enumerable: true,
              get: function() {
                return i;
              },
              set: function(e3) {
                if ("number" != typeof e3 || e3 < 0 || n(e3))
                  throw new RangeError(
                    'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e3 + "."
                  );
                i = e3;
              }
            }), s.init = function() {
              void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
            }, s.prototype.setMaxListeners = function(e3) {
              if ("number" != typeof e3 || e3 < 0 || n(e3))
                throw new RangeError(
                  'The value of "n" is out of range. It must be a non-negative number. Received ' + e3 + "."
                );
              return this._maxListeners = e3, this;
            }, s.prototype.getMaxListeners = function() {
              return c(this);
            }, s.prototype.emit = function(e3) {
              for (var t3 = [], r3 = 1; r3 < arguments.length; r3++)
                t3.push(arguments[r3]);
              var n2 = "error" === e3, s2 = this._events;
              if (void 0 !== s2) n2 = n2 && void 0 === s2.error;
              else if (!n2) return false;
              if (n2) {
                var i2;
                if (t3.length > 0 && (i2 = t3[0]), i2 instanceof Error) throw i2;
                var o2 = new Error(
                  "Unhandled error." + (i2 ? " (" + i2.message + ")" : "")
                );
                throw o2.context = i2, o2;
              }
              var c2 = s2[e3];
              if (void 0 === c2) return false;
              if ("function" == typeof c2) a2(c2, this, t3);
              else {
                var d2 = c2.length, l2 = m(c2, d2);
                for (r3 = 0; r3 < d2; ++r3) a2(l2[r3], this, t3);
              }
              return true;
            }, s.prototype.addListener = function(e3, t3) {
              return d(this, e3, t3, false);
            }, s.prototype.on = s.prototype.addListener, s.prototype.prependListener = function(e3, t3) {
              return d(this, e3, t3, true);
            }, s.prototype.once = function(e3, t3) {
              return o(t3), this.on(e3, p(this, e3, t3)), this;
            }, s.prototype.prependOnceListener = function(e3, t3) {
              return o(t3), this.prependListener(e3, p(this, e3, t3)), this;
            }, s.prototype.removeListener = function(e3, t3) {
              var r3, a3, n2, s2, i2;
              if (o(t3), void 0 === (a3 = this._events)) return this;
              if (void 0 === (r3 = a3[e3])) return this;
              if (r3 === t3 || r3.listener === t3)
                0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete a3[e3], a3.removeListener && this.emit("removeListener", e3, r3.listener || t3));
              else if ("function" != typeof r3) {
                for (n2 = -1, s2 = r3.length - 1; s2 >= 0; s2--)
                  if (r3[s2] === t3 || r3[s2].listener === t3) {
                    i2 = r3[s2].listener, n2 = s2;
                    break;
                  }
                if (n2 < 0) return this;
                0 === n2 ? r3.shift() : function(e4, t4) {
                  for (; t4 + 1 < e4.length; t4++) e4[t4] = e4[t4 + 1];
                  e4.pop();
                }(r3, n2), 1 === r3.length && (a3[e3] = r3[0]), void 0 !== a3.removeListener && this.emit("removeListener", e3, i2 || t3);
              }
              return this;
            }, s.prototype.off = s.prototype.removeListener, s.prototype.removeAllListeners = function(e3) {
              var t3, r3, a3;
              if (void 0 === (r3 = this._events)) return this;
              if (void 0 === r3.removeListener)
                return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== r3[e3] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete r3[e3]), this;
              if (0 === arguments.length) {
                var n2, s2 = Object.keys(r3);
                for (a3 = 0; a3 < s2.length; ++a3)
                  "removeListener" !== (n2 = s2[a3]) && this.removeAllListeners(n2);
                return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
              }
              if ("function" == typeof (t3 = r3[e3])) this.removeListener(e3, t3);
              else if (void 0 !== t3)
                for (a3 = t3.length - 1; a3 >= 0; a3--)
                  this.removeListener(e3, t3[a3]);
              return this;
            }, s.prototype.listeners = function(e3) {
              return u(this, e3, true);
            }, s.prototype.rawListeners = function(e3) {
              return u(this, e3, false);
            }, s.listenerCount = function(e3, t3) {
              return "function" == typeof e3.listenerCount ? e3.listenerCount(t3) : h.call(e3, t3);
            }, s.prototype.listenerCount = h, s.prototype.eventNames = function() {
              return this._eventsCount > 0 ? t2(this._events) : [];
            };
          },
          3582: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Logger = void 0;
            const n = a2(r2(7833)), s = "h264-profile-level-id";
            t2.Logger = class {
              constructor(e3) {
                e3 ? (this._debug = (0, n.default)(`${s}:${e3}`), this._warn = (0, n.default)(`${s}:WARN:${e3}`), this._error = (0, n.default)(`${s}:ERROR:${e3}`)) : (this._debug = (0, n.default)(s), this._warn = (0, n.default)(`${s}:WARN`), this._error = (0, n.default)(`${s}:ERROR`)), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
              }
              get debug() {
                return this._debug;
              }
              get warn() {
                return this._warn;
              }
              get error() {
                return this._error;
              }
            };
          },
          3200: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.generateProfileLevelIdStringForAnswer = t2.isSameProfile = t2.parseSdpProfileLevelId = t2.levelToString = t2.profileToString = t2.profileLevelIdToString = t2.parseProfileLevelId = t2.ProfileLevelId = t2.Level = t2.Profile = void 0;
            const a2 = new (r2(3582)).Logger();
            var n, s;
            !function(e3) {
              e3[e3.ConstrainedBaseline = 1] = "ConstrainedBaseline", e3[e3.Baseline = 2] = "Baseline", e3[e3.Main = 3] = "Main", e3[e3.ConstrainedHigh = 4] = "ConstrainedHigh", e3[e3.High = 5] = "High", e3[e3.PredictiveHigh444 = 6] = "PredictiveHigh444";
            }(n || (t2.Profile = n = {})), function(e3) {
              e3[e3.L1_b = 0] = "L1_b", e3[e3.L1 = 10] = "L1", e3[e3.L1_1 = 11] = "L1_1", e3[e3.L1_2 = 12] = "L1_2", e3[e3.L1_3 = 13] = "L1_3", e3[e3.L2 = 20] = "L2", e3[e3.L2_1 = 21] = "L2_1", e3[e3.L2_2 = 22] = "L2_2", e3[e3.L3 = 30] = "L3", e3[e3.L3_1 = 31] = "L3_1", e3[e3.L3_2 = 32] = "L3_2", e3[e3.L4 = 40] = "L4", e3[e3.L4_1 = 41] = "L4_1", e3[e3.L4_2 = 42] = "L4_2", e3[e3.L5 = 50] = "L5", e3[e3.L5_1 = 51] = "L5_1", e3[e3.L5_2 = 52] = "L5_2";
            }(s || (t2.Level = s = {}));
            class i {
              constructor(e3, t3) {
                this.profile = e3, this.level = t3;
              }
            }
            t2.ProfileLevelId = i;
            const o = new i(n.ConstrainedBaseline, s.L3_1);
            class c {
              constructor(e3) {
                this.mask = ~m("x", e3), this.masked_value = m("1", e3);
              }
              isMatch(e3) {
                return this.masked_value === (e3 & this.mask);
              }
            }
            class d {
              constructor(e3, t3, r3) {
                this.profile_idc = e3, this.profile_iop = t3, this.profile = r3;
              }
            }
            const l = [
              new d(66, new c("x1xx0000"), n.ConstrainedBaseline),
              new d(77, new c("1xxx0000"), n.ConstrainedBaseline),
              new d(88, new c("11xx0000"), n.ConstrainedBaseline),
              new d(66, new c("x0xx0000"), n.Baseline),
              new d(88, new c("10xx0000"), n.Baseline),
              new d(77, new c("0x0x0000"), n.Main),
              new d(100, new c("00000000"), n.High),
              new d(100, new c("00001100"), n.ConstrainedHigh),
              new d(244, new c("00000000"), n.PredictiveHigh444)
            ];
            function p(e3) {
              if ("string" != typeof e3 || 6 !== e3.length) return;
              const t3 = parseInt(e3, 16);
              if (0 === t3) return;
              const r3 = 255 & t3, n2 = t3 >> 8 & 255, o2 = t3 >> 16 & 255;
              let c2;
              switch (r3) {
                case s.L1_1:
                  c2 = 16 & n2 ? s.L1_b : s.L1_1;
                  break;
                case s.L1:
                case s.L1_2:
                case s.L1_3:
                case s.L2:
                case s.L2_1:
                case s.L2_2:
                case s.L3:
                case s.L3_1:
                case s.L3_2:
                case s.L4:
                case s.L4_1:
                case s.L4_2:
                case s.L5:
                case s.L5_1:
                case s.L5_2:
                  c2 = r3;
                  break;
                default:
                  return void a2.warn(
                    `parseProfileLevelId() | unrecognized level_idc [str:${e3}, level_idc:${r3}]`
                  );
              }
              for (const e4 of l)
                if (o2 === e4.profile_idc && e4.profile_iop.isMatch(n2))
                  return new i(e4.profile, c2);
              a2.warn(
                `parseProfileLevelId() | unrecognized profile_idc/profile_iop combination [str:${e3}, profile_idc:${o2}, profile_iop:${n2}]`
              );
            }
            function u(e3) {
              if (e3.level == s.L1_b)
                switch (e3.profile) {
                  case n.ConstrainedBaseline:
                    return "42f00b";
                  case n.Baseline:
                    return "42100b";
                  case n.Main:
                    return "4d100b";
                  default:
                    return void a2.warn(
                      `profileLevelIdToString() | Level 1_b not is allowed for profile ${e3.profile}`
                    );
                }
              let t3;
              switch (e3.profile) {
                case n.ConstrainedBaseline:
                  t3 = "42e0";
                  break;
                case n.Baseline:
                  t3 = "4200";
                  break;
                case n.Main:
                  t3 = "4d00";
                  break;
                case n.ConstrainedHigh:
                  t3 = "640c";
                  break;
                case n.High:
                  t3 = "6400";
                  break;
                case n.PredictiveHigh444:
                  t3 = "f400";
                  break;
                default:
                  return void a2.warn(
                    `profileLevelIdToString() | unrecognized profile ${e3.profile}`
                  );
              }
              let r3 = e3.level.toString(16);
              return 1 === r3.length && (r3 = `0${r3}`), `${t3}${r3}`;
            }
            function h(e3 = {}) {
              const t3 = e3["profile-level-id"];
              return t3 ? p(t3) : o;
            }
            function m(e3, t3) {
              return Number(t3[0] === e3) << 7 | Number(t3[1] === e3) << 6 | Number(t3[2] === e3) << 5 | Number(t3[3] === e3) << 4 | Number(t3[4] === e3) << 3 | Number(t3[5] === e3) << 2 | Number(t3[6] === e3) << 1 | Number(t3[7] === e3);
            }
            function f(e3 = {}) {
              const t3 = e3["level-asymmetry-allowed"];
              return true === t3 || 1 === t3 || "1" === t3;
            }
            t2.parseProfileLevelId = p, t2.profileLevelIdToString = u, t2.profileToString = function(e3) {
              switch (e3) {
                case n.ConstrainedBaseline:
                  return "ConstrainedBaseline";
                case n.Baseline:
                  return "Baseline";
                case n.Main:
                  return "Main";
                case n.ConstrainedHigh:
                  return "ConstrainedHigh";
                case n.High:
                  return "High";
                case n.PredictiveHigh444:
                  return "PredictiveHigh444";
                default:
                  return void a2.warn(
                    `profileToString() | unrecognized profile ${e3}`
                  );
              }
            }, t2.levelToString = function(e3) {
              switch (e3) {
                case s.L1_b:
                  return "1b";
                case s.L1:
                  return "1";
                case s.L1_1:
                  return "1.1";
                case s.L1_2:
                  return "1.2";
                case s.L1_3:
                  return "1.3";
                case s.L2:
                  return "2";
                case s.L2_1:
                  return "2.1";
                case s.L2_2:
                  return "2.2";
                case s.L3:
                  return "3";
                case s.L3_1:
                  return "3.1";
                case s.L3_2:
                  return "3.2";
                case s.L4:
                  return "4";
                case s.L4_1:
                  return "4.1";
                case s.L4_2:
                  return "4.2";
                case s.L5:
                  return "5";
                case s.L5_1:
                  return "5.1";
                case s.L5_2:
                  return "5.2";
                default:
                  return void a2.warn(
                    `levelToString() | unrecognized level ${e3}`
                  );
              }
            }, t2.parseSdpProfileLevelId = h, t2.isSameProfile = function(e3 = {}, t3 = {}) {
              const r3 = h(e3), a3 = h(t3);
              return Boolean(r3 && a3 && r3.profile === a3.profile);
            }, t2.generateProfileLevelIdStringForAnswer = function(e3 = {}, t3 = {}) {
              if (!e3["profile-level-id"] && !t3["profile-level-id"])
                return void a2.warn(
                  "generateProfileLevelIdStringForAnswer() | profile-level-id missing in local and remote params"
                );
              const r3 = h(e3), n2 = h(t3);
              if (!r3) throw new TypeError("invalid local_profile_level_id");
              if (!n2) throw new TypeError("invalid remote_profile_level_id");
              if (r3.profile !== n2.profile)
                throw new TypeError("H264 Profile mismatch");
              const o2 = f(e3) && f(t3), c2 = r3.level, d2 = n2.level, l2 = function(e4, t4) {
                return e4 === s.L1_b ? t4 !== s.L1 && t4 !== s.L1_b : t4 === s.L1_b ? e4 !== s.L1 : e4 < t4;
              }(p2 = c2, m2 = d2) ? p2 : m2;
              var p2, m2;
              const g = o2 ? c2 : l2;
              return a2.debug(
                `generateProfileLevelIdStringForAnswer() | result [profile:${r3.profile}, level:${g}]`
              ), u(new i(r3.profile, g));
            };
          },
          328: (e2, t2, r2) => {
            r2(8624), e2.exports = self.fetch.bind(self);
          },
          2215: (e2, t2, r2) => {
            var a2, n;
            !function(s) {
              if (void 0 === (n = "function" == typeof (a2 = s) ? a2.call(t2, r2, t2, e2) : a2) || (e2.exports = n), e2.exports = s(), false) {
                var i = window.Cookies, o = window.Cookies = s();
                o.noConflict = function() {
                  return window.Cookies = i, o;
                };
              }
            }(function() {
              function e3() {
                for (var e4 = 0, t4 = {}; e4 < arguments.length; e4++) {
                  var r3 = arguments[e4];
                  for (var a3 in r3) t4[a3] = r3[a3];
                }
                return t4;
              }
              function t3(e4) {
                return e4.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
              }
              return function r3(a3) {
                function n2() {
                }
                function s(t4, r4, s2) {
                  if ("undefined" != typeof document) {
                    "number" == typeof (s2 = e3({ path: "/" }, n2.defaults, s2)).expires && (s2.expires = new Date(1 * /* @__PURE__ */ new Date() + 864e5 * s2.expires)), s2.expires = s2.expires ? s2.expires.toUTCString() : "";
                    try {
                      var i2 = JSON.stringify(r4);
                      /^[\{\[]/.test(i2) && (r4 = i2);
                    } catch (e4) {
                    }
                    r4 = a3.write ? a3.write(r4, t4) : encodeURIComponent(String(r4)).replace(
                      /%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
                      decodeURIComponent
                    ), t4 = encodeURIComponent(String(t4)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
                    var o = "";
                    for (var c in s2)
                      s2[c] && (o += "; " + c, true !== s2[c] && (o += "=" + s2[c].split(";")[0]));
                    return document.cookie = t4 + "=" + r4 + o;
                  }
                }
                function i(e4, r4) {
                  if ("undefined" != typeof document) {
                    for (var n3 = {}, s2 = document.cookie ? document.cookie.split("; ") : [], i2 = 0; i2 < s2.length; i2++) {
                      var o = s2[i2].split("="), c = o.slice(1).join("=");
                      r4 || '"' !== c.charAt(0) || (c = c.slice(1, -1));
                      try {
                        var d = t3(o[0]);
                        if (c = (a3.read || a3)(c, d) || t3(c), r4)
                          try {
                            c = JSON.parse(c);
                          } catch (e5) {
                          }
                        if (n3[d] = c, e4 === d) break;
                      } catch (e5) {
                      }
                    }
                    return e4 ? n3[e4] : n3;
                  }
                }
                return n2.set = s, n2.get = function(e4) {
                  return i(e4, false);
                }, n2.getJSON = function(e4) {
                  return i(e4, true);
                }, n2.remove = function(t4, r4) {
                  s(t4, "", e3(r4, { expires: -1 }));
                }, n2.defaults = {}, n2.withConverter = r3, n2;
              }(function() {
              });
            });
          },
          7654: (e2, t2, r2) => {
            var a2 = "__lodash_hash_undefined__", n = "[object Function]", s = "[object GeneratorFunction]", i = /^\[object .+?Constructor\]$/, o = "object" == typeof r2.g && r2.g && r2.g.Object === Object && r2.g, c = "object" == typeof self && self && self.Object === Object && self, d = o || c || Function("return this")();
            var l, p = Array.prototype, u = Function.prototype, h = Object.prototype, m = d["__core-js_shared__"], f = (l = /[^.]+$/.exec(m && m.keys && m.keys.IE_PROTO || "")) ? "Symbol(src)_1." + l : "", g = u.toString, _ = h.hasOwnProperty, v = h.toString, b = RegExp(
              "^" + g.call(_).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(
                /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                "$1.*?"
              ) + "$"
            ), y = p.splice, w = O(d, "Map"), S = O(Object, "create");
            function R(e3) {
              var t3 = -1, r3 = e3 ? e3.length : 0;
              for (this.clear(); ++t3 < r3; ) {
                var a3 = e3[t3];
                this.set(a3[0], a3[1]);
              }
            }
            function E(e3) {
              var t3 = -1, r3 = e3 ? e3.length : 0;
              for (this.clear(); ++t3 < r3; ) {
                var a3 = e3[t3];
                this.set(a3[0], a3[1]);
              }
            }
            function k(e3) {
              var t3 = -1, r3 = e3 ? e3.length : 0;
              for (this.clear(); ++t3 < r3; ) {
                var a3 = e3[t3];
                this.set(a3[0], a3[1]);
              }
            }
            function T(e3, t3) {
              for (var r3, a3, n2 = e3.length; n2--; )
                if ((r3 = e3[n2][0]) === (a3 = t3) || r3 != r3 && a3 != a3) return n2;
              return -1;
            }
            function C(e3) {
              if (!x(e3) || (t3 = e3, f && f in t3)) return false;
              var t3, r3 = function(e4) {
                var t4 = x(e4) ? v.call(e4) : "";
                return t4 == n || t4 == s;
              }(e3) || function(e4) {
                var t4 = false;
                if (null != e4 && "function" != typeof e4.toString)
                  try {
                    t4 = !!(e4 + "");
                  } catch (e5) {
                  }
                return t4;
              }(e3) ? b : i;
              return r3.test(
                function(e4) {
                  if (null != e4) {
                    try {
                      return g.call(e4);
                    } catch (e5) {
                    }
                    try {
                      return e4 + "";
                    } catch (e5) {
                    }
                  }
                  return "";
                }(e3)
              );
            }
            function P(e3, t3) {
              var r3, a3, n2 = e3.__data__;
              return ("string" == (a3 = typeof (r3 = t3)) || "number" == a3 || "symbol" == a3 || "boolean" == a3 ? "__proto__" !== r3 : null === r3) ? n2["string" == typeof t3 ? "string" : "hash"] : n2.map;
            }
            function O(e3, t3) {
              var r3 = function(e4, t4) {
                return null == e4 ? void 0 : e4[t4];
              }(e3, t3);
              return C(r3) ? r3 : void 0;
            }
            function D(e3, t3) {
              if ("function" != typeof e3 || t3 && "function" != typeof t3)
                throw new TypeError("Expected a function");
              var r3 = function() {
                var a3 = arguments, n2 = t3 ? t3.apply(this, a3) : a3[0], s2 = r3.cache;
                if (s2.has(n2)) return s2.get(n2);
                var i2 = e3.apply(this, a3);
                return r3.cache = s2.set(n2, i2), i2;
              };
              return r3.cache = new (D.Cache || k)(), r3;
            }
            function x(e3) {
              var t3 = typeof e3;
              return !!e3 && ("object" == t3 || "function" == t3);
            }
            R.prototype.clear = function() {
              this.__data__ = S ? S(null) : {};
            }, R.prototype.delete = function(e3) {
              return this.has(e3) && delete this.__data__[e3];
            }, R.prototype.get = function(e3) {
              var t3 = this.__data__;
              if (S) {
                var r3 = t3[e3];
                return r3 === a2 ? void 0 : r3;
              }
              return _.call(t3, e3) ? t3[e3] : void 0;
            }, R.prototype.has = function(e3) {
              var t3 = this.__data__;
              return S ? void 0 !== t3[e3] : _.call(t3, e3);
            }, R.prototype.set = function(e3, t3) {
              return this.__data__[e3] = S && void 0 === t3 ? a2 : t3, this;
            }, E.prototype.clear = function() {
              this.__data__ = [];
            }, E.prototype.delete = function(e3) {
              var t3 = this.__data__, r3 = T(t3, e3);
              return !(r3 < 0) && (r3 == t3.length - 1 ? t3.pop() : y.call(t3, r3, 1), true);
            }, E.prototype.get = function(e3) {
              var t3 = this.__data__, r3 = T(t3, e3);
              return r3 < 0 ? void 0 : t3[r3][1];
            }, E.prototype.has = function(e3) {
              return T(this.__data__, e3) > -1;
            }, E.prototype.set = function(e3, t3) {
              var r3 = this.__data__, a3 = T(r3, e3);
              return a3 < 0 ? r3.push([e3, t3]) : r3[a3][1] = t3, this;
            }, k.prototype.clear = function() {
              this.__data__ = {
                hash: new R(),
                map: new (w || E)(),
                string: new R()
              };
            }, k.prototype.delete = function(e3) {
              return P(this, e3).delete(e3);
            }, k.prototype.get = function(e3) {
              return P(this, e3).get(e3);
            }, k.prototype.has = function(e3) {
              return P(this, e3).has(e3);
            }, k.prototype.set = function(e3, t3) {
              return P(this, e3).set(e3, t3), this;
            }, D.Cache = k, e2.exports = D;
          },
          3518: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Consumer = void 0;
            const a2 = r2(2994), n = r2(2010), s = r2(4893), i = new a2.Logger("Consumer");
            class o extends n.EnhancedEventEmitter {
              constructor({
                id: e3,
                localId: t3,
                producerId: r3,
                rtpReceiver: a3,
                track: s2,
                rtpParameters: o2,
                appData: c
              }) {
                super(), this._closed = false, this._observer = new n.EnhancedEventEmitter(), i.debug("constructor()"), this._id = e3, this._localId = t3, this._producerId = r3, this._rtpReceiver = a3, this._track = s2, this._rtpParameters = o2, this._paused = !s2.enabled, this._appData = c || {}, this.onTrackEnded = this.onTrackEnded.bind(this), this.handleTrack();
              }
              get id() {
                return this._id;
              }
              get localId() {
                return this._localId;
              }
              get producerId() {
                return this._producerId;
              }
              get closed() {
                return this._closed;
              }
              get kind() {
                return this._track.kind;
              }
              get rtpReceiver() {
                return this._rtpReceiver;
              }
              get track() {
                return this._track;
              }
              get rtpParameters() {
                return this._rtpParameters;
              }
              get paused() {
                return this._paused;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                this._closed || (i.debug("close()"), this._closed = true, this.destroyTrack(), this.emit("@close"), this._observer.safeEmit("close"));
              }
              transportClosed() {
                this._closed || (i.debug("transportClosed()"), this._closed = true, this.destroyTrack(), this.safeEmit("transportclose"), this._observer.safeEmit("close"));
              }
              async getStats() {
                if (this._closed) throw new s.InvalidStateError("closed");
                return new Promise((e3, t3) => {
                  this.safeEmit("@getstats", e3, t3);
                });
              }
              pause() {
                i.debug("pause()"), this._closed ? i.error("pause() | Consumer closed") : this._paused ? i.debug("pause() | Consumer is already paused") : (this._paused = true, this._track.enabled = false, this.emit("@pause"), this._observer.safeEmit("pause"));
              }
              resume() {
                i.debug("resume()"), this._closed ? i.error("resume() | Consumer closed") : this._paused ? (this._paused = false, this._track.enabled = true, this.emit("@resume"), this._observer.safeEmit("resume")) : i.debug("resume() | Consumer is already resumed");
              }
              onTrackEnded() {
                i.debug('track "ended" event'), this.safeEmit("trackended"), this._observer.safeEmit("trackended");
              }
              handleTrack() {
                this._track.addEventListener("ended", this.onTrackEnded);
              }
              destroyTrack() {
                try {
                  this._track.removeEventListener("ended", this.onTrackEnded), this._track.stop();
                } catch (e3) {
                }
              }
            }
            t2.Consumer = o;
          },
          9166: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.DataConsumer = void 0;
            const a2 = r2(2994), n = r2(2010), s = new a2.Logger("DataConsumer");
            class i extends n.EnhancedEventEmitter {
              constructor({
                id: e3,
                dataProducerId: t3,
                dataChannel: r3,
                sctpStreamParameters: a3,
                appData: i2
              }) {
                super(), this._closed = false, this._observer = new n.EnhancedEventEmitter(), s.debug("constructor()"), this._id = e3, this._dataProducerId = t3, this._dataChannel = r3, this._sctpStreamParameters = a3, this._appData = i2 || {}, this.handleDataChannel();
              }
              get id() {
                return this._id;
              }
              get dataProducerId() {
                return this._dataProducerId;
              }
              get closed() {
                return this._closed;
              }
              get sctpStreamParameters() {
                return this._sctpStreamParameters;
              }
              get readyState() {
                return this._dataChannel.readyState;
              }
              get label() {
                return this._dataChannel.label;
              }
              get protocol() {
                return this._dataChannel.protocol;
              }
              get binaryType() {
                return this._dataChannel.binaryType;
              }
              set binaryType(e3) {
                this._dataChannel.binaryType = e3;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                this._closed || (s.debug("close()"), this._closed = true, this._dataChannel.close(), this.emit("@close"), this._observer.safeEmit("close"));
              }
              transportClosed() {
                this._closed || (s.debug("transportClosed()"), this._closed = true, this._dataChannel.close(), this.safeEmit("transportclose"), this._observer.safeEmit("close"));
              }
              handleDataChannel() {
                this._dataChannel.addEventListener("open", () => {
                  this._closed || (s.debug('DataChannel "open" event'), this.safeEmit("open"));
                }), this._dataChannel.addEventListener("error", (e3) => {
                  if (this._closed) return;
                  let { error: t3 } = e3;
                  t3 || (t3 = new Error("unknown DataChannel error")), "sctp-failure" === t3.errorDetail ? s.error(
                    "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                    t3.sctpCauseCode,
                    t3.message
                  ) : s.error('DataChannel "error" event: %o', t3), this.safeEmit("error", t3);
                }), this._dataChannel.addEventListener("close", () => {
                  this._closed || (s.warn('DataChannel "close" event'), this._closed = true, this.emit("@close"), this.safeEmit("close"), this._observer.safeEmit("close"));
                }), this._dataChannel.addEventListener("message", (e3) => {
                  this._closed || this.safeEmit("message", e3.data);
                });
              }
            }
            t2.DataConsumer = i;
          },
          7504: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.DataProducer = void 0;
            const a2 = r2(2994), n = r2(2010), s = r2(4893), i = new a2.Logger("DataProducer");
            class o extends n.EnhancedEventEmitter {
              constructor({
                id: e3,
                dataChannel: t3,
                sctpStreamParameters: r3,
                appData: a3
              }) {
                super(), this._closed = false, this._observer = new n.EnhancedEventEmitter(), i.debug("constructor()"), this._id = e3, this._dataChannel = t3, this._sctpStreamParameters = r3, this._appData = a3 || {}, this.handleDataChannel();
              }
              get id() {
                return this._id;
              }
              get closed() {
                return this._closed;
              }
              get sctpStreamParameters() {
                return this._sctpStreamParameters;
              }
              get readyState() {
                return this._dataChannel.readyState;
              }
              get label() {
                return this._dataChannel.label;
              }
              get protocol() {
                return this._dataChannel.protocol;
              }
              get bufferedAmount() {
                return this._dataChannel.bufferedAmount;
              }
              get bufferedAmountLowThreshold() {
                return this._dataChannel.bufferedAmountLowThreshold;
              }
              set bufferedAmountLowThreshold(e3) {
                this._dataChannel.bufferedAmountLowThreshold = e3;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                this._closed || (i.debug("close()"), this._closed = true, this._dataChannel.close(), this.emit("@close"), this._observer.safeEmit("close"));
              }
              transportClosed() {
                this._closed || (i.debug("transportClosed()"), this._closed = true, this._dataChannel.close(), this.safeEmit("transportclose"), this._observer.safeEmit("close"));
              }
              send(e3) {
                if (i.debug("send()"), this._closed)
                  throw new s.InvalidStateError("closed");
                this._dataChannel.send(e3);
              }
              handleDataChannel() {
                this._dataChannel.addEventListener("open", () => {
                  this._closed || (i.debug('DataChannel "open" event'), this.safeEmit("open"));
                }), this._dataChannel.addEventListener("error", (e3) => {
                  if (this._closed) return;
                  let { error: t3 } = e3;
                  t3 || (t3 = new Error("unknown DataChannel error")), "sctp-failure" === t3.errorDetail ? i.error(
                    "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                    t3.sctpCauseCode,
                    t3.message
                  ) : i.error('DataChannel "error" event: %o', t3), this.safeEmit("error", t3);
                }), this._dataChannel.addEventListener("close", () => {
                  this._closed || (i.warn('DataChannel "close" event'), this._closed = true, this.emit("@close"), this.safeEmit("close"), this._observer.safeEmit("close"));
                }), this._dataChannel.addEventListener("message", () => {
                  this._closed || i.warn(
                    'DataChannel "message" event in a DataProducer, message discarded'
                  );
                }), this._dataChannel.addEventListener("bufferedamountlow", () => {
                  this._closed || this.safeEmit("bufferedamountlow");
                });
              }
            }
            t2.DataProducer = o;
          },
          6004: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Device = t2.detectDevice = void 0;
            const i = r2(7232), o = r2(2994), c = r2(2010), d = r2(4893), l = s(r2(1765)), p = s(r2(8046)), u = r2(5601), h = r2(2183), m = r2(11), f = r2(5535), g = r2(8155), _ = r2(7402), v = r2(2292), b = r2(1767), y = r2(5765), w = r2(9676), S = r2(8633), R = r2(4039), E = r2(9352), k = new o.Logger("Device");
            function T() {
              var _a, _b, _c, _d;
              if ("object" == typeof navigator && "ReactNative" === navigator.product)
                return k.debug("detectDevice() | React-Native detected"), "undefined" == typeof RTCPeerConnection ? void k.warn(
                  "detectDevice() | unsupported react-native-webrtc without RTCPeerConnection, forgot to call registerGlobals()?"
                ) : "undefined" != typeof RTCRtpTransceiver ? (k.debug(
                  "detectDevice() | ReactNative UnifiedPlan handler chosen"
                ), "ReactNativeUnifiedPlan") : (k.debug(
                  "detectDevice() | ReactNative PlanB handler chosen"
                ), "ReactNative");
              if ("object" != typeof navigator || "string" != typeof navigator.userAgent)
                k.warn("detectDevice() | unknown device");
              else {
                const e3 = navigator.userAgent, t3 = new i.UAParser(e3);
                k.debug(
                  "detectDevice() | browser detected [ua:%s, parsed:%o]",
                  e3,
                  t3.getResult()
                );
                const r3 = t3.getBrowser(), a3 = (_a = r3.name) == null ? void 0 : _a.toLowerCase(), n2 = parseInt(r3.major ?? "0"), s2 = t3.getEngine(), o2 = (_b = s2.name) == null ? void 0 : _b.toLowerCase(), c2 = t3.getOS(), d2 = (_c = c2.name) == null ? void 0 : _c.toLowerCase(), l2 = parseFloat(c2.version ?? "0"), p2 = t3.getDevice(), u2 = (_d = p2.model) == null ? void 0 : _d.toLowerCase(), h2 = "ios" === d2 || "ipad" === u2, m2 = a3 && [
                  "chrome",
                  "chromium",
                  "mobile chrome",
                  "chrome webview",
                  "chrome headless"
                ].includes(a3), f2 = a3 && ["firefox", "mobile firefox", "mobile focus"].includes(a3), g2 = a3 && ["safari", "mobile safari"].includes(a3), _2 = a3 && ["edge"].includes(a3);
                if ((m2 || _2) && !h2 && n2 >= 111) return "Chrome111";
                if (m2 && !h2 && n2 >= 74 || _2 && !h2 && n2 >= 88)
                  return "Chrome74";
                if (m2 && !h2 && n2 >= 70) return "Chrome70";
                if (m2 && !h2 && n2 >= 67) return "Chrome67";
                if (m2 && !h2 && n2 >= 55) return "Chrome55";
                if (f2 && !h2 && n2 >= 120) return "Firefox120";
                if (f2 && !h2 && n2 >= 60) return "Firefox60";
                if (f2 && h2 && l2 >= 14.3) return "Safari12";
                if (g2 && n2 >= 12 && "undefined" != typeof RTCRtpTransceiver && RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection"))
                  return "Safari12";
                if (g2 && n2 >= 11) return "Safari11";
                if (_2 && !h2 && n2 >= 11 && n2 <= 18) return "Edge11";
                if ("webkit" === o2 && h2 && "undefined" != typeof RTCRtpTransceiver && RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection"))
                  return "Safari12";
                if ("blink" === o2) {
                  const t4 = e3.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);
                  if (t4) {
                    const e4 = Number(t4[1]);
                    return e4 >= 111 ? "Chrome111" : e4 >= 74 ? "Chrome74" : e4 >= 70 ? "Chrome70" : e4 >= 67 ? "Chrome67" : "Chrome55";
                  }
                  return "Chrome111";
                }
                k.warn(
                  "detectDevice() | browser not supported [name:%s, version:%s]",
                  a3,
                  n2
                );
              }
            }
            t2.detectDevice = T;
            t2.Device = class {
              constructor({
                handlerName: e3,
                handlerFactory: t3,
                Handler: r3
              } = {}) {
                if (this._loaded = false, this._observer = new c.EnhancedEventEmitter(), k.debug("constructor()"), r3) {
                  if (k.warn(
                    "constructor() | Handler option is DEPRECATED, use handlerName or handlerFactory instead"
                  ), "string" != typeof r3)
                    throw new TypeError(
                      "non string Handler option no longer supported, use handlerFactory instead"
                    );
                  e3 = r3;
                }
                if (e3 && t3)
                  throw new TypeError(
                    "just one of handlerName or handlerInterface can be given"
                  );
                if (t3) this._handlerFactory = t3;
                else {
                  if (e3) k.debug("constructor() | handler given: %s", e3);
                  else {
                    if (!(e3 = T()))
                      throw new d.UnsupportedError("device not supported");
                    k.debug("constructor() | detected handler: %s", e3);
                  }
                  switch (e3) {
                    case "Chrome111":
                      this._handlerFactory = h.Chrome111.createFactory();
                      break;
                    case "Chrome74":
                      this._handlerFactory = m.Chrome74.createFactory();
                      break;
                    case "Chrome70":
                      this._handlerFactory = f.Chrome70.createFactory();
                      break;
                    case "Chrome67":
                      this._handlerFactory = g.Chrome67.createFactory();
                      break;
                    case "Chrome55":
                      this._handlerFactory = _.Chrome55.createFactory();
                      break;
                    case "Firefox120":
                      this._handlerFactory = v.Firefox120.createFactory();
                      break;
                    case "Firefox60":
                      this._handlerFactory = b.Firefox60.createFactory();
                      break;
                    case "Safari12":
                      this._handlerFactory = y.Safari12.createFactory();
                      break;
                    case "Safari11":
                      this._handlerFactory = w.Safari11.createFactory();
                      break;
                    case "Edge11":
                      this._handlerFactory = S.Edge11.createFactory();
                      break;
                    case "ReactNativeUnifiedPlan":
                      this._handlerFactory = R.ReactNativeUnifiedPlan.createFactory();
                      break;
                    case "ReactNative":
                      this._handlerFactory = E.ReactNative.createFactory();
                      break;
                    default:
                      throw new TypeError(`unknown handlerName "${e3}"`);
                  }
                }
                const a3 = this._handlerFactory();
                this._handlerName = a3.name, a3.close(), this._extendedRtpCapabilities = void 0, this._recvRtpCapabilities = void 0, this._canProduceByKind = { audio: false, video: false }, this._sctpCapabilities = void 0;
              }
              get handlerName() {
                return this._handlerName;
              }
              get loaded() {
                return this._loaded;
              }
              get rtpCapabilities() {
                if (!this._loaded) throw new d.InvalidStateError("not loaded");
                return this._recvRtpCapabilities;
              }
              get sctpCapabilities() {
                if (!this._loaded) throw new d.InvalidStateError("not loaded");
                return this._sctpCapabilities;
              }
              get observer() {
                return this._observer;
              }
              async load({ routerRtpCapabilities: e3 }) {
                let t3;
                k.debug("load() [routerRtpCapabilities:%o]", e3);
                try {
                  if (this._loaded)
                    throw new d.InvalidStateError("already loaded");
                  const r3 = l.clone(e3);
                  p.validateRtpCapabilities(r3), t3 = this._handlerFactory();
                  const a3 = await t3.getNativeRtpCapabilities();
                  k.debug("load() | got native RTP capabilities:%o", a3);
                  const n2 = l.clone(a3);
                  p.validateRtpCapabilities(n2), this._extendedRtpCapabilities = p.getExtendedRtpCapabilities(
                    n2,
                    r3
                  ), k.debug(
                    "load() | got extended RTP capabilities:%o",
                    this._extendedRtpCapabilities
                  ), this._canProduceByKind.audio = p.canSend(
                    "audio",
                    this._extendedRtpCapabilities
                  ), this._canProduceByKind.video = p.canSend(
                    "video",
                    this._extendedRtpCapabilities
                  ), this._recvRtpCapabilities = p.getRecvRtpCapabilities(
                    this._extendedRtpCapabilities
                  ), p.validateRtpCapabilities(this._recvRtpCapabilities), k.debug(
                    "load() | got receiving RTP capabilities:%o",
                    this._recvRtpCapabilities
                  ), this._sctpCapabilities = await t3.getNativeSctpCapabilities(), k.debug(
                    "load() | got native SCTP capabilities:%o",
                    this._sctpCapabilities
                  ), p.validateSctpCapabilities(this._sctpCapabilities), k.debug("load() succeeded"), this._loaded = true, t3.close();
                } catch (e4) {
                  throw t3 && t3.close(), e4;
                }
              }
              canProduce(e3) {
                if (!this._loaded) throw new d.InvalidStateError("not loaded");
                if ("audio" !== e3 && "video" !== e3)
                  throw new TypeError(`invalid kind "${e3}"`);
                return this._canProduceByKind[e3];
              }
              createSendTransport({
                id: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                appData: d2
              }) {
                return k.debug("createSendTransport()"), this.createTransport({
                  direction: "send",
                  id: e3,
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2,
                  iceServers: s2,
                  iceTransportPolicy: i2,
                  additionalSettings: o2,
                  proprietaryConstraints: c2,
                  appData: d2
                });
              }
              createRecvTransport({
                id: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                appData: d2
              }) {
                return k.debug("createRecvTransport()"), this.createTransport({
                  direction: "recv",
                  id: e3,
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2,
                  iceServers: s2,
                  iceTransportPolicy: i2,
                  additionalSettings: o2,
                  proprietaryConstraints: c2,
                  appData: d2
                });
              }
              createTransport({
                direction: e3,
                id: t3,
                iceParameters: r3,
                iceCandidates: a3,
                dtlsParameters: n2,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: o2,
                additionalSettings: c2,
                proprietaryConstraints: l2,
                appData: p2
              }) {
                if (!this._loaded) throw new d.InvalidStateError("not loaded");
                if ("string" != typeof t3) throw new TypeError("missing id");
                if ("object" != typeof r3)
                  throw new TypeError("missing iceParameters");
                if (!Array.isArray(a3))
                  throw new TypeError("missing iceCandidates");
                if ("object" != typeof n2)
                  throw new TypeError("missing dtlsParameters");
                if (s2 && "object" != typeof s2)
                  throw new TypeError("wrong sctpParameters");
                if (p2 && "object" != typeof p2)
                  throw new TypeError("if given, appData must be an object");
                const h2 = new u.Transport({
                  direction: e3,
                  id: t3,
                  iceParameters: r3,
                  iceCandidates: a3,
                  dtlsParameters: n2,
                  sctpParameters: s2,
                  iceServers: i2,
                  iceTransportPolicy: o2,
                  additionalSettings: c2,
                  proprietaryConstraints: l2,
                  appData: p2,
                  handlerFactory: this._handlerFactory,
                  extendedRtpCapabilities: this._extendedRtpCapabilities,
                  canProduceByKind: this._canProduceByKind
                });
                return this._observer.safeEmit("newtransport", h2), h2;
              }
            };
          },
          2010: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.EnhancedEventEmitter = void 0;
            const a2 = r2(7007), n = new (r2(2994)).Logger("EnhancedEventEmitter");
            class s extends a2.EventEmitter {
              constructor() {
                super(), this.setMaxListeners(1 / 0);
              }
              emit(e3, ...t3) {
                return super.emit(e3, ...t3);
              }
              safeEmit(e3, ...t3) {
                const r3 = super.listenerCount(e3);
                try {
                  return super.emit(e3, ...t3);
                } catch (t4) {
                  return n.error(
                    "safeEmit() | event listener threw an error [eventName:%s]:%o",
                    e3,
                    t4
                  ), Boolean(r3);
                }
              }
              on(e3, t3) {
                return super.on(e3, t3), this;
              }
              off(e3, t3) {
                return super.off(e3, t3), this;
              }
              addListener(e3, t3) {
                return super.on(e3, t3), this;
              }
              prependListener(e3, t3) {
                return super.prependListener(e3, t3), this;
              }
              once(e3, t3) {
                return super.once(e3, t3), this;
              }
              prependOnceListener(e3, t3) {
                return super.prependOnceListener(e3, t3), this;
              }
              removeListener(e3, t3) {
                return super.off(e3, t3), this;
              }
              removeAllListeners(e3) {
                return super.removeAllListeners(e3), this;
              }
              listenerCount(e3) {
                return super.listenerCount(e3);
              }
              listeners(e3) {
                return super.listeners(e3);
              }
              rawListeners(e3) {
                return super.rawListeners(e3);
              }
            }
            t2.EnhancedEventEmitter = s;
          },
          2994: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Logger = void 0;
            const n = a2(r2(7833)), s = "mediasoup-client";
            t2.Logger = class {
              constructor(e3) {
                e3 ? (this._debug = (0, n.default)(`${s}:${e3}`), this._warn = (0, n.default)(`${s}:WARN:${e3}`), this._error = (0, n.default)(`${s}:ERROR:${e3}`)) : (this._debug = (0, n.default)(s), this._warn = (0, n.default)(`${s}:WARN`), this._error = (0, n.default)(`${s}:ERROR`)), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
              }
              get debug() {
                return this._debug;
              }
              get warn() {
                return this._warn;
              }
              get error() {
                return this._error;
              }
            };
          },
          9792: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Producer = void 0;
            const a2 = r2(2994), n = r2(2010), s = r2(4893), i = new a2.Logger("Producer");
            class o extends n.EnhancedEventEmitter {
              constructor({
                id: e3,
                localId: t3,
                rtpSender: r3,
                track: a3,
                rtpParameters: s2,
                stopTracks: o2,
                disableTrackOnPause: c,
                zeroRtpOnPause: d,
                appData: l
              }) {
                super(), this._closed = false, this._observer = new n.EnhancedEventEmitter(), i.debug("constructor()"), this._id = e3, this._localId = t3, this._rtpSender = r3, this._track = a3, this._kind = a3.kind, this._rtpParameters = s2, this._paused = !!c && !a3.enabled, this._maxSpatialLayer = void 0, this._stopTracks = o2, this._disableTrackOnPause = c, this._zeroRtpOnPause = d, this._appData = l || {}, this.onTrackEnded = this.onTrackEnded.bind(this), this.handleTrack();
              }
              get id() {
                return this._id;
              }
              get localId() {
                return this._localId;
              }
              get closed() {
                return this._closed;
              }
              get kind() {
                return this._kind;
              }
              get rtpSender() {
                return this._rtpSender;
              }
              get track() {
                return this._track;
              }
              get rtpParameters() {
                return this._rtpParameters;
              }
              get paused() {
                return this._paused;
              }
              get maxSpatialLayer() {
                return this._maxSpatialLayer;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                this._closed || (i.debug("close()"), this._closed = true, this.destroyTrack(), this.emit("@close"), this._observer.safeEmit("close"));
              }
              transportClosed() {
                this._closed || (i.debug("transportClosed()"), this._closed = true, this.destroyTrack(), this.safeEmit("transportclose"), this._observer.safeEmit("close"));
              }
              async getStats() {
                if (this._closed) throw new s.InvalidStateError("closed");
                return new Promise((e3, t3) => {
                  this.safeEmit("@getstats", e3, t3);
                });
              }
              pause() {
                i.debug("pause()"), this._closed ? i.error("pause() | Producer closed") : (this._paused = true, this._track && this._disableTrackOnPause && (this._track.enabled = false), this._zeroRtpOnPause && new Promise((e3, t3) => {
                  this.safeEmit("@pause", e3, t3);
                }).catch(() => {
                }), this._observer.safeEmit("pause"));
              }
              resume() {
                i.debug("resume()"), this._closed ? i.error("resume() | Producer closed") : (this._paused = false, this._track && this._disableTrackOnPause && (this._track.enabled = true), this._zeroRtpOnPause && new Promise((e3, t3) => {
                  this.safeEmit("@resume", e3, t3);
                }).catch(() => {
                }), this._observer.safeEmit("resume"));
              }
              async replaceTrack({ track: e3 }) {
                if (i.debug("replaceTrack() [track:%o]", e3), this._closed) {
                  if (e3 && this._stopTracks)
                    try {
                      e3.stop();
                    } catch (e4) {
                    }
                  throw new s.InvalidStateError("closed");
                }
                if (e3 && "ended" === e3.readyState)
                  throw new s.InvalidStateError("track ended");
                e3 !== this._track ? (await new Promise((t3, r3) => {
                  this.safeEmit("@replacetrack", e3, t3, r3);
                }), this.destroyTrack(), this._track = e3, this._track && this._disableTrackOnPause && (this._paused ? this._paused && (this._track.enabled = false) : this._track.enabled = true), this.handleTrack()) : i.debug("replaceTrack() | same track, ignored");
              }
              async setMaxSpatialLayer(e3) {
                if (this._closed) throw new s.InvalidStateError("closed");
                if ("video" !== this._kind)
                  throw new s.UnsupportedError("not a video Producer");
                if ("number" != typeof e3)
                  throw new TypeError("invalid spatialLayer");
                e3 !== this._maxSpatialLayer && (await new Promise((t3, r3) => {
                  this.safeEmit("@setmaxspatiallayer", e3, t3, r3);
                }).catch(() => {
                }), this._maxSpatialLayer = e3);
              }
              async setRtpEncodingParameters(e3) {
                if (this._closed) throw new s.InvalidStateError("closed");
                if ("object" != typeof e3) throw new TypeError("invalid params");
                await new Promise((t3, r3) => {
                  this.safeEmit("@setrtpencodingparameters", e3, t3, r3);
                });
              }
              onTrackEnded() {
                i.debug('track "ended" event'), this.safeEmit("trackended"), this._observer.safeEmit("trackended");
              }
              handleTrack() {
                this._track && this._track.addEventListener("ended", this.onTrackEnded);
              }
              destroyTrack() {
                if (this._track)
                  try {
                    this._track.removeEventListener("ended", this.onTrackEnded), this._stopTracks && this._track.stop();
                  } catch (e3) {
                  }
              }
            }
            t2.Producer = o;
          },
          5370: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
          },
          4160: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
          },
          5601: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            }, i = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Transport = void 0;
            const o = r2(8876), c = i(r2(9596)), d = r2(2994), l = r2(2010), p = r2(4893), u = s(r2(1765)), h = s(r2(8046)), m = r2(9792), f = r2(3518), g = r2(7504), _ = r2(9166), v = new d.Logger("Transport");
            class b {
              constructor(e3) {
                this.consumerOptions = e3, this.promise = new Promise((e4, t3) => {
                  this.resolve = e4, this.reject = t3;
                });
              }
            }
            class y extends l.EnhancedEventEmitter {
              constructor({
                direction: e3,
                id: t3,
                iceParameters: r3,
                iceCandidates: a3,
                dtlsParameters: n2,
                sctpParameters: s2,
                iceServers: i2,
                iceTransportPolicy: c2,
                additionalSettings: d2,
                proprietaryConstraints: p2,
                appData: h2,
                handlerFactory: m2,
                extendedRtpCapabilities: f2,
                canProduceByKind: g2
              }) {
                super(), this._closed = false, this._iceGatheringState = "new", this._connectionState = "new", this._producers = /* @__PURE__ */ new Map(), this._consumers = /* @__PURE__ */ new Map(), this._dataProducers = /* @__PURE__ */ new Map(), this._dataConsumers = /* @__PURE__ */ new Map(), this._probatorConsumerCreated = false, this._awaitQueue = new o.AwaitQueue(), this._pendingConsumerTasks = [], this._consumerCreationInProgress = false, this._pendingPauseConsumers = /* @__PURE__ */ new Map(), this._consumerPauseInProgress = false, this._pendingResumeConsumers = /* @__PURE__ */ new Map(), this._consumerResumeInProgress = false, this._pendingCloseConsumers = /* @__PURE__ */ new Map(), this._consumerCloseInProgress = false, this._observer = new l.EnhancedEventEmitter(), v.debug("constructor() [id:%s, direction:%s]", t3, e3), this._id = t3, this._direction = e3, this._extendedRtpCapabilities = f2, this._canProduceByKind = g2, this._maxSctpMessageSize = s2 ? s2.maxMessageSize : null;
                const _2 = u.clone(d2) || {};
                delete _2.iceServers, delete _2.iceTransportPolicy, delete _2.bundlePolicy, delete _2.rtcpMuxPolicy, delete _2.sdpSemantics, this._handler = m2(), this._handler.run({
                  direction: e3,
                  iceParameters: r3,
                  iceCandidates: a3,
                  dtlsParameters: n2,
                  sctpParameters: s2,
                  iceServers: i2,
                  iceTransportPolicy: c2,
                  additionalSettings: _2,
                  proprietaryConstraints: p2,
                  extendedRtpCapabilities: f2
                }), this._appData = h2 || {}, this.handleHandler();
              }
              get id() {
                return this._id;
              }
              get closed() {
                return this._closed;
              }
              get direction() {
                return this._direction;
              }
              get handler() {
                return this._handler;
              }
              get iceGatheringState() {
                return this._iceGatheringState;
              }
              get connectionState() {
                return this._connectionState;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                if (!this._closed) {
                  v.debug("close()"), this._closed = true, this._awaitQueue.stop(), this._handler.close(), this._connectionState = "closed";
                  for (const e3 of this._producers.values()) e3.transportClosed();
                  this._producers.clear();
                  for (const e3 of this._consumers.values()) e3.transportClosed();
                  this._consumers.clear();
                  for (const e3 of this._dataProducers.values())
                    e3.transportClosed();
                  this._dataProducers.clear();
                  for (const e3 of this._dataConsumers.values())
                    e3.transportClosed();
                  this._dataConsumers.clear(), this._observer.safeEmit("close");
                }
              }
              async getStats() {
                if (this._closed) throw new p.InvalidStateError("closed");
                return this._handler.getTransportStats();
              }
              async restartIce({ iceParameters: e3 }) {
                if (v.debug("restartIce()"), this._closed)
                  throw new p.InvalidStateError("closed");
                if (!e3) throw new TypeError("missing iceParameters");
                return this._awaitQueue.push(
                  async () => await this._handler.restartIce(e3),
                  "transport.restartIce()"
                );
              }
              async updateIceServers({ iceServers: e3 } = {}) {
                if (v.debug("updateIceServers()"), this._closed)
                  throw new p.InvalidStateError("closed");
                if (!Array.isArray(e3)) throw new TypeError("missing iceServers");
                return this._awaitQueue.push(
                  async () => this._handler.updateIceServers(e3),
                  "transport.updateIceServers()"
                );
              }
              async produce({
                track: e3,
                encodings: t3,
                codecOptions: r3,
                codec: a3,
                stopTracks: n2 = true,
                disableTrackOnPause: s2 = true,
                zeroRtpOnPause: i2 = false,
                appData: o2 = {}
              } = {}) {
                if (v.debug("produce() [track:%o]", e3), this._closed)
                  throw new p.InvalidStateError("closed");
                if (!e3) throw new TypeError("missing track");
                if ("send" !== this._direction)
                  throw new p.UnsupportedError("not a sending Transport");
                if (!this._canProduceByKind[e3.kind])
                  throw new p.UnsupportedError(`cannot produce ${e3.kind}`);
                if ("ended" === e3.readyState)
                  throw new p.InvalidStateError("track ended");
                if (0 === this.listenerCount("connect") && "new" === this._connectionState)
                  throw new TypeError(
                    'no "connect" listener set into this transport'
                  );
                if (0 === this.listenerCount("produce"))
                  throw new TypeError(
                    'no "produce" listener set into this transport'
                  );
                if (o2 && "object" != typeof o2)
                  throw new TypeError("if given, appData must be an object");
                return this._awaitQueue.push(async () => {
                  let c2;
                  if (t3 && !Array.isArray(t3))
                    throw TypeError("encodings must be an array");
                  t3 && 0 === t3.length ? c2 = void 0 : t3 && (c2 = t3.map((e4) => {
                    const t4 = { active: true };
                    return false === e4.active && (t4.active = false), "boolean" == typeof e4.dtx && (t4.dtx = e4.dtx), "string" == typeof e4.scalabilityMode && (t4.scalabilityMode = e4.scalabilityMode), "number" == typeof e4.scaleResolutionDownBy && (t4.scaleResolutionDownBy = e4.scaleResolutionDownBy), "number" == typeof e4.maxBitrate && (t4.maxBitrate = e4.maxBitrate), "number" == typeof e4.maxFramerate && (t4.maxFramerate = e4.maxFramerate), "boolean" == typeof e4.adaptivePtime && (t4.adaptivePtime = e4.adaptivePtime), "string" == typeof e4.priority && (t4.priority = e4.priority), "string" == typeof e4.networkPriority && (t4.networkPriority = e4.networkPriority), t4;
                  }));
                  const {
                    localId: d2,
                    rtpParameters: l2,
                    rtpSender: p2
                  } = await this._handler.send({
                    track: e3,
                    encodings: c2,
                    codecOptions: r3,
                    codec: a3
                  });
                  try {
                    h.validateRtpParameters(l2);
                    const { id: t4 } = await new Promise((t5, r5) => {
                      this.safeEmit(
                        "produce",
                        { kind: e3.kind, rtpParameters: l2, appData: o2 },
                        t5,
                        r5
                      );
                    }), r4 = new m.Producer({
                      id: t4,
                      localId: d2,
                      rtpSender: p2,
                      track: e3,
                      rtpParameters: l2,
                      stopTracks: n2,
                      disableTrackOnPause: s2,
                      zeroRtpOnPause: i2,
                      appData: o2
                    });
                    return this._producers.set(r4.id, r4), this.handleProducer(r4), this._observer.safeEmit("newproducer", r4), r4;
                  } catch (e4) {
                    throw this._handler.stopSending(d2).catch(() => {
                    }), e4;
                  }
                }, "transport.produce()").catch((t4) => {
                  if (n2)
                    try {
                      e3.stop();
                    } catch (e4) {
                    }
                  throw t4;
                });
              }
              async consume({
                id: e3,
                producerId: t3,
                kind: r3,
                rtpParameters: a3,
                streamId: n2,
                appData: s2 = {}
              }) {
                if (v.debug("consume()"), this._closed)
                  throw new p.InvalidStateError("closed");
                if ("recv" !== this._direction)
                  throw new p.UnsupportedError("not a receiving Transport");
                if ("string" != typeof e3) throw new TypeError("missing id");
                if ("string" != typeof t3)
                  throw new TypeError("missing producerId");
                if ("audio" !== r3 && "video" !== r3)
                  throw new TypeError(`invalid kind '${r3}'`);
                if (0 === this.listenerCount("connect") && "new" === this._connectionState)
                  throw new TypeError(
                    'no "connect" listener set into this transport'
                  );
                if (s2 && "object" != typeof s2)
                  throw new TypeError("if given, appData must be an object");
                const i2 = u.clone(a3);
                if (!h.canReceive(i2, this._extendedRtpCapabilities))
                  throw new p.UnsupportedError("cannot consume this Producer");
                const o2 = new b({
                  id: e3,
                  producerId: t3,
                  kind: r3,
                  rtpParameters: i2,
                  streamId: n2,
                  appData: s2
                });
                return this._pendingConsumerTasks.push(o2), (0, c.default)(() => {
                  this._closed || false === this._consumerCreationInProgress && this.createPendingConsumers();
                }), o2.promise;
              }
              async produceData({
                ordered: e3 = true,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: a3 = "",
                protocol: n2 = "",
                appData: s2 = {}
              } = {}) {
                if (v.debug("produceData()"), this._closed)
                  throw new p.InvalidStateError("closed");
                if ("send" !== this._direction)
                  throw new p.UnsupportedError("not a sending Transport");
                if (!this._maxSctpMessageSize)
                  throw new p.UnsupportedError(
                    "SCTP not enabled by remote Transport"
                  );
                if (0 === this.listenerCount("connect") && "new" === this._connectionState)
                  throw new TypeError(
                    'no "connect" listener set into this transport'
                  );
                if (0 === this.listenerCount("producedata"))
                  throw new TypeError(
                    'no "producedata" listener set into this transport'
                  );
                if (s2 && "object" != typeof s2)
                  throw new TypeError("if given, appData must be an object");
                return (t3 || r3) && (e3 = false), this._awaitQueue.push(async () => {
                  const { dataChannel: i2, sctpStreamParameters: o2 } = await this._handler.sendDataChannel({
                    ordered: e3,
                    maxPacketLifeTime: t3,
                    maxRetransmits: r3,
                    label: a3,
                    protocol: n2
                  });
                  h.validateSctpStreamParameters(o2);
                  const { id: c2 } = await new Promise((e4, t4) => {
                    this.safeEmit(
                      "producedata",
                      {
                        sctpStreamParameters: o2,
                        label: a3,
                        protocol: n2,
                        appData: s2
                      },
                      e4,
                      t4
                    );
                  }), d2 = new g.DataProducer({
                    id: c2,
                    dataChannel: i2,
                    sctpStreamParameters: o2,
                    appData: s2
                  });
                  return this._dataProducers.set(d2.id, d2), this.handleDataProducer(d2), this._observer.safeEmit("newdataproducer", d2), d2;
                }, "transport.produceData()");
              }
              async consumeData({
                id: e3,
                dataProducerId: t3,
                sctpStreamParameters: r3,
                label: a3 = "",
                protocol: n2 = "",
                appData: s2 = {}
              }) {
                if (v.debug("consumeData()"), this._closed)
                  throw new p.InvalidStateError("closed");
                if ("recv" !== this._direction)
                  throw new p.UnsupportedError("not a receiving Transport");
                if (!this._maxSctpMessageSize)
                  throw new p.UnsupportedError(
                    "SCTP not enabled by remote Transport"
                  );
                if ("string" != typeof e3) throw new TypeError("missing id");
                if ("string" != typeof t3)
                  throw new TypeError("missing dataProducerId");
                if (0 === this.listenerCount("connect") && "new" === this._connectionState)
                  throw new TypeError(
                    'no "connect" listener set into this transport'
                  );
                if (s2 && "object" != typeof s2)
                  throw new TypeError("if given, appData must be an object");
                const i2 = u.clone(r3);
                return h.validateSctpStreamParameters(i2), this._awaitQueue.push(async () => {
                  const { dataChannel: r4 } = await this._handler.receiveDataChannel({
                    sctpStreamParameters: i2,
                    label: a3,
                    protocol: n2
                  }), o2 = new _.DataConsumer({
                    id: e3,
                    dataProducerId: t3,
                    dataChannel: r4,
                    sctpStreamParameters: i2,
                    appData: s2
                  });
                  return this._dataConsumers.set(o2.id, o2), this.handleDataConsumer(o2), this._observer.safeEmit("newdataconsumer", o2), o2;
                }, "transport.consumeData()");
              }
              async createPendingConsumers() {
                this._consumerCreationInProgress = true, this._awaitQueue.push(async () => {
                  if (0 === this._pendingConsumerTasks.length)
                    return void v.debug(
                      "createPendingConsumers() | there is no Consumer to be created"
                    );
                  const e3 = [...this._pendingConsumerTasks];
                  let t3;
                  this._pendingConsumerTasks = [];
                  const r3 = [];
                  for (const t4 of e3) {
                    const {
                      id: e4,
                      kind: a3,
                      rtpParameters: n2,
                      streamId: s2
                    } = t4.consumerOptions;
                    r3.push({
                      trackId: e4,
                      kind: a3,
                      rtpParameters: n2,
                      streamId: s2
                    });
                  }
                  try {
                    const a3 = await this._handler.receive(r3);
                    for (let r4 = 0; r4 < a3.length; ++r4) {
                      const n2 = e3[r4], s2 = a3[r4], {
                        id: i2,
                        producerId: o2,
                        kind: c2,
                        rtpParameters: d2,
                        appData: l2
                      } = n2.consumerOptions, { localId: p2, rtpReceiver: u2, track: h2 } = s2, m2 = new f.Consumer({
                        id: i2,
                        localId: p2,
                        producerId: o2,
                        rtpReceiver: u2,
                        track: h2,
                        rtpParameters: d2,
                        appData: l2
                      });
                      this._consumers.set(m2.id, m2), this.handleConsumer(m2), this._probatorConsumerCreated || t3 || "video" !== c2 || (t3 = m2), this._observer.safeEmit("newconsumer", m2), n2.resolve(m2);
                    }
                  } catch (t4) {
                    for (const r4 of e3) r4.reject(t4);
                  }
                  if (t3)
                    try {
                      const e4 = h.generateProbatorRtpParameters(
                        t3.rtpParameters
                      );
                      await this._handler.receive([
                        {
                          trackId: "probator",
                          kind: "video",
                          rtpParameters: e4
                        }
                      ]), v.debug(
                        "createPendingConsumers() | Consumer for RTP probation created"
                      ), this._probatorConsumerCreated = true;
                    } catch (e4) {
                      v.error(
                        "createPendingConsumers() | failed to create Consumer for RTP probation:%o",
                        e4
                      );
                    }
                }, "transport.createPendingConsumers()").then(() => {
                  this._consumerCreationInProgress = false, this._pendingConsumerTasks.length > 0 && this.createPendingConsumers();
                }).catch(() => {
                });
              }
              pausePendingConsumers() {
                this._consumerPauseInProgress = true, this._awaitQueue.push(async () => {
                  if (0 === this._pendingPauseConsumers.size)
                    return void v.debug(
                      "pausePendingConsumers() | there is no Consumer to be paused"
                    );
                  const e3 = Array.from(this._pendingPauseConsumers.values());
                  this._pendingPauseConsumers.clear();
                  try {
                    const t3 = e3.map((e4) => e4.localId);
                    await this._handler.pauseReceiving(t3);
                  } catch (e4) {
                    v.error(
                      "pausePendingConsumers() | failed to pause Consumers:",
                      e4
                    );
                  }
                }, "transport.pausePendingConsumers").then(() => {
                  this._consumerPauseInProgress = false, this._pendingPauseConsumers.size > 0 && this.pausePendingConsumers();
                }).catch(() => {
                });
              }
              resumePendingConsumers() {
                this._consumerResumeInProgress = true, this._awaitQueue.push(async () => {
                  if (0 === this._pendingResumeConsumers.size)
                    return void v.debug(
                      "resumePendingConsumers() | there is no Consumer to be resumed"
                    );
                  const e3 = Array.from(this._pendingResumeConsumers.values());
                  this._pendingResumeConsumers.clear();
                  try {
                    const t3 = e3.map((e4) => e4.localId);
                    await this._handler.resumeReceiving(t3);
                  } catch (e4) {
                    v.error(
                      "resumePendingConsumers() | failed to resume Consumers:",
                      e4
                    );
                  }
                }, "transport.resumePendingConsumers").then(() => {
                  this._consumerResumeInProgress = false, this._pendingResumeConsumers.size > 0 && this.resumePendingConsumers();
                }).catch(() => {
                });
              }
              closePendingConsumers() {
                this._consumerCloseInProgress = true, this._awaitQueue.push(async () => {
                  if (0 === this._pendingCloseConsumers.size)
                    return void v.debug(
                      "closePendingConsumers() | there is no Consumer to be closed"
                    );
                  const e3 = Array.from(this._pendingCloseConsumers.values());
                  this._pendingCloseConsumers.clear();
                  try {
                    await this._handler.stopReceiving(
                      e3.map((e4) => e4.localId)
                    );
                  } catch (e4) {
                    v.error(
                      "closePendingConsumers() | failed to close Consumers:",
                      e4
                    );
                  }
                }, "transport.closePendingConsumers").then(() => {
                  this._consumerCloseInProgress = false, this._pendingCloseConsumers.size > 0 && this.closePendingConsumers();
                }).catch(() => {
                });
              }
              handleHandler() {
                const e3 = this._handler;
                e3.on("@connect", ({ dtlsParameters: e4 }, t3, r3) => {
                  this._closed ? r3(new p.InvalidStateError("closed")) : this.safeEmit("connect", { dtlsParameters: e4 }, t3, r3);
                }), e3.on("@icegatheringstatechange", (e4) => {
                  e4 !== this._iceGatheringState && (v.debug("ICE gathering state changed to %s", e4), this._iceGatheringState = e4, this._closed || this.safeEmit("icegatheringstatechange", e4));
                }), e3.on("@connectionstatechange", (e4) => {
                  e4 !== this._connectionState && (v.debug("connection state changed to %s", e4), this._connectionState = e4, this._closed || this.safeEmit("connectionstatechange", e4));
                });
              }
              handleProducer(e3) {
                e3.on("@close", () => {
                  this._producers.delete(e3.id), this._closed || this._awaitQueue.push(
                    async () => await this._handler.stopSending(e3.localId),
                    "producer @close event"
                  ).catch((e4) => v.warn("producer.close() failed:%o", e4));
                }), e3.on("@pause", (t3, r3) => {
                  this._awaitQueue.push(
                    async () => await this._handler.pauseSending(e3.localId),
                    "producer @pause event"
                  ).then(t3).catch(r3);
                }), e3.on("@resume", (t3, r3) => {
                  this._awaitQueue.push(
                    async () => await this._handler.resumeSending(e3.localId),
                    "producer @resume event"
                  ).then(t3).catch(r3);
                }), e3.on("@replacetrack", (t3, r3, a3) => {
                  this._awaitQueue.push(
                    async () => await this._handler.replaceTrack(e3.localId, t3),
                    "producer @replacetrack event"
                  ).then(r3).catch(a3);
                }), e3.on("@setmaxspatiallayer", (t3, r3, a3) => {
                  this._awaitQueue.push(
                    async () => await this._handler.setMaxSpatialLayer(e3.localId, t3),
                    "producer @setmaxspatiallayer event"
                  ).then(r3).catch(a3);
                }), e3.on("@setrtpencodingparameters", (t3, r3, a3) => {
                  this._awaitQueue.push(
                    async () => await this._handler.setRtpEncodingParameters(
                      e3.localId,
                      t3
                    ),
                    "producer @setrtpencodingparameters event"
                  ).then(r3).catch(a3);
                }), e3.on("@getstats", (t3, r3) => {
                  if (this._closed) return r3(new p.InvalidStateError("closed"));
                  this._handler.getSenderStats(e3.localId).then(t3).catch(r3);
                });
              }
              handleConsumer(e3) {
                e3.on("@close", () => {
                  this._consumers.delete(e3.id), this._pendingPauseConsumers.delete(e3.id), this._pendingResumeConsumers.delete(e3.id), this._closed || (this._pendingCloseConsumers.set(e3.id, e3), false === this._consumerCloseInProgress && this.closePendingConsumers());
                }), e3.on("@pause", () => {
                  this._pendingResumeConsumers.has(e3.id) && this._pendingResumeConsumers.delete(e3.id), this._pendingPauseConsumers.set(e3.id, e3), (0, c.default)(() => {
                    this._closed || false === this._consumerPauseInProgress && this.pausePendingConsumers();
                  });
                }), e3.on("@resume", () => {
                  this._pendingPauseConsumers.has(e3.id) && this._pendingPauseConsumers.delete(e3.id), this._pendingResumeConsumers.set(e3.id, e3), (0, c.default)(() => {
                    this._closed || false === this._consumerResumeInProgress && this.resumePendingConsumers();
                  });
                }), e3.on("@getstats", (t3, r3) => {
                  if (this._closed) return r3(new p.InvalidStateError("closed"));
                  this._handler.getReceiverStats(e3.localId).then(t3).catch(r3);
                });
              }
              handleDataProducer(e3) {
                e3.on("@close", () => {
                  this._dataProducers.delete(e3.id);
                });
              }
              handleDataConsumer(e3) {
                e3.on("@close", () => {
                  this._dataConsumers.delete(e3.id);
                });
              }
            }
            t2.Transport = y;
          },
          4893: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.InvalidStateError = t2.UnsupportedError = void 0;
            class r2 extends Error {
              constructor(e3) {
                super(e3), this.name = "UnsupportedError", Error.hasOwnProperty("captureStackTrace") ? Error.captureStackTrace(this, r2) : this.stack = new Error(e3).stack;
              }
            }
            t2.UnsupportedError = r2;
            class a2 extends Error {
              constructor(e3) {
                super(e3), this.name = "InvalidStateError", Error.hasOwnProperty("captureStackTrace") ? Error.captureStackTrace(this, a2) : this.stack = new Error(e3).stack;
              }
            }
            t2.InvalidStateError = a2;
          },
          2183: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome111 = void 0;
            const i = s(r2(7363)), o = r2(2994), c = s(r2(1765)), d = s(r2(8046)), l = s(r2(5544)), p = s(r2(5938)), u = s(r2(4256)), h = r2(4893), m = r2(521), f = r2(1305), g = r2(3303), _ = new o.Logger("Chrome111"), v = { OS: 1024, MIS: 1024 };
            class b extends m.HandlerInterface {
              static createFactory() {
                return () => new b();
              }
              constructor() {
                super(), this._closed = false, this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome111";
              }
              close() {
                if (_.debug("close()"), !this._closed) {
                  if (this._closed = true, this._pc)
                    try {
                      this._pc.close();
                    } catch (e3) {
                    }
                  this.emit("@close");
                }
              }
              async getNativeRtpCapabilities() {
                _.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "unified-plan"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = i.parse(t3.sdp), a3 = l.extractRtpCapabilities({ sdpObject: r3 });
                  return u.addNackSuppportForOpus(a3), a3;
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return _.debug("getNativeSctpCapabilities()"), { numStreams: v };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                this.assertNotClosed(), _.debug("run()"), this._direction = e3, this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, a3.role && "auto" !== a3.role && (this._forcedLocalDtlsRole = "server" === a3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: s2 || [],
                    iceTransportPolicy: i2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : (_.warn(
                  "run() | pc.connectionState not supported, using pc.iceConnectionState"
                ), this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                ));
              }
              async updateIceServers(e3) {
                this.assertNotClosed(), _.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (this.assertNotClosed(), _.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this.assertNotClosed(), this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: a3 }) {
                if (this.assertNotClosed(), this.assertSendDirection(), _.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && t3.length > 1) {
                  let e4 = 1;
                  for (const r4 of t3) {
                    const t4 = r4.scalabilityMode ? (0, g.parse)(r4.scalabilityMode).temporalLayers : 3;
                    t4 > e4 && (e4 = t4);
                  }
                  t3.forEach((t4, r4) => {
                    t4.rid = `r${r4}`, t4.scalabilityMode = `L1T${e4}`;
                  });
                }
                const n2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                n2.codecs = d.reduceCodecs(n2.codecs, a3);
                const s2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                s2.codecs = d.reduceCodecs(s2.codecs, a3);
                const o2 = this._remoteSdp.getNextMediaSectionIdx(), u2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t3
                }), h2 = await this._pc.createOffer();
                let m2 = i.parse(h2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: m2
                }), _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  h2
                ), await this._pc.setLocalDescription(h2);
                const f2 = u2.mid;
                n2.mid = f2, m2 = i.parse(this._pc.localDescription.sdp);
                const v2 = m2.media[o2.idx];
                if (n2.rtcp.cname = l.getCname({ offerMediaObject: v2 }), t3)
                  if (1 === t3.length) {
                    const e4 = p.getRtpEncodings({ offerMediaObject: v2 });
                    Object.assign(e4[0], t3[0]), n2.encodings = e4;
                  } else n2.encodings = t3;
                else n2.encodings = p.getRtpEncodings({ offerMediaObject: v2 });
                this._remoteSdp.send({
                  offerMediaObject: v2,
                  reuseMid: o2.reuseMid,
                  offerRtpParameters: n2,
                  answerRtpParameters: s2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const b2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  b2
                ), await this._pc.setRemoteDescription(b2), this._mapMidTransceiver.set(f2, u2), { localId: f2, rtpParameters: n2, rtpSender: u2.sender };
              }
              async stopSending(e3) {
                if (this.assertSendDirection(), _.debug("stopSending() [localId:%s]", e3), this._closed)
                  return;
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                _.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async resumeSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (this._remoteSdp.resumeSendingMediaSection(e3), !t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly";
                const r3 = await this._pc.createOffer();
                _.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async replaceTrack(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), t3 ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : _.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  a3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async getSenderStats(e3) {
                this.assertNotClosed(), this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: a3,
                protocol: n2
              }) {
                this.assertNotClosed(), this.assertSendDirection();
                const s2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: n2
                };
                _.debug("sendDataChannel() [options:%o]", s2);
                const o2 = this._pc.createDataChannel(a3, s2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % v.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = i.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const a4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    a4
                  ), await this._pc.setRemoteDescription(a4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: s2.id,
                    ordered: s2.ordered,
                    maxPacketLifeTime: s2.maxPacketLifeTime,
                    maxRetransmits: s2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: a4,
                    rtpParameters: n3,
                    streamId: s3
                  } = t4;
                  _.debug("receive() [trackId:%s, kind:%s]", e4, a4);
                  const i2 = n3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, i2), this._remoteSdp.receive({
                    mid: i2,
                    kind: a4,
                    offerRtpParameters: n3,
                    streamId: s3 || n3.rtcp.cname,
                    trackId: e4
                  });
                }
                const a3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
                let n2 = await this._pc.createAnswer();
                const s2 = i.parse(n2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: a4 } = t4, n3 = r3.get(e4), i2 = s2.media.find((e5) => String(e5.mid) === n3);
                  l.applyCodecParameters({
                    offerRtpParameters: a4,
                    answerMediaObject: i2
                  });
                }
                n2 = { type: "answer", sdp: i.write(s2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: s2
                }), _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                for (const a4 of e3) {
                  const { trackId: e4 } = a4, n3 = r3.get(e4), s3 = this._pc.getTransceivers().find((e5) => e5.mid === n3);
                  if (!s3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(n3, s3), t3.push({
                    localId: n3,
                    track: s3.receiver.track,
                    rtpReceiver: s3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                if (this.assertRecvDirection(), this._closed) return;
                for (const t4 of e3) {
                  _.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertNotClosed(), this.assertRecvDirection();
                const {
                  streamId: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                _.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = i.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = i.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertNotClosed() {
                if (this._closed)
                  throw new h.InvalidStateError(
                    "method called in a closed handler"
                  );
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome111 = b;
          },
          7402: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome55 = void 0;
            const i = s(r2(7363)), o = r2(2994), c = r2(4893), d = s(r2(1765)), l = s(r2(8046)), p = s(r2(5544)), u = s(r2(4496)), h = r2(521), m = r2(1305), f = new o.Logger("Chrome55"), g = { OS: 1024, MIS: 1024 };
            class _ extends h.HandlerInterface {
              static createFactory() {
                return () => new _();
              }
              constructor() {
                super(), this._sendStream = new MediaStream(), this._mapSendLocalIdTrack = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome55";
              }
              close() {
                if (f.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                f.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "plan-b"
                });
                try {
                  const t3 = await e3.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                  });
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = i.parse(t3.sdp);
                  return p.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return f.debug("getNativeSctpCapabilities()"), { numStreams: g };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: d2
              }) {
                f.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2,
                  planB: true
                }), this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d2),
                  video: l.getSendingRtpParameters("video", d2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d2),
                  video: l.getSendingRemoteRtpParameters("video", d2)
                }, a3.role && "auto" !== a3.role && (this._forcedLocalDtlsRole = "server" === a3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: s2 || [],
                    iceTransportPolicy: i2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (f.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                f.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (f.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: a3 }) {
                this.assertSendDirection(), f.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), a3 && f.warn(
                  "send() | codec selection is not available in %s handler",
                  this.name
                ), this._sendStream.addTrack(e3), this._pc.addStream(this._sendStream);
                let n2, s2 = await this._pc.createOffer(), o2 = i.parse(s2.sdp);
                const c2 = d.clone(this._sendingRtpParametersByKind[e3.kind]);
                c2.codecs = l.reduceCodecs(c2.codecs);
                const h2 = d.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                if (h2.codecs = l.reduceCodecs(h2.codecs), this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: o2
                }), "video" === e3.kind && t3 && t3.length > 1 && (f.debug("send() | enabling simulcast"), o2 = i.parse(s2.sdp), n2 = o2.media.find((e4) => "video" === e4.type), u.addLegacySimulcast({
                  offerMediaObject: n2,
                  track: e3,
                  numStreams: t3.length
                }), s2 = { type: "offer", sdp: i.write(o2) }), f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2), o2 = i.parse(this._pc.localDescription.sdp), n2 = o2.media.find((t4) => t4.type === e3.kind), c2.rtcp.cname = p.getCname({ offerMediaObject: n2 }), c2.encodings = u.getRtpEncodings({
                  offerMediaObject: n2,
                  track: e3
                }), t3)
                  for (let e4 = 0; e4 < c2.encodings.length; ++e4)
                    t3[e4] && Object.assign(c2.encodings[e4], t3[e4]);
                if (c2.encodings.length > 1 && "video/vp8" === c2.codecs[0].mimeType.toLowerCase())
                  for (const e4 of c2.encodings) e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: n2,
                  offerRtpParameters: c2,
                  answerRtpParameters: h2,
                  codecOptions: r3
                });
                const m2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  m2
                ), await this._pc.setRemoteDescription(m2);
                const g2 = String(this._nextSendLocalId);
                return this._nextSendLocalId++, this._mapSendLocalIdTrack.set(g2, e3), { localId: g2, rtpParameters: c2 };
              }
              async stopSending(e3) {
                this.assertSendDirection(), f.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapSendLocalIdTrack.get(e3);
                if (!t3) throw new Error("track not found");
                this._mapSendLocalIdTrack.delete(e3), this._sendStream.removeTrack(t3), this._pc.addStream(this._sendStream);
                const r3 = await this._pc.createOffer();
                f.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                );
                try {
                  await this._pc.setLocalDescription(r3);
                } catch (e4) {
                  if (0 === this._sendStream.getTracks().length)
                    return void f.warn(
                      "stopSending() | ignoring expected error due no sending tracks: %s",
                      e4.toString()
                    );
                  throw e4;
                }
                if ("stable" === this._pc.signalingState) return;
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                throw new c.UnsupportedError("not implemented");
              }
              async setMaxSpatialLayer(e3, t3) {
                throw new c.UnsupportedError(" not implemented");
              }
              async setRtpEncodingParameters(e3, t3) {
                throw new c.UnsupportedError("not supported");
              }
              async getSenderStats(e3) {
                throw new c.UnsupportedError("not implemented");
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: a3,
                protocol: n2
              }) {
                this.assertSendDirection();
                const s2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmitTime: t3,
                  maxRetransmits: r3,
                  protocol: n2
                };
                f.debug("sendDataChannel() [options:%o]", s2);
                const o2 = this._pc.createDataChannel(a3, s2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % g.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = i.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const a4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    a4
                  ), await this._pc.setRemoteDescription(a4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: s2.id,
                    ordered: s2.ordered,
                    maxPacketLifeTime: s2.maxPacketLifeTime,
                    maxRetransmits: s2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertRecvDirection();
                const t3 = [];
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: a4,
                    streamId: n3
                  } = t4;
                  f.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const s2 = r4;
                  this._remoteSdp.receive({
                    mid: s2,
                    kind: r4,
                    offerRtpParameters: a4,
                    streamId: n3 || a4.rtcp.cname,
                    trackId: e4
                  });
                }
                const r3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  r3
                ), await this._pc.setRemoteDescription(r3);
                let a3 = await this._pc.createAnswer();
                const n2 = i.parse(a3.sdp);
                for (const t4 of e3) {
                  const { kind: e4, rtpParameters: r4 } = t4, a4 = e4, s2 = n2.media.find((e5) => String(e5.mid) === a4);
                  p.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: s2
                  });
                }
                a3 = { type: "answer", sdp: i.write(n2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: n2
                }), f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  a3
                ), await this._pc.setLocalDescription(a3);
                for (const r4 of e3) {
                  const { kind: e4, trackId: a4, rtpParameters: n3 } = r4, s2 = e4, i2 = a4, o2 = r4.streamId || n3.rtcp.cname, c2 = this._pc.getRemoteStreams().find((e5) => e5.id === o2).getTrackById(i2);
                  if (!c2) throw new Error("remote track not found");
                  this._mapRecvLocalIdInfo.set(i2, { mid: s2, rtpParameters: n3 }), t3.push({ localId: i2, track: c2 });
                }
                return t3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  f.debug("stopReceiving() [localId:%s]", t4);
                  const { mid: e4, rtpParameters: r4 } = this._mapRecvLocalIdInfo.get(t4) || {};
                  this._mapRecvLocalIdInfo.delete(t4), this._remoteSdp.planBStopReceiving({
                    mid: e4,
                    offerRtpParameters: r4
                  });
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                f.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                throw new c.UnsupportedError("not implemented");
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertRecvDirection();
                const {
                  streamId: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmitTime: s2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                f.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation({
                    oldDataChannelSpec: true
                  });
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = i.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = i.parse(this._pc.localDescription.sdp));
                const r3 = p.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome55 = _;
          },
          8155: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome67 = void 0;
            const i = s(r2(7363)), o = r2(2994), c = s(r2(1765)), d = s(r2(8046)), l = s(r2(5544)), p = s(r2(4496)), u = r2(521), h = r2(1305), m = new o.Logger("Chrome67"), f = { OS: 1024, MIS: 1024 };
            class g extends u.HandlerInterface {
              static createFactory() {
                return () => new g();
              }
              constructor() {
                super(), this._sendStream = new MediaStream(), this._mapSendLocalIdRtpSender = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome67";
              }
              close() {
                if (m.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                m.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "plan-b"
                });
                try {
                  const t3 = await e3.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                  });
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = i.parse(t3.sdp);
                  return l.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                m.debug("run()"), this._direction = e3, this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2,
                  planB: true
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, a3.role && "auto" !== a3.role && (this._forcedLocalDtlsRole = "server" === a3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: s2 || [],
                    iceTransportPolicy: i2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (m.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                m.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (m.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    m.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    m.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    m.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    m.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: a3 }) {
                this.assertSendDirection(), m.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), a3 && m.warn(
                  "send() | codec selection is not available in %s handler",
                  this.name
                ), this._sendStream.addTrack(e3), this._pc.addTrack(e3, this._sendStream);
                let n2, s2 = await this._pc.createOffer(), o2 = i.parse(s2.sdp);
                const u2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                u2.codecs = d.reduceCodecs(u2.codecs);
                const h2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                if (h2.codecs = d.reduceCodecs(h2.codecs), this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: o2
                }), "video" === e3.kind && t3 && t3.length > 1 && (m.debug("send() | enabling simulcast"), o2 = i.parse(s2.sdp), n2 = o2.media.find((e4) => "video" === e4.type), p.addLegacySimulcast({
                  offerMediaObject: n2,
                  track: e3,
                  numStreams: t3.length
                }), s2 = { type: "offer", sdp: i.write(o2) }), m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2), o2 = i.parse(this._pc.localDescription.sdp), n2 = o2.media.find((t4) => t4.type === e3.kind), u2.rtcp.cname = l.getCname({ offerMediaObject: n2 }), u2.encodings = p.getRtpEncodings({
                  offerMediaObject: n2,
                  track: e3
                }), t3)
                  for (let e4 = 0; e4 < u2.encodings.length; ++e4)
                    t3[e4] && Object.assign(u2.encodings[e4], t3[e4]);
                if (u2.encodings.length > 1 && "video/vp8" === u2.codecs[0].mimeType.toLowerCase())
                  for (const e4 of u2.encodings) e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: n2,
                  offerRtpParameters: u2,
                  answerRtpParameters: h2,
                  codecOptions: r3
                });
                const f2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  f2
                ), await this._pc.setRemoteDescription(f2);
                const g2 = String(this._nextSendLocalId);
                this._nextSendLocalId++;
                const _ = this._pc.getSenders().find((t4) => t4.track === e3);
                return this._mapSendLocalIdRtpSender.set(g2, _), { localId: g2, rtpParameters: u2, rtpSender: _ };
              }
              async stopSending(e3) {
                this.assertSendDirection(), m.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!t3) throw new Error("associated RTCRtpSender not found");
                this._pc.removeTrack(t3), t3.track && this._sendStream.removeTrack(t3.track), this._mapSendLocalIdRtpSender.delete(e3);
                const r3 = await this._pc.createOffer();
                m.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                );
                try {
                  await this._pc.setLocalDescription(r3);
                } catch (e4) {
                  if (0 === this._sendStream.getTracks().length)
                    return void m.warn(
                      "stopSending() | ignoring expected error due no sending tracks: %s",
                      e4.toString()
                    );
                  throw e4;
                }
                if ("stable" === this._pc.signalingState) return;
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : m.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3) throw new Error("associated RTCRtpSender not found");
                const a3 = r3.track;
                await r3.replaceTrack(t3), a3 && this._sendStream.removeTrack(a3), t3 && this._sendStream.addTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3) throw new Error("associated RTCRtpSender not found");
                const a3 = r3.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.setParameters(a3);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3) throw new Error("associated RTCRtpSender not found");
                const a3 = r3.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  a3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.setParameters(a3);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!t3) throw new Error("associated RTCRtpSender not found");
                return t3.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: a3,
                protocol: n2
              }) {
                this.assertSendDirection();
                const s2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmitTime: t3,
                  maxRetransmits: r3,
                  protocol: n2
                };
                m.debug("sendDataChannel() [options:%o]", s2);
                const o2 = this._pc.createDataChannel(a3, s2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % f.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = i.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const a4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    a4
                  ), await this._pc.setRemoteDescription(a4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: s2.id,
                    ordered: s2.ordered,
                    maxPacketLifeTime: s2.maxPacketLifeTime,
                    maxRetransmits: s2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertRecvDirection();
                const t3 = [];
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: a4,
                    streamId: n3
                  } = t4;
                  m.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const s2 = r4;
                  this._remoteSdp.receive({
                    mid: s2,
                    kind: r4,
                    offerRtpParameters: a4,
                    streamId: n3 || a4.rtcp.cname,
                    trackId: e4
                  });
                }
                const r3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  r3
                ), await this._pc.setRemoteDescription(r3);
                let a3 = await this._pc.createAnswer();
                const n2 = i.parse(a3.sdp);
                for (const t4 of e3) {
                  const { kind: e4, rtpParameters: r4 } = t4, a4 = e4, s2 = n2.media.find((e5) => String(e5.mid) === a4);
                  l.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: s2
                  });
                }
                a3 = { type: "answer", sdp: i.write(n2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: n2
                }), m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  a3
                ), await this._pc.setLocalDescription(a3);
                for (const r4 of e3) {
                  const { kind: e4, trackId: a4, rtpParameters: n3 } = r4, s2 = a4, i2 = e4, o2 = this._pc.getReceivers().find((e5) => e5.track && e5.track.id === s2);
                  if (!o2) throw new Error("new RTCRtpReceiver not");
                  this._mapRecvLocalIdInfo.set(s2, {
                    mid: i2,
                    rtpParameters: n3,
                    rtpReceiver: o2
                  }), t3.push({ localId: s2, track: o2.track, rtpReceiver: o2 });
                }
                return t3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  m.debug("stopReceiving() [localId:%s]", t4);
                  const { mid: e4, rtpParameters: r4 } = this._mapRecvLocalIdInfo.get(t4) || {};
                  this._mapRecvLocalIdInfo.delete(t4), this._remoteSdp.planBStopReceiving({
                    mid: e4,
                    offerRtpParameters: r4
                  });
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                m.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const { rtpReceiver: t3 } = this._mapRecvLocalIdInfo.get(e3) || {};
                if (!t3) throw new Error("associated RTCRtpReceiver not found");
                return t3.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertRecvDirection();
                const {
                  streamId: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmitTime: s2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                m.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation({
                    oldDataChannelSpec: true
                  });
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = i.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  m.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = i.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome67 = g;
          },
          5535: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome70 = void 0;
            const i = s(r2(7363)), o = r2(2994), c = s(r2(1765)), d = s(r2(8046)), l = s(r2(5544)), p = s(r2(5938)), u = r2(521), h = r2(1305), m = r2(3303), f = new o.Logger("Chrome70"), g = { OS: 1024, MIS: 1024 };
            class _ extends u.HandlerInterface {
              static createFactory() {
                return () => new _();
              }
              constructor() {
                super(), this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome70";
              }
              close() {
                if (f.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                f.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "unified-plan"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = i.parse(t3.sdp);
                  return l.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return f.debug("getNativeSctpCapabilities()"), { numStreams: g };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                f.debug("run()"), this._direction = e3, this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, a3.role && "auto" !== a3.role && (this._forcedLocalDtlsRole = "server" === a3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: s2 || [],
                    iceTransportPolicy: i2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (f.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                f.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (f.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: a3 }) {
                this.assertSendDirection(), f.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id);
                const n2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                n2.codecs = d.reduceCodecs(n2.codecs, a3);
                const s2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                s2.codecs = d.reduceCodecs(s2.codecs, a3);
                const o2 = this._remoteSdp.getNextMediaSectionIdx(), u2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream]
                });
                let h2, g2 = await this._pc.createOffer(), _2 = i.parse(g2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: _2
                }), t3 && t3.length > 1 && (f.debug("send() | enabling legacy simulcast"), _2 = i.parse(g2.sdp), h2 = _2.media[o2.idx], p.addLegacySimulcast({
                  offerMediaObject: h2,
                  numStreams: t3.length
                }), g2 = { type: "offer", sdp: i.write(_2) });
                let v = false;
                const b = (0, m.parse)((t3 || [{}])[0].scalabilityMode);
                if (t3 && 1 === t3.length && b.spatialLayers > 1 && "video/vp9" === n2.codecs[0].mimeType.toLowerCase() && (f.debug("send() | enabling legacy simulcast for VP9 SVC"), v = true, _2 = i.parse(g2.sdp), h2 = _2.media[o2.idx], p.addLegacySimulcast({
                  offerMediaObject: h2,
                  numStreams: b.spatialLayers
                }), g2 = { type: "offer", sdp: i.write(_2) }), f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  g2
                ), await this._pc.setLocalDescription(g2), t3) {
                  f.debug("send() | applying given encodings");
                  const e4 = u2.sender.getParameters();
                  for (let r4 = 0; r4 < (e4.encodings || []).length; ++r4) {
                    const a4 = e4.encodings[r4], n3 = t3[r4];
                    if (!n3) break;
                    e4.encodings[r4] = Object.assign(a4, n3);
                  }
                  await u2.sender.setParameters(e4);
                }
                const y = u2.mid;
                if (n2.mid = y, _2 = i.parse(this._pc.localDescription.sdp), h2 = _2.media[o2.idx], n2.rtcp.cname = l.getCname({ offerMediaObject: h2 }), n2.encodings = p.getRtpEncodings({ offerMediaObject: h2 }), t3)
                  for (let e4 = 0; e4 < n2.encodings.length; ++e4)
                    t3[e4] && Object.assign(n2.encodings[e4], t3[e4]);
                if (v && (n2.encodings = [n2.encodings[0]]), n2.encodings.length > 1 && ("video/vp8" === n2.codecs[0].mimeType.toLowerCase() || "video/h264" === n2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of n2.encodings) e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: h2,
                  reuseMid: o2.reuseMid,
                  offerRtpParameters: n2,
                  answerRtpParameters: s2,
                  codecOptions: r3
                });
                const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ), await this._pc.setRemoteDescription(w), this._mapMidTransceiver.set(y, u2), { localId: y, rtpParameters: n2, rtpSender: u2.sender };
              }
              async stopSending(e3) {
                this.assertSendDirection(), f.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                f.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? f.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : f.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), f.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                f.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), f.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  a3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                f.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: a3,
                protocol: n2
              }) {
                this.assertSendDirection();
                const s2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmitTime: t3,
                  maxRetransmits: r3,
                  protocol: n2
                };
                f.debug("sendDataChannel() [options:%o]", s2);
                const o2 = this._pc.createDataChannel(a3, s2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % g.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = i.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const a4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    a4
                  ), await this._pc.setRemoteDescription(a4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: s2.id,
                    ordered: s2.ordered,
                    maxPacketLifeTime: s2.maxPacketLifeTime,
                    maxRetransmits: s2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: a4,
                    rtpParameters: n3,
                    streamId: s3
                  } = t4;
                  f.debug("receive() [trackId:%s, kind:%s]", e4, a4);
                  const i2 = n3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, i2), this._remoteSdp.receive({
                    mid: i2,
                    kind: a4,
                    offerRtpParameters: n3,
                    streamId: s3 || n3.rtcp.cname,
                    trackId: e4
                  });
                }
                const a3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
                let n2 = await this._pc.createAnswer();
                const s2 = i.parse(n2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: a4 } = t4, n3 = r3.get(e4), i2 = s2.media.find((e5) => String(e5.mid) === n3);
                  l.applyCodecParameters({
                    offerRtpParameters: a4,
                    answerMediaObject: i2
                  });
                }
                n2 = { type: "answer", sdp: i.write(s2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: s2
                }), f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                for (const a4 of e3) {
                  const { trackId: e4 } = a4, n3 = r3.get(e4), s3 = this._pc.getTransceivers().find((e5) => e5.mid === n3);
                  if (!s3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(n3, s3), t3.push({
                    localId: n3,
                    track: s3.receiver.track,
                    rtpReceiver: s3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  f.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                f.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertRecvDirection();
                const {
                  streamId: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmitTime: s2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                f.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = i.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = i.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome70 = _;
          },
          11: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome74 = void 0;
            const i = s(r2(7363)), o = r2(2994), c = s(r2(1765)), d = s(r2(8046)), l = s(r2(5544)), p = s(r2(5938)), u = s(r2(4256)), h = r2(4893), m = r2(521), f = r2(1305), g = r2(3303), _ = new o.Logger("Chrome74"), v = { OS: 1024, MIS: 1024 };
            class b extends m.HandlerInterface {
              static createFactory() {
                return () => new b();
              }
              constructor() {
                super(), this._closed = false, this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome74";
              }
              close() {
                if (_.debug("close()"), !this._closed) {
                  if (this._closed = true, this._pc)
                    try {
                      this._pc.close();
                    } catch (e3) {
                    }
                  this.emit("@close");
                }
              }
              async getNativeRtpCapabilities() {
                _.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "unified-plan"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = i.parse(t3.sdp), a3 = l.extractRtpCapabilities({ sdpObject: r3 });
                  return u.addNackSuppportForOpus(a3), a3;
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return _.debug("getNativeSctpCapabilities()"), { numStreams: v };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                _.debug("run()"), this._direction = e3, this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, a3.role && "auto" !== a3.role && (this._forcedLocalDtlsRole = "server" === a3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: s2 || [],
                    iceTransportPolicy: i2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : (_.warn(
                  "run() | pc.connectionState not supported, using pc.iceConnectionState"
                ), this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                ));
              }
              async updateIceServers(e3) {
                this.assertNotClosed(), _.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (this.assertNotClosed(), _.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this.assertNotClosed(), this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: a3 }) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && t3.length > 1 && t3.forEach((e4, t4) => {
                  e4.rid = `r${t4}`;
                });
                const n2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                n2.codecs = d.reduceCodecs(n2.codecs, a3);
                const s2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                s2.codecs = d.reduceCodecs(s2.codecs, a3);
                const o2 = this._remoteSdp.getNextMediaSectionIdx(), u2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t3
                });
                let h2, m2 = await this._pc.createOffer(), f2 = i.parse(m2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: f2
                });
                let v2 = false;
                const b2 = (0, g.parse)((t3 || [{}])[0].scalabilityMode);
                t3 && 1 === t3.length && b2.spatialLayers > 1 && "video/vp9" === n2.codecs[0].mimeType.toLowerCase() && (_.debug("send() | enabling legacy simulcast for VP9 SVC"), v2 = true, f2 = i.parse(m2.sdp), h2 = f2.media[o2.idx], p.addLegacySimulcast({
                  offerMediaObject: h2,
                  numStreams: b2.spatialLayers
                }), m2 = { type: "offer", sdp: i.write(f2) }), _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m2
                ), await this._pc.setLocalDescription(m2);
                const y = u2.mid;
                if (n2.mid = y, f2 = i.parse(this._pc.localDescription.sdp), h2 = f2.media[o2.idx], n2.rtcp.cname = l.getCname({ offerMediaObject: h2 }), t3)
                  if (1 === t3.length) {
                    let e4 = p.getRtpEncodings({ offerMediaObject: h2 });
                    Object.assign(e4[0], t3[0]), v2 && (e4 = [e4[0]]), n2.encodings = e4;
                  } else n2.encodings = t3;
                else n2.encodings = p.getRtpEncodings({ offerMediaObject: h2 });
                if (n2.encodings.length > 1 && ("video/vp8" === n2.codecs[0].mimeType.toLowerCase() || "video/h264" === n2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of n2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${b2.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: h2,
                  reuseMid: o2.reuseMid,
                  offerRtpParameters: n2,
                  answerRtpParameters: s2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ), await this._pc.setRemoteDescription(w), this._mapMidTransceiver.set(y, u2), { localId: y, rtpParameters: n2, rtpSender: u2.sender };
              }
              async stopSending(e3) {
                if (this.assertSendDirection(), _.debug("stopSending() [localId:%s]", e3), this._closed)
                  return;
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                _.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async resumeSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (this._remoteSdp.resumeSendingMediaSection(e3), !t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly";
                const r3 = await this._pc.createOffer();
                _.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async replaceTrack(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), t3 ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : _.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  a3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async getSenderStats(e3) {
                this.assertNotClosed(), this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: a3,
                protocol: n2
              }) {
                this.assertNotClosed(), this.assertSendDirection();
                const s2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: n2
                };
                _.debug("sendDataChannel() [options:%o]", s2);
                const o2 = this._pc.createDataChannel(a3, s2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % v.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = i.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const a4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    a4
                  ), await this._pc.setRemoteDescription(a4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: s2.id,
                    ordered: s2.ordered,
                    maxPacketLifeTime: s2.maxPacketLifeTime,
                    maxRetransmits: s2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: a4,
                    rtpParameters: n3,
                    streamId: s3
                  } = t4;
                  _.debug("receive() [trackId:%s, kind:%s]", e4, a4);
                  const i2 = n3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, i2), this._remoteSdp.receive({
                    mid: i2,
                    kind: a4,
                    offerRtpParameters: n3,
                    streamId: s3 || n3.rtcp.cname,
                    trackId: e4
                  });
                }
                const a3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
                let n2 = await this._pc.createAnswer();
                const s2 = i.parse(n2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: a4 } = t4, n3 = r3.get(e4), i2 = s2.media.find((e5) => String(e5.mid) === n3);
                  l.applyCodecParameters({
                    offerRtpParameters: a4,
                    answerMediaObject: i2
                  });
                }
                n2 = { type: "answer", sdp: i.write(s2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: s2
                }), _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                for (const a4 of e3) {
                  const { trackId: e4 } = a4, n3 = r3.get(e4), s3 = this._pc.getTransceivers().find((e5) => e5.mid === n3);
                  if (!s3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(n3, s3), t3.push({
                    localId: n3,
                    track: s3.receiver.track,
                    rtpReceiver: s3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                if (this.assertRecvDirection(), this._closed) return;
                for (const t4 of e3) {
                  _.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertNotClosed(), this.assertRecvDirection();
                const {
                  streamId: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                _.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = i.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = i.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertNotClosed() {
                if (this._closed)
                  throw new h.InvalidStateError(
                    "method called in a closed handler"
                  );
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome74 = b;
          },
          8633: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Edge11 = void 0;
            const i = r2(2994), o = r2(4893), c = s(r2(1765)), d = s(r2(8046)), l = s(r2(8751)), p = r2(521), u = new i.Logger("Edge11");
            class h extends p.HandlerInterface {
              static createFactory() {
                return () => new h();
              }
              constructor() {
                super(), this._rtpSenders = /* @__PURE__ */ new Map(), this._rtpReceivers = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._transportReady = false;
              }
              get name() {
                return "Edge11";
              }
              close() {
                u.debug("close()");
                try {
                  this._iceGatherer.close();
                } catch (e3) {
                }
                try {
                  this._iceTransport.stop();
                } catch (e3) {
                }
                try {
                  this._dtlsTransport.stop();
                } catch (e3) {
                }
                for (const e3 of this._rtpSenders.values())
                  try {
                    e3.stop();
                  } catch (e4) {
                  }
                for (const e3 of this._rtpReceivers.values())
                  try {
                    e3.stop();
                  } catch (e4) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                return u.debug("getNativeRtpCapabilities()"), l.getCapabilities();
              }
              async getNativeSctpCapabilities() {
                return u.debug("getNativeSctpCapabilities()"), { numStreams: { OS: 0, MIS: 0 } };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: l2,
                extendedRtpCapabilities: p2
              }) {
                u.debug("run()"), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", p2),
                  video: d.getSendingRtpParameters("video", p2)
                }, this._remoteIceParameters = t3, this._remoteIceCandidates = r3, this._remoteDtlsParameters = a3, this._cname = `CNAME-${c.generateRandomNumber()}`, this.setIceGatherer({ iceServers: s2, iceTransportPolicy: i2 }), this.setIceTransport(), this.setDtlsTransport();
              }
              async updateIceServers(e3) {
                throw new o.UnsupportedError("not supported");
              }
              async restartIce(e3) {
                if (u.debug("restartIce()"), this._remoteIceParameters = e3, this._transportReady) {
                  u.debug("restartIce() | calling iceTransport.start()"), this._iceTransport.start(this._iceGatherer, e3, "controlling");
                  for (const e4 of this._remoteIceCandidates)
                    this._iceTransport.addRemoteCandidate(e4);
                  this._iceTransport.addRemoteCandidate({});
                }
              }
              async getTransportStats() {
                return this._iceTransport.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: a3 }) {
                u.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), this._transportReady || await this.setupTransport({ localDtlsRole: "server" }), u.debug("send() | calling new RTCRtpSender()");
                const n2 = new RTCRtpSender(e3, this._dtlsTransport), s2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                s2.codecs = d.reduceCodecs(s2.codecs, a3);
                const i2 = s2.codecs.some((e4) => /.+\/rtx$/i.test(e4.mimeType));
                t3 || (t3 = [{}]);
                for (const e4 of t3)
                  e4.ssrc = c.generateRandomNumber(), i2 && (e4.rtx = { ssrc: c.generateRandomNumber() });
                s2.encodings = t3, s2.rtcp = { cname: this._cname, reducedSize: true, mux: true };
                const o2 = l.mangleRtpParameters(s2);
                u.debug("send() | calling rtpSender.send() [params:%o]", o2), await n2.send(o2);
                const p2 = String(this._nextSendLocalId);
                return this._nextSendLocalId++, this._rtpSenders.set(p2, n2), { localId: p2, rtpParameters: s2, rtpSender: n2 };
              }
              async stopSending(e3) {
                u.debug("stopSending() [localId:%s]", e3);
                const t3 = this._rtpSenders.get(e3);
                if (!t3) throw new Error("RTCRtpSender not found");
                this._rtpSenders.delete(e3);
                try {
                  u.debug("stopSending() | calling rtpSender.stop()"), t3.stop();
                } catch (e4) {
                  throw u.warn("stopSending() | rtpSender.stop() failed:%o", e4), e4;
                }
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                t3 ? u.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : u.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._rtpSenders.get(e3);
                if (!r3) throw new Error("RTCRtpSender not found");
                r3.setTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                u.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._rtpSenders.get(e3);
                if (!r3) throw new Error("RTCRtpSender not found");
                const a3 = r3.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.setParameters(a3);
              }
              async setRtpEncodingParameters(e3, t3) {
                u.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._rtpSenders.get(e3);
                if (!r3) throw new Error("RTCRtpSender not found");
                const a3 = r3.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  a3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.setParameters(a3);
              }
              async getSenderStats(e3) {
                const t3 = this._rtpSenders.get(e3);
                if (!t3) throw new Error("RTCRtpSender not found");
                return t3.getStats();
              }
              async sendDataChannel(e3) {
                throw new o.UnsupportedError("not implemented");
              }
              async receive(e3) {
                const t3 = [];
                for (const t4 of e3) {
                  const { trackId: e4, kind: r3 } = t4;
                  u.debug("receive() [trackId:%s, kind:%s]", e4, r3);
                }
                this._transportReady || await this.setupTransport({ localDtlsRole: "server" });
                for (const r3 of e3) {
                  const { trackId: e4, kind: a3, rtpParameters: n2 } = r3;
                  u.debug("receive() | calling new RTCRtpReceiver()");
                  const s2 = new RTCRtpReceiver(this._dtlsTransport, a3);
                  s2.addEventListener("error", (e5) => {
                    u.error('rtpReceiver "error" event [event:%o]', e5);
                  });
                  const i2 = l.mangleRtpParameters(n2);
                  u.debug(
                    "receive() | calling rtpReceiver.receive() [params:%o]",
                    i2
                  ), await s2.receive(i2);
                  const o2 = e4;
                  this._rtpReceivers.set(o2, s2), t3.push({ localId: o2, track: s2.track, rtpReceiver: s2 });
                }
                return t3;
              }
              async stopReceiving(e3) {
                for (const t3 of e3) {
                  u.debug("stopReceiving() [localId:%s]", t3);
                  const e4 = this._rtpReceivers.get(t3);
                  if (!e4) throw new Error("RTCRtpReceiver not found");
                  this._rtpReceivers.delete(t3);
                  try {
                    u.debug("stopReceiving() | calling rtpReceiver.stop()"), e4.stop();
                  } catch (e5) {
                    u.warn("stopReceiving() | rtpReceiver.stop() failed:%o", e5);
                  }
                }
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                const t3 = this._rtpReceivers.get(e3);
                if (!t3) throw new Error("RTCRtpReceiver not found");
                return t3.getStats();
              }
              async receiveDataChannel(e3) {
                throw new o.UnsupportedError("not implemented");
              }
              setIceGatherer({ iceServers: e3, iceTransportPolicy: t3 }) {
                const r3 = new RTCIceGatherer({
                  iceServers: e3 || [],
                  gatherPolicy: t3 || "all"
                });
                r3.addEventListener("error", (e4) => {
                  u.error('iceGatherer "error" event [event:%o]', e4);
                });
                try {
                  r3.gather();
                } catch (e4) {
                  u.debug(
                    "setIceGatherer() | iceGatherer.gather() failed: %s",
                    e4.toString()
                  );
                }
                this._iceGatherer = r3;
              }
              setIceTransport() {
                const e3 = new RTCIceTransport(this._iceGatherer);
                e3.addEventListener("statechange", () => {
                  switch (e3.state) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                }), e3.addEventListener("icestatechange", () => {
                  switch (e3.state) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                }), e3.addEventListener("candidatepairchange", (e4) => {
                  u.debug(
                    'iceTransport "candidatepairchange" event [pair:%o]',
                    e4.pair
                  );
                }), this._iceTransport = e3;
              }
              setDtlsTransport() {
                const e3 = new RTCDtlsTransport(this._iceTransport);
                e3.addEventListener("statechange", () => {
                  u.debug(
                    'dtlsTransport "statechange" event [state:%s]',
                    e3.state
                  );
                }), e3.addEventListener("dtlsstatechange", () => {
                  u.debug(
                    'dtlsTransport "dtlsstatechange" event [state:%s]',
                    e3.state
                  ), "closed" === e3.state && this.emit("@connectionstatechange", "closed");
                }), e3.addEventListener("error", (e4) => {
                  u.error('dtlsTransport "error" event [event:%o]', e4);
                }), this._dtlsTransport = e3;
              }
              async setupTransport({ localDtlsRole: e3 }) {
                u.debug("setupTransport()");
                const t3 = this._dtlsTransport.getLocalParameters();
                t3.role = e3, await new Promise((e4, r3) => {
                  this.safeEmit("@connect", { dtlsParameters: t3 }, e4, r3);
                }), this._iceTransport.start(
                  this._iceGatherer,
                  this._remoteIceParameters,
                  "controlling"
                );
                for (const e4 of this._remoteIceCandidates)
                  this._iceTransport.addRemoteCandidate(e4);
                this._iceTransport.addRemoteCandidate({}), this._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints.filter(
                  (e4) => "sha-256" === e4.algorithm || "sha-384" === e4.algorithm || "sha-512" === e4.algorithm
                ), this._dtlsTransport.start(this._remoteDtlsParameters), this._transportReady = true;
              }
            }
            t2.Edge11 = h;
          },
          2292: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Firefox120 = void 0;
            const i = s(r2(7363)), o = r2(2994), c = r2(4893), d = s(r2(1765)), l = s(r2(8046)), p = s(r2(5544)), u = s(r2(5938)), h = r2(521), m = r2(1305), f = r2(3303), g = new o.Logger("Firefox120"), _ = { OS: 16, MIS: 2048 };
            class v extends h.HandlerInterface {
              static createFactory() {
                return () => new v();
              }
              constructor() {
                super(), this._closed = false, this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Firefox120";
              }
              close() {
                if (g.debug("close()"), !this._closed) {
                  if (this._closed = true, this._pc)
                    try {
                      this._pc.close();
                    } catch (e3) {
                    }
                  this.emit("@close");
                }
              }
              async getNativeRtpCapabilities() {
                g.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require"
                }), t3 = document.createElement("canvas");
                t3.getContext("2d");
                const r3 = t3.captureStream().getVideoTracks()[0];
                try {
                  e3.addTransceiver("audio", { direction: "sendrecv" }), e3.addTransceiver(r3, {
                    direction: "sendrecv",
                    sendEncodings: [
                      { rid: "r0", maxBitrate: 1e5 },
                      { rid: "r1", maxBitrate: 5e5 }
                    ]
                  });
                  const a3 = await e3.createOffer();
                  try {
                    t3.remove();
                  } catch (e4) {
                  }
                  try {
                    r3.stop();
                  } catch (e4) {
                  }
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const n2 = i.parse(a3.sdp);
                  return p.extractRtpCapabilities({ sdpObject: n2 });
                } catch (a3) {
                  try {
                    t3.remove();
                  } catch (e4) {
                  }
                  try {
                    r3.stop();
                  } catch (e4) {
                  }
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw a3;
                }
              }
              async getNativeSctpCapabilities() {
                return g.debug("getNativeSctpCapabilities()"), { numStreams: _ };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: d2
              }) {
                this.assertNotClosed(), g.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2
                }), this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d2),
                  video: l.getSendingRtpParameters("video", d2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d2),
                  video: l.getSendingRemoteRtpParameters("video", d2)
                }, this._pc = new RTCPeerConnection(
                  {
                    iceServers: s2 || [],
                    iceTransportPolicy: i2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (g.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                throw this.assertNotClosed(), new c.UnsupportedError("not supported");
              }
              async restartIce(e3) {
                if (this.assertNotClosed(), g.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    g.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    g.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    g.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    g.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this.assertNotClosed(), this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: a3 }) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && t3.length > 1 && t3.forEach((e4, t4) => {
                  e4.rid = `r${t4}`;
                });
                const n2 = d.clone(this._sendingRtpParametersByKind[e3.kind]);
                n2.codecs = l.reduceCodecs(n2.codecs, a3);
                const s2 = d.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                s2.codecs = l.reduceCodecs(s2.codecs, a3);
                const o2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t3
                }), c2 = await this._pc.createOffer();
                let h2 = i.parse(c2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: h2
                });
                const m2 = (0, f.parse)((t3 || [{}])[0].scalabilityMode);
                g.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  c2
                ), await this._pc.setLocalDescription(c2);
                const _2 = o2.mid;
                n2.mid = _2, h2 = i.parse(this._pc.localDescription.sdp);
                const v2 = h2.media[h2.media.length - 1];
                if (n2.rtcp.cname = p.getCname({ offerMediaObject: v2 }), t3)
                  if (1 === t3.length) {
                    const e4 = u.getRtpEncodings({ offerMediaObject: v2 });
                    Object.assign(e4[0], t3[0]), n2.encodings = e4;
                  } else n2.encodings = t3;
                else n2.encodings = u.getRtpEncodings({ offerMediaObject: v2 });
                if (n2.encodings.length > 1 && ("video/vp8" === n2.codecs[0].mimeType.toLowerCase() || "video/h264" === n2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of n2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${m2.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: v2,
                  offerRtpParameters: n2,
                  answerRtpParameters: s2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const b = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return g.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  b
                ), await this._pc.setRemoteDescription(b), this._mapMidTransceiver.set(_2, o2), { localId: _2, rtpParameters: n2, rtpSender: o2.sender };
              }
              async stopSending(e3) {
                if (this.assertSendDirection(), g.debug("stopSending() [localId:%s]", e3), this._closed)
                  return;
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated transceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender), this._remoteSdp.disableMediaSection(t3.mid);
                const r3 = await this._pc.createOffer();
                g.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                g.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async resumeSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly", this._remoteSdp.resumeSendingMediaSection(e3);
                const r3 = await this._pc.createOffer();
                g.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async replaceTrack(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), t3 ? g.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : g.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated transceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                g.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  a3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                g.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async getSenderStats(e3) {
                this.assertNotClosed(), this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: a3,
                protocol: n2
              }) {
                this.assertNotClosed(), this.assertSendDirection();
                const s2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: n2
                };
                g.debug("sendDataChannel() [options:%o]", s2);
                const o2 = this._pc.createDataChannel(a3, s2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % _.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = i.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: t4
                  }), g.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const a4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    a4
                  ), await this._pc.setRemoteDescription(a4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: s2.id,
                    ordered: s2.ordered,
                    maxPacketLifeTime: s2.maxPacketLifeTime,
                    maxRetransmits: s2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: a4,
                    rtpParameters: n3,
                    streamId: s3
                  } = t4;
                  g.debug("receive() [trackId:%s, kind:%s]", e4, a4);
                  const i2 = n3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, i2), this._remoteSdp.receive({
                    mid: i2,
                    kind: a4,
                    offerRtpParameters: n3,
                    streamId: s3 || n3.rtcp.cname,
                    trackId: e4
                  });
                }
                const a3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
                let n2 = await this._pc.createAnswer();
                const s2 = i.parse(n2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: a4 } = t4, o2 = r3.get(e4), c2 = s2.media.find((e5) => String(e5.mid) === o2);
                  p.applyCodecParameters({
                    offerRtpParameters: a4,
                    answerMediaObject: c2
                  }), n2 = { type: "answer", sdp: i.write(s2) };
                }
                this._transportReady || await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: s2
                }), g.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                for (const a4 of e3) {
                  const { trackId: e4 } = a4, n3 = r3.get(e4), s3 = this._pc.getTransceivers().find((e5) => e5.mid === n3);
                  if (!s3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(n3, s3), t3.push({
                    localId: n3,
                    track: s3.receiver.track,
                    rtpReceiver: s3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                if (this.assertRecvDirection(), this._closed) return;
                for (const t4 of e3) {
                  g.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                g.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  g.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                g.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  g.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                g.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertNotClosed(), this.assertRecvDirection();
                const {
                  streamId: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                g.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = i.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: "client",
                      localSdpObject: e5
                    });
                  }
                  g.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = i.parse(this._pc.localDescription.sdp));
                const r3 = p.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertNotClosed() {
                if (this._closed)
                  throw new c.InvalidStateError(
                    "method called in a closed handler"
                  );
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Firefox120 = v;
          },
          1767: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Firefox60 = void 0;
            const i = s(r2(7363)), o = r2(2994), c = r2(4893), d = s(r2(1765)), l = s(r2(8046)), p = s(r2(5544)), u = s(r2(5938)), h = r2(521), m = r2(1305), f = r2(3303), g = new o.Logger("Firefox60"), _ = { OS: 16, MIS: 2048 };
            class v extends h.HandlerInterface {
              static createFactory() {
                return () => new v();
              }
              constructor() {
                super(), this._closed = false, this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Firefox60";
              }
              close() {
                if (g.debug("close()"), !this._closed) {
                  if (this._closed = true, this._pc)
                    try {
                      this._pc.close();
                    } catch (e3) {
                    }
                  this.emit("@close");
                }
              }
              async getNativeRtpCapabilities() {
                g.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require"
                }), t3 = document.createElement("canvas");
                t3.getContext("2d");
                const r3 = t3.captureStream().getVideoTracks()[0];
                try {
                  e3.addTransceiver("audio", { direction: "sendrecv" });
                  const a3 = e3.addTransceiver(r3, { direction: "sendrecv" }), n2 = a3.sender.getParameters(), s2 = [
                    { rid: "r0", maxBitrate: 1e5 },
                    { rid: "r1", maxBitrate: 5e5 }
                  ];
                  n2.encodings = s2, await a3.sender.setParameters(n2);
                  const o2 = await e3.createOffer();
                  try {
                    t3.remove();
                  } catch (e4) {
                  }
                  try {
                    r3.stop();
                  } catch (e4) {
                  }
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const c2 = i.parse(o2.sdp);
                  return p.extractRtpCapabilities({ sdpObject: c2 });
                } catch (a3) {
                  try {
                    t3.remove();
                  } catch (e4) {
                  }
                  try {
                    r3.stop();
                  } catch (e4) {
                  }
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw a3;
                }
              }
              async getNativeSctpCapabilities() {
                return g.debug("getNativeSctpCapabilities()"), { numStreams: _ };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: d2
              }) {
                this.assertNotClosed(), g.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2
                }), this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d2),
                  video: l.getSendingRtpParameters("video", d2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d2),
                  video: l.getSendingRemoteRtpParameters("video", d2)
                }, this._pc = new RTCPeerConnection(
                  {
                    iceServers: s2 || [],
                    iceTransportPolicy: i2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (g.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                throw this.assertNotClosed(), new c.UnsupportedError("not supported");
              }
              async restartIce(e3) {
                if (this.assertNotClosed(), g.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    g.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    g.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    g.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    g.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this.assertNotClosed(), this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: a3 }) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && (t3 = d.clone(t3)).length > 1 && (t3.forEach((e4, t4) => {
                  e4.rid = `r${t4}`;
                }), t3.reverse());
                const n2 = d.clone(this._sendingRtpParametersByKind[e3.kind]);
                n2.codecs = l.reduceCodecs(n2.codecs, a3);
                const s2 = d.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                s2.codecs = l.reduceCodecs(s2.codecs, a3);
                const o2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream]
                });
                if (t3) {
                  const e4 = o2.sender.getParameters();
                  e4.encodings = t3, await o2.sender.setParameters(e4);
                }
                const c2 = await this._pc.createOffer();
                let h2 = i.parse(c2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: h2
                });
                const m2 = (0, f.parse)((t3 || [{}])[0].scalabilityMode);
                g.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  c2
                ), await this._pc.setLocalDescription(c2);
                const _2 = o2.mid;
                n2.mid = _2, h2 = i.parse(this._pc.localDescription.sdp);
                const v2 = h2.media[h2.media.length - 1];
                if (n2.rtcp.cname = p.getCname({ offerMediaObject: v2 }), t3)
                  if (1 === t3.length) {
                    const e4 = u.getRtpEncodings({ offerMediaObject: v2 });
                    Object.assign(e4[0], t3[0]), n2.encodings = e4;
                  } else n2.encodings = t3.reverse();
                else n2.encodings = u.getRtpEncodings({ offerMediaObject: v2 });
                if (n2.encodings.length > 1 && ("video/vp8" === n2.codecs[0].mimeType.toLowerCase() || "video/h264" === n2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of n2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${m2.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: v2,
                  offerRtpParameters: n2,
                  answerRtpParameters: s2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const b = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return g.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  b
                ), await this._pc.setRemoteDescription(b), this._mapMidTransceiver.set(_2, o2), { localId: _2, rtpParameters: n2, rtpSender: o2.sender };
              }
              async stopSending(e3) {
                if (this.assertSendDirection(), g.debug("stopSending() [localId:%s]", e3), this._closed)
                  return;
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated transceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender), this._remoteSdp.disableMediaSection(t3.mid);
                const r3 = await this._pc.createOffer();
                g.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                g.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async resumeSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly", this._remoteSdp.resumeSendingMediaSection(e3);
                const r3 = await this._pc.createOffer();
                g.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async replaceTrack(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), t3 ? g.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : g.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated transceiver not found");
                const a3 = r3.sender.getParameters();
                t3 = a3.encodings.length - 1 - t3, a3.encodings.forEach((e4, r4) => {
                  e4.active = r4 >= t3;
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                g.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), g.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  a3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                g.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async getSenderStats(e3) {
                this.assertNotClosed(), this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: a3,
                protocol: n2
              }) {
                this.assertNotClosed(), this.assertSendDirection();
                const s2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: n2
                };
                g.debug("sendDataChannel() [options:%o]", s2);
                const o2 = this._pc.createDataChannel(a3, s2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % _.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = i.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: t4
                  }), g.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const a4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    a4
                  ), await this._pc.setRemoteDescription(a4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: s2.id,
                    ordered: s2.ordered,
                    maxPacketLifeTime: s2.maxPacketLifeTime,
                    maxRetransmits: s2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: a4,
                    rtpParameters: n3,
                    streamId: s3
                  } = t4;
                  g.debug("receive() [trackId:%s, kind:%s]", e4, a4);
                  const i2 = n3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, i2), this._remoteSdp.receive({
                    mid: i2,
                    kind: a4,
                    offerRtpParameters: n3,
                    streamId: s3 || n3.rtcp.cname,
                    trackId: e4
                  });
                }
                const a3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
                let n2 = await this._pc.createAnswer();
                const s2 = i.parse(n2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: a4 } = t4, o2 = r3.get(e4), c2 = s2.media.find((e5) => String(e5.mid) === o2);
                  p.applyCodecParameters({
                    offerRtpParameters: a4,
                    answerMediaObject: c2
                  }), n2 = { type: "answer", sdp: i.write(s2) };
                }
                this._transportReady || await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: s2
                }), g.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                for (const a4 of e3) {
                  const { trackId: e4 } = a4, n3 = r3.get(e4), s3 = this._pc.getTransceivers().find((e5) => e5.mid === n3);
                  if (!s3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(n3, s3), t3.push({
                    localId: n3,
                    track: s3.receiver.track,
                    rtpReceiver: s3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                if (this.assertRecvDirection(), this._closed) return;
                for (const t4 of e3) {
                  g.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                g.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  g.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                g.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  g.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                g.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                g.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertNotClosed(), this.assertRecvDirection();
                const {
                  streamId: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                g.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  g.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = i.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: "client",
                      localSdpObject: e5
                    });
                  }
                  g.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = i.parse(this._pc.localDescription.sdp));
                const r3 = p.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertNotClosed() {
                if (this._closed)
                  throw new c.InvalidStateError(
                    "method called in a closed handler"
                  );
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Firefox60 = v;
          },
          521: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.HandlerInterface = void 0;
            const a2 = r2(2010);
            class n extends a2.EnhancedEventEmitter {
              constructor() {
                super();
              }
            }
            t2.HandlerInterface = n;
          },
          9352: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.ReactNative = void 0;
            const i = s(r2(7363)), o = r2(2994), c = r2(4893), d = s(r2(1765)), l = s(r2(8046)), p = s(r2(5544)), u = s(r2(4496)), h = r2(521), m = r2(1305), f = new o.Logger("ReactNative"), g = { OS: 1024, MIS: 1024 };
            class _ extends h.HandlerInterface {
              static createFactory() {
                return () => new _();
              }
              constructor() {
                super(), this._sendStream = new MediaStream(), this._mapSendLocalIdTrack = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "ReactNative";
              }
              close() {
                if (f.debug("close()"), this._sendStream.release(false), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                f.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "plan-b"
                });
                try {
                  const t3 = await e3.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                  });
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = i.parse(t3.sdp);
                  return p.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return f.debug("getNativeSctpCapabilities()"), { numStreams: g };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: d2
              }) {
                f.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2,
                  planB: true
                }), this._sendingRtpParametersByKind = {
                  audio: l.getSendingRtpParameters("audio", d2),
                  video: l.getSendingRtpParameters("video", d2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: l.getSendingRemoteRtpParameters("audio", d2),
                  video: l.getSendingRemoteRtpParameters("video", d2)
                }, a3.role && "auto" !== a3.role && (this._forcedLocalDtlsRole = "server" === a3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: s2 || [],
                    iceTransportPolicy: i2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (f.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                f.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (f.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: a3 }) {
                this.assertSendDirection(), f.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), a3 && f.warn(
                  "send() | codec selection is not available in %s handler",
                  this.name
                ), this._sendStream.addTrack(e3), this._pc.addStream(this._sendStream);
                let n2, s2 = await this._pc.createOffer(), o2 = i.parse(s2.sdp);
                const c2 = d.clone(this._sendingRtpParametersByKind[e3.kind]);
                c2.codecs = l.reduceCodecs(c2.codecs);
                const h2 = d.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                if (h2.codecs = l.reduceCodecs(h2.codecs), this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: o2
                }), "video" === e3.kind && t3 && t3.length > 1 && (f.debug("send() | enabling simulcast"), o2 = i.parse(s2.sdp), n2 = o2.media.find((e4) => "video" === e4.type), u.addLegacySimulcast({
                  offerMediaObject: n2,
                  track: e3,
                  numStreams: t3.length
                }), s2 = { type: "offer", sdp: i.write(o2) }), f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2), o2 = i.parse(this._pc.localDescription.sdp), n2 = o2.media.find((t4) => t4.type === e3.kind), c2.rtcp.cname = p.getCname({ offerMediaObject: n2 }), c2.encodings = u.getRtpEncodings({
                  offerMediaObject: n2,
                  track: e3
                }), t3)
                  for (let e4 = 0; e4 < c2.encodings.length; ++e4)
                    t3[e4] && Object.assign(c2.encodings[e4], t3[e4]);
                if (c2.encodings.length > 1 && ("video/vp8" === c2.codecs[0].mimeType.toLowerCase() || "video/h264" === c2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of c2.encodings) e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: n2,
                  offerRtpParameters: c2,
                  answerRtpParameters: h2,
                  codecOptions: r3
                });
                const m2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  m2
                ), await this._pc.setRemoteDescription(m2);
                const g2 = String(this._nextSendLocalId);
                return this._nextSendLocalId++, this._mapSendLocalIdTrack.set(g2, e3), { localId: g2, rtpParameters: c2 };
              }
              async stopSending(e3) {
                this.assertSendDirection(), f.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapSendLocalIdTrack.get(e3);
                if (!t3) throw new Error("track not found");
                this._mapSendLocalIdTrack.delete(e3), this._sendStream.removeTrack(t3), this._pc.addStream(this._sendStream);
                const r3 = await this._pc.createOffer();
                f.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                );
                try {
                  await this._pc.setLocalDescription(r3);
                } catch (e4) {
                  if (0 === this._sendStream.getTracks().length)
                    return void f.warn(
                      "stopSending() | ignoring expected error due no sending tracks: %s",
                      e4.toString()
                    );
                  throw e4;
                }
                if ("stable" === this._pc.signalingState) return;
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                throw new c.UnsupportedError("not implemented");
              }
              async setMaxSpatialLayer(e3, t3) {
                throw new c.UnsupportedError("not implemented");
              }
              async setRtpEncodingParameters(e3, t3) {
                throw new c.UnsupportedError("not implemented");
              }
              async getSenderStats(e3) {
                throw new c.UnsupportedError("not implemented");
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: a3,
                protocol: n2
              }) {
                this.assertSendDirection();
                const s2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmitTime: t3,
                  maxRetransmits: r3,
                  protocol: n2
                };
                f.debug("sendDataChannel() [options:%o]", s2);
                const o2 = this._pc.createDataChannel(a3, s2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % g.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = i.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const a4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    a4
                  ), await this._pc.setRemoteDescription(a4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: s2.id,
                    ordered: s2.ordered,
                    maxPacketLifeTime: s2.maxPacketLifeTime,
                    maxRetransmits: s2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const { trackId: e4, kind: a4, rtpParameters: n3 } = t4;
                  f.debug("receive() [trackId:%s, kind:%s]", e4, a4);
                  const s3 = a4;
                  let i2 = t4.streamId || n3.rtcp.cname;
                  f.debug(
                    "receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc"
                  ), i2 += `-hack-${d.generateRandomNumber()}`, r3.set(e4, i2), this._remoteSdp.receive({
                    mid: s3,
                    kind: a4,
                    offerRtpParameters: n3,
                    streamId: i2,
                    trackId: e4
                  });
                }
                const a3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
                let n2 = await this._pc.createAnswer();
                const s2 = i.parse(n2.sdp);
                for (const t4 of e3) {
                  const { kind: e4, rtpParameters: r4 } = t4, a4 = e4, n3 = s2.media.find((e5) => String(e5.mid) === a4);
                  p.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: n3
                  });
                }
                n2 = { type: "answer", sdp: i.write(s2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: s2
                }), f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                for (const a4 of e3) {
                  const { kind: e4, trackId: n3, rtpParameters: s3 } = a4, i2 = n3, o2 = e4, c2 = r3.get(n3), d2 = this._pc.getRemoteStreams().find((e5) => e5.id === c2).getTrackById(i2);
                  if (!d2) throw new Error("remote track not found");
                  this._mapRecvLocalIdInfo.set(i2, { mid: o2, rtpParameters: s3 }), t3.push({ localId: i2, track: d2 });
                }
                return t3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  f.debug("stopReceiving() [localId:%s]", t4);
                  const { mid: e4, rtpParameters: r4 } = this._mapRecvLocalIdInfo.get(t4) || {};
                  this._mapRecvLocalIdInfo.delete(t4), this._remoteSdp.planBStopReceiving({
                    mid: e4,
                    offerRtpParameters: r4
                  });
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                f.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                throw new c.UnsupportedError("not implemented");
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertRecvDirection();
                const {
                  streamId: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmitTime: s2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                f.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation({
                    oldDataChannelSpec: true
                  });
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = i.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = i.parse(this._pc.localDescription.sdp));
                const r3 = p.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.ReactNative = _;
          },
          4039: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.ReactNativeUnifiedPlan = void 0;
            const i = s(r2(7363)), o = r2(2994), c = s(r2(1765)), d = s(r2(8046)), l = s(r2(5544)), p = s(r2(5938)), u = s(r2(4256)), h = r2(4893), m = r2(521), f = r2(1305), g = r2(3303), _ = new o.Logger("ReactNativeUnifiedPlan"), v = { OS: 1024, MIS: 1024 };
            class b extends m.HandlerInterface {
              static createFactory() {
                return () => new b();
              }
              constructor() {
                super(), this._closed = false, this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "ReactNativeUnifiedPlan";
              }
              close() {
                if (_.debug("close()"), !this._closed) {
                  if (this._closed = true, this._sendStream.release(false), this._pc)
                    try {
                      this._pc.close();
                    } catch (e3) {
                    }
                  this.emit("@close");
                }
              }
              async getNativeRtpCapabilities() {
                _.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "unified-plan"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = i.parse(t3.sdp), a3 = l.extractRtpCapabilities({ sdpObject: r3 });
                  return u.addNackSuppportForOpus(a3), a3;
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return _.debug("getNativeSctpCapabilities()"), { numStreams: v };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                this.assertNotClosed(), _.debug("run()"), this._direction = e3, this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, a3.role && "auto" !== a3.role && (this._forcedLocalDtlsRole = "server" === a3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: s2 || [],
                    iceTransportPolicy: i2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (_.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                this.assertNotClosed(), _.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (this.assertNotClosed(), _.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this.assertNotClosed(), this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: a3 }) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && t3.length > 1 && t3.forEach((e4, t4) => {
                  e4.rid = `r${t4}`;
                });
                const n2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                n2.codecs = d.reduceCodecs(n2.codecs, a3);
                const s2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                s2.codecs = d.reduceCodecs(s2.codecs, a3);
                const o2 = this._remoteSdp.getNextMediaSectionIdx(), u2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t3
                });
                let h2, m2 = await this._pc.createOffer(), f2 = i.parse(m2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: f2
                });
                let v2 = false;
                const b2 = (0, g.parse)((t3 || [{}])[0].scalabilityMode);
                t3 && 1 === t3.length && b2.spatialLayers > 1 && "video/vp9" === n2.codecs[0].mimeType.toLowerCase() && (_.debug("send() | enabling legacy simulcast for VP9 SVC"), v2 = true, f2 = i.parse(m2.sdp), h2 = f2.media[o2.idx], p.addLegacySimulcast({
                  offerMediaObject: h2,
                  numStreams: b2.spatialLayers
                }), m2 = { type: "offer", sdp: i.write(f2) }), _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m2
                ), await this._pc.setLocalDescription(m2);
                let y = u2.mid ?? void 0;
                if (y || _.warn(
                  "send() | missing transceiver.mid (bug in react-native-webrtc, using a workaround"
                ), n2.mid = y, f2 = i.parse(this._pc.localDescription.sdp), h2 = f2.media[o2.idx], n2.rtcp.cname = l.getCname({ offerMediaObject: h2 }), t3)
                  if (1 === t3.length) {
                    let e4 = p.getRtpEncodings({ offerMediaObject: h2 });
                    Object.assign(e4[0], t3[0]), v2 && (e4 = [e4[0]]), n2.encodings = e4;
                  } else n2.encodings = t3;
                else n2.encodings = p.getRtpEncodings({ offerMediaObject: h2 });
                if (n2.encodings.length > 1 && ("video/vp8" === n2.codecs[0].mimeType.toLowerCase() || "video/h264" === n2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of n2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${b2.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: h2,
                  reuseMid: o2.reuseMid,
                  offerRtpParameters: n2,
                  answerRtpParameters: s2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ), await this._pc.setRemoteDescription(w), y || (y = u2.mid, n2.mid = y), this._mapMidTransceiver.set(y, u2), { localId: y, rtpParameters: n2, rtpSender: u2.sender };
              }
              async stopSending(e3) {
                if (this.assertSendDirection(), this._closed) return;
                _.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                _.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async resumeSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (this._remoteSdp.resumeSendingMediaSection(e3), !t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly";
                const r3 = await this._pc.createOffer();
                _.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async replaceTrack(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), t3 ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : _.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  a3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async getSenderStats(e3) {
                this.assertNotClosed(), this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: a3,
                protocol: n2
              }) {
                this.assertNotClosed(), this.assertSendDirection();
                const s2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: n2
                };
                _.debug("sendDataChannel() [options:%o]", s2);
                const o2 = this._pc.createDataChannel(a3, s2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % v.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = i.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const a4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    a4
                  ), await this._pc.setRemoteDescription(a4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: s2.id,
                    ordered: s2.ordered,
                    maxPacketLifeTime: s2.maxPacketLifeTime,
                    maxRetransmits: s2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: a4,
                    rtpParameters: n3,
                    streamId: s3
                  } = t4;
                  _.debug("receive() [trackId:%s, kind:%s]", e4, a4);
                  const i2 = n3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, i2), this._remoteSdp.receive({
                    mid: i2,
                    kind: a4,
                    offerRtpParameters: n3,
                    streamId: s3 || n3.rtcp.cname,
                    trackId: e4
                  });
                }
                const a3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
                let n2 = await this._pc.createAnswer();
                const s2 = i.parse(n2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: a4 } = t4, n3 = r3.get(e4), i2 = s2.media.find((e5) => String(e5.mid) === n3);
                  l.applyCodecParameters({
                    offerRtpParameters: a4,
                    answerMediaObject: i2
                  });
                }
                n2 = { type: "answer", sdp: i.write(s2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: s2
                }), _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                for (const a4 of e3) {
                  const { trackId: e4 } = a4, n3 = r3.get(e4), s3 = this._pc.getTransceivers().find((e5) => e5.mid === n3);
                  if (!s3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(n3, s3), t3.push({
                    localId: n3,
                    track: s3.receiver.track,
                    rtpReceiver: s3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                if (this.assertRecvDirection(), this._closed) return;
                for (const t4 of e3) {
                  _.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertNotClosed(), this.assertRecvDirection();
                const {
                  streamId: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                _.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = i.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = i.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertNotClosed() {
                if (this._closed)
                  throw new h.InvalidStateError(
                    "method called in a closed handler"
                  );
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.ReactNativeUnifiedPlan = b;
          },
          9676: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Safari11 = void 0;
            const i = s(r2(7363)), o = r2(2994), c = s(r2(1765)), d = s(r2(8046)), l = s(r2(5544)), p = s(r2(4496)), u = r2(521), h = r2(1305), m = new o.Logger("Safari11"), f = { OS: 1024, MIS: 1024 };
            class g extends u.HandlerInterface {
              static createFactory() {
                return () => new g();
              }
              constructor() {
                super(), this._sendStream = new MediaStream(), this._mapSendLocalIdRtpSender = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Safari11";
              }
              close() {
                if (m.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                m.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "plan-b"
                });
                try {
                  const t3 = await e3.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                  });
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = i.parse(t3.sdp);
                  return l.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                m.debug("run()"), this._direction = e3, this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2,
                  planB: true
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, a3.role && "auto" !== a3.role && (this._forcedLocalDtlsRole = "server" === a3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: s2 || [],
                    iceTransportPolicy: i2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (m.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                m.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (m.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    m.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    m.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    m.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    m.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: a3 }) {
                this.assertSendDirection(), m.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), a3 && m.warn(
                  "send() | codec selection is not available in %s handler",
                  this.name
                ), this._sendStream.addTrack(e3), this._pc.addTrack(e3, this._sendStream);
                let n2, s2 = await this._pc.createOffer(), o2 = i.parse(s2.sdp);
                const u2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                u2.codecs = d.reduceCodecs(u2.codecs);
                const h2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                if (h2.codecs = d.reduceCodecs(h2.codecs), this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: o2
                }), "video" === e3.kind && t3 && t3.length > 1 && (m.debug("send() | enabling simulcast"), o2 = i.parse(s2.sdp), n2 = o2.media.find((e4) => "video" === e4.type), p.addLegacySimulcast({
                  offerMediaObject: n2,
                  track: e3,
                  numStreams: t3.length
                }), s2 = { type: "offer", sdp: i.write(o2) }), m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  s2
                ), await this._pc.setLocalDescription(s2), o2 = i.parse(this._pc.localDescription.sdp), n2 = o2.media.find((t4) => t4.type === e3.kind), u2.rtcp.cname = l.getCname({ offerMediaObject: n2 }), u2.encodings = p.getRtpEncodings({
                  offerMediaObject: n2,
                  track: e3
                }), t3)
                  for (let e4 = 0; e4 < u2.encodings.length; ++e4)
                    t3[e4] && Object.assign(u2.encodings[e4], t3[e4]);
                if (u2.encodings.length > 1 && "video/vp8" === u2.codecs[0].mimeType.toLowerCase())
                  for (const e4 of u2.encodings) e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: n2,
                  offerRtpParameters: u2,
                  answerRtpParameters: h2,
                  codecOptions: r3
                });
                const f2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  f2
                ), await this._pc.setRemoteDescription(f2);
                const g2 = String(this._nextSendLocalId);
                this._nextSendLocalId++;
                const _ = this._pc.getSenders().find((t4) => t4.track === e3);
                return this._mapSendLocalIdRtpSender.set(g2, _), { localId: g2, rtpParameters: u2, rtpSender: _ };
              }
              async stopSending(e3) {
                this.assertSendDirection();
                const t3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!t3) throw new Error("associated RTCRtpSender not found");
                t3.track && this._sendStream.removeTrack(t3.track), this._mapSendLocalIdRtpSender.delete(e3);
                const r3 = await this._pc.createOffer();
                m.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                );
                try {
                  await this._pc.setLocalDescription(r3);
                } catch (e4) {
                  if (0 === this._sendStream.getTracks().length)
                    return void m.warn(
                      "stopSending() | ignoring expected error due no sending tracks: %s",
                      e4.toString()
                    );
                  throw e4;
                }
                if ("stable" === this._pc.signalingState) return;
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : m.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3) throw new Error("associated RTCRtpSender not found");
                const a3 = r3.track;
                await r3.replaceTrack(t3), a3 && this._sendStream.removeTrack(a3), t3 && this._sendStream.addTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3) throw new Error("associated RTCRtpSender not found");
                const a3 = r3.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.setParameters(a3);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3) throw new Error("associated RTCRtpSender not found");
                const a3 = r3.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  a3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.setParameters(a3);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!t3) throw new Error("associated RTCRtpSender not found");
                return t3.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: a3,
                protocol: n2
              }) {
                this.assertSendDirection();
                const s2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: n2
                };
                m.debug("sendDataChannel() [options:%o]", s2);
                const o2 = this._pc.createDataChannel(a3, s2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % f.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = i.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const a4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    a4
                  ), await this._pc.setRemoteDescription(a4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: s2.id,
                    ordered: s2.ordered,
                    maxPacketLifeTime: s2.maxPacketLifeTime,
                    maxRetransmits: s2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertRecvDirection();
                const t3 = [];
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: a4,
                    streamId: n3
                  } = t4;
                  m.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const s2 = r4;
                  this._remoteSdp.receive({
                    mid: s2,
                    kind: r4,
                    offerRtpParameters: a4,
                    streamId: n3 || a4.rtcp.cname,
                    trackId: e4
                  });
                }
                const r3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  r3
                ), await this._pc.setRemoteDescription(r3);
                let a3 = await this._pc.createAnswer();
                const n2 = i.parse(a3.sdp);
                for (const t4 of e3) {
                  const { kind: e4, rtpParameters: r4 } = t4, a4 = e4, s2 = n2.media.find((e5) => String(e5.mid) === a4);
                  l.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: s2
                  });
                }
                a3 = { type: "answer", sdp: i.write(n2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: n2
                }), m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  a3
                ), await this._pc.setLocalDescription(a3);
                for (const r4 of e3) {
                  const { kind: e4, trackId: a4, rtpParameters: n3 } = r4, s2 = e4, i2 = a4, o2 = this._pc.getReceivers().find((e5) => e5.track && e5.track.id === i2);
                  if (!o2) throw new Error("new RTCRtpReceiver not");
                  this._mapRecvLocalIdInfo.set(i2, {
                    mid: s2,
                    rtpParameters: n3,
                    rtpReceiver: o2
                  }), t3.push({ localId: i2, track: o2.track, rtpReceiver: o2 });
                }
                return t3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  m.debug("stopReceiving() [localId:%s]", t4);
                  const { mid: e4, rtpParameters: r4 } = this._mapRecvLocalIdInfo.get(t4) || {};
                  this._mapRecvLocalIdInfo.delete(t4), this._remoteSdp.planBStopReceiving({
                    mid: e4,
                    offerRtpParameters: r4
                  });
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                m.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const { rtpReceiver: t3 } = this._mapRecvLocalIdInfo.get(e3) || {};
                if (!t3) throw new Error("associated RTCRtpReceiver not found");
                return t3.getStats();
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertRecvDirection();
                const {
                  streamId: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                m.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation({
                    oldDataChannelSpec: true
                  });
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = i.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  m.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = i.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Safari11 = g;
          },
          5765: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Safari12 = void 0;
            const i = s(r2(7363)), o = r2(2994), c = s(r2(1765)), d = s(r2(8046)), l = s(r2(5544)), p = s(r2(5938)), u = s(r2(4256)), h = r2(4893), m = r2(521), f = r2(1305), g = r2(3303), _ = new o.Logger("Safari12"), v = { OS: 1024, MIS: 1024 };
            class b extends m.HandlerInterface {
              static createFactory() {
                return () => new b();
              }
              constructor() {
                super(), this._closed = false, this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Safari12";
              }
              close() {
                if (_.debug("close()"), !this._closed) {
                  if (this._closed = true, this._pc)
                    try {
                      this._pc.close();
                    } catch (e3) {
                    }
                  this.emit("@close");
                }
              }
              async getNativeRtpCapabilities() {
                _.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = i.parse(t3.sdp), a3 = l.extractRtpCapabilities({ sdpObject: r3 });
                  return u.addNackSuppportForOpus(a3), a3;
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return _.debug("getNativeSctpCapabilities()"), { numStreams: v };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: a3,
                sctpParameters: n2,
                iceServers: s2,
                iceTransportPolicy: i2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: l2
              }) {
                this.assertNotClosed(), _.debug("run()"), this._direction = e3, this._remoteSdp = new f.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: a3,
                  sctpParameters: n2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", l2),
                  video: d.getSendingRemoteRtpParameters("video", l2)
                }, a3.role && "auto" !== a3.role && (this._forcedLocalDtlsRole = "server" === a3.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: s2 || [],
                    iceTransportPolicy: i2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o2
                  },
                  c2
                ), this._pc.addEventListener("icegatheringstatechange", () => {
                  this.emit(
                    "@icegatheringstatechange",
                    this._pc.iceGatheringState
                  );
                }), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (_.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                this.assertNotClosed(), _.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (this.assertNotClosed(), _.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this.assertNotClosed(), this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: a3 }) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id);
                const n2 = c.clone(this._sendingRtpParametersByKind[e3.kind]);
                n2.codecs = d.reduceCodecs(n2.codecs, a3);
                const s2 = c.clone(this._sendingRemoteRtpParametersByKind[e3.kind]);
                s2.codecs = d.reduceCodecs(s2.codecs, a3);
                const o2 = this._remoteSdp.getNextMediaSectionIdx(), u2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream]
                });
                let h2, m2 = await this._pc.createOffer(), f2 = i.parse(m2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: f2
                });
                const v2 = (0, g.parse)((t3 || [{}])[0].scalabilityMode);
                t3 && t3.length > 1 && (_.debug("send() | enabling legacy simulcast"), f2 = i.parse(m2.sdp), h2 = f2.media[o2.idx], p.addLegacySimulcast({
                  offerMediaObject: h2,
                  numStreams: t3.length
                }), m2 = { type: "offer", sdp: i.write(f2) }), _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m2
                ), await this._pc.setLocalDescription(m2);
                const b2 = u2.mid;
                if (n2.mid = b2, f2 = i.parse(this._pc.localDescription.sdp), h2 = f2.media[o2.idx], n2.rtcp.cname = l.getCname({ offerMediaObject: h2 }), n2.encodings = p.getRtpEncodings({ offerMediaObject: h2 }), t3)
                  for (let e4 = 0; e4 < n2.encodings.length; ++e4)
                    t3[e4] && Object.assign(n2.encodings[e4], t3[e4]);
                if (n2.encodings.length > 1 && ("video/vp8" === n2.codecs[0].mimeType.toLowerCase() || "video/h264" === n2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of n2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${v2.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: h2,
                  reuseMid: o2.reuseMid,
                  offerRtpParameters: n2,
                  answerRtpParameters: s2,
                  codecOptions: r3
                });
                const y = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  y
                ), await this._pc.setRemoteDescription(y), this._mapMidTransceiver.set(b2, u2), { localId: b2, rtpParameters: n2, rtpSender: u2.sender };
              }
              async stopSending(e3) {
                if (this.assertSendDirection(), this._closed) return;
                _.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                _.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async resumeSending(e3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly", this._remoteSdp.resumeSendingMediaSection(e3);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const a3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
              }
              async replaceTrack(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), t3 ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : _.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertNotClosed(), this.assertSendDirection(), _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3) throw new Error("associated RTCRtpTransceiver not found");
                const a3 = r3.sender.getParameters();
                a3.encodings.forEach((e4, r4) => {
                  a3.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(a3), this._remoteSdp.muxMediaSectionSimulcast(e3, a3.encodings);
                const n2 = await this._pc.createOffer();
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                const s2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  s2
                ), await this._pc.setRemoteDescription(s2);
              }
              async getSenderStats(e3) {
                this.assertNotClosed(), this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: a3,
                protocol: n2
              }) {
                this.assertNotClosed(), this.assertSendDirection();
                const s2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: n2
                };
                _.debug("sendDataChannel() [options:%o]", s2);
                const o2 = this._pc.createDataChannel(a3, s2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % v.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = i.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                    localSdpObject: t4
                  }), _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const a4 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    a4
                  ), await this._pc.setRemoteDescription(a4), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: s2.id,
                    ordered: s2.ordered,
                    maxPacketLifeTime: s2.maxPacketLifeTime,
                    maxRetransmits: s2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: a4,
                    rtpParameters: n3,
                    streamId: s3
                  } = t4;
                  _.debug("receive() [trackId:%s, kind:%s]", e4, a4);
                  const i2 = n3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, i2), this._remoteSdp.receive({
                    mid: i2,
                    kind: a4,
                    offerRtpParameters: n3,
                    streamId: s3 || n3.rtcp.cname,
                    trackId: e4
                  });
                }
                const a3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a3
                ), await this._pc.setRemoteDescription(a3);
                let n2 = await this._pc.createAnswer();
                const s2 = i.parse(n2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: a4 } = t4, n3 = r3.get(e4), i2 = s2.media.find((e5) => String(e5.mid) === n3);
                  l.applyCodecParameters({
                    offerRtpParameters: a4,
                    answerMediaObject: i2
                  });
                }
                n2 = { type: "answer", sdp: i.write(s2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                  localSdpObject: s2
                }), _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  n2
                ), await this._pc.setLocalDescription(n2);
                for (const a4 of e3) {
                  const { trackId: e4 } = a4, n3 = r3.get(e4), s3 = this._pc.getTransceivers().find((e5) => e5.mid === n3);
                  if (!s3) throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(n3, s3), t3.push({
                    localId: n3,
                    track: s3.receiver.track,
                    rtpReceiver: s3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                if (this.assertRecvDirection(), this._closed) return;
                for (const t4 of e3) {
                  _.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3) this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertNotClosed(), this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3) throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertNotClosed(), this.assertRecvDirection();
                const {
                  streamId: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: a3,
                  ordered: n2,
                  maxPacketLifeTime: s2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                _.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = i.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: this._forcedLocalDtlsRole ?? "client",
                      localSdpObject: e5
                    });
                  }
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = i.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertNotClosed() {
                if (this._closed)
                  throw new h.InvalidStateError(
                    "method called in a closed handler"
                  );
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Safari12 = b;
          },
          8751: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.mangleRtpParameters = t2.getCapabilities = void 0;
            const i = s(r2(1765));
            t2.getCapabilities = function() {
              const e3 = RTCRtpReceiver.getCapabilities(), t3 = i.clone(e3);
              for (const e4 of t3.codecs ?? []) {
                if (e4.channels = e4.numChannels, delete e4.numChannels, e4.mimeType = e4.mimeType || `${e4.kind}/${e4.name}`, e4.parameters) {
                  const t4 = e4.parameters;
                  t4.apt && (t4.apt = Number(t4.apt)), t4["packetization-mode"] && (t4["packetization-mode"] = Number(t4["packetization-mode"]));
                }
                for (const t4 of e4.rtcpFeedback || [])
                  t4.parameter || (t4.parameter = "");
              }
              return t3;
            }, t2.mangleRtpParameters = function(e3) {
              const t3 = i.clone(e3);
              t3.mid && (t3.muxId = t3.mid, delete t3.mid);
              for (const e4 of t3.codecs)
                e4.channels && (e4.numChannels = e4.channels, delete e4.channels), e4.mimeType && !e4.name && (e4.name = e4.mimeType.split("/")[1]), delete e4.mimeType;
              return t3;
            };
          },
          4256: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.addNackSuppportForOpus = void 0, t2.addNackSuppportForOpus = function(e3) {
              var _a;
              for (const t3 of e3.codecs || [])
                "audio/opus" !== t3.mimeType.toLowerCase() && "audio/multiopus" !== t3.mimeType.toLowerCase() || ((_a = t3.rtcpFeedback) == null ? void 0 : _a.some(
                  (e4) => "nack" === e4.type && !e4.parameter
                )) || (t3.rtcpFeedback || (t3.rtcpFeedback = []), t3.rtcpFeedback.push({ type: "nack" }));
            };
          },
          3471: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.OfferMediaSection = t2.AnswerMediaSection = t2.MediaSection = void 0;
            const i = s(r2(7363)), o = s(r2(1765));
            class c {
              constructor({
                iceParameters: e3,
                iceCandidates: t3,
                dtlsParameters: r3,
                planB: a3 = false
              }) {
                if (this._mediaObject = {}, this._planB = a3, e3 && this.setIceParameters(e3), t3) {
                  this._mediaObject.candidates = [];
                  for (const e4 of t3) {
                    const t4 = { component: 1 };
                    t4.foundation = e4.foundation, t4.ip = e4.address ?? e4.ip, t4.port = e4.port, t4.priority = e4.priority, t4.transport = e4.protocol, t4.type = e4.type, e4.tcpType && (t4.tcptype = e4.tcpType), this._mediaObject.candidates.push(t4);
                  }
                  this._mediaObject.endOfCandidates = "end-of-candidates", this._mediaObject.iceOptions = "renomination";
                }
                r3 && this.setDtlsRole(r3.role);
              }
              get mid() {
                return String(this._mediaObject.mid);
              }
              get closed() {
                return 0 === this._mediaObject.port;
              }
              getObject() {
                return this._mediaObject;
              }
              setIceParameters(e3) {
                this._mediaObject.iceUfrag = e3.usernameFragment, this._mediaObject.icePwd = e3.password;
              }
              pause() {
                this._mediaObject.direction = "inactive";
              }
              disable() {
                this.pause(), delete this._mediaObject.ext, delete this._mediaObject.ssrcs, delete this._mediaObject.ssrcGroups, delete this._mediaObject.simulcast, delete this._mediaObject.simulcast_03, delete this._mediaObject.rids, delete this._mediaObject.extmapAllowMixed;
              }
              close() {
                this.disable(), this._mediaObject.port = 0;
              }
            }
            t2.MediaSection = c;
            t2.AnswerMediaSection = class extends c {
              constructor({
                iceParameters: e3,
                iceCandidates: t3,
                dtlsParameters: r3,
                sctpParameters: a3,
                plainRtpParameters: n2,
                planB: s2 = false,
                offerMediaObject: i2,
                offerRtpParameters: c2,
                answerRtpParameters: l,
                codecOptions: p,
                extmapAllowMixed: u = false
              }) {
                switch (super({
                  iceParameters: e3,
                  iceCandidates: t3,
                  dtlsParameters: r3,
                  planB: s2
                }), this._mediaObject.mid = String(i2.mid), this._mediaObject.type = i2.type, this._mediaObject.protocol = i2.protocol, n2 ? (this._mediaObject.connection = {
                  ip: n2.ip,
                  version: n2.ipVersion
                }, this._mediaObject.port = n2.port) : (this._mediaObject.connection = {
                  ip: "127.0.0.1",
                  version: 4
                }, this._mediaObject.port = 7), i2.type) {
                  case "audio":
                  case "video":
                    this._mediaObject.direction = "recvonly", this._mediaObject.rtp = [], this._mediaObject.rtcpFb = [], this._mediaObject.fmtp = [];
                    for (const e4 of l.codecs) {
                      const t4 = {
                        payload: e4.payloadType,
                        codec: d(e4),
                        rate: e4.clockRate
                      };
                      e4.channels > 1 && (t4.encoding = e4.channels), this._mediaObject.rtp.push(t4);
                      const r4 = o.clone(e4.parameters) ?? {};
                      let a4 = o.clone(e4.rtcpFeedback) ?? [];
                      if (p) {
                        const {
                          opusStereo: t5,
                          opusFec: n4,
                          opusDtx: s3,
                          opusMaxPlaybackRate: i3,
                          opusMaxAverageBitrate: o2,
                          opusPtime: d2,
                          opusNack: l2,
                          videoGoogleStartBitrate: u2,
                          videoGoogleMaxBitrate: h,
                          videoGoogleMinBitrate: m
                        } = p, f = c2.codecs.find(
                          (t6) => t6.payloadType === e4.payloadType
                        );
                        switch (e4.mimeType.toLowerCase()) {
                          case "audio/opus":
                          case "audio/multiopus":
                            void 0 !== t5 && (f.parameters["sprop-stereo"] = t5 ? 1 : 0, r4.stereo = t5 ? 1 : 0), void 0 !== n4 && (f.parameters.useinbandfec = n4 ? 1 : 0, r4.useinbandfec = n4 ? 1 : 0), void 0 !== s3 && (f.parameters.usedtx = s3 ? 1 : 0, r4.usedtx = s3 ? 1 : 0), void 0 !== i3 && (r4.maxplaybackrate = i3), void 0 !== o2 && (r4.maxaveragebitrate = o2), void 0 !== d2 && (f.parameters.ptime = d2, r4.ptime = d2), l2 || (f.rtcpFeedback = f.rtcpFeedback.filter(
                              (e5) => "nack" !== e5.type || e5.parameter
                            ), a4 = a4.filter(
                              (e5) => "nack" !== e5.type || e5.parameter
                            ));
                            break;
                          case "video/vp8":
                          case "video/vp9":
                          case "video/h264":
                          case "video/h265":
                            void 0 !== u2 && (r4["x-google-start-bitrate"] = u2), void 0 !== h && (r4["x-google-max-bitrate"] = h), void 0 !== m && (r4["x-google-min-bitrate"] = m);
                        }
                      }
                      const n3 = { payload: e4.payloadType, config: "" };
                      for (const e5 of Object.keys(r4))
                        n3.config && (n3.config += ";"), n3.config += `${e5}=${r4[e5]}`;
                      n3.config && this._mediaObject.fmtp.push(n3);
                      for (const t5 of a4)
                        this._mediaObject.rtcpFb.push({
                          payload: e4.payloadType,
                          type: t5.type,
                          subtype: t5.parameter
                        });
                    }
                    this._mediaObject.payloads = l.codecs.map((e4) => e4.payloadType).join(" "), this._mediaObject.ext = [];
                    for (const e4 of l.headerExtensions) {
                      (i2.ext || []).some((t4) => t4.uri === e4.uri) && this._mediaObject.ext.push({ uri: e4.uri, value: e4.id });
                    }
                    if (u && "extmap-allow-mixed" === i2.extmapAllowMixed && (this._mediaObject.extmapAllowMixed = "extmap-allow-mixed"), i2.simulcast) {
                      this._mediaObject.simulcast = {
                        dir1: "recv",
                        list1: i2.simulcast.list1
                      }, this._mediaObject.rids = [];
                      for (const e4 of i2.rids || [])
                        "send" === e4.direction && this._mediaObject.rids.push({
                          id: e4.id,
                          direction: "recv"
                        });
                    } else if (i2.simulcast_03) {
                      this._mediaObject.simulcast_03 = {
                        value: i2.simulcast_03.value.replace(/send/g, "recv")
                      }, this._mediaObject.rids = [];
                      for (const e4 of i2.rids || [])
                        "send" === e4.direction && this._mediaObject.rids.push({
                          id: e4.id,
                          direction: "recv"
                        });
                    }
                    this._mediaObject.rtcpMux = "rtcp-mux", this._mediaObject.rtcpRsize = "rtcp-rsize", this._planB && "video" === this._mediaObject.type && (this._mediaObject.xGoogleFlag = "conference");
                    break;
                  case "application":
                    "number" == typeof i2.sctpPort ? (this._mediaObject.payloads = "webrtc-datachannel", this._mediaObject.sctpPort = a3.port, this._mediaObject.maxMessageSize = a3.maxMessageSize) : i2.sctpmap && (this._mediaObject.payloads = a3.port, this._mediaObject.sctpmap = {
                      app: "webrtc-datachannel",
                      sctpmapNumber: a3.port,
                      maxMessageSize: a3.maxMessageSize
                    });
                }
              }
              setDtlsRole(e3) {
                switch (e3) {
                  case "client":
                    this._mediaObject.setup = "active";
                    break;
                  case "server":
                    this._mediaObject.setup = "passive";
                    break;
                  case "auto":
                    this._mediaObject.setup = "actpass";
                }
              }
              resume() {
                this._mediaObject.direction = "recvonly";
              }
              muxSimulcastStreams(e3) {
                var _a;
                if (!this._mediaObject.simulcast || !this._mediaObject.simulcast.list1)
                  return;
                const t3 = {};
                for (const r4 of e3) r4.rid && (t3[r4.rid] = r4);
                const r3 = this._mediaObject.simulcast.list1, a3 = i.parseSimulcastStreamList(r3);
                for (const e4 of a3)
                  for (const r4 of e4) r4.paused = !((_a = t3[r4.scid]) == null ? void 0 : _a.active);
                this._mediaObject.simulcast.list1 = a3.map(
                  (e4) => e4.map((e5) => `${e5.paused ? "~" : ""}${e5.scid}`).join(",")
                ).join(";");
              }
            };
            function d(e3) {
              const t3 = new RegExp("^(audio|video)/(.+)", "i").exec(e3.mimeType);
              if (!t3) throw new TypeError("invalid codec.mimeType");
              return t3[2];
            }
            t2.OfferMediaSection = class extends c {
              constructor({
                iceParameters: e3,
                iceCandidates: t3,
                dtlsParameters: r3,
                sctpParameters: a3,
                plainRtpParameters: n2,
                planB: s2 = false,
                mid: i2,
                kind: o2,
                offerRtpParameters: c2,
                streamId: l,
                trackId: p,
                oldDataChannelSpec: u = false
              }) {
                switch (super({
                  iceParameters: e3,
                  iceCandidates: t3,
                  dtlsParameters: r3,
                  planB: s2
                }), this._mediaObject.mid = String(i2), this._mediaObject.type = o2, n2 ? (this._mediaObject.connection = {
                  ip: n2.ip,
                  version: n2.ipVersion
                }, this._mediaObject.protocol = "RTP/AVP", this._mediaObject.port = n2.port) : (this._mediaObject.connection = {
                  ip: "127.0.0.1",
                  version: 4
                }, this._mediaObject.protocol = a3 ? "UDP/DTLS/SCTP" : "UDP/TLS/RTP/SAVPF", this._mediaObject.port = 7), o2) {
                  case "audio":
                  case "video": {
                    this._mediaObject.direction = "sendonly", this._mediaObject.rtp = [], this._mediaObject.rtcpFb = [], this._mediaObject.fmtp = [], this._planB || (this._mediaObject.msid = `${l || "-"} ${p}`);
                    for (const e5 of c2.codecs) {
                      const t5 = {
                        payload: e5.payloadType,
                        codec: d(e5),
                        rate: e5.clockRate
                      };
                      e5.channels > 1 && (t5.encoding = e5.channels), this._mediaObject.rtp.push(t5);
                      const r5 = { payload: e5.payloadType, config: "" };
                      for (const t6 of Object.keys(e5.parameters))
                        r5.config && (r5.config += ";"), r5.config += `${t6}=${e5.parameters[t6]}`;
                      r5.config && this._mediaObject.fmtp.push(r5);
                      for (const t6 of e5.rtcpFeedback)
                        this._mediaObject.rtcpFb.push({
                          payload: e5.payloadType,
                          type: t6.type,
                          subtype: t6.parameter
                        });
                    }
                    this._mediaObject.payloads = c2.codecs.map((e5) => e5.payloadType).join(" "), this._mediaObject.ext = [];
                    for (const e5 of c2.headerExtensions)
                      this._mediaObject.ext.push({ uri: e5.uri, value: e5.id });
                    this._mediaObject.rtcpMux = "rtcp-mux", this._mediaObject.rtcpRsize = "rtcp-rsize";
                    const e4 = c2.encodings[0], t4 = e4.ssrc, r4 = e4.rtx && e4.rtx.ssrc ? e4.rtx.ssrc : void 0;
                    this._mediaObject.ssrcs = [], this._mediaObject.ssrcGroups = [], c2.rtcp.cname && this._mediaObject.ssrcs.push({
                      id: t4,
                      attribute: "cname",
                      value: c2.rtcp.cname
                    }), this._planB && this._mediaObject.ssrcs.push({
                      id: t4,
                      attribute: "msid",
                      value: `${l || "-"} ${p}`
                    }), r4 && (c2.rtcp.cname && this._mediaObject.ssrcs.push({
                      id: r4,
                      attribute: "cname",
                      value: c2.rtcp.cname
                    }), this._planB && this._mediaObject.ssrcs.push({
                      id: r4,
                      attribute: "msid",
                      value: `${l || "-"} ${p}`
                    }), this._mediaObject.ssrcGroups.push({
                      semantics: "FID",
                      ssrcs: `${t4} ${r4}`
                    }));
                    break;
                  }
                  case "application":
                    u ? (this._mediaObject.payloads = a3.port, this._mediaObject.sctpmap = {
                      app: "webrtc-datachannel",
                      sctpmapNumber: a3.port,
                      maxMessageSize: a3.maxMessageSize
                    }) : (this._mediaObject.payloads = "webrtc-datachannel", this._mediaObject.sctpPort = a3.port, this._mediaObject.maxMessageSize = a3.maxMessageSize);
                }
              }
              setDtlsRole(e3) {
                this._mediaObject.setup = "actpass";
              }
              resume() {
                this._mediaObject.direction = "sendonly";
              }
              planBReceive({ offerRtpParameters: e3, streamId: t3, trackId: r3 }) {
                const a3 = e3.encodings[0], n2 = a3.ssrc, s2 = a3.rtx && a3.rtx.ssrc ? a3.rtx.ssrc : void 0, i2 = this._mediaObject.payloads.split(" ");
                for (const t4 of e3.codecs) {
                  if (i2.includes(String(t4.payloadType))) continue;
                  const e4 = {
                    payload: t4.payloadType,
                    codec: d(t4),
                    rate: t4.clockRate
                  };
                  t4.channels > 1 && (e4.encoding = t4.channels), this._mediaObject.rtp.push(e4);
                  const r4 = { payload: t4.payloadType, config: "" };
                  for (const e5 of Object.keys(t4.parameters))
                    r4.config && (r4.config += ";"), r4.config += `${e5}=${t4.parameters[e5]}`;
                  r4.config && this._mediaObject.fmtp.push(r4);
                  for (const e5 of t4.rtcpFeedback)
                    this._mediaObject.rtcpFb.push({
                      payload: t4.payloadType,
                      type: e5.type,
                      subtype: e5.parameter
                    });
                }
                this._mediaObject.payloads += ` ${e3.codecs.filter(
                  (e4) => !this._mediaObject.payloads.includes(e4.payloadType)
                ).map((e4) => e4.payloadType).join(" ")}`, this._mediaObject.payloads = this._mediaObject.payloads.trim(), e3.rtcp.cname && this._mediaObject.ssrcs.push({
                  id: n2,
                  attribute: "cname",
                  value: e3.rtcp.cname
                }), this._mediaObject.ssrcs.push({
                  id: n2,
                  attribute: "msid",
                  value: `${t3 || "-"} ${r3}`
                }), s2 && (e3.rtcp.cname && this._mediaObject.ssrcs.push({
                  id: s2,
                  attribute: "cname",
                  value: e3.rtcp.cname
                }), this._mediaObject.ssrcs.push({
                  id: s2,
                  attribute: "msid",
                  value: `${t3 || "-"} ${r3}`
                }), this._mediaObject.ssrcGroups.push({
                  semantics: "FID",
                  ssrcs: `${n2} ${s2}`
                }));
              }
              planBStopReceiving({ offerRtpParameters: e3 }) {
                const t3 = e3.encodings[0], r3 = t3.ssrc, a3 = t3.rtx && t3.rtx.ssrc ? t3.rtx.ssrc : void 0;
                this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter(
                  (e4) => e4.id !== r3 && e4.id !== a3
                ), a3 && (this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups.filter(
                  (e4) => e4.ssrcs !== `${r3} ${a3}`
                ));
              }
            };
          },
          1305: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.RemoteSdp = void 0;
            const i = s(r2(7363)), o = r2(2994), c = r2(3471), d = new o.Logger("RemoteSdp");
            t2.RemoteSdp = class {
              constructor({
                iceParameters: e3,
                iceCandidates: t3,
                dtlsParameters: r3,
                sctpParameters: a3,
                plainRtpParameters: n2,
                planB: s2 = false
              }) {
                if (this._mediaSections = [], this._midToIndex = /* @__PURE__ */ new Map(), this._iceParameters = e3, this._iceCandidates = t3, this._dtlsParameters = r3, this._sctpParameters = a3, this._plainRtpParameters = n2, this._planB = s2, this._sdpObject = {
                  version: 0,
                  origin: {
                    address: "0.0.0.0",
                    ipVer: 4,
                    netType: "IN",
                    sessionId: 1e4,
                    sessionVersion: 0,
                    username: "mediasoup-client"
                  },
                  name: "-",
                  timing: { start: 0, stop: 0 },
                  media: []
                }, e3 && e3.iceLite && (this._sdpObject.icelite = "ice-lite"), r3) {
                  this._sdpObject.msidSemantic = { semantic: "WMS", token: "*" };
                  const e4 = this._dtlsParameters.fingerprints.length;
                  this._sdpObject.fingerprint = {
                    type: r3.fingerprints[e4 - 1].algorithm,
                    hash: r3.fingerprints[e4 - 1].value
                  }, this._sdpObject.groups = [{ type: "BUNDLE", mids: "" }];
                }
                n2 && (this._sdpObject.origin.address = n2.ip, this._sdpObject.origin.ipVer = n2.ipVersion);
              }
              updateIceParameters(e3) {
                d.debug("updateIceParameters() [iceParameters:%o]", e3), this._iceParameters = e3, this._sdpObject.icelite = e3.iceLite ? "ice-lite" : void 0;
                for (const t3 of this._mediaSections) t3.setIceParameters(e3);
              }
              updateDtlsRole(e3) {
                d.debug("updateDtlsRole() [role:%s]", e3), this._dtlsParameters.role = e3;
                for (const t3 of this._mediaSections) t3.setDtlsRole(e3);
              }
              getNextMediaSectionIdx() {
                for (let e3 = 0; e3 < this._mediaSections.length; ++e3) {
                  const t3 = this._mediaSections[e3];
                  if (t3.closed) return { idx: e3, reuseMid: t3.mid };
                }
                return { idx: this._mediaSections.length };
              }
              send({
                offerMediaObject: e3,
                reuseMid: t3,
                offerRtpParameters: r3,
                answerRtpParameters: a3,
                codecOptions: n2,
                extmapAllowMixed: s2 = false
              }) {
                const i2 = new c.AnswerMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  planB: this._planB,
                  offerMediaObject: e3,
                  offerRtpParameters: r3,
                  answerRtpParameters: a3,
                  codecOptions: n2,
                  extmapAllowMixed: s2
                });
                t3 ? this._replaceMediaSection(i2, t3) : this._midToIndex.has(i2.mid) ? this._replaceMediaSection(i2) : this._addMediaSection(i2);
              }
              receive({
                mid: e3,
                kind: t3,
                offerRtpParameters: r3,
                streamId: a3,
                trackId: n2
              }) {
                const s2 = this._midToIndex.get(e3);
                let i2;
                if (void 0 !== s2 && (i2 = this._mediaSections[s2]), i2)
                  i2.planBReceive({
                    offerRtpParameters: r3,
                    streamId: a3,
                    trackId: n2
                  }), this._replaceMediaSection(i2);
                else {
                  i2 = new c.OfferMediaSection({
                    iceParameters: this._iceParameters,
                    iceCandidates: this._iceCandidates,
                    dtlsParameters: this._dtlsParameters,
                    plainRtpParameters: this._plainRtpParameters,
                    planB: this._planB,
                    mid: e3,
                    kind: t3,
                    offerRtpParameters: r3,
                    streamId: a3,
                    trackId: n2
                  });
                  const s3 = this._mediaSections.find((e4) => e4.closed);
                  s3 ? this._replaceMediaSection(i2, s3.mid) : this._addMediaSection(i2);
                }
              }
              pauseMediaSection(e3) {
                this._findMediaSection(e3).pause();
              }
              resumeSendingMediaSection(e3) {
                this._findMediaSection(e3).resume();
              }
              resumeReceivingMediaSection(e3) {
                this._findMediaSection(e3).resume();
              }
              disableMediaSection(e3) {
                this._findMediaSection(e3).disable();
              }
              closeMediaSection(e3) {
                const t3 = this._findMediaSection(e3);
                return e3 === this._firstMid ? (d.debug(
                  "closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]",
                  e3
                ), this.disableMediaSection(e3), false) : (t3.close(), this._regenerateBundleMids(), true);
              }
              muxMediaSectionSimulcast(e3, t3) {
                const r3 = this._findMediaSection(e3);
                r3.muxSimulcastStreams(t3), this._replaceMediaSection(r3);
              }
              planBStopReceiving({ mid: e3, offerRtpParameters: t3 }) {
                const r3 = this._findMediaSection(e3);
                r3.planBStopReceiving({ offerRtpParameters: t3 }), this._replaceMediaSection(r3);
              }
              sendSctpAssociation({ offerMediaObject: e3 }) {
                const t3 = new c.AnswerMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  sctpParameters: this._sctpParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  offerMediaObject: e3
                });
                this._addMediaSection(t3);
              }
              receiveSctpAssociation({ oldDataChannelSpec: e3 = false } = {}) {
                const t3 = new c.OfferMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  sctpParameters: this._sctpParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  mid: "datachannel",
                  kind: "application",
                  oldDataChannelSpec: e3
                });
                this._addMediaSection(t3);
              }
              getSdp() {
                return this._sdpObject.origin.sessionVersion++, i.write(this._sdpObject);
              }
              _addMediaSection(e3) {
                this._firstMid || (this._firstMid = e3.mid), this._mediaSections.push(e3), this._midToIndex.set(e3.mid, this._mediaSections.length - 1), this._sdpObject.media.push(e3.getObject()), this._regenerateBundleMids();
              }
              _replaceMediaSection(e3, t3) {
                if ("string" == typeof t3) {
                  const r3 = this._midToIndex.get(t3);
                  if (void 0 === r3)
                    throw new Error(`no media section found for reuseMid '${t3}'`);
                  const a3 = this._mediaSections[r3];
                  this._mediaSections[r3] = e3, this._midToIndex.delete(a3.mid), this._midToIndex.set(e3.mid, r3), this._sdpObject.media[r3] = e3.getObject(), this._regenerateBundleMids();
                } else {
                  const t4 = this._midToIndex.get(e3.mid);
                  if (void 0 === t4)
                    throw new Error(`no media section found with mid '${e3.mid}'`);
                  this._mediaSections[t4] = e3, this._sdpObject.media[t4] = e3.getObject();
                }
              }
              _findMediaSection(e3) {
                const t3 = this._midToIndex.get(e3);
                if (void 0 === t3)
                  throw new Error(`no media section found with mid '${e3}'`);
                return this._mediaSections[t3];
              }
              _regenerateBundleMids() {
                this._dtlsParameters && (this._sdpObject.groups[0].mids = this._mediaSections.filter((e3) => !e3.closed).map((e3) => e3.mid).join(" "));
              }
            };
          },
          5544: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.applyCodecParameters = t2.getCname = t2.extractDtlsParameters = t2.extractRtpCapabilities = void 0;
            const i = s(r2(7363));
            t2.extractRtpCapabilities = function({ sdpObject: e3 }) {
              const t3 = /* @__PURE__ */ new Map(), r3 = [];
              let a3 = false, n2 = false;
              for (const s2 of e3.media) {
                const e4 = s2.type;
                switch (e4) {
                  case "audio":
                    if (a3) continue;
                    a3 = true;
                    break;
                  case "video":
                    if (n2) continue;
                    n2 = true;
                    break;
                  default:
                    continue;
                }
                for (const r4 of s2.rtp) {
                  const a4 = {
                    kind: e4,
                    mimeType: `${e4}/${r4.codec}`,
                    preferredPayloadType: r4.payload,
                    clockRate: r4.rate,
                    channels: r4.encoding,
                    parameters: {},
                    rtcpFeedback: []
                  };
                  t3.set(a4.preferredPayloadType, a4);
                }
                for (const e5 of s2.fmtp || []) {
                  const r4 = i.parseParams(e5.config), a4 = t3.get(e5.payload);
                  a4 && (r4 && r4.hasOwnProperty("profile-level-id") && (r4["profile-level-id"] = String(r4["profile-level-id"])), a4.parameters = r4);
                }
                for (const r4 of s2.rtcpFb || []) {
                  const a4 = { type: r4.type, parameter: r4.subtype };
                  if (a4.parameter || delete a4.parameter, "*" !== r4.payload) {
                    const e5 = t3.get(r4.payload);
                    if (!e5) continue;
                    e5.rtcpFeedback.push(a4);
                  } else
                    for (const r5 of t3.values())
                      r5.kind !== e4 || /.+\/rtx$/i.test(r5.mimeType) || r5.rtcpFeedback.push(a4);
                }
                for (const t4 of s2.ext || []) {
                  if (t4["encrypt-uri"]) continue;
                  const a4 = { kind: e4, uri: t4.uri, preferredId: t4.value };
                  r3.push(a4);
                }
              }
              return { codecs: Array.from(t3.values()), headerExtensions: r3 };
            }, t2.extractDtlsParameters = function({ sdpObject: e3 }) {
              let t3, r3 = e3.setup, a3 = e3.fingerprint;
              if (!r3 || !a3) {
                const t4 = (e3.media || []).find((e4) => 0 !== e4.port);
                t4 && (r3 ?? (r3 = t4.setup), a3 ?? (a3 = t4.fingerprint));
              }
              if (!r3)
                throw new Error(
                  "no a=setup found at SDP session or media level"
                );
              if (!a3)
                throw new Error(
                  "no a=fingerprint found at SDP session or media level"
                );
              switch (r3) {
                case "active":
                  t3 = "client";
                  break;
                case "passive":
                  t3 = "server";
                  break;
                case "actpass":
                  t3 = "auto";
              }
              return {
                role: t3,
                fingerprints: [{ algorithm: a3.type, value: a3.hash }]
              };
            }, t2.getCname = function({ offerMediaObject: e3 }) {
              const t3 = (e3.ssrcs || []).find((e4) => "cname" === e4.attribute);
              return t3 ? t3.value : "";
            }, t2.applyCodecParameters = function({
              offerRtpParameters: e3,
              answerMediaObject: t3
            }) {
              for (const r3 of e3.codecs) {
                const e4 = r3.mimeType.toLowerCase();
                if ("audio/opus" !== e4) continue;
                if (!(t3.rtp || []).find((e5) => e5.payload === r3.payloadType))
                  continue;
                t3.fmtp = t3.fmtp || [];
                let a3 = t3.fmtp.find((e5) => e5.payload === r3.payloadType);
                a3 || (a3 = { payload: r3.payloadType, config: "" }, t3.fmtp.push(a3));
                const n2 = i.parseParams(a3.config);
                switch (e4) {
                  case "audio/opus": {
                    const e5 = r3.parameters["sprop-stereo"];
                    void 0 !== e5 && (n2.stereo = e5 ? 1 : 0);
                    break;
                  }
                }
                a3.config = "";
                for (const e5 of Object.keys(n2))
                  a3.config && (a3.config += ";"), a3.config += `${e5}=${n2[e5]}`;
              }
            };
          },
          4496: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.addLegacySimulcast = t2.getRtpEncodings = void 0, t2.getRtpEncodings = function({ offerMediaObject: e3, track: t3 }) {
              let r2;
              const a2 = /* @__PURE__ */ new Set();
              for (const n2 of e3.ssrcs || []) {
                if ("msid" !== n2.attribute) continue;
                if (n2.value.split(" ")[1] === t3.id) {
                  const e4 = n2.id;
                  a2.add(e4), r2 || (r2 = e4);
                }
              }
              if (0 === a2.size)
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t3.id}]`
                );
              const n = /* @__PURE__ */ new Map();
              for (const t4 of e3.ssrcGroups || []) {
                if ("FID" !== t4.semantics) continue;
                let [e4, r3] = t4.ssrcs.split(/\s+/);
                e4 = Number(e4), r3 = Number(r3), a2.has(e4) && (a2.delete(e4), a2.delete(r3), n.set(e4, r3));
              }
              for (const e4 of a2) n.set(e4, null);
              const s = [];
              for (const [e4, t4] of n) {
                const r3 = { ssrc: e4 };
                t4 && (r3.rtx = { ssrc: t4 }), s.push(r3);
              }
              return s;
            }, t2.addLegacySimulcast = function({
              offerMediaObject: e3,
              track: t3,
              numStreams: r2
            }) {
              if (r2 <= 1)
                throw new TypeError("numStreams must be greater than 1");
              let a2, n, s;
              if (!(e3.ssrcs || []).find((e4) => {
                if ("msid" !== e4.attribute) return false;
                return e4.value.split(" ")[1] === t3.id && (a2 = e4.id, s = e4.value.split(" ")[0], true);
              }))
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t3.id}]`
                );
              (e3.ssrcGroups || []).some((e4) => {
                if ("FID" !== e4.semantics) return false;
                const t4 = e4.ssrcs.split(/\s+/);
                return Number(t4[0]) === a2 && (n = Number(t4[1]), true);
              });
              const i = e3.ssrcs.find(
                (e4) => "cname" === e4.attribute && e4.id === a2
              );
              if (!i)
                throw new Error(
                  `a=ssrc line with cname information not found [track.id:${t3.id}]`
                );
              const o = i.value, c = [], d = [];
              for (let e4 = 0; e4 < r2; ++e4) c.push(a2 + e4), n && d.push(n + e4);
              e3.ssrcGroups = e3.ssrcGroups || [], e3.ssrcs = e3.ssrcs || [], e3.ssrcGroups.push({ semantics: "SIM", ssrcs: c.join(" ") });
              for (let r3 = 0; r3 < c.length; ++r3) {
                const a3 = c[r3];
                e3.ssrcs.push({ id: a3, attribute: "cname", value: o }), e3.ssrcs.push({
                  id: a3,
                  attribute: "msid",
                  value: `${s} ${t3.id}`
                });
              }
              for (let r3 = 0; r3 < d.length; ++r3) {
                const a3 = c[r3], n2 = d[r3];
                e3.ssrcs.push({ id: n2, attribute: "cname", value: o }), e3.ssrcs.push({
                  id: n2,
                  attribute: "msid",
                  value: `${s} ${t3.id}`
                }), e3.ssrcGroups.push({ semantics: "FID", ssrcs: `${a3} ${n2}` });
              }
            };
          },
          5938: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.addLegacySimulcast = t2.getRtpEncodings = void 0, t2.getRtpEncodings = function({ offerMediaObject: e3 }) {
              const t3 = /* @__PURE__ */ new Set();
              for (const r3 of e3.ssrcs || []) {
                const e4 = r3.id;
                t3.add(e4);
              }
              if (0 === t3.size) throw new Error("no a=ssrc lines found");
              const r2 = /* @__PURE__ */ new Map();
              for (const a3 of e3.ssrcGroups || []) {
                if ("FID" !== a3.semantics) continue;
                let [e4, n] = a3.ssrcs.split(/\s+/);
                e4 = Number(e4), n = Number(n), t3.has(e4) && (t3.delete(e4), t3.delete(n), r2.set(e4, n));
              }
              for (const e4 of t3) r2.set(e4, null);
              const a2 = [];
              for (const [e4, t4] of r2) {
                const r3 = { ssrc: e4 };
                t4 && (r3.rtx = { ssrc: t4 }), a2.push(r3);
              }
              return a2;
            }, t2.addLegacySimulcast = function({
              offerMediaObject: e3,
              numStreams: t3
            }) {
              if (t3 <= 1)
                throw new TypeError("numStreams must be greater than 1");
              const r2 = (e3.ssrcs || []).find((e4) => "msid" === e4.attribute);
              if (!r2)
                throw new Error("a=ssrc line with msid information not found");
              const [a2, n] = r2.value.split(" "), s = r2.id;
              let i;
              (e3.ssrcGroups || []).some((e4) => {
                if ("FID" !== e4.semantics) return false;
                const t4 = e4.ssrcs.split(/\s+/);
                return Number(t4[0]) === s && (i = Number(t4[1]), true);
              });
              const o = e3.ssrcs.find((e4) => "cname" === e4.attribute);
              if (!o)
                throw new Error("a=ssrc line with cname information not found");
              const c = o.value, d = [], l = [];
              for (let e4 = 0; e4 < t3; ++e4) d.push(s + e4), i && l.push(i + e4);
              e3.ssrcGroups = [], e3.ssrcs = [], e3.ssrcGroups.push({ semantics: "SIM", ssrcs: d.join(" ") });
              for (let t4 = 0; t4 < d.length; ++t4) {
                const r3 = d[t4];
                e3.ssrcs.push({ id: r3, attribute: "cname", value: c }), e3.ssrcs.push({
                  id: r3,
                  attribute: "msid",
                  value: `${a2} ${n}`
                });
              }
              for (let t4 = 0; t4 < l.length; ++t4) {
                const r3 = d[t4], s2 = l[t4];
                e3.ssrcs.push({ id: s2, attribute: "cname", value: c }), e3.ssrcs.push({
                  id: s2,
                  attribute: "msid",
                  value: `${a2} ${n}`
                }), e3.ssrcGroups.push({ semantics: "FID", ssrcs: `${r3} ${s2}` });
              }
            };
          },
          76: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            }, i = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.debug = t2.parseScalabilityMode = t2.detectDevice = t2.Device = t2.version = t2.types = void 0;
            const o = i(r2(7833));
            t2.debug = o.default;
            const c = r2(6004);
            Object.defineProperty(t2, "Device", {
              enumerable: true,
              get: function() {
                return c.Device;
              }
            }), Object.defineProperty(t2, "detectDevice", {
              enumerable: true,
              get: function() {
                return c.detectDevice;
              }
            });
            const d = s(r2(8057));
            t2.types = d, t2.version = "3.7.7";
            var l = r2(3303);
            Object.defineProperty(t2, "parseScalabilityMode", {
              enumerable: true,
              get: function() {
                return l.parse;
              }
            });
          },
          8046: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), s = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && a2(t3, e3, r3);
              return n(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.canReceive = t2.canSend = t2.generateProbatorRtpParameters = t2.reduceCodecs = t2.getSendingRemoteRtpParameters = t2.getSendingRtpParameters = t2.getRecvRtpCapabilities = t2.getExtendedRtpCapabilities = t2.validateSctpCapabilities = t2.validateSctpStreamParameters = t2.validateRtpParameters = t2.validateRtpCapabilities = void 0;
            const i = s(r2(3200)), o = s(r2(1765));
            function c(e3) {
              if ("object" != typeof e3)
                throw new TypeError("params is not an object");
              if (e3.mid && "string" != typeof e3.mid)
                throw new TypeError("params.mid is not a string");
              if (!Array.isArray(e3.codecs))
                throw new TypeError("missing params.codecs");
              for (const t3 of e3.codecs) u(t3);
              if (e3.headerExtensions && !Array.isArray(e3.headerExtensions))
                throw new TypeError("params.headerExtensions is not an array");
              e3.headerExtensions || (e3.headerExtensions = []);
              for (const t3 of e3.headerExtensions) h(t3);
              if (e3.encodings && !Array.isArray(e3.encodings))
                throw new TypeError("params.encodings is not an array");
              e3.encodings || (e3.encodings = []);
              for (const t3 of e3.encodings) m(t3);
              if (e3.rtcp && "object" != typeof e3.rtcp)
                throw new TypeError("params.rtcp is not an object");
              e3.rtcp || (e3.rtcp = {}), function(e4) {
                if ("object" != typeof e4)
                  throw new TypeError("rtcp is not an object");
                if (e4.cname && "string" != typeof e4.cname)
                  throw new TypeError("invalid rtcp.cname");
                e4.reducedSize && "boolean" == typeof e4.reducedSize || (e4.reducedSize = true);
              }(e3.rtcp);
            }
            function d(e3) {
              const t3 = new RegExp("^(audio|video)/(.+)", "i");
              if ("object" != typeof e3)
                throw new TypeError("codec is not an object");
              if (!e3.mimeType || "string" != typeof e3.mimeType)
                throw new TypeError("missing codec.mimeType");
              const r3 = t3.exec(e3.mimeType);
              if (!r3) throw new TypeError("invalid codec.mimeType");
              if (e3.kind = r3[1].toLowerCase(), e3.preferredPayloadType && "number" != typeof e3.preferredPayloadType)
                throw new TypeError("invalid codec.preferredPayloadType");
              if ("number" != typeof e3.clockRate)
                throw new TypeError("missing codec.clockRate");
              "audio" === e3.kind ? "number" != typeof e3.channels && (e3.channels = 1) : delete e3.channels, e3.parameters && "object" == typeof e3.parameters || (e3.parameters = {});
              for (const t4 of Object.keys(e3.parameters)) {
                let r4 = e3.parameters[t4];
                if (void 0 === r4 && (e3.parameters[t4] = "", r4 = ""), "string" != typeof r4 && "number" != typeof r4)
                  throw new TypeError(
                    `invalid codec parameter [key:${t4}s, value:${r4}]`
                  );
                if ("apt" === t4 && "number" != typeof r4)
                  throw new TypeError("invalid codec apt parameter");
              }
              e3.rtcpFeedback && Array.isArray(e3.rtcpFeedback) || (e3.rtcpFeedback = []);
              for (const t4 of e3.rtcpFeedback) l(t4);
            }
            function l(e3) {
              if ("object" != typeof e3)
                throw new TypeError("fb is not an object");
              if (!e3.type || "string" != typeof e3.type)
                throw new TypeError("missing fb.type");
              e3.parameter && "string" == typeof e3.parameter || (e3.parameter = "");
            }
            function p(e3) {
              if ("object" != typeof e3)
                throw new TypeError("ext is not an object");
              if ("audio" !== e3.kind && "video" !== e3.kind)
                throw new TypeError("invalid ext.kind");
              if (!e3.uri || "string" != typeof e3.uri)
                throw new TypeError("missing ext.uri");
              if ("number" != typeof e3.preferredId)
                throw new TypeError("missing ext.preferredId");
              if (e3.preferredEncrypt && "boolean" != typeof e3.preferredEncrypt)
                throw new TypeError("invalid ext.preferredEncrypt");
              if (e3.preferredEncrypt || (e3.preferredEncrypt = false), e3.direction && "string" != typeof e3.direction)
                throw new TypeError("invalid ext.direction");
              e3.direction || (e3.direction = "sendrecv");
            }
            function u(e3) {
              const t3 = new RegExp("^(audio|video)/(.+)", "i");
              if ("object" != typeof e3)
                throw new TypeError("codec is not an object");
              if (!e3.mimeType || "string" != typeof e3.mimeType)
                throw new TypeError("missing codec.mimeType");
              const r3 = t3.exec(e3.mimeType);
              if (!r3) throw new TypeError("invalid codec.mimeType");
              if ("number" != typeof e3.payloadType)
                throw new TypeError("missing codec.payloadType");
              if ("number" != typeof e3.clockRate)
                throw new TypeError("missing codec.clockRate");
              "audio" === r3[1].toLowerCase() ? "number" != typeof e3.channels && (e3.channels = 1) : delete e3.channels, e3.parameters && "object" == typeof e3.parameters || (e3.parameters = {});
              for (const t4 of Object.keys(e3.parameters)) {
                let r4 = e3.parameters[t4];
                if (void 0 === r4 && (e3.parameters[t4] = "", r4 = ""), "string" != typeof r4 && "number" != typeof r4)
                  throw new TypeError(
                    `invalid codec parameter [key:${t4}s, value:${r4}]`
                  );
                if ("apt" === t4 && "number" != typeof r4)
                  throw new TypeError("invalid codec apt parameter");
              }
              e3.rtcpFeedback && Array.isArray(e3.rtcpFeedback) || (e3.rtcpFeedback = []);
              for (const t4 of e3.rtcpFeedback) l(t4);
            }
            function h(e3) {
              if ("object" != typeof e3)
                throw new TypeError("ext is not an object");
              if (!e3.uri || "string" != typeof e3.uri)
                throw new TypeError("missing ext.uri");
              if ("number" != typeof e3.id) throw new TypeError("missing ext.id");
              if (e3.encrypt && "boolean" != typeof e3.encrypt)
                throw new TypeError("invalid ext.encrypt");
              e3.encrypt || (e3.encrypt = false), e3.parameters && "object" == typeof e3.parameters || (e3.parameters = {});
              for (const t3 of Object.keys(e3.parameters)) {
                let r3 = e3.parameters[t3];
                if (void 0 === r3 && (e3.parameters[t3] = "", r3 = ""), "string" != typeof r3 && "number" != typeof r3)
                  throw new TypeError("invalid header extension parameter");
              }
            }
            function m(e3) {
              if ("object" != typeof e3)
                throw new TypeError("encoding is not an object");
              if (e3.ssrc && "number" != typeof e3.ssrc)
                throw new TypeError("invalid encoding.ssrc");
              if (e3.rid && "string" != typeof e3.rid)
                throw new TypeError("invalid encoding.rid");
              if (e3.rtx && "object" != typeof e3.rtx)
                throw new TypeError("invalid encoding.rtx");
              if (e3.rtx && "number" != typeof e3.rtx.ssrc)
                throw new TypeError("missing encoding.rtx.ssrc");
              if (e3.dtx && "boolean" == typeof e3.dtx || (e3.dtx = false), e3.scalabilityMode && "string" != typeof e3.scalabilityMode)
                throw new TypeError("invalid encoding.scalabilityMode");
            }
            function f(e3) {
              return !!e3 && /.+\/rtx$/i.test(e3.mimeType);
            }
            function g(e3, t3, { strict: r3 = false, modify: a3 = false } = {}) {
              const n2 = e3.mimeType.toLowerCase();
              if (n2 !== t3.mimeType.toLowerCase()) return false;
              if (e3.clockRate !== t3.clockRate) return false;
              if (e3.channels !== t3.channels) return false;
              switch (n2) {
                case "video/h264":
                  if (r3) {
                    if ((e3.parameters["packetization-mode"] || 0) !== (t3.parameters["packetization-mode"] || 0))
                      return false;
                    if (!i.isSameProfile(e3.parameters, t3.parameters)) return false;
                    let r4;
                    try {
                      r4 = i.generateProfileLevelIdStringForAnswer(
                        e3.parameters,
                        t3.parameters
                      );
                    } catch (e4) {
                      return false;
                    }
                    a3 && (r4 ? (e3.parameters["profile-level-id"] = r4, t3.parameters["profile-level-id"] = r4) : (delete e3.parameters["profile-level-id"], delete t3.parameters["profile-level-id"]));
                  }
                  break;
                case "video/vp9":
                  if (r3) {
                    if ((e3.parameters["profile-id"] || 0) !== (t3.parameters["profile-id"] || 0))
                      return false;
                  }
              }
              return true;
            }
            function _(e3, t3) {
              return (!e3.kind || !t3.kind || e3.kind === t3.kind) && e3.uri === t3.uri;
            }
            function v(e3, t3) {
              const r3 = [];
              for (const a3 of e3.rtcpFeedback || []) {
                const e4 = (t3.rtcpFeedback || []).find(
                  (e5) => e5.type === a3.type && (e5.parameter === a3.parameter || !e5.parameter && !a3.parameter)
                );
                e4 && r3.push(e4);
              }
              return r3;
            }
            t2.validateRtpCapabilities = function(e3) {
              if ("object" != typeof e3)
                throw new TypeError("caps is not an object");
              if (e3.codecs && !Array.isArray(e3.codecs))
                throw new TypeError("caps.codecs is not an array");
              e3.codecs || (e3.codecs = []);
              for (const t3 of e3.codecs) d(t3);
              if (e3.headerExtensions && !Array.isArray(e3.headerExtensions))
                throw new TypeError("caps.headerExtensions is not an array");
              e3.headerExtensions || (e3.headerExtensions = []);
              for (const t3 of e3.headerExtensions) p(t3);
            }, t2.validateRtpParameters = c, t2.validateSctpStreamParameters = function(e3) {
              if ("object" != typeof e3)
                throw new TypeError("params is not an object");
              if ("number" != typeof e3.streamId)
                throw new TypeError("missing params.streamId");
              let t3 = false;
              if ("boolean" == typeof e3.ordered ? t3 = true : e3.ordered = true, e3.maxPacketLifeTime && "number" != typeof e3.maxPacketLifeTime)
                throw new TypeError("invalid params.maxPacketLifeTime");
              if (e3.maxRetransmits && "number" != typeof e3.maxRetransmits)
                throw new TypeError("invalid params.maxRetransmits");
              if (e3.maxPacketLifeTime && e3.maxRetransmits)
                throw new TypeError(
                  "cannot provide both maxPacketLifeTime and maxRetransmits"
                );
              if (t3 && e3.ordered && (e3.maxPacketLifeTime || e3.maxRetransmits))
                throw new TypeError(
                  "cannot be ordered with maxPacketLifeTime or maxRetransmits"
                );
              if (t3 || !e3.maxPacketLifeTime && !e3.maxRetransmits || (e3.ordered = false), e3.label && "string" != typeof e3.label)
                throw new TypeError("invalid params.label");
              if (e3.protocol && "string" != typeof e3.protocol)
                throw new TypeError("invalid params.protocol");
            }, t2.validateSctpCapabilities = function(e3) {
              if ("object" != typeof e3)
                throw new TypeError("caps is not an object");
              if (!e3.numStreams || "object" != typeof e3.numStreams)
                throw new TypeError("missing caps.numStreams");
              !function(e4) {
                if ("object" != typeof e4)
                  throw new TypeError("numStreams is not an object");
                if ("number" != typeof e4.OS)
                  throw new TypeError("missing numStreams.OS");
                if ("number" != typeof e4.MIS)
                  throw new TypeError("missing numStreams.MIS");
              }(e3.numStreams);
            }, t2.getExtendedRtpCapabilities = function(e3, t3) {
              const r3 = { codecs: [], headerExtensions: [] };
              for (const a3 of t3.codecs || []) {
                if (f(a3)) continue;
                const t4 = (e3.codecs || []).find(
                  (e4) => g(e4, a3, { strict: true, modify: true })
                );
                if (!t4) continue;
                const n2 = {
                  mimeType: t4.mimeType,
                  kind: t4.kind,
                  clockRate: t4.clockRate,
                  channels: t4.channels,
                  localPayloadType: t4.preferredPayloadType,
                  localRtxPayloadType: void 0,
                  remotePayloadType: a3.preferredPayloadType,
                  remoteRtxPayloadType: void 0,
                  localParameters: t4.parameters,
                  remoteParameters: a3.parameters,
                  rtcpFeedback: v(t4, a3)
                };
                r3.codecs.push(n2);
              }
              for (const a3 of r3.codecs) {
                const r4 = e3.codecs.find(
                  (e4) => f(e4) && e4.parameters.apt === a3.localPayloadType
                ), n2 = t3.codecs.find(
                  (e4) => f(e4) && e4.parameters.apt === a3.remotePayloadType
                );
                r4 && n2 && (a3.localRtxPayloadType = r4.preferredPayloadType, a3.remoteRtxPayloadType = n2.preferredPayloadType);
              }
              for (const a3 of t3.headerExtensions) {
                const t4 = e3.headerExtensions.find((e4) => _(e4, a3));
                if (!t4) continue;
                const n2 = {
                  kind: a3.kind,
                  uri: a3.uri,
                  sendId: t4.preferredId,
                  recvId: a3.preferredId,
                  encrypt: t4.preferredEncrypt,
                  direction: "sendrecv"
                };
                switch (a3.direction) {
                  case "sendrecv":
                    n2.direction = "sendrecv";
                    break;
                  case "recvonly":
                    n2.direction = "sendonly";
                    break;
                  case "sendonly":
                    n2.direction = "recvonly";
                    break;
                  case "inactive":
                    n2.direction = "inactive";
                }
                r3.headerExtensions.push(n2);
              }
              return r3;
            }, t2.getRecvRtpCapabilities = function(e3) {
              const t3 = { codecs: [], headerExtensions: [] };
              for (const r3 of e3.codecs) {
                const e4 = {
                  mimeType: r3.mimeType,
                  kind: r3.kind,
                  preferredPayloadType: r3.remotePayloadType,
                  clockRate: r3.clockRate,
                  channels: r3.channels,
                  parameters: r3.localParameters,
                  rtcpFeedback: r3.rtcpFeedback
                };
                if (t3.codecs.push(e4), !r3.remoteRtxPayloadType) continue;
                const a3 = {
                  mimeType: `${r3.kind}/rtx`,
                  kind: r3.kind,
                  preferredPayloadType: r3.remoteRtxPayloadType,
                  clockRate: r3.clockRate,
                  parameters: { apt: r3.remotePayloadType },
                  rtcpFeedback: []
                };
                t3.codecs.push(a3);
              }
              for (const r3 of e3.headerExtensions) {
                if ("sendrecv" !== r3.direction && "recvonly" !== r3.direction)
                  continue;
                const e4 = {
                  kind: r3.kind,
                  uri: r3.uri,
                  preferredId: r3.recvId,
                  preferredEncrypt: r3.encrypt,
                  direction: r3.direction
                };
                t3.headerExtensions.push(e4);
              }
              return t3;
            }, t2.getSendingRtpParameters = function(e3, t3) {
              const r3 = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {}
              };
              for (const a3 of t3.codecs) {
                if (a3.kind !== e3) continue;
                const t4 = {
                  mimeType: a3.mimeType,
                  payloadType: a3.localPayloadType,
                  clockRate: a3.clockRate,
                  channels: a3.channels,
                  parameters: a3.localParameters,
                  rtcpFeedback: a3.rtcpFeedback
                };
                if (r3.codecs.push(t4), a3.localRtxPayloadType) {
                  const e4 = {
                    mimeType: `${a3.kind}/rtx`,
                    payloadType: a3.localRtxPayloadType,
                    clockRate: a3.clockRate,
                    parameters: { apt: a3.localPayloadType },
                    rtcpFeedback: []
                  };
                  r3.codecs.push(e4);
                }
              }
              for (const a3 of t3.headerExtensions) {
                if (a3.kind && a3.kind !== e3 || "sendrecv" !== a3.direction && "sendonly" !== a3.direction)
                  continue;
                const t4 = {
                  uri: a3.uri,
                  id: a3.sendId,
                  encrypt: a3.encrypt,
                  parameters: {}
                };
                r3.headerExtensions.push(t4);
              }
              return r3;
            }, t2.getSendingRemoteRtpParameters = function(e3, t3) {
              const r3 = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {}
              };
              for (const a3 of t3.codecs) {
                if (a3.kind !== e3) continue;
                const t4 = {
                  mimeType: a3.mimeType,
                  payloadType: a3.localPayloadType,
                  clockRate: a3.clockRate,
                  channels: a3.channels,
                  parameters: a3.remoteParameters,
                  rtcpFeedback: a3.rtcpFeedback
                };
                if (r3.codecs.push(t4), a3.localRtxPayloadType) {
                  const e4 = {
                    mimeType: `${a3.kind}/rtx`,
                    payloadType: a3.localRtxPayloadType,
                    clockRate: a3.clockRate,
                    parameters: { apt: a3.localPayloadType },
                    rtcpFeedback: []
                  };
                  r3.codecs.push(e4);
                }
              }
              for (const a3 of t3.headerExtensions) {
                if (a3.kind && a3.kind !== e3 || "sendrecv" !== a3.direction && "sendonly" !== a3.direction)
                  continue;
                const t4 = {
                  uri: a3.uri,
                  id: a3.sendId,
                  encrypt: a3.encrypt,
                  parameters: {}
                };
                r3.headerExtensions.push(t4);
              }
              if (r3.headerExtensions.some(
                (e4) => "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" === e4.uri
              ))
                for (const e4 of r3.codecs)
                  e4.rtcpFeedback = (e4.rtcpFeedback || []).filter(
                    (e5) => "goog-remb" !== e5.type
                  );
              else if (r3.headerExtensions.some(
                (e4) => "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" === e4.uri
              ))
                for (const e4 of r3.codecs)
                  e4.rtcpFeedback = (e4.rtcpFeedback || []).filter(
                    (e5) => "transport-cc" !== e5.type
                  );
              else
                for (const e4 of r3.codecs)
                  e4.rtcpFeedback = (e4.rtcpFeedback || []).filter(
                    (e5) => "transport-cc" !== e5.type && "goog-remb" !== e5.type
                  );
              return r3;
            }, t2.reduceCodecs = function(e3, t3) {
              const r3 = [];
              if (t3) {
                for (let a3 = 0; a3 < e3.length; ++a3)
                  if (g(e3[a3], t3, { strict: true })) {
                    r3.push(e3[a3]), f(e3[a3 + 1]) && r3.push(e3[a3 + 1]);
                    break;
                  }
                if (0 === r3.length)
                  throw new TypeError("no matching codec found");
              } else r3.push(e3[0]), f(e3[1]) && r3.push(e3[1]);
              return r3;
            }, t2.generateProbatorRtpParameters = function(e3) {
              c(e3 = o.clone(e3));
              const t3 = {
                mid: "probator",
                codecs: [],
                headerExtensions: [],
                encodings: [{ ssrc: 1234 }],
                rtcp: { cname: "probator" }
              };
              return t3.codecs.push(e3.codecs[0]), t3.codecs[0].payloadType = 127, t3.headerExtensions = e3.headerExtensions, t3;
            }, t2.canSend = function(e3, t3) {
              return t3.codecs.some((t4) => t4.kind === e3);
            }, t2.canReceive = function(e3, t3) {
              if (c(e3), 0 === e3.codecs.length) return false;
              const r3 = e3.codecs[0];
              return t3.codecs.some(
                (e4) => e4.remotePayloadType === r3.payloadType
              );
            };
          },
          3303: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.parse = void 0;
            const r2 = new RegExp("^[LS]([1-9]\\d{0,1})T([1-9]\\d{0,1})");
            t2.parse = function(e3) {
              const t3 = r2.exec(e3 || "");
              return t3 ? { spatialLayers: Number(t3[1]), temporalLayers: Number(t3[2]) } : { spatialLayers: 1, temporalLayers: 1 };
            };
          },
          8057: function(e2, t2, r2) {
            "use strict";
            var a2 = this && this.__createBinding || (Object.create ? function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3);
              var n2 = Object.getOwnPropertyDescriptor(t3, r3);
              n2 && !("get" in n2 ? !t3.__esModule : n2.writable || n2.configurable) || (n2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, a3, n2);
            } : function(e3, t3, r3, a3) {
              void 0 === a3 && (a3 = r3), e3[a3] = t3[r3];
            }), n = this && this.__exportStar || function(e3, t3) {
              for (var r3 in e3)
                "default" === r3 || Object.prototype.hasOwnProperty.call(t3, r3) || a2(t3, e3, r3);
            };
            Object.defineProperty(t2, "__esModule", { value: true }), n(r2(6004), t2), n(r2(5601), t2), n(r2(9792), t2), n(r2(3518), t2), n(r2(7504), t2), n(r2(9166), t2), n(r2(5370), t2), n(r2(4160), t2), n(r2(521), t2), n(r2(4893), t2);
          },
          1765: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.deepFreeze = t2.generateRandomNumber = t2.clone = void 0, t2.clone = function(e3) {
              return void 0 === e3 ? void 0 : Number.isNaN(e3) ? NaN : "function" == typeof structuredClone ? structuredClone(e3) : JSON.parse(JSON.stringify(e3));
            }, t2.generateRandomNumber = function() {
              return Math.round(1e7 * Math.random());
            }, t2.deepFreeze = function e3(t3) {
              const r2 = Reflect.ownKeys(t3);
              for (const a2 of r2) {
                const r3 = t3[a2];
                (r3 && "object" == typeof r3 || "function" == typeof r3) && e3(r3);
              }
              return Object.freeze(t3);
            };
          },
          6585: (e2) => {
            var t2 = 1e3, r2 = 60 * t2, a2 = 60 * r2, n = 24 * a2, s = 7 * n, i = 365.25 * n;
            function o(e3, t3, r3, a3) {
              var n2 = t3 >= 1.5 * r3;
              return Math.round(e3 / r3) + " " + a3 + (n2 ? "s" : "");
            }
            e2.exports = function(e3, c) {
              c = c || {};
              var d = typeof e3;
              if ("string" === d && e3.length > 0)
                return function(e4) {
                  if ((e4 = String(e4)).length > 100) return;
                  var o2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
                    e4
                  );
                  if (!o2) return;
                  var c2 = parseFloat(o2[1]);
                  switch ((o2[2] || "ms").toLowerCase()) {
                    case "years":
                    case "year":
                    case "yrs":
                    case "yr":
                    case "y":
                      return c2 * i;
                    case "weeks":
                    case "week":
                    case "w":
                      return c2 * s;
                    case "days":
                    case "day":
                    case "d":
                      return c2 * n;
                    case "hours":
                    case "hour":
                    case "hrs":
                    case "hr":
                    case "h":
                      return c2 * a2;
                    case "minutes":
                    case "minute":
                    case "mins":
                    case "min":
                    case "m":
                      return c2 * r2;
                    case "seconds":
                    case "second":
                    case "secs":
                    case "sec":
                    case "s":
                      return c2 * t2;
                    case "milliseconds":
                    case "millisecond":
                    case "msecs":
                    case "msec":
                    case "ms":
                      return c2;
                    default:
                      return;
                  }
                }(e3);
              if ("number" === d && isFinite(e3))
                return c.long ? function(e4) {
                  var s2 = Math.abs(e4);
                  if (s2 >= n) return o(e4, s2, n, "day");
                  if (s2 >= a2) return o(e4, s2, a2, "hour");
                  if (s2 >= r2) return o(e4, s2, r2, "minute");
                  if (s2 >= t2) return o(e4, s2, t2, "second");
                  return e4 + " ms";
                }(e3) : function(e4) {
                  var s2 = Math.abs(e4);
                  if (s2 >= n) return Math.round(e4 / n) + "d";
                  if (s2 >= a2) return Math.round(e4 / a2) + "h";
                  if (s2 >= r2) return Math.round(e4 / r2) + "m";
                  if (s2 >= t2) return Math.round(e4 / t2) + "s";
                  return e4 + "ms";
                }(e3);
              throw new Error(
                "val is not a non-empty string or a valid number. val=" + JSON.stringify(e3)
              );
            };
          },
          4252: (e2, t2, r2) => {
            const { EventEmitter: a2 } = r2(7007), n = r2(3612);
            e2.exports = class extends a2 {
              constructor(e3) {
                super(), this.setMaxListeners(1 / 0), this._logger = e3 || new n("EnhancedEventEmitter");
              }
              safeEmit(e3, ...t3) {
                try {
                  this.emit(e3, ...t3);
                } catch (t4) {
                  this._logger.error(
                    "safeEmit() | event listener threw an error [event:%s]:%o",
                    e3,
                    t4
                  );
                }
              }
              async safeEmitAsPromise(e3, ...t3) {
                return new Promise((r3, a3) => {
                  this.safeEmit(e3, ...t3, r3, a3);
                });
              }
            };
          },
          3612: (e2, t2, r2) => {
            const a2 = r2(7833), n = "protoo-client";
            e2.exports = class {
              constructor(e3) {
                e3 ? (this._debug = a2(`${n}:${e3}`), this._warn = a2(`${n}:WARN:${e3}`), this._error = a2(`${n}:ERROR:${e3}`)) : (this._debug = a2(n), this._warn = a2(`${n}:WARN`), this._error = a2(`${n}:ERROR`)), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
              }
              get debug() {
                return this._debug;
              }
              get warn() {
                return this._warn;
              }
              get error() {
                return this._error;
              }
            };
          },
          3241: (e2, t2, r2) => {
            const a2 = r2(3612), { generateRandomNumber: n } = r2(9007), s = new a2("Message");
            e2.exports = class {
              static parse(e3) {
                let t3;
                const r3 = {};
                try {
                  t3 = JSON.parse(e3);
                } catch (e4) {
                  return void s.error("parse() | invalid JSON: %s", e4);
                }
                if ("object" == typeof t3 && !Array.isArray(t3)) {
                  if (t3.request) {
                    if (r3.request = true, "string" != typeof t3.method)
                      return void s.error(
                        "parse() | missing/invalid method field"
                      );
                    if ("number" != typeof t3.id)
                      return void s.error("parse() | missing/invalid id field");
                    r3.id = t3.id, r3.method = t3.method, r3.data = t3.data || {};
                  } else if (t3.response) {
                    if (r3.response = true, "number" != typeof t3.id)
                      return void s.error("parse() | missing/invalid id field");
                    r3.id = t3.id, t3.ok ? (r3.ok = true, r3.data = t3.data || {}) : (r3.ok = false, r3.errorCode = t3.errorCode, r3.errorReason = t3.errorReason);
                  } else {
                    if (!t3.notification)
                      return void s.error(
                        "parse() | missing request/response field"
                      );
                    if (r3.notification = true, "string" != typeof t3.method)
                      return void s.error(
                        "parse() | missing/invalid method field"
                      );
                    r3.method = t3.method, r3.data = t3.data || {};
                  }
                  return r3;
                }
                s.error("parse() | not an object");
              }
              static createRequest(e3, t3) {
                return { request: true, id: n(), method: e3, data: t3 || {} };
              }
              static createSuccessResponse(e3, t3) {
                return { response: true, id: e3.id, ok: true, data: t3 || {} };
              }
              static createErrorResponse(e3, t3, r3) {
                return {
                  response: true,
                  id: e3.id,
                  ok: false,
                  errorCode: t3,
                  errorReason: r3
                };
              }
              static createNotification(e3, t3) {
                return { notification: true, method: e3, data: t3 || {} };
              }
            };
          },
          7204: (e2, t2, r2) => {
            const a2 = r2(3612), n = r2(4252), s = r2(3241), i = new a2("Peer");
            e2.exports = class extends n {
              constructor(e3) {
                super(i), i.debug("constructor()"), this._closed = false, this._transport = e3, this._connected = false, this._data = {}, this._sents = /* @__PURE__ */ new Map(), this._handleTransport();
              }
              get closed() {
                return this._closed;
              }
              get connected() {
                return this._connected;
              }
              get data() {
                return this._data;
              }
              set data(e3) {
                throw new Error("cannot override data object");
              }
              close() {
                if (!this._closed) {
                  i.debug("close()"), this._closed = true, this._connected = false, this._transport.close();
                  for (const e3 of this._sents.values()) e3.close();
                  this.safeEmit("close");
                }
              }
              async request(e3, t3 = void 0) {
                const r3 = s.createRequest(e3, t3);
                return this._logger.debug("request() [method:%s, id:%s]", e3, r3.id), await this._transport.send(r3), new Promise((e4, t4) => {
                  const a3 = 1500 * (15 + 0.1 * this._sents.size), n2 = {
                    id: r3.id,
                    method: r3.method,
                    resolve: (t5) => {
                      this._sents.delete(r3.id) && (clearTimeout(n2.timer), e4(t5));
                    },
                    reject: (e5) => {
                      this._sents.delete(r3.id) && (clearTimeout(n2.timer), t4(e5));
                    },
                    timer: setTimeout(() => {
                      this._sents.delete(r3.id) && t4(new Error("request timeout"));
                    }, a3),
                    close: () => {
                      clearTimeout(n2.timer), t4(new Error("peer closed"));
                    }
                  };
                  this._sents.set(r3.id, n2);
                });
              }
              async notify(e3, t3 = void 0) {
                const r3 = s.createNotification(e3, t3);
                this._logger.debug("notify() [method:%s]", e3), await this._transport.send(r3);
              }
              _handleTransport() {
                if (this._transport.closed)
                  return this._closed = true, void setTimeout(() => {
                    this._closed || (this._connected = false, this.safeEmit("close"));
                  });
                this._transport.on("open", () => {
                  this._closed || (i.debug('emit "open"'), this._connected = true, this.safeEmit("open"));
                }), this._transport.on("disconnected", () => {
                  this._closed || (i.debug('emit "disconnected"'), this._connected = false, this.safeEmit("disconnected"));
                }), this._transport.on("failed", (e3) => {
                  this._closed || (i.debug('emit "failed" [currentAttempt:%s]', e3), this._connected = false, this.safeEmit("failed", e3));
                }), this._transport.on("close", () => {
                  this._closed || (this._closed = true, i.debug('emit "close"'), this._connected = false, this.safeEmit("close"));
                }), this._transport.on("message", (e3) => {
                  e3.request ? this._handleRequest(e3) : e3.response ? this._handleResponse(e3) : e3.notification && this._handleNotification(e3);
                });
              }
              _handleRequest(e3) {
                try {
                  this.emit(
                    "request",
                    e3,
                    (t3) => {
                      const r3 = s.createSuccessResponse(e3, t3);
                      this._transport.send(r3).catch(() => {
                      });
                    },
                    (t3, r3) => {
                      t3 instanceof Error ? (r3 = t3.message, t3 = 500) : "number" == typeof t3 && r3 instanceof Error && (r3 = r3.message);
                      const a3 = s.createErrorResponse(e3, t3, r3);
                      this._transport.send(a3).catch(() => {
                      });
                    }
                  );
                } catch (t3) {
                  const r3 = s.createErrorResponse(e3, 500, String(t3));
                  this._transport.send(r3).catch(() => {
                  });
                }
              }
              _handleResponse(e3) {
                const t3 = this._sents.get(e3.id);
                if (t3)
                  if (e3.ok) t3.resolve(e3.data);
                  else {
                    const r3 = new Error(e3.errorReason);
                    r3.code = e3.errorCode, t3.reject(r3);
                  }
                else
                  i.error(
                    "received response does not match any sent request [id:%s]",
                    e3.id
                  );
              }
              _handleNotification(e3) {
                this.safeEmit("notification", e3);
              }
            };
          },
          9566: (e2, t2, r2) => {
            const { version: a2 } = r2(7949), n = r2(7204), s = r2(3545);
            t2.xM = n, t2.TJ = s;
          },
          3545: (e2, t2, r2) => {
            const a2 = r2(952).w3cwebsocket, n = r2(5617), s = r2(3612), i = r2(4252), o = r2(3241), c = { retries: 10, factor: 2, minTimeout: 1e3, maxTimeout: 8e3 }, d = new s("WebSocketTransport");
            e2.exports = class extends i {
              constructor(e3, t3) {
                super(d), d.debug("constructor() [url:%s, options:%o]", e3, t3), this._closed = false, this._url = e3, this._options = t3 || {}, this._ws = null, this._runWebSocket();
              }
              get closed() {
                return this._closed;
              }
              close() {
                if (!this._closed) {
                  d.debug("close()"), this._closed = true, this.safeEmit("close");
                  try {
                    this._ws.onopen = null, this._ws.onclose = null, this._ws.onerror = null, this._ws.onmessage = null, this._ws.close();
                  } catch (e3) {
                    d.error("close() | error closing the WebSocket: %o", e3);
                  }
                }
              }
              async send(e3) {
                if (this._closed) throw new Error("transport closed");
                try {
                  this._ws.send(JSON.stringify(e3));
                } catch (e4) {
                  throw d.warn("send() failed:%o", e4), e4;
                }
              }
              _runWebSocket() {
                const e3 = n.operation(this._options.retry || c);
                let t3 = false;
                e3.attempt((r3) => {
                  this._closed ? e3.stop() : (d.debug("_runWebSocket() [currentAttempt:%s]", r3), this._ws = new a2(
                    this._url,
                    "protoo",
                    this._options.origin,
                    this._options.headers,
                    this._options.requestOptions,
                    this._options.clientConfig
                  ), this._ws.onopen = () => {
                    this._closed || (t3 = true, this.safeEmit("open"));
                  }, this._ws.onclose = (a3) => {
                    if (!this._closed) {
                      if (d.warn(
                        'WebSocket "close" event [wasClean:%s, code:%s, reason:"%s"]',
                        a3.wasClean,
                        a3.code,
                        a3.reason
                      ), 4e3 !== a3.code) {
                        if (t3) {
                          if (e3.stop(), this.safeEmit("disconnected"), this._closed)
                            return;
                          return void this._runWebSocket();
                        }
                        if (this.safeEmit("failed", r3), this._closed)
                          return;
                        if (e3.retry(true)) return;
                      }
                      this._closed = true, this.safeEmit("close");
                    }
                  }, this._ws.onerror = () => {
                    this._closed || d.error('WebSocket "error" event');
                  }, this._ws.onmessage = (e4) => {
                    if (this._closed) return;
                    const t4 = o.parse(e4.data);
                    t4 && (0 !== this.listenerCount("message") ? this.safeEmit("message", t4) : d.error(
                      'no listeners for WebSocket "message" event, ignoring received message'
                    ));
                  });
                });
              }
            };
          },
          9007: (e2, t2) => {
            t2.generateRandomNumber = function() {
              return Math.round(1e7 * Math.random());
            };
          },
          9596: (e2, t2, r2) => {
            let a2;
            e2.exports = "function" == typeof queueMicrotask ? queueMicrotask.bind("undefined" != typeof window ? window : r2.g) : (e3) => (a2 || (a2 = Promise.resolve())).then(e3).catch(
              (e4) => setTimeout(() => {
                throw e4;
              }, 0)
            );
          },
          2211: (e2) => {
            "use strict";
            e2.exports = function(e3) {
              var t2, r2, a2 = "", n = (e3 = function(e4) {
                return e4 || (e4 = {}), {
                  length: e4.length || 8,
                  numeric: "boolean" != typeof e4.numeric || e4.numeric,
                  letters: "boolean" != typeof e4.letters || e4.letters,
                  special: "boolean" == typeof e4.special && e4.special,
                  exclude: Array.isArray(e4.exclude) ? e4.exclude : []
                };
              }(e3)).length, s = (e3.exclude, function(e4) {
                var t3 = "";
                e4.numeric && (t3 += "0123456789"), e4.letters && (t3 += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"), e4.special && (t3 += "!$%^&*()_+|~-=`{}[]:;<>?,./");
                for (var r3 = 0; r3 <= e4.exclude.length; r3++)
                  t3 = t3.replace(e4.exclude[r3], "");
                return t3;
              }(e3));
              for (t2 = 1; t2 <= n; t2++)
                a2 += s.substring(
                  r2 = Math.floor(Math.random() * s.length),
                  r2 + 1
                );
              return a2;
            };
          },
          5617: (e2, t2, r2) => {
            e2.exports = r2(8303);
          },
          8303: (e2, t2, r2) => {
            var a2 = r2(3961);
            t2.operation = function(e3) {
              var r3 = t2.timeouts(e3);
              return new a2(r3, {
                forever: e3 && e3.forever,
                unref: e3 && e3.unref,
                maxRetryTime: e3 && e3.maxRetryTime
              });
            }, t2.timeouts = function(e3) {
              if (e3 instanceof Array) return [].concat(e3);
              var t3 = {
                retries: 10,
                factor: 2,
                minTimeout: 1e3,
                maxTimeout: 1 / 0,
                randomize: false
              };
              for (var r3 in e3) t3[r3] = e3[r3];
              if (t3.minTimeout > t3.maxTimeout)
                throw new Error("minTimeout is greater than maxTimeout");
              for (var a3 = [], n = 0; n < t3.retries; n++)
                a3.push(this.createTimeout(n, t3));
              return e3 && e3.forever && !a3.length && a3.push(this.createTimeout(n, t3)), a3.sort(function(e4, t4) {
                return e4 - t4;
              }), a3;
            }, t2.createTimeout = function(e3, t3) {
              var r3 = t3.randomize ? Math.random() + 1 : 1, a3 = Math.round(r3 * t3.minTimeout * Math.pow(t3.factor, e3));
              return a3 = Math.min(a3, t3.maxTimeout);
            }, t2.wrap = function(e3, r3, a3) {
              if (r3 instanceof Array && (a3 = r3, r3 = null), !a3)
                for (var n in a3 = [], e3)
                  "function" == typeof e3[n] && a3.push(n);
              for (var s = 0; s < a3.length; s++) {
                var i = a3[s], o = e3[i];
                e3[i] = (function(a4) {
                  var n2 = t2.operation(r3), s2 = Array.prototype.slice.call(arguments, 1), i2 = s2.pop();
                  s2.push(function(e4) {
                    n2.retry(e4) || (e4 && (arguments[0] = n2.mainError()), i2.apply(this, arguments));
                  }), n2.attempt(function() {
                    a4.apply(e3, s2);
                  });
                }).bind(e3, o), e3[i].options = r3;
              }
            };
          },
          3961: (e2) => {
            function t2(e3, t3) {
              "boolean" == typeof t3 && (t3 = { forever: t3 }), this._originalTimeouts = JSON.parse(JSON.stringify(e3)), this._timeouts = e3, this._options = t3 || {}, this._maxRetryTime = t3 && t3.maxRetryTime || 1 / 0, this._fn = null, this._errors = [], this._attempts = 1, this._operationTimeout = null, this._operationTimeoutCb = null, this._timeout = null, this._operationStart = null, this._options.forever && (this._cachedTimeouts = this._timeouts.slice(0));
            }
            e2.exports = t2, t2.prototype.reset = function() {
              this._attempts = 1, this._timeouts = this._originalTimeouts;
            }, t2.prototype.stop = function() {
              this._timeout && clearTimeout(this._timeout), this._timeouts = [], this._cachedTimeouts = null;
            }, t2.prototype.retry = function(e3) {
              if (this._timeout && clearTimeout(this._timeout), !e3) return false;
              var t3 = (/* @__PURE__ */ new Date()).getTime();
              if (e3 && t3 - this._operationStart >= this._maxRetryTime)
                return this._errors.unshift(
                  new Error("RetryOperation timeout occurred")
                ), false;
              this._errors.push(e3);
              var r2 = this._timeouts.shift();
              if (void 0 === r2) {
                if (!this._cachedTimeouts) return false;
                this._errors.splice(
                  this._errors.length - 1,
                  this._errors.length
                ), this._timeouts = this._cachedTimeouts.slice(0), r2 = this._timeouts.shift();
              }
              var a2 = this, n = setTimeout(function() {
                a2._attempts++, a2._operationTimeoutCb && (a2._timeout = setTimeout(function() {
                  a2._operationTimeoutCb(a2._attempts);
                }, a2._operationTimeout), a2._options.unref && a2._timeout.unref()), a2._fn(a2._attempts);
              }, r2);
              return this._options.unref && n.unref(), true;
            }, t2.prototype.attempt = function(e3, t3) {
              this._fn = e3, t3 && (t3.timeout && (this._operationTimeout = t3.timeout), t3.cb && (this._operationTimeoutCb = t3.cb));
              var r2 = this;
              this._operationTimeoutCb && (this._timeout = setTimeout(function() {
                r2._operationTimeoutCb();
              }, r2._operationTimeout)), this._operationStart = (/* @__PURE__ */ new Date()).getTime(), this._fn(this._attempts);
            }, t2.prototype.try = function(e3) {
              console.log("Using RetryOperation.try() is deprecated"), this.attempt(e3);
            }, t2.prototype.start = function(e3) {
              console.log("Using RetryOperation.start() is deprecated"), this.attempt(e3);
            }, t2.prototype.start = t2.prototype.try, t2.prototype.errors = function() {
              return this._errors;
            }, t2.prototype.attempts = function() {
              return this._attempts;
            }, t2.prototype.mainError = function() {
              if (0 === this._errors.length) return null;
              for (var e3 = {}, t3 = null, r2 = 0, a2 = 0; a2 < this._errors.length; a2++) {
                var n = this._errors[a2], s = n.message, i = (e3[s] || 0) + 1;
                e3[s] = i, i >= r2 && (t3 = n, r2 = i);
              }
              return t3;
            };
          },
          5602: (e2) => {
            var t2 = e2.exports = {
              v: [{ name: "version", reg: /^(\d*)$/ }],
              o: [
                {
                  name: "origin",
                  reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
                  names: [
                    "username",
                    "sessionId",
                    "sessionVersion",
                    "netType",
                    "ipVer",
                    "address"
                  ],
                  format: "%s %s %d %s IP%d %s"
                }
              ],
              s: [{ name: "name" }],
              i: [{ name: "description" }],
              u: [{ name: "uri" }],
              e: [{ name: "email" }],
              p: [{ name: "phone" }],
              z: [{ name: "timezones" }],
              r: [{ name: "repeats" }],
              t: [
                {
                  name: "timing",
                  reg: /^(\d*) (\d*)/,
                  names: ["start", "stop"],
                  format: "%d %d"
                }
              ],
              c: [
                {
                  name: "connection",
                  reg: /^IN IP(\d) (\S*)/,
                  names: ["version", "ip"],
                  format: "IN IP%d %s"
                }
              ],
              b: [
                {
                  push: "bandwidth",
                  reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
                  names: ["type", "limit"],
                  format: "%s:%s"
                }
              ],
              m: [
                {
                  reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
                  names: ["type", "port", "protocol", "payloads"],
                  format: "%s %d %s %s"
                }
              ],
              a: [
                {
                  push: "rtp",
                  reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
                  names: ["payload", "codec", "rate", "encoding"],
                  format: function(e3) {
                    return e3.encoding ? "rtpmap:%d %s/%s/%s" : e3.rate ? "rtpmap:%d %s/%s" : "rtpmap:%d %s";
                  }
                },
                {
                  push: "fmtp",
                  reg: /^fmtp:(\d*) ([\S| ]*)/,
                  names: ["payload", "config"],
                  format: "fmtp:%d %s"
                },
                { name: "control", reg: /^control:(.*)/, format: "control:%s" },
                {
                  name: "rtcp",
                  reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
                  names: ["port", "netType", "ipVer", "address"],
                  format: function(e3) {
                    return null != e3.address ? "rtcp:%d %s IP%d %s" : "rtcp:%d";
                  }
                },
                {
                  push: "rtcpFbTrrInt",
                  reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
                  names: ["payload", "value"],
                  format: "rtcp-fb:%s trr-int %d"
                },
                {
                  push: "rtcpFb",
                  reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
                  names: ["payload", "type", "subtype"],
                  format: function(e3) {
                    return null != e3.subtype ? "rtcp-fb:%s %s %s" : "rtcp-fb:%s %s";
                  }
                },
                {
                  push: "ext",
                  reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
                  names: ["value", "direction", "encrypt-uri", "uri", "config"],
                  format: function(e3) {
                    return "extmap:%d" + (e3.direction ? "/%s" : "%v") + (e3["encrypt-uri"] ? " %s" : "%v") + " %s" + (e3.config ? " %s" : "");
                  }
                },
                { name: "extmapAllowMixed", reg: /^(extmap-allow-mixed)/ },
                {
                  push: "crypto",
                  reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
                  names: ["id", "suite", "config", "sessionConfig"],
                  format: function(e3) {
                    return null != e3.sessionConfig ? "crypto:%d %s %s %s" : "crypto:%d %s %s";
                  }
                },
                { name: "setup", reg: /^setup:(\w*)/, format: "setup:%s" },
                {
                  name: "connectionType",
                  reg: /^connection:(new|existing)/,
                  format: "connection:%s"
                },
                { name: "mid", reg: /^mid:([^\s]*)/, format: "mid:%s" },
                { name: "msid", reg: /^msid:(.*)/, format: "msid:%s" },
                {
                  name: "ptime",
                  reg: /^ptime:(\d*(?:\.\d*)*)/,
                  format: "ptime:%d"
                },
                {
                  name: "maxptime",
                  reg: /^maxptime:(\d*(?:\.\d*)*)/,
                  format: "maxptime:%d"
                },
                {
                  name: "direction",
                  reg: /^(sendrecv|recvonly|sendonly|inactive)/
                },
                { name: "icelite", reg: /^(ice-lite)/ },
                {
                  name: "iceUfrag",
                  reg: /^ice-ufrag:(\S*)/,
                  format: "ice-ufrag:%s"
                },
                { name: "icePwd", reg: /^ice-pwd:(\S*)/, format: "ice-pwd:%s" },
                {
                  name: "fingerprint",
                  reg: /^fingerprint:(\S*) (\S*)/,
                  names: ["type", "hash"],
                  format: "fingerprint:%s %s"
                },
                {
                  push: "candidates",
                  reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
                  names: [
                    "foundation",
                    "component",
                    "transport",
                    "priority",
                    "ip",
                    "port",
                    "type",
                    "raddr",
                    "rport",
                    "tcptype",
                    "generation",
                    "network-id",
                    "network-cost"
                  ],
                  format: function(e3) {
                    var t3 = "candidate:%s %d %s %d %s %d typ %s";
                    return t3 += null != e3.raddr ? " raddr %s rport %d" : "%v%v", t3 += null != e3.tcptype ? " tcptype %s" : "%v", null != e3.generation && (t3 += " generation %d"), t3 += null != e3["network-id"] ? " network-id %d" : "%v", t3 += null != e3["network-cost"] ? " network-cost %d" : "%v";
                  }
                },
                { name: "endOfCandidates", reg: /^(end-of-candidates)/ },
                {
                  name: "remoteCandidates",
                  reg: /^remote-candidates:(.*)/,
                  format: "remote-candidates:%s"
                },
                {
                  name: "iceOptions",
                  reg: /^ice-options:(\S*)/,
                  format: "ice-options:%s"
                },
                {
                  push: "ssrcs",
                  reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
                  names: ["id", "attribute", "value"],
                  format: function(e3) {
                    var t3 = "ssrc:%d";
                    return null != e3.attribute && (t3 += " %s", null != e3.value && (t3 += ":%s")), t3;
                  }
                },
                {
                  push: "ssrcGroups",
                  reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
                  names: ["semantics", "ssrcs"],
                  format: "ssrc-group:%s %s"
                },
                {
                  name: "msidSemantic",
                  reg: /^msid-semantic:\s?(\w*) (\S*)/,
                  names: ["semantic", "token"],
                  format: "msid-semantic: %s %s"
                },
                {
                  push: "groups",
                  reg: /^group:(\w*) (.*)/,
                  names: ["type", "mids"],
                  format: "group:%s %s"
                },
                { name: "rtcpMux", reg: /^(rtcp-mux)/ },
                { name: "rtcpRsize", reg: /^(rtcp-rsize)/ },
                {
                  name: "sctpmap",
                  reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
                  names: ["sctpmapNumber", "app", "maxMessageSize"],
                  format: function(e3) {
                    return null != e3.maxMessageSize ? "sctpmap:%s %s %s" : "sctpmap:%s %s";
                  }
                },
                {
                  name: "xGoogleFlag",
                  reg: /^x-google-flag:([^\s]*)/,
                  format: "x-google-flag:%s"
                },
                {
                  push: "rids",
                  reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
                  names: ["id", "direction", "params"],
                  format: function(e3) {
                    return e3.params ? "rid:%s %s %s" : "rid:%s %s";
                  }
                },
                {
                  push: "imageattrs",
                  reg: new RegExp(
                    "^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"
                  ),
                  names: ["pt", "dir1", "attrs1", "dir2", "attrs2"],
                  format: function(e3) {
                    return "imageattr:%s %s %s" + (e3.dir2 ? " %s %s" : "");
                  }
                },
                {
                  name: "simulcast",
                  reg: new RegExp(
                    "^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"
                  ),
                  names: ["dir1", "list1", "dir2", "list2"],
                  format: function(e3) {
                    return "simulcast:%s %s" + (e3.dir2 ? " %s %s" : "");
                  }
                },
                {
                  name: "simulcast_03",
                  reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
                  names: ["value"],
                  format: "simulcast: %s"
                },
                {
                  name: "framerate",
                  reg: /^framerate:(\d+(?:$|\.\d+))/,
                  format: "framerate:%s"
                },
                {
                  name: "sourceFilter",
                  reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
                  names: [
                    "filterMode",
                    "netType",
                    "addressTypes",
                    "destAddress",
                    "srcList"
                  ],
                  format: "source-filter: %s %s %s %s %s"
                },
                { name: "bundleOnly", reg: /^(bundle-only)/ },
                { name: "label", reg: /^label:(.+)/, format: "label:%s" },
                {
                  name: "sctpPort",
                  reg: /^sctp-port:(\d+)$/,
                  format: "sctp-port:%s"
                },
                {
                  name: "maxMessageSize",
                  reg: /^max-message-size:(\d+)$/,
                  format: "max-message-size:%s"
                },
                {
                  push: "tsRefClocks",
                  reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
                  names: ["clksrc", "clksrcExt"],
                  format: function(e3) {
                    return "ts-refclk:%s" + (null != e3.clksrcExt ? "=%s" : "");
                  }
                },
                {
                  name: "mediaClk",
                  reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
                  names: [
                    "id",
                    "mediaClockName",
                    "mediaClockValue",
                    "rateNumerator",
                    "rateDenominator"
                  ],
                  format: function(e3) {
                    var t3 = "mediaclk:";
                    return t3 += null != e3.id ? "id=%s %s" : "%v%s", t3 += null != e3.mediaClockValue ? "=%s" : "", t3 += null != e3.rateNumerator ? " rate=%s" : "", t3 += null != e3.rateDenominator ? "/%s" : "";
                  }
                },
                { name: "keywords", reg: /^keywds:(.+)$/, format: "keywds:%s" },
                { name: "content", reg: /^content:(.+)/, format: "content:%s" },
                {
                  name: "bfcpFloorCtrl",
                  reg: /^floorctrl:(c-only|s-only|c-s)/,
                  format: "floorctrl:%s"
                },
                { name: "bfcpConfId", reg: /^confid:(\d+)/, format: "confid:%s" },
                { name: "bfcpUserId", reg: /^userid:(\d+)/, format: "userid:%s" },
                {
                  name: "bfcpFloorId",
                  reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
                  names: ["id", "mStream"],
                  format: "floorid:%s mstrm:%s"
                },
                { push: "invalid", names: ["value"] }
              ]
            };
            Object.keys(t2).forEach(function(e3) {
              t2[e3].forEach(function(e4) {
                e4.reg || (e4.reg = /(.*)/), e4.format || (e4.format = "%s");
              });
            });
          },
          7363: (e2, t2, r2) => {
            var a2 = r2(5020), n = r2(3804);
            t2.write = n, t2.parse = a2.parse, t2.parseParams = a2.parseParams, t2.parseFmtpConfig = a2.parseFmtpConfig, t2.parsePayloads = a2.parsePayloads, t2.parseRemoteCandidates = a2.parseRemoteCandidates, t2.parseImageAttributes = a2.parseImageAttributes, t2.parseSimulcastStreamList = a2.parseSimulcastStreamList;
          },
          5020: (e2, t2, r2) => {
            var a2 = function(e3) {
              return String(Number(e3)) === e3 ? Number(e3) : e3;
            }, n = function(e3, t3, r3) {
              var n2 = e3.name && e3.names;
              e3.push && !t3[e3.push] ? t3[e3.push] = [] : n2 && !t3[e3.name] && (t3[e3.name] = {});
              var s2 = e3.push ? {} : n2 ? t3[e3.name] : t3;
              !function(e4, t4, r4, n3) {
                if (n3 && !r4) t4[n3] = a2(e4[1]);
                else
                  for (var s3 = 0; s3 < r4.length; s3 += 1)
                    null != e4[s3 + 1] && (t4[r4[s3]] = a2(e4[s3 + 1]));
              }(r3.match(e3.reg), s2, e3.names, e3.name), e3.push && t3[e3.push].push(s2);
            }, s = r2(5602), i = RegExp.prototype.test.bind(/^([a-z])=(.*)/);
            t2.parse = function(e3) {
              var t3 = {}, r3 = [], a3 = t3;
              return e3.split(/(\r\n|\r|\n)/).filter(i).forEach(function(e4) {
                var t4 = e4[0], i2 = e4.slice(2);
                "m" === t4 && (r3.push({ rtp: [], fmtp: [] }), a3 = r3[r3.length - 1]);
                for (var o2 = 0; o2 < (s[t4] || []).length; o2 += 1) {
                  var c = s[t4][o2];
                  if (c.reg.test(i2)) return n(c, a3, i2);
                }
              }), t3.media = r3, t3;
            };
            var o = function(e3, t3) {
              var r3 = t3.split(/=(.+)/, 2);
              return 2 === r3.length ? e3[r3[0]] = a2(r3[1]) : 1 === r3.length && t3.length > 1 && (e3[r3[0]] = void 0), e3;
            };
            t2.parseParams = function(e3) {
              return e3.split(/;\s?/).reduce(o, {});
            }, t2.parseFmtpConfig = t2.parseParams, t2.parsePayloads = function(e3) {
              return e3.toString().split(" ").map(Number);
            }, t2.parseRemoteCandidates = function(e3) {
              for (var t3 = [], r3 = e3.split(" ").map(a2), n2 = 0; n2 < r3.length; n2 += 3)
                t3.push({ component: r3[n2], ip: r3[n2 + 1], port: r3[n2 + 2] });
              return t3;
            }, t2.parseImageAttributes = function(e3) {
              return e3.split(" ").map(function(e4) {
                return e4.substring(1, e4.length - 1).split(",").reduce(o, {});
              });
            }, t2.parseSimulcastStreamList = function(e3) {
              return e3.split(";").map(function(e4) {
                return e4.split(",").map(function(e5) {
                  var t3, r3 = false;
                  return "~" !== e5[0] ? t3 = a2(e5) : (t3 = a2(e5.substring(1, e5.length)), r3 = true), { scid: t3, paused: r3 };
                });
              });
            };
          },
          3804: (e2, t2, r2) => {
            var a2 = r2(5602), n = /%[sdv%]/g, s = function(e3) {
              var t3 = 1, r3 = arguments, a3 = r3.length;
              return e3.replace(n, function(e4) {
                if (t3 >= a3) return e4;
                var n2 = r3[t3];
                switch (t3 += 1, e4) {
                  case "%%":
                    return "%";
                  case "%s":
                    return String(n2);
                  case "%d":
                    return Number(n2);
                  case "%v":
                    return "";
                }
              });
            }, i = function(e3, t3, r3) {
              var a3 = [
                e3 + "=" + (t3.format instanceof Function ? t3.format(t3.push ? r3 : r3[t3.name]) : t3.format)
              ];
              if (t3.names)
                for (var n2 = 0; n2 < t3.names.length; n2 += 1) {
                  var i2 = t3.names[n2];
                  t3.name ? a3.push(r3[t3.name][i2]) : a3.push(r3[t3.names[n2]]);
                }
              else a3.push(r3[t3.name]);
              return s.apply(null, a3);
            }, o = [
              "v",
              "o",
              "s",
              "i",
              "u",
              "e",
              "p",
              "c",
              "b",
              "t",
              "r",
              "z",
              "a"
            ], c = ["i", "c", "b", "a"];
            e2.exports = function(e3, t3) {
              t3 = t3 || {}, null == e3.version && (e3.version = 0), null == e3.name && (e3.name = " "), e3.media.forEach(function(e4) {
                null == e4.payloads && (e4.payloads = "");
              });
              var r3 = t3.outerOrder || o, n2 = t3.innerOrder || c, s2 = [];
              return r3.forEach(function(t4) {
                a2[t4].forEach(function(r4) {
                  r4.name in e3 && null != e3[r4.name] ? s2.push(i(t4, r4, e3)) : r4.push in e3 && null != e3[r4.push] && e3[r4.push].forEach(function(e4) {
                    s2.push(i(t4, r4, e4));
                  });
                });
              }), e3.media.forEach(function(e4) {
                s2.push(i("m", a2.m[0], e4)), n2.forEach(function(t4) {
                  a2[t4].forEach(function(r4) {
                    r4.name in e4 && null != e4[r4.name] ? s2.push(i(t4, r4, e4)) : r4.push in e4 && null != e4[r4.push] && e4[r4.push].forEach(function(e5) {
                      s2.push(i(t4, r4, e5));
                    });
                  });
                });
              }), s2.join("\r\n") + "\r\n";
            };
          },
          7232: function(e2, t2, r2) {
            var a2;
            !function(n, s) {
              "use strict";
              var i = "function", o = "undefined", c = "object", d = "string", l = "major", p = "model", u = "name", h = "type", m = "vendor", f = "version", g = "architecture", _ = "console", v = "mobile", b = "tablet", y = "smarttv", w = "wearable", S = "embedded", R = "Amazon", E = "Apple", k = "ASUS", T = "BlackBerry", C = "Browser", P = "Chrome", O = "Firefox", D = "Google", x = "Huawei", I = "LG", M = "Microsoft", A = "Motorola", L = "Opera", N = "Samsung", j = "Sharp", B = "Sony", F = "Xiaomi", U = "Zebra", W = "Facebook", q = "Chromium OS", H = "Mac OS", V = function(e3) {
                for (var t3 = {}, r3 = 0; r3 < e3.length; r3++)
                  t3[e3[r3].toUpperCase()] = e3[r3];
                return t3;
              }, G = function(e3, t3) {
                return typeof e3 === d && -1 !== z(t3).indexOf(z(e3));
              }, z = function(e3) {
                return e3.toLowerCase();
              }, $ = function(e3, t3) {
                if (typeof e3 === d)
                  return e3 = e3.replace(/^\s\s*/, ""), typeof t3 === o ? e3 : e3.substring(0, 500);
              }, K = function(e3, t3) {
                for (var r3, a3, n2, o2, d2, l2, p2 = 0; p2 < t3.length && !d2; ) {
                  var u2 = t3[p2], h2 = t3[p2 + 1];
                  for (r3 = a3 = 0; r3 < u2.length && !d2 && u2[r3]; )
                    if (d2 = u2[r3++].exec(e3))
                      for (n2 = 0; n2 < h2.length; n2++)
                        l2 = d2[++a3], typeof (o2 = h2[n2]) === c && o2.length > 0 ? 2 === o2.length ? typeof o2[1] == i ? this[o2[0]] = o2[1].call(this, l2) : this[o2[0]] = o2[1] : 3 === o2.length ? typeof o2[1] !== i || o2[1].exec && o2[1].test ? this[o2[0]] = l2 ? l2.replace(o2[1], o2[2]) : s : this[o2[0]] = l2 ? o2[1].call(this, l2, o2[2]) : s : 4 === o2.length && (this[o2[0]] = l2 ? o2[3].call(this, l2.replace(o2[1], o2[2])) : s) : this[o2] = l2 || s;
                  p2 += 2;
                }
              }, J = function(e3, t3) {
                for (var r3 in t3)
                  if (typeof t3[r3] === c && t3[r3].length > 0) {
                    for (var a3 = 0; a3 < t3[r3].length; a3++)
                      if (G(t3[r3][a3], e3)) return "?" === r3 ? s : r3;
                  } else if (G(t3[r3], e3)) return "?" === r3 ? s : r3;
                return e3;
              }, Q = {
                ME: "4.90",
                "NT 3.11": "NT3.51",
                "NT 4.0": "NT4.0",
                2e3: "NT 5.0",
                XP: ["NT 5.1", "NT 5.2"],
                Vista: "NT 6.0",
                7: "NT 6.1",
                8: "NT 6.2",
                8.1: "NT 6.3",
                10: ["NT 6.4", "NT 10.0"],
                RT: "ARM"
              }, Y = {
                browser: [
                  [/\b(?:crmo|crios)\/([\w\.]+)/i],
                  [f, [u, "Chrome"]],
                  [/edg(?:e|ios|a)?\/([\w\.]+)/i],
                  [f, [u, "Edge"]],
                  [
                    /(opera mini)\/([-\w\.]+)/i,
                    /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
                    /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i
                  ],
                  [u, f],
                  [/opios[\/ ]+([\w\.]+)/i],
                  [f, [u, L + " Mini"]],
                  [/\bop(?:rg)?x\/([\w\.]+)/i],
                  [f, [u, L + " GX"]],
                  [/\bopr\/([\w\.]+)/i],
                  [f, [u, L]],
                  [/\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i],
                  [f, [u, "Baidu"]],
                  [
                    /(kindle)\/([\w\.]+)/i,
                    /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
                    /(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i,
                    /(?:ms|\()(ie) ([\w\.]+)/i,
                    /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
                    /(heytap|ovi)browser\/([\d\.]+)/i,
                    /(weibo)__([\d\.]+)/i
                  ],
                  [u, f],
                  [/\bddg\/([\w\.]+)/i],
                  [f, [u, "DuckDuckGo"]],
                  [/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],
                  [f, [u, "UC" + C]],
                  [
                    /microm.+\bqbcore\/([\w\.]+)/i,
                    /\bqbcore\/([\w\.]+).+microm/i,
                    /micromessenger\/([\w\.]+)/i
                  ],
                  [f, [u, "WeChat"]],
                  [/konqueror\/([\w\.]+)/i],
                  [f, [u, "Konqueror"]],
                  [/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],
                  [f, [u, "IE"]],
                  [/ya(?:search)?browser\/([\w\.]+)/i],
                  [f, [u, "Yandex"]],
                  [/slbrowser\/([\w\.]+)/i],
                  [f, [u, "Smart Lenovo " + C]],
                  [/(avast|avg)\/([\w\.]+)/i],
                  [[u, /(.+)/, "$1 Secure " + C], f],
                  [/\bfocus\/([\w\.]+)/i],
                  [f, [u, O + " Focus"]],
                  [/\bopt\/([\w\.]+)/i],
                  [f, [u, L + " Touch"]],
                  [/coc_coc\w+\/([\w\.]+)/i],
                  [f, [u, "Coc Coc"]],
                  [/dolfin\/([\w\.]+)/i],
                  [f, [u, "Dolphin"]],
                  [/coast\/([\w\.]+)/i],
                  [f, [u, L + " Coast"]],
                  [/miuibrowser\/([\w\.]+)/i],
                  [f, [u, "MIUI " + C]],
                  [/fxios\/([-\w\.]+)/i],
                  [f, [u, O]],
                  [/\bqihu|(qi?ho?o?|360)browser/i],
                  [[u, "360 " + C]],
                  [/(oculus|sailfish|huawei|vivo)browser\/([\w\.]+)/i],
                  [[u, /(.+)/, "$1 " + C], f],
                  [/samsungbrowser\/([\w\.]+)/i],
                  [f, [u, N + " Internet"]],
                  [/(comodo_dragon)\/([\w\.]+)/i],
                  [[u, /_/g, " "], f],
                  [/metasr[\/ ]?([\d\.]+)/i],
                  [f, [u, "Sogou Explorer"]],
                  [/(sogou)mo\w+\/([\d\.]+)/i],
                  [[u, "Sogou Mobile"], f],
                  [
                    /(electron)\/([\w\.]+) safari/i,
                    /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
                    /m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i
                  ],
                  [u, f],
                  [/(lbbrowser)/i, /\[(linkedin)app\]/i],
                  [u],
                  [
                    /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i
                  ],
                  [[u, W], f],
                  [
                    /(Klarna)\/([\w\.]+)/i,
                    /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
                    /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
                    /safari (line)\/([\w\.]+)/i,
                    /\b(line)\/([\w\.]+)\/iab/i,
                    /(alipay)client\/([\w\.]+)/i,
                    /(twitter)(?:and| f.+e\/([\w\.]+))/i,
                    /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i
                  ],
                  [u, f],
                  [/\bgsa\/([\w\.]+) .*safari\//i],
                  [f, [u, "GSA"]],
                  [/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i],
                  [f, [u, "TikTok"]],
                  [/headlesschrome(?:\/([\w\.]+)| )/i],
                  [f, [u, P + " Headless"]],
                  [/ wv\).+(chrome)\/([\w\.]+)/i],
                  [[u, P + " WebView"], f],
                  [/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],
                  [f, [u, "Android " + C]],
                  [
                    /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i
                  ],
                  [u, f],
                  [/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],
                  [f, [u, "Mobile Safari"]],
                  [/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],
                  [f, u],
                  [/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],
                  [
                    u,
                    [
                      f,
                      J,
                      {
                        "1.0": "/8",
                        1.2: "/1",
                        1.3: "/3",
                        "2.0": "/412",
                        "2.0.2": "/416",
                        "2.0.3": "/417",
                        "2.0.4": "/419",
                        "?": "/"
                      }
                    ]
                  ],
                  [/(webkit|khtml)\/([\w\.]+)/i],
                  [u, f],
                  [/(navigator|netscape\d?)\/([-\w\.]+)/i],
                  [[u, "Netscape"], f],
                  [/mobile vr; rv:([\w\.]+)\).+firefox/i],
                  [f, [u, O + " Reality"]],
                  [
                    /ekiohf.+(flow)\/([\w\.]+)/i,
                    /(swiftfox)/i,
                    /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
                    /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                    /(firefox)\/([\w\.]+)/i,
                    /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
                    /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                    /(links) \(([\w\.]+)/i,
                    /panasonic;(viera)/i
                  ],
                  [u, f],
                  [/(cobalt)\/([\w\.]+)/i],
                  [u, [f, /master.|lts./, ""]]
                ],
                cpu: [
                  [/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],
                  [[g, "amd64"]],
                  [/(ia32(?=;))/i],
                  [[g, z]],
                  [/((?:i[346]|x)86)[;\)]/i],
                  [[g, "ia32"]],
                  [/\b(aarch64|arm(v?8e?l?|_?64))\b/i],
                  [[g, "arm64"]],
                  [/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],
                  [[g, "armhf"]],
                  [/windows (ce|mobile); ppc;/i],
                  [[g, "arm"]],
                  [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],
                  [[g, /ower/, "", z]],
                  [/(sun4\w)[;\)]/i],
                  [[g, "sparc"]],
                  [
                    /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
                  ],
                  [[g, z]]
                ],
                device: [
                  [
                    /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
                  ],
                  [p, [m, N], [h, b]],
                  [
                    /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
                    /samsung[- ]([-\w]+)/i,
                    /sec-(sgh\w+)/i
                  ],
                  [p, [m, N], [h, v]],
                  [/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i],
                  [p, [m, E], [h, v]],
                  [
                    /\((ipad);[-\w\),; ]+apple/i,
                    /applecoremedia\/[\w\.]+ \((ipad)/i,
                    /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
                  ],
                  [p, [m, E], [h, b]],
                  [/(macintosh);/i],
                  [p, [m, E]],
                  [/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],
                  [p, [m, j], [h, v]],
                  [
                    /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
                  ],
                  [p, [m, x], [h, b]],
                  [
                    /(?:huawei|honor)([-\w ]+)[;\)]/i,
                    /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
                  ],
                  [p, [m, x], [h, v]],
                  [
                    /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,
                    /\b; (\w+) build\/hm\1/i,
                    /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
                    /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
                    /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,
                    /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i
                  ],
                  [
                    [p, /_/g, " "],
                    [m, F],
                    [h, v]
                  ],
                  [
                    /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,
                    /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i
                  ],
                  [
                    [p, /_/g, " "],
                    [m, F],
                    [h, b]
                  ],
                  [
                    /; (\w+) bui.+ oppo/i,
                    /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
                  ],
                  [p, [m, "OPPO"], [h, v]],
                  [/\b(opd2\d{3}a?) bui/i],
                  [p, [m, "OPPO"], [h, b]],
                  [
                    /vivo (\w+)(?: bui|\))/i,
                    /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
                  ],
                  [p, [m, "Vivo"], [h, v]],
                  [/\b(rmx[1-3]\d{3})(?: bui|;|\))/i],
                  [p, [m, "Realme"], [h, v]],
                  [
                    /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
                    /\bmot(?:orola)?[- ](\w*)/i,
                    /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
                  ],
                  [p, [m, A], [h, v]],
                  [/\b(mz60\d|xoom[2 ]{0,2}) build\//i],
                  [p, [m, A], [h, b]],
                  [
                    /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
                  ],
                  [p, [m, I], [h, b]],
                  [
                    /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
                    /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
                    /\blg-?([\d\w]+) bui/i
                  ],
                  [p, [m, I], [h, v]],
                  [
                    /(ideatab[-\w ]+)/i,
                    /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
                  ],
                  [p, [m, "Lenovo"], [h, b]],
                  [
                    /(?:maemo|nokia).*(n900|lumia \d+)/i,
                    /nokia[-_ ]?([-\w\.]*)/i
                  ],
                  [
                    [p, /_/g, " "],
                    [m, "Nokia"],
                    [h, v]
                  ],
                  [/(pixel c)\b/i],
                  [p, [m, D], [h, b]],
                  [/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],
                  [p, [m, D], [h, v]],
                  [
                    /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
                  ],
                  [p, [m, B], [h, v]],
                  [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i],
                  [
                    [p, "Xperia Tablet"],
                    [m, B],
                    [h, b]
                  ],
                  [
                    / (kb2005|in20[12]5|be20[12][59])\b/i,
                    /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
                  ],
                  [p, [m, "OnePlus"], [h, v]],
                  [
                    /(alexa)webm/i,
                    /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,
                    /(kf[a-z]+)( bui|\)).+silk\//i
                  ],
                  [p, [m, R], [h, b]],
                  [/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],
                  [
                    [p, /(.+)/g, "Fire Phone $1"],
                    [m, R],
                    [h, v]
                  ],
                  [/(playbook);[-\w\),; ]+(rim)/i],
                  [p, m, [h, b]],
                  [/\b((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10; (\w+)/i],
                  [p, [m, T], [h, v]],
                  [
                    /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
                  ],
                  [p, [m, k], [h, b]],
                  [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],
                  [p, [m, k], [h, v]],
                  [/(nexus 9)/i],
                  [p, [m, "HTC"], [h, b]],
                  [
                    /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
                    /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
                    /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i
                  ],
                  [m, [p, /_/g, " "], [h, v]],
                  [/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],
                  [p, [m, "Acer"], [h, b]],
                  [/droid.+; (m[1-5] note) bui/i, /\bmz-([-\w]{2,})/i],
                  [p, [m, "Meizu"], [h, v]],
                  [/; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i],
                  [p, [m, "Ulefone"], [h, v]],
                  [
                    /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,
                    /(hp) ([\w ]+\w)/i,
                    /(asus)-?(\w+)/i,
                    /(microsoft); (lumia[\w ]+)/i,
                    /(lenovo)[-_ ]?([-\w]+)/i,
                    /(jolla)/i,
                    /(oppo) ?([\w ]+) bui/i
                  ],
                  [m, p, [h, v]],
                  [
                    /(kobo)\s(ereader|touch)/i,
                    /(archos) (gamepad2?)/i,
                    /(hp).+(touchpad(?!.+tablet)|tablet)/i,
                    /(kindle)\/([\w\.]+)/i,
                    /(nook)[\w ]+build\/(\w+)/i,
                    /(dell) (strea[kpr\d ]*[\dko])/i,
                    /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
                    /(trinity)[- ]*(t\d{3}) bui/i,
                    /(gigaset)[- ]+(q\w{1,9}) bui/i,
                    /(vodafone) ([\w ]+)(?:\)| bui)/i
                  ],
                  [m, p, [h, b]],
                  [/(surface duo)/i],
                  [p, [m, M], [h, b]],
                  [/droid [\d\.]+; (fp\du?)(?: b|\))/i],
                  [p, [m, "Fairphone"], [h, v]],
                  [/(u304aa)/i],
                  [p, [m, "AT&T"], [h, v]],
                  [/\bsie-(\w*)/i],
                  [p, [m, "Siemens"], [h, v]],
                  [/\b(rct\w+) b/i],
                  [p, [m, "RCA"], [h, b]],
                  [/\b(venue[\d ]{2,7}) b/i],
                  [p, [m, "Dell"], [h, b]],
                  [/\b(q(?:mv|ta)\w+) b/i],
                  [p, [m, "Verizon"], [h, b]],
                  [/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],
                  [p, [m, "Barnes & Noble"], [h, b]],
                  [/\b(tm\d{3}\w+) b/i],
                  [p, [m, "NuVision"], [h, b]],
                  [/\b(k88) b/i],
                  [p, [m, "ZTE"], [h, b]],
                  [/\b(nx\d{3}j) b/i],
                  [p, [m, "ZTE"], [h, v]],
                  [/\b(gen\d{3}) b.+49h/i],
                  [p, [m, "Swiss"], [h, v]],
                  [/\b(zur\d{3}) b/i],
                  [p, [m, "Swiss"], [h, b]],
                  [/\b((zeki)?tb.*\b) b/i],
                  [p, [m, "Zeki"], [h, b]],
                  [/\b([yr]\d{2}) b/i, /\b(dragon[- ]+touch |dt)(\w{5}) b/i],
                  [[m, "Dragon Touch"], p, [h, b]],
                  [/\b(ns-?\w{0,9}) b/i],
                  [p, [m, "Insignia"], [h, b]],
                  [/\b((nxa|next)-?\w{0,9}) b/i],
                  [p, [m, "NextBook"], [h, b]],
                  [/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],
                  [[m, "Voice"], p, [h, v]],
                  [/\b(lvtel\-)?(v1[12]) b/i],
                  [[m, "LvTel"], p, [h, v]],
                  [/\b(ph-1) /i],
                  [p, [m, "Essential"], [h, v]],
                  [/\b(v(100md|700na|7011|917g).*\b) b/i],
                  [p, [m, "Envizen"], [h, b]],
                  [/\b(trio[-\w\. ]+) b/i],
                  [p, [m, "MachSpeed"], [h, b]],
                  [/\btu_(1491) b/i],
                  [p, [m, "Rotor"], [h, b]],
                  [/(shield[\w ]+) b/i],
                  [p, [m, "Nvidia"], [h, b]],
                  [/(sprint) (\w+)/i],
                  [m, p, [h, v]],
                  [/(kin\.[onetw]{3})/i],
                  [
                    [p, /\./g, " "],
                    [m, M],
                    [h, v]
                  ],
                  [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],
                  [p, [m, U], [h, b]],
                  [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],
                  [p, [m, U], [h, v]],
                  [/smart-tv.+(samsung)/i],
                  [m, [h, y]],
                  [/hbbtv.+maple;(\d+)/i],
                  [
                    [p, /^/, "SmartTV"],
                    [m, N],
                    [h, y]
                  ],
                  [
                    /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i
                  ],
                  [
                    [m, I],
                    [h, y]
                  ],
                  [/(apple) ?tv/i],
                  [m, [p, E + " TV"], [h, y]],
                  [/crkey/i],
                  [
                    [p, P + "cast"],
                    [m, D],
                    [h, y]
                  ],
                  [/droid.+aft(\w+)( bui|\))/i],
                  [p, [m, R], [h, y]],
                  [/\(dtv[\);].+(aquos)/i, /(aquos-tv[\w ]+)\)/i],
                  [p, [m, j], [h, y]],
                  [/(bravia[\w ]+)( bui|\))/i],
                  [p, [m, B], [h, y]],
                  [/(mitv-\w{5}) bui/i],
                  [p, [m, F], [h, y]],
                  [/Hbbtv.*(technisat) (.*);/i],
                  [m, p, [h, y]],
                  [
                    /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
                    /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i
                  ],
                  [
                    [m, $],
                    [p, $],
                    [h, y]
                  ],
                  [/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],
                  [[h, y]],
                  [/(ouya)/i, /(nintendo) ([wids3utch]+)/i],
                  [m, p, [h, _]],
                  [/droid.+; (shield) bui/i],
                  [p, [m, "Nvidia"], [h, _]],
                  [/(playstation [345portablevi]+)/i],
                  [p, [m, B], [h, _]],
                  [/\b(xbox(?: one)?(?!; xbox))[\); ]/i],
                  [p, [m, M], [h, _]],
                  [/((pebble))app/i],
                  [m, p, [h, w]],
                  [/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i],
                  [p, [m, E], [h, w]],
                  [/droid.+; (glass) \d/i],
                  [p, [m, D], [h, w]],
                  [/droid.+; (wt63?0{2,3})\)/i],
                  [p, [m, U], [h, w]],
                  [/(quest( \d| pro)?)/i],
                  [p, [m, W], [h, w]],
                  [/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],
                  [m, [h, S]],
                  [/(aeobc)\b/i],
                  [p, [m, R], [h, S]],
                  [
                    /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i
                  ],
                  [p, [h, v]],
                  [
                    /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i
                  ],
                  [p, [h, b]],
                  [/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],
                  [[h, b]],
                  [
                    /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i
                  ],
                  [[h, v]],
                  [/(android[-\w\. ]{0,9});.+buil/i],
                  [p, [m, "Generic"]]
                ],
                engine: [
                  [/windows.+ edge\/([\w\.]+)/i],
                  [f, [u, "EdgeHTML"]],
                  [/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],
                  [f, [u, "Blink"]],
                  [
                    /(presto)\/([\w\.]+)/i,
                    /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
                    /ekioh(flow)\/([\w\.]+)/i,
                    /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
                    /(icab)[\/ ]([23]\.[\d\.]+)/i,
                    /\b(libweb)/i
                  ],
                  [u, f],
                  [/rv\:([\w\.]{1,9})\b.+(gecko)/i],
                  [f, u]
                ],
                os: [
                  [/microsoft (windows) (vista|xp)/i],
                  [u, f],
                  [/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i],
                  [u, [f, J, Q]],
                  [
                    /windows nt 6\.2; (arm)/i,
                    /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
                    /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i
                  ],
                  [
                    [f, J, Q],
                    [u, "Windows"]
                  ],
                  [
                    /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
                    /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
                    /cfnetwork\/.+darwin/i
                  ],
                  [
                    [f, /_/g, "."],
                    [u, "iOS"]
                  ],
                  [
                    /(mac os x) ?([\w\. ]*)/i,
                    /(macintosh|mac_powerpc\b)(?!.+haiku)/i
                  ],
                  [
                    [u, H],
                    [f, /_/g, "."]
                  ],
                  [/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],
                  [f, u],
                  [
                    /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
                    /(blackberry)\w*\/([\w\.]*)/i,
                    /(tizen|kaios)[\/ ]([\w\.]+)/i,
                    /\((series40);/i
                  ],
                  [u, f],
                  [/\(bb(10);/i],
                  [f, [u, T]],
                  [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],
                  [f, [u, "Symbian"]],
                  [
                    /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i
                  ],
                  [f, [u, O + " OS"]],
                  [/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],
                  [f, [u, "webOS"]],
                  [/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i],
                  [f, [u, "watchOS"]],
                  [/crkey\/([\d\.]+)/i],
                  [f, [u, P + "cast"]],
                  [/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i],
                  [[u, q], f],
                  [
                    /panasonic;(viera)/i,
                    /(netrange)mmh/i,
                    /(nettv)\/(\d+\.[\w\.]+)/i,
                    /(nintendo|playstation) ([wids345portablevuch]+)/i,
                    /(xbox); +xbox ([^\);]+)/i,
                    /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
                    /(mint)[\/\(\) ]?(\w*)/i,
                    /(mageia|vectorlinux)[; ]/i,
                    /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                    /(hurd|linux) ?([\w\.]*)/i,
                    /(gnu) ?([\w\.]*)/i,
                    /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
                    /(haiku) (\w+)/i
                  ],
                  [u, f],
                  [/(sunos) ?([\w\.\d]*)/i],
                  [[u, "Solaris"], f],
                  [
                    /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
                    /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
                    /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
                    /(unix) ?([\w\.]*)/i
                  ],
                  [u, f]
                ]
              }, X = function(e3, t3) {
                if (typeof e3 === c && (t3 = e3, e3 = s), !(this instanceof X))
                  return new X(e3, t3).getResult();
                var r3 = typeof n !== o && n.navigator ? n.navigator : s, a3 = e3 || (r3 && r3.userAgent ? r3.userAgent : ""), _2 = r3 && r3.userAgentData ? r3.userAgentData : s, y2 = t3 ? function(e4, t4) {
                  var r4 = {};
                  for (var a4 in e4)
                    t4[a4] && t4[a4].length % 2 == 0 ? r4[a4] = t4[a4].concat(e4[a4]) : r4[a4] = e4[a4];
                  return r4;
                }(Y, t3) : Y, w2 = r3 && r3.userAgent == a3;
                return this.getBrowser = function() {
                  var e4, t4 = {};
                  return t4[u] = s, t4[f] = s, K.call(t4, a3, y2.browser), t4[l] = typeof (e4 = t4[f]) === d ? e4.replace(/[^\d\.]/g, "").split(".")[0] : s, w2 && r3 && r3.brave && typeof r3.brave.isBrave == i && (t4[u] = "Brave"), t4;
                }, this.getCPU = function() {
                  var e4 = {};
                  return e4[g] = s, K.call(e4, a3, y2.cpu), e4;
                }, this.getDevice = function() {
                  var e4 = {};
                  return e4[m] = s, e4[p] = s, e4[h] = s, K.call(e4, a3, y2.device), w2 && !e4[h] && _2 && _2.mobile && (e4[h] = v), w2 && "Macintosh" == e4[p] && r3 && typeof r3.standalone !== o && r3.maxTouchPoints && r3.maxTouchPoints > 2 && (e4[p] = "iPad", e4[h] = b), e4;
                }, this.getEngine = function() {
                  var e4 = {};
                  return e4[u] = s, e4[f] = s, K.call(e4, a3, y2.engine), e4;
                }, this.getOS = function() {
                  var e4 = {};
                  return e4[u] = s, e4[f] = s, K.call(e4, a3, y2.os), w2 && !e4[u] && _2 && _2.platform && "Unknown" != _2.platform && (e4[u] = _2.platform.replace(/chrome os/i, q).replace(/macos/i, H)), e4;
                }, this.getResult = function() {
                  return {
                    ua: this.getUA(),
                    browser: this.getBrowser(),
                    engine: this.getEngine(),
                    os: this.getOS(),
                    device: this.getDevice(),
                    cpu: this.getCPU()
                  };
                }, this.getUA = function() {
                  return a3;
                }, this.setUA = function(e4) {
                  return a3 = typeof e4 === d && e4.length > 500 ? $(e4, 500) : e4, this;
                }, this.setUA(a3), this;
              };
              X.VERSION = "1.0.38", X.BROWSER = V([u, f, l]), X.CPU = V([g]), X.DEVICE = V([p, m, h, _, v, y, b, w, S]), X.ENGINE = X.OS = V([u, f]), typeof t2 !== o ? (e2.exports && (t2 = e2.exports = X), t2.UAParser = X) : r2.amdO ? (a2 = (function() {
                return X;
              }).call(t2, r2, t2, e2)) === s || (e2.exports = a2) : typeof n !== o && (n.UAParser = X);
              var Z = typeof n !== o && (n.jQuery || n.Zepto);
              if (Z && !Z.ua) {
                var ee = new X();
                Z.ua = ee.getResult(), Z.ua.get = function() {
                  return ee.getUA();
                }, Z.ua.set = function(e3) {
                  ee.setUA(e3);
                  var t3 = ee.getResult();
                  for (var r3 in t3) Z.ua[r3] = t3[r3];
                };
              }
            }("object" == typeof window ? window : this);
          },
          952: (e2, t2, r2) => {
            var a2;
            if ("object" == typeof globalThis) a2 = globalThis;
            else
              try {
                a2 = r2(4903);
              } catch (e3) {
              } finally {
                if (a2 || "undefined" == typeof window || (a2 = window), !a2)
                  throw new Error("Could not determine global this");
              }
            var n = a2.WebSocket || a2.MozWebSocket, s = r2(9840);
            function i(e3, t3) {
              return t3 ? new n(e3, t3) : new n(e3);
            }
            n && ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function(e3) {
              Object.defineProperty(i, e3, {
                get: function() {
                  return n[e3];
                }
              });
            }), e2.exports = { w3cwebsocket: n ? i : null, version: s };
          },
          9840: (e2, t2, r2) => {
            e2.exports = r2(9003).version;
          },
          8624: (e2, t2, r2) => {
            "use strict";
            r2.r(t2), r2.d(t2, {
              DOMException: () => w,
              Headers: () => l,
              Request: () => _,
              Response: () => b,
              fetch: () => S
            });
            var a2 = "undefined" != typeof globalThis && globalThis || "undefined" != typeof self && self || void 0 !== r2.g && r2.g || {}, n = {
              searchParams: "URLSearchParams" in a2,
              iterable: "Symbol" in a2 && "iterator" in Symbol,
              blob: "FileReader" in a2 && "Blob" in a2 && function() {
                try {
                  return new Blob(), true;
                } catch (e3) {
                  return false;
                }
              }(),
              formData: "FormData" in a2,
              arrayBuffer: "ArrayBuffer" in a2
            };
            if (n.arrayBuffer)
              var s = [
                "[object Int8Array]",
                "[object Uint8Array]",
                "[object Uint8ClampedArray]",
                "[object Int16Array]",
                "[object Uint16Array]",
                "[object Int32Array]",
                "[object Uint32Array]",
                "[object Float32Array]",
                "[object Float64Array]"
              ], i = ArrayBuffer.isView || function(e3) {
                return e3 && s.indexOf(Object.prototype.toString.call(e3)) > -1;
              };
            function o(e3) {
              if ("string" != typeof e3 && (e3 = String(e3)), /[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(e3) || "" === e3)
                throw new TypeError(
                  'Invalid character in header field name: "' + e3 + '"'
                );
              return e3.toLowerCase();
            }
            function c(e3) {
              return "string" != typeof e3 && (e3 = String(e3)), e3;
            }
            function d(e3) {
              var t3 = {
                next: function() {
                  var t4 = e3.shift();
                  return { done: void 0 === t4, value: t4 };
                }
              };
              return n.iterable && (t3[Symbol.iterator] = function() {
                return t3;
              }), t3;
            }
            function l(e3) {
              this.map = {}, e3 instanceof l ? e3.forEach(function(e4, t3) {
                this.append(t3, e4);
              }, this) : Array.isArray(e3) ? e3.forEach(function(e4) {
                if (2 != e4.length)
                  throw new TypeError(
                    "Headers constructor: expected name/value pair to be length 2, found" + e4.length
                  );
                this.append(e4[0], e4[1]);
              }, this) : e3 && Object.getOwnPropertyNames(e3).forEach(function(t3) {
                this.append(t3, e3[t3]);
              }, this);
            }
            function p(e3) {
              if (!e3._noBody)
                return e3.bodyUsed ? Promise.reject(new TypeError("Already read")) : void (e3.bodyUsed = true);
            }
            function u(e3) {
              return new Promise(function(t3, r3) {
                e3.onload = function() {
                  t3(e3.result);
                }, e3.onerror = function() {
                  r3(e3.error);
                };
              });
            }
            function h(e3) {
              var t3 = new FileReader(), r3 = u(t3);
              return t3.readAsArrayBuffer(e3), r3;
            }
            function m(e3) {
              if (e3.slice) return e3.slice(0);
              var t3 = new Uint8Array(e3.byteLength);
              return t3.set(new Uint8Array(e3)), t3.buffer;
            }
            function f() {
              return this.bodyUsed = false, this._initBody = function(e3) {
                var t3;
                this.bodyUsed = this.bodyUsed, this._bodyInit = e3, e3 ? "string" == typeof e3 ? this._bodyText = e3 : n.blob && Blob.prototype.isPrototypeOf(e3) ? this._bodyBlob = e3 : n.formData && FormData.prototype.isPrototypeOf(e3) ? this._bodyFormData = e3 : n.searchParams && URLSearchParams.prototype.isPrototypeOf(e3) ? this._bodyText = e3.toString() : n.arrayBuffer && n.blob && (t3 = e3) && DataView.prototype.isPrototypeOf(t3) ? (this._bodyArrayBuffer = m(e3.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer])) : n.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(e3) || i(e3)) ? this._bodyArrayBuffer = m(e3) : this._bodyText = e3 = Object.prototype.toString.call(e3) : (this._noBody = true, this._bodyText = ""), this.headers.get("content-type") || ("string" == typeof e3 ? this.headers.set(
                  "content-type",
                  "text/plain;charset=UTF-8"
                ) : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : n.searchParams && URLSearchParams.prototype.isPrototypeOf(e3) && this.headers.set(
                  "content-type",
                  "application/x-www-form-urlencoded;charset=UTF-8"
                ));
              }, n.blob && (this.blob = function() {
                var e3 = p(this);
                if (e3) return e3;
                if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                if (this._bodyArrayBuffer)
                  return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                if (this._bodyFormData)
                  throw new Error("could not read FormData body as blob");
                return Promise.resolve(new Blob([this._bodyText]));
              }), this.arrayBuffer = function() {
                if (this._bodyArrayBuffer) {
                  var e3 = p(this);
                  return e3 || (ArrayBuffer.isView(this._bodyArrayBuffer) ? Promise.resolve(
                    this._bodyArrayBuffer.buffer.slice(
                      this._bodyArrayBuffer.byteOffset,
                      this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                    )
                  ) : Promise.resolve(this._bodyArrayBuffer));
                }
                if (n.blob) return this.blob().then(h);
                throw new Error("could not read as ArrayBuffer");
              }, this.text = function() {
                var e3, t3, r3, a3, n2, s2 = p(this);
                if (s2) return s2;
                if (this._bodyBlob)
                  return e3 = this._bodyBlob, t3 = new FileReader(), r3 = u(t3), a3 = /charset=([A-Za-z0-9_-]+)/.exec(e3.type), n2 = a3 ? a3[1] : "utf-8", t3.readAsText(e3, n2), r3;
                if (this._bodyArrayBuffer)
                  return Promise.resolve(
                    function(e4) {
                      for (var t4 = new Uint8Array(e4), r4 = new Array(t4.length), a4 = 0; a4 < t4.length; a4++)
                        r4[a4] = String.fromCharCode(t4[a4]);
                      return r4.join("");
                    }(this._bodyArrayBuffer)
                  );
                if (this._bodyFormData)
                  throw new Error("could not read FormData body as text");
                return Promise.resolve(this._bodyText);
              }, n.formData && (this.formData = function() {
                return this.text().then(v);
              }), this.json = function() {
                return this.text().then(JSON.parse);
              }, this;
            }
            l.prototype.append = function(e3, t3) {
              e3 = o(e3), t3 = c(t3);
              var r3 = this.map[e3];
              this.map[e3] = r3 ? r3 + ", " + t3 : t3;
            }, l.prototype.delete = function(e3) {
              delete this.map[o(e3)];
            }, l.prototype.get = function(e3) {
              return e3 = o(e3), this.has(e3) ? this.map[e3] : null;
            }, l.prototype.has = function(e3) {
              return this.map.hasOwnProperty(o(e3));
            }, l.prototype.set = function(e3, t3) {
              this.map[o(e3)] = c(t3);
            }, l.prototype.forEach = function(e3, t3) {
              for (var r3 in this.map)
                this.map.hasOwnProperty(r3) && e3.call(t3, this.map[r3], r3, this);
            }, l.prototype.keys = function() {
              var e3 = [];
              return this.forEach(function(t3, r3) {
                e3.push(r3);
              }), d(e3);
            }, l.prototype.values = function() {
              var e3 = [];
              return this.forEach(function(t3) {
                e3.push(t3);
              }), d(e3);
            }, l.prototype.entries = function() {
              var e3 = [];
              return this.forEach(function(t3, r3) {
                e3.push([r3, t3]);
              }), d(e3);
            }, n.iterable && (l.prototype[Symbol.iterator] = l.prototype.entries);
            var g = [
              "CONNECT",
              "DELETE",
              "GET",
              "HEAD",
              "OPTIONS",
              "PATCH",
              "POST",
              "PUT",
              "TRACE"
            ];
            function _(e3, t3) {
              if (!(this instanceof _))
                throw new TypeError(
                  'Please use the "new" operator, this DOM object constructor cannot be called as a function.'
                );
              var r3, n2, s2 = (t3 = t3 || {}).body;
              if (e3 instanceof _) {
                if (e3.bodyUsed) throw new TypeError("Already read");
                this.url = e3.url, this.credentials = e3.credentials, t3.headers || (this.headers = new l(e3.headers)), this.method = e3.method, this.mode = e3.mode, this.signal = e3.signal, s2 || null == e3._bodyInit || (s2 = e3._bodyInit, e3.bodyUsed = true);
              } else this.url = String(e3);
              if (this.credentials = t3.credentials || this.credentials || "same-origin", !t3.headers && this.headers || (this.headers = new l(t3.headers)), this.method = (r3 = t3.method || this.method || "GET", n2 = r3.toUpperCase(), g.indexOf(n2) > -1 ? n2 : r3), this.mode = t3.mode || this.mode || null, this.signal = t3.signal || this.signal || function() {
                if ("AbortController" in a2)
                  return new AbortController().signal;
              }(), this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && s2)
                throw new TypeError("Body not allowed for GET or HEAD requests");
              if (this._initBody(s2), !("GET" !== this.method && "HEAD" !== this.method || "no-store" !== t3.cache && "no-cache" !== t3.cache)) {
                var i2 = /([?&])_=[^&]*/;
                if (i2.test(this.url))
                  this.url = this.url.replace(i2, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
                else {
                  this.url += (/\?/.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
                }
              }
            }
            function v(e3) {
              var t3 = new FormData();
              return e3.trim().split("&").forEach(function(e4) {
                if (e4) {
                  var r3 = e4.split("="), a3 = r3.shift().replace(/\+/g, " "), n2 = r3.join("=").replace(/\+/g, " ");
                  t3.append(decodeURIComponent(a3), decodeURIComponent(n2));
                }
              }), t3;
            }
            function b(e3, t3) {
              if (!(this instanceof b))
                throw new TypeError(
                  'Please use the "new" operator, this DOM object constructor cannot be called as a function.'
                );
              if (t3 || (t3 = {}), this.type = "default", this.status = void 0 === t3.status ? 200 : t3.status, this.status < 200 || this.status > 599)
                throw new RangeError(
                  "Failed to construct 'Response': The status provided (0) is outside the range [200, 599]."
                );
              this.ok = this.status >= 200 && this.status < 300, this.statusText = void 0 === t3.statusText ? "" : "" + t3.statusText, this.headers = new l(t3.headers), this.url = t3.url || "", this._initBody(e3);
            }
            _.prototype.clone = function() {
              return new _(this, { body: this._bodyInit });
            }, f.call(_.prototype), f.call(b.prototype), b.prototype.clone = function() {
              return new b(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new l(this.headers),
                url: this.url
              });
            }, b.error = function() {
              var e3 = new b(null, { status: 200, statusText: "" });
              return e3.ok = false, e3.status = 0, e3.type = "error", e3;
            };
            var y = [301, 302, 303, 307, 308];
            b.redirect = function(e3, t3) {
              if (-1 === y.indexOf(t3))
                throw new RangeError("Invalid status code");
              return new b(null, { status: t3, headers: { location: e3 } });
            };
            var w = a2.DOMException;
            try {
              new w();
            } catch (e3) {
              (w = function(e4, t3) {
                this.message = e4, this.name = t3;
                var r3 = Error(e4);
                this.stack = r3.stack;
              }).prototype = Object.create(Error.prototype), w.prototype.constructor = w;
            }
            function S(e3, t3) {
              return new Promise(function(r3, s2) {
                var i2 = new _(e3, t3);
                if (i2.signal && i2.signal.aborted)
                  return s2(new w("Aborted", "AbortError"));
                var d2 = new XMLHttpRequest();
                function p2() {
                  d2.abort();
                }
                if (d2.onload = function() {
                  var e4, t4, a3 = {
                    statusText: d2.statusText,
                    headers: (e4 = d2.getAllResponseHeaders() || "", t4 = new l(), e4.replace(/\r?\n[\t ]+/g, " ").split("\r").map(function(e5) {
                      return 0 === e5.indexOf("\n") ? e5.substr(1, e5.length) : e5;
                    }).forEach(function(e5) {
                      var r4 = e5.split(":"), a4 = r4.shift().trim();
                      if (a4) {
                        var n3 = r4.join(":").trim();
                        try {
                          t4.append(a4, n3);
                        } catch (e6) {
                          console.warn("Response " + e6.message);
                        }
                      }
                    }), t4)
                  };
                  0 === i2.url.indexOf("file://") && (d2.status < 200 || d2.status > 599) ? a3.status = 200 : a3.status = d2.status, a3.url = "responseURL" in d2 ? d2.responseURL : a3.headers.get("X-Request-URL");
                  var n2 = "response" in d2 ? d2.response : d2.responseText;
                  setTimeout(function() {
                    r3(new b(n2, a3));
                  }, 0);
                }, d2.onerror = function() {
                  setTimeout(function() {
                    s2(new TypeError("Network request failed"));
                  }, 0);
                }, d2.ontimeout = function() {
                  setTimeout(function() {
                    s2(new TypeError("Network request timed out"));
                  }, 0);
                }, d2.onabort = function() {
                  setTimeout(function() {
                    s2(new w("Aborted", "AbortError"));
                  }, 0);
                }, d2.open(
                  i2.method,
                  function(e4) {
                    try {
                      return "" === e4 && a2.location.href ? a2.location.href : e4;
                    } catch (t4) {
                      return e4;
                    }
                  }(i2.url),
                  true
                ), "include" === i2.credentials ? d2.withCredentials = true : "omit" === i2.credentials && (d2.withCredentials = false), "responseType" in d2 && (n.blob ? d2.responseType = "blob" : n.arrayBuffer && (d2.responseType = "arraybuffer")), t3 && "object" == typeof t3.headers && !(t3.headers instanceof l || a2.Headers && t3.headers instanceof a2.Headers)) {
                  var u2 = [];
                  Object.getOwnPropertyNames(t3.headers).forEach(function(e4) {
                    u2.push(o(e4)), d2.setRequestHeader(e4, c(t3.headers[e4]));
                  }), i2.headers.forEach(function(e4, t4) {
                    -1 === u2.indexOf(t4) && d2.setRequestHeader(t4, e4);
                  });
                } else
                  i2.headers.forEach(function(e4, t4) {
                    d2.setRequestHeader(t4, e4);
                  });
                i2.signal && (i2.signal.addEventListener("abort", p2), d2.onreadystatechange = function() {
                  4 === d2.readyState && i2.signal.removeEventListener("abort", p2);
                }), d2.send(void 0 === i2._bodyInit ? null : i2._bodyInit);
              });
            }
            S.polyfill = true, a2.fetch || (a2.fetch = S, a2.Headers = l, a2.Request = _, a2.Response = b);
          },
          477: () => {
          },
          4633: (e2, t2, r2) => {
            var a2 = r2(3738).default;
            function n() {
              "use strict";
              e2.exports = n = function() {
                return r3;
              }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
              var t3, r3 = {}, s = Object.prototype, i = s.hasOwnProperty, o = Object.defineProperty || function(e3, t4, r4) {
                e3[t4] = r4.value;
              }, c = "function" == typeof Symbol ? Symbol : {}, d = c.iterator || "@@iterator", l = c.asyncIterator || "@@asyncIterator", p = c.toStringTag || "@@toStringTag";
              function u(e3, t4, r4) {
                return Object.defineProperty(e3, t4, {
                  value: r4,
                  enumerable: true,
                  configurable: true,
                  writable: true
                }), e3[t4];
              }
              try {
                u({}, "");
              } catch (t4) {
                u = function(e3, t5, r4) {
                  return e3[t5] = r4;
                };
              }
              function h(e3, t4, r4, a3) {
                var n2 = t4 && t4.prototype instanceof y ? t4 : y, s2 = Object.create(n2.prototype), i2 = new M(a3 || []);
                return o(s2, "_invoke", { value: O(e3, r4, i2) }), s2;
              }
              function m(e3, t4, r4) {
                try {
                  return { type: "normal", arg: e3.call(t4, r4) };
                } catch (e4) {
                  return { type: "throw", arg: e4 };
                }
              }
              r3.wrap = h;
              var f = "suspendedStart", g = "suspendedYield", _ = "executing", v = "completed", b = {};
              function y() {
              }
              function w() {
              }
              function S() {
              }
              var R = {};
              u(R, d, function() {
                return this;
              });
              var E = Object.getPrototypeOf, k = E && E(E(A([])));
              k && k !== s && i.call(k, d) && (R = k);
              var T = S.prototype = y.prototype = Object.create(R);
              function C(e3) {
                ["next", "throw", "return"].forEach(function(t4) {
                  u(e3, t4, function(e4) {
                    return this._invoke(t4, e4);
                  });
                });
              }
              function P(e3, t4) {
                function r4(n3, s2, o2, c2) {
                  var d2 = m(e3[n3], e3, s2);
                  if ("throw" !== d2.type) {
                    var l2 = d2.arg, p2 = l2.value;
                    return p2 && "object" == a2(p2) && i.call(p2, "__await") ? t4.resolve(p2.__await).then(
                      function(e4) {
                        r4("next", e4, o2, c2);
                      },
                      function(e4) {
                        r4("throw", e4, o2, c2);
                      }
                    ) : t4.resolve(p2).then(
                      function(e4) {
                        l2.value = e4, o2(l2);
                      },
                      function(e4) {
                        return r4("throw", e4, o2, c2);
                      }
                    );
                  }
                  c2(d2.arg);
                }
                var n2;
                o(this, "_invoke", {
                  value: function(e4, a3) {
                    function s2() {
                      return new t4(function(t5, n3) {
                        r4(e4, a3, t5, n3);
                      });
                    }
                    return n2 = n2 ? n2.then(s2, s2) : s2();
                  }
                });
              }
              function O(e3, r4, a3) {
                var n2 = f;
                return function(s2, i2) {
                  if (n2 === _) throw Error("Generator is already running");
                  if (n2 === v) {
                    if ("throw" === s2) throw i2;
                    return { value: t3, done: true };
                  }
                  for (a3.method = s2, a3.arg = i2; ; ) {
                    var o2 = a3.delegate;
                    if (o2) {
                      var c2 = D(o2, a3);
                      if (c2) {
                        if (c2 === b) continue;
                        return c2;
                      }
                    }
                    if ("next" === a3.method) a3.sent = a3._sent = a3.arg;
                    else if ("throw" === a3.method) {
                      if (n2 === f) throw n2 = v, a3.arg;
                      a3.dispatchException(a3.arg);
                    } else "return" === a3.method && a3.abrupt("return", a3.arg);
                    n2 = _;
                    var d2 = m(e3, r4, a3);
                    if ("normal" === d2.type) {
                      if (n2 = a3.done ? v : g, d2.arg === b) continue;
                      return { value: d2.arg, done: a3.done };
                    }
                    "throw" === d2.type && (n2 = v, a3.method = "throw", a3.arg = d2.arg);
                  }
                };
              }
              function D(e3, r4) {
                var a3 = r4.method, n2 = e3.iterator[a3];
                if (n2 === t3)
                  return r4.delegate = null, "throw" === a3 && e3.iterator.return && (r4.method = "return", r4.arg = t3, D(e3, r4), "throw" === r4.method) || "return" !== a3 && (r4.method = "throw", r4.arg = new TypeError(
                    "The iterator does not provide a '" + a3 + "' method"
                  )), b;
                var s2 = m(n2, e3.iterator, r4.arg);
                if ("throw" === s2.type)
                  return r4.method = "throw", r4.arg = s2.arg, r4.delegate = null, b;
                var i2 = s2.arg;
                return i2 ? i2.done ? (r4[e3.resultName] = i2.value, r4.next = e3.nextLoc, "return" !== r4.method && (r4.method = "next", r4.arg = t3), r4.delegate = null, b) : i2 : (r4.method = "throw", r4.arg = new TypeError("iterator result is not an object"), r4.delegate = null, b);
              }
              function x(e3) {
                var t4 = { tryLoc: e3[0] };
                1 in e3 && (t4.catchLoc = e3[1]), 2 in e3 && (t4.finallyLoc = e3[2], t4.afterLoc = e3[3]), this.tryEntries.push(t4);
              }
              function I(e3) {
                var t4 = e3.completion || {};
                t4.type = "normal", delete t4.arg, e3.completion = t4;
              }
              function M(e3) {
                this.tryEntries = [{ tryLoc: "root" }], e3.forEach(x, this), this.reset(true);
              }
              function A(e3) {
                if (e3 || "" === e3) {
                  var r4 = e3[d];
                  if (r4) return r4.call(e3);
                  if ("function" == typeof e3.next) return e3;
                  if (!isNaN(e3.length)) {
                    var n2 = -1, s2 = function r5() {
                      for (; ++n2 < e3.length; )
                        if (i.call(e3, n2))
                          return r5.value = e3[n2], r5.done = false, r5;
                      return r5.value = t3, r5.done = true, r5;
                    };
                    return s2.next = s2;
                  }
                }
                throw new TypeError(a2(e3) + " is not iterable");
              }
              return w.prototype = S, o(T, "constructor", { value: S, configurable: true }), o(S, "constructor", { value: w, configurable: true }), w.displayName = u(S, p, "GeneratorFunction"), r3.isGeneratorFunction = function(e3) {
                var t4 = "function" == typeof e3 && e3.constructor;
                return !!t4 && (t4 === w || "GeneratorFunction" === (t4.displayName || t4.name));
              }, r3.mark = function(e3) {
                return Object.setPrototypeOf ? Object.setPrototypeOf(e3, S) : (e3.__proto__ = S, u(e3, p, "GeneratorFunction")), e3.prototype = Object.create(T), e3;
              }, r3.awrap = function(e3) {
                return { __await: e3 };
              }, C(P.prototype), u(P.prototype, l, function() {
                return this;
              }), r3.AsyncIterator = P, r3.async = function(e3, t4, a3, n2, s2) {
                void 0 === s2 && (s2 = Promise);
                var i2 = new P(h(e3, t4, a3, n2), s2);
                return r3.isGeneratorFunction(t4) ? i2 : i2.next().then(function(e4) {
                  return e4.done ? e4.value : i2.next();
                });
              }, C(T), u(T, p, "Generator"), u(T, d, function() {
                return this;
              }), u(T, "toString", function() {
                return "[object Generator]";
              }), r3.keys = function(e3) {
                var t4 = Object(e3), r4 = [];
                for (var a3 in t4) r4.push(a3);
                return r4.reverse(), function e4() {
                  for (; r4.length; ) {
                    var a4 = r4.pop();
                    if (a4 in t4) return e4.value = a4, e4.done = false, e4;
                  }
                  return e4.done = true, e4;
                };
              }, r3.values = A, M.prototype = {
                constructor: M,
                reset: function(e3) {
                  if (this.prev = 0, this.next = 0, this.sent = this._sent = t3, this.done = false, this.delegate = null, this.method = "next", this.arg = t3, this.tryEntries.forEach(I), !e3)
                    for (var r4 in this)
                      "t" === r4.charAt(0) && i.call(this, r4) && !isNaN(+r4.slice(1)) && (this[r4] = t3);
                },
                stop: function() {
                  this.done = true;
                  var e3 = this.tryEntries[0].completion;
                  if ("throw" === e3.type) throw e3.arg;
                  return this.rval;
                },
                dispatchException: function(e3) {
                  if (this.done) throw e3;
                  var r4 = this;
                  function a3(a4, n3) {
                    return o2.type = "throw", o2.arg = e3, r4.next = a4, n3 && (r4.method = "next", r4.arg = t3), !!n3;
                  }
                  for (var n2 = this.tryEntries.length - 1; n2 >= 0; --n2) {
                    var s2 = this.tryEntries[n2], o2 = s2.completion;
                    if ("root" === s2.tryLoc) return a3("end");
                    if (s2.tryLoc <= this.prev) {
                      var c2 = i.call(s2, "catchLoc"), d2 = i.call(s2, "finallyLoc");
                      if (c2 && d2) {
                        if (this.prev < s2.catchLoc) return a3(s2.catchLoc, true);
                        if (this.prev < s2.finallyLoc) return a3(s2.finallyLoc);
                      } else if (c2) {
                        if (this.prev < s2.catchLoc) return a3(s2.catchLoc, true);
                      } else {
                        if (!d2)
                          throw Error("try statement without catch or finally");
                        if (this.prev < s2.finallyLoc) return a3(s2.finallyLoc);
                      }
                    }
                  }
                },
                abrupt: function(e3, t4) {
                  for (var r4 = this.tryEntries.length - 1; r4 >= 0; --r4) {
                    var a3 = this.tryEntries[r4];
                    if (a3.tryLoc <= this.prev && i.call(a3, "finallyLoc") && this.prev < a3.finallyLoc) {
                      var n2 = a3;
                      break;
                    }
                  }
                  n2 && ("break" === e3 || "continue" === e3) && n2.tryLoc <= t4 && t4 <= n2.finallyLoc && (n2 = null);
                  var s2 = n2 ? n2.completion : {};
                  return s2.type = e3, s2.arg = t4, n2 ? (this.method = "next", this.next = n2.finallyLoc, b) : this.complete(s2);
                },
                complete: function(e3, t4) {
                  if ("throw" === e3.type) throw e3.arg;
                  return "break" === e3.type || "continue" === e3.type ? this.next = e3.arg : "return" === e3.type ? (this.rval = this.arg = e3.arg, this.method = "return", this.next = "end") : "normal" === e3.type && t4 && (this.next = t4), b;
                },
                finish: function(e3) {
                  for (var t4 = this.tryEntries.length - 1; t4 >= 0; --t4) {
                    var r4 = this.tryEntries[t4];
                    if (r4.finallyLoc === e3)
                      return this.complete(r4.completion, r4.afterLoc), I(r4), b;
                  }
                },
                catch: function(e3) {
                  for (var t4 = this.tryEntries.length - 1; t4 >= 0; --t4) {
                    var r4 = this.tryEntries[t4];
                    if (r4.tryLoc === e3) {
                      var a3 = r4.completion;
                      if ("throw" === a3.type) {
                        var n2 = a3.arg;
                        I(r4);
                      }
                      return n2;
                    }
                  }
                  throw Error("illegal catch attempt");
                },
                delegateYield: function(e3, r4, a3) {
                  return this.delegate = {
                    iterator: A(e3),
                    resultName: r4,
                    nextLoc: a3
                  }, "next" === this.method && (this.arg = t3), b;
                }
              }, r3;
            }
            e2.exports = n, e2.exports.__esModule = true, e2.exports.default = e2.exports;
          },
          3738: (e2) => {
            function t2(r2) {
              return e2.exports = t2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
                return typeof e3;
              } : function(e3) {
                return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
              }, e2.exports.__esModule = true, e2.exports.default = e2.exports, t2(r2);
            }
            e2.exports = t2, e2.exports.__esModule = true, e2.exports.default = e2.exports;
          },
          4756: (e2, t2, r2) => {
            var a2 = r2(4633)();
            e2.exports = a2;
            try {
              regeneratorRuntime = a2;
            } catch (e3) {
              "object" == typeof globalThis ? globalThis.regeneratorRuntime = a2 : Function("r", "regeneratorRuntime = r")(a2);
            }
          },
          3145: (e2, t2, r2) => {
            "use strict";
            function a2(e3, t3) {
              (null == t3 || t3 > e3.length) && (t3 = e3.length);
              for (var r3 = 0, a3 = Array(t3); r3 < t3; r3++) a3[r3] = e3[r3];
              return a3;
            }
            r2.d(t2, { A: () => a2 });
          },
          467: (e2, t2, r2) => {
            "use strict";
            function a2(e3, t3, r3, a3, n2, s, i) {
              try {
                var o = e3[s](i), c = o.value;
              } catch (e4) {
                return void r3(e4);
              }
              o.done ? t3(c) : Promise.resolve(c).then(a3, n2);
            }
            function n(e3) {
              return function() {
                var t3 = this, r3 = arguments;
                return new Promise(function(n2, s) {
                  var i = e3.apply(t3, r3);
                  function o(e4) {
                    a2(i, n2, s, o, c, "next", e4);
                  }
                  function c(e4) {
                    a2(i, n2, s, o, c, "throw", e4);
                  }
                  o(void 0);
                });
              };
            }
            r2.d(t2, { A: () => n });
          },
          3029: (e2, t2, r2) => {
            "use strict";
            function a2(e3, t3) {
              if (!(e3 instanceof t3))
                throw new TypeError("Cannot call a class as a function");
            }
            r2.d(t2, { A: () => a2 });
          },
          2901: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => s });
            var a2 = r2(816);
            function n(e3, t3) {
              for (var r3 = 0; r3 < t3.length; r3++) {
                var n2 = t3[r3];
                n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e3, (0, a2.A)(n2.key), n2);
              }
            }
            function s(e3, t3, r3) {
              return t3 && n(e3.prototype, t3), r3 && n(e3, r3), Object.defineProperty(e3, "prototype", { writable: false }), e3;
            }
          },
          4467: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => n });
            var a2 = r2(816);
            function n(e3, t3, r3) {
              return (t3 = (0, a2.A)(t3)) in e3 ? Object.defineProperty(e3, t3, {
                value: r3,
                enumerable: true,
                configurable: true,
                writable: true
              }) : e3[t3] = r3, e3;
            }
          },
          296: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => n });
            var a2 = r2(7800);
            function n(e3, t3) {
              return function(e4) {
                if (Array.isArray(e4)) return e4;
              }(e3) || function(e4, t4) {
                var r3 = null == e4 ? null : "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
                if (null != r3) {
                  var a3, n2, s, i, o = [], c = true, d = false;
                  try {
                    if (s = (r3 = r3.call(e4)).next, 0 === t4) {
                      if (Object(r3) !== r3) return;
                      c = false;
                    } else
                      for (; !(c = (a3 = s.call(r3)).done) && (o.push(a3.value), o.length !== t4); c = true) ;
                  } catch (e5) {
                    d = true, n2 = e5;
                  } finally {
                    try {
                      if (!c && null != r3.return && (i = r3.return(), Object(i) !== i))
                        return;
                    } finally {
                      if (d) throw n2;
                    }
                  }
                  return o;
                }
              }(e3, t3) || (0, a2.A)(e3, t3) || function() {
                throw new TypeError(
                  "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              }();
            }
          },
          5458: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => s });
            var a2 = r2(3145);
            var n = r2(7800);
            function s(e3) {
              return function(e4) {
                if (Array.isArray(e4)) return (0, a2.A)(e4);
              }(e3) || function(e4) {
                if ("undefined" != typeof Symbol && null != e4[Symbol.iterator] || null != e4["@@iterator"])
                  return Array.from(e4);
              }(e3) || (0, n.A)(e3) || function() {
                throw new TypeError(
                  "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              }();
            }
          },
          816: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => n });
            var a2 = r2(2284);
            function n(e3) {
              var t3 = function(e4, t4) {
                if ("object" != (0, a2.A)(e4) || !e4) return e4;
                var r3 = e4[Symbol.toPrimitive];
                if (void 0 !== r3) {
                  var n2 = r3.call(e4, t4 || "default");
                  if ("object" != (0, a2.A)(n2)) return n2;
                  throw new TypeError(
                    "@@toPrimitive must return a primitive value."
                  );
                }
                return ("string" === t4 ? String : Number)(e4);
              }(e3, "string");
              return "symbol" == (0, a2.A)(t3) ? t3 : t3 + "";
            }
          },
          2284: (e2, t2, r2) => {
            "use strict";
            function a2(e3) {
              return a2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
                return typeof e4;
              } : function(e4) {
                return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
              }, a2(e3);
            }
            r2.d(t2, { A: () => a2 });
          },
          7800: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { A: () => n });
            var a2 = r2(3145);
            function n(e3, t3) {
              if (e3) {
                if ("string" == typeof e3) return (0, a2.A)(e3, t3);
                var r3 = {}.toString.call(e3).slice(8, -1);
                return "Object" === r3 && e3.constructor && (r3 = e3.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e3) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? (0, a2.A)(e3, t3) : void 0;
              }
            }
          },
          7949: (e2) => {
            "use strict";
            e2.exports = JSON.parse(
              '{"name":"protoo-client","version":"4.0.6","description":"protoo JavaScript client module","author":"Iñaki Baz Castillo <ibc@aliax.net>","homepage":"https://protoo.versatica.com","license":"MIT","repository":{"type":"git","url":"https://github.com/ibc/protoo.git"},"main":"lib/index.js","keywords":["nodejs","browser","websocket"],"engines":{"node":">=8.0.0"},"scripts":{"lint":"eslint -c .eslintrc.js lib"},"dependencies":{"debug":"^4.3.1","events":"^3.2.0","retry":"^0.12.0"},"devDependencies":{"eslint":"^5.16.0"},"optionalDependencies":{"websocket":"^1.0.33"}}'
            );
          },
          9003: (e2) => {
            "use strict";
            e2.exports = { version: "1.0.35" };
          }
        }, t = {};
        function r(a2) {
          var n = t[a2];
          if (void 0 !== n) return n.exports;
          var s = t[a2] = { exports: {} };
          return e[a2].call(s.exports, s, s.exports, r), s.exports;
        }
        r.amdO = {}, r.n = (e2) => {
          var t2 = e2 && e2.__esModule ? () => e2.default : () => e2;
          return r.d(t2, { a: t2 }), t2;
        }, r.d = (e2, t2) => {
          for (var a2 in t2)
            r.o(t2, a2) && !r.o(e2, a2) && Object.defineProperty(e2, a2, { enumerable: true, get: t2[a2] });
        }, r.g = function() {
          if ("object" == typeof globalThis) return globalThis;
          try {
            return this || new Function("return this")();
          } catch (e2) {
            if ("object" == typeof window) return window;
          }
        }(), r.o = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r.r = (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        };
        var a = {};
        return (() => {
          "use strict";
          r.r(a), r.d(a, {
            CameraDeviceInfo: () => er,
            DeviceInfo: () => Zt,
            MicrophoneDeviceInfo: () => tr,
            VideoSDK: () => Ds,
            ZujoSDK: () => Ms
          });
          var e2 = r(2284), t2 = r(467), n = r(3029), s = r(2901), i = r(4467), o = r(4756), c = r.n(o), d = r(6880), l = r.n(d);
          function p(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var a2 = Object.getOwnPropertySymbols(e3);
              t3 && (a2 = a2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, a2);
            }
            return r2;
          }
          function u(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? p(Object(r2), true).forEach(function(t4) {
                (0, i.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : p(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          function h(e3) {
            return "Minified Redux error #" + e3 + "; visit https://redux.js.org/Errors?code=" + e3 + " for the full message or use the non-minified dev environment for full errors. ";
          }
          var m = "function" == typeof Symbol && Symbol.observable || "@@observable", f = function() {
            return Math.random().toString(36).substring(7).split("").join(".");
          }, g = {
            INIT: "@@redux/INIT" + f(),
            REPLACE: "@@redux/REPLACE" + f(),
            PROBE_UNKNOWN_ACTION: function() {
              return "@@redux/PROBE_UNKNOWN_ACTION" + f();
            }
          };
          function _(e3) {
            if ("object" != typeof e3 || null === e3) return false;
            for (var t3 = e3; null !== Object.getPrototypeOf(t3); )
              t3 = Object.getPrototypeOf(t3);
            return Object.getPrototypeOf(e3) === t3;
          }
          function v(e3, t3, r2) {
            var a2;
            if ("function" == typeof t3 && "function" == typeof r2 || "function" == typeof r2 && "function" == typeof arguments[3])
              throw new Error(h(0));
            if ("function" == typeof t3 && void 0 === r2 && (r2 = t3, t3 = void 0), void 0 !== r2) {
              if ("function" != typeof r2) throw new Error(h(1));
              return r2(v)(e3, t3);
            }
            if ("function" != typeof e3) throw new Error(h(2));
            var n2 = e3, s2 = t3, i2 = [], o2 = i2, c2 = false;
            function d2() {
              o2 === i2 && (o2 = i2.slice());
            }
            function l2() {
              if (c2) throw new Error(h(3));
              return s2;
            }
            function p2(e4) {
              if ("function" != typeof e4) throw new Error(h(4));
              if (c2) throw new Error(h(5));
              var t4 = true;
              return d2(), o2.push(e4), function() {
                if (t4) {
                  if (c2) throw new Error(h(6));
                  t4 = false, d2();
                  var r3 = o2.indexOf(e4);
                  o2.splice(r3, 1), i2 = null;
                }
              };
            }
            function u2(e4) {
              if (!_(e4)) throw new Error(h(7));
              if (void 0 === e4.type) throw new Error(h(8));
              if (c2) throw new Error(h(9));
              try {
                c2 = true, s2 = n2(s2, e4);
              } finally {
                c2 = false;
              }
              for (var t4 = i2 = o2, r3 = 0; r3 < t4.length; r3++) {
                (0, t4[r3])();
              }
              return e4;
            }
            return u2({ type: g.INIT }), (a2 = {
              dispatch: u2,
              subscribe: p2,
              getState: l2,
              replaceReducer: function(e4) {
                if ("function" != typeof e4) throw new Error(h(10));
                n2 = e4, u2({ type: g.REPLACE });
              }
            })[m] = function() {
              var e4, t4 = p2;
              return (e4 = {
                subscribe: function(e5) {
                  if ("object" != typeof e5 || null === e5)
                    throw new Error(h(11));
                  function r3() {
                    e5.next && e5.next(l2());
                  }
                  return r3(), { unsubscribe: t4(r3) };
                }
              })[m] = function() {
                return this;
              }, e4;
            }, a2;
          }
          function b() {
            for (var e3 = arguments.length, t3 = new Array(e3), r2 = 0; r2 < e3; r2++)
              t3[r2] = arguments[r2];
            return 0 === t3.length ? function(e4) {
              return e4;
            } : 1 === t3.length ? t3[0] : t3.reduce(function(e4, t4) {
              return function() {
                return e4(t4.apply(void 0, arguments));
              };
            });
          }
          function y() {
            for (var e3 = arguments.length, t3 = new Array(e3), r2 = 0; r2 < e3; r2++)
              t3[r2] = arguments[r2];
            return function(e4) {
              return function() {
                var r3 = e4.apply(void 0, arguments), a2 = function() {
                  throw new Error(h(15));
                }, n2 = {
                  getState: r3.getState,
                  dispatch: function() {
                    return a2.apply(void 0, arguments);
                  }
                }, s2 = t3.map(function(e5) {
                  return e5(n2);
                });
                return a2 = b.apply(void 0, s2)(r3.dispatch), u(u({}, r3), {}, { dispatch: a2 });
              };
            };
          }
          function w(e3) {
            return function(t3) {
              var r2 = t3.dispatch, a2 = t3.getState;
              return function(t4) {
                return function(n2) {
                  return "function" == typeof n2 ? n2(r2, a2, e3) : t4(n2);
                };
              };
            };
          }
          var S = w();
          S.withExtraArgument = w;
          const R = S;
          var E = r(2211), k = r.n(E);
          function T(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var a2 = Object.getOwnPropertySymbols(e3);
              t3 && (a2 = a2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, a2);
            }
            return r2;
          }
          function C(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? T(Object(r2), true).forEach(function(t4) {
                (0, i.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : T(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var P = {
            url: null,
            state: "new",
            activeSpeakerId: null,
            statsPeerId: null,
            faceDetection: false
          };
          const O = function() {
            var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : P, t3 = arguments.length > 1 ? arguments[1] : void 0;
            switch (t3.type) {
              case "SET_ROOM_URL":
                var r2 = t3.payload.url;
                return C(C({}, e3), {}, { url: r2 });
              case "SET_ROOM_STATE":
                var a2 = t3.payload.state;
                return C(
                  C({}, e3),
                  {},
                  "connected" === a2 ? { state: a2 } : { state: a2, activeSpeakerId: null, statsPeerId: null }
                );
              case "SET_ROOM_ACTIVE_SPEAKER":
                var n2 = t3.payload.peerId;
                return C(C({}, e3), {}, { activeSpeakerId: n2 });
              case "SET_ROOM_STATS_PEER_ID":
                var s2 = t3.payload.peerId;
                return e3.statsPeerId === s2 ? C(C({}, e3), {}, { statsPeerId: null }) : C(C({}, e3), {}, { statsPeerId: s2 });
              case "SET_FACE_DETECTION":
                var i2 = t3.payload;
                return C(C({}, e3), {}, { faceDetection: i2 });
              case "REMOVE_PEER":
                var o2 = t3.payload.peerId, c2 = C({}, e3);
                return o2 && o2 === e3.activeSpeakerId && (c2.activeSpeakerId = null), o2 && o2 === e3.statsPeerId && (c2.statsPeerId = null), c2;
              default:
                return e3;
            }
          };
          function D(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var a2 = Object.getOwnPropertySymbols(e3);
              t3 && (a2 = a2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, a2);
            }
            return r2;
          }
          function x(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? D(Object(r2), true).forEach(function(t4) {
                (0, i.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : D(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var I = {
            id: null,
            displayName: null,
            displayNameSet: false,
            device: null,
            canSendMic: false,
            canSendWebcam: false,
            canChangeWebcam: false,
            webcamInProgress: false,
            shareInProgress: false,
            audioOnly: false,
            audioOnlyInProgress: false,
            audioMuted: false,
            restartIceInProgress: false
          };
          const M = function() {
            var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : I, t3 = arguments.length > 1 ? arguments[1] : void 0;
            switch (t3.type) {
              case "SET_ROOM_STATE":
                return "closed" === t3.payload.state ? x(
                  x({}, e3),
                  {},
                  {
                    webcamInProgress: false,
                    shareInProgress: false,
                    audioOnly: false,
                    audioOnlyInProgress: false,
                    audioMuted: false,
                    restartIceInProgress: false
                  }
                ) : e3;
              case "SET_ME":
                var r2 = t3.payload, a2 = r2.peerId, n2 = r2.displayName, s2 = r2.displayNameSet, i2 = r2.device;
                return x(
                  x({}, e3),
                  {},
                  { id: a2, displayName: n2, displayNameSet: s2, device: i2 }
                );
              case "SET_MEDIA_CAPABILITIES":
                var o2 = t3.payload, c2 = o2.canSendMic, d2 = o2.canSendWebcam;
                return x(x({}, e3), {}, { canSendMic: c2, canSendWebcam: d2 });
              case "SET_CAN_CHANGE_WEBCAM":
                var l2 = t3.payload;
                return x(x({}, e3), {}, { canChangeWebcam: l2 });
              case "SET_WEBCAM_IN_PROGRESS":
                var p2 = t3.payload.flag;
                return x(x({}, e3), {}, { webcamInProgress: p2 });
              case "SET_SHARE_IN_PROGRESS":
                var u2 = t3.payload.flag;
                return x(x({}, e3), {}, { shareInProgress: u2 });
              case "SET_DISPLAY_NAME":
                var h2 = t3.payload.displayName;
                return h2 || (h2 = e3.displayName), x(x({}, e3), {}, { displayName: h2, displayNameSet: true });
              case "SET_AUDIO_ONLY_STATE":
                var m2 = t3.payload.enabled;
                return x(x({}, e3), {}, { audioOnly: m2 });
              case "SET_AUDIO_ONLY_IN_PROGRESS":
                var f2 = t3.payload.flag;
                return x(x({}, e3), {}, { audioOnlyInProgress: f2 });
              case "SET_AUDIO_MUTED_STATE":
                var g2 = t3.payload.enabled;
                return x(x({}, e3), {}, { audioMuted: g2 });
              case "SET_RESTART_ICE_IN_PROGRESS":
                var _2 = t3.payload.flag;
                return x(x({}, e3), {}, { restartIceInProgress: _2 });
              default:
                return e3;
            }
          };
          function A(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var a2 = Object.getOwnPropertySymbols(e3);
              t3 && (a2 = a2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, a2);
            }
            return r2;
          }
          function L(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? A(Object(r2), true).forEach(function(t4) {
                (0, i.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : A(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var N = {};
          const j = function() {
            var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : N, t3 = arguments.length > 1 ? arguments[1] : void 0;
            switch (t3.type) {
              case "SET_ROOM_STATE":
                return "closed" === t3.payload.state ? {} : e3;
              case "ADD_PRODUCER":
                var r2 = t3.payload.producer;
                return L(L({}, e3), {}, (0, i.A)({}, r2.id, r2));
              case "REMOVE_PRODUCER":
                var a2 = t3.payload.producerId, n2 = L({}, e3);
                return delete n2[a2], n2;
              case "SET_PRODUCER_PAUSED":
                var s2 = t3.payload.producerId, o2 = L(L({}, e3[s2]), {}, { paused: true });
                return L(L({}, e3), {}, (0, i.A)({}, s2, o2));
              case "SET_PRODUCER_RESUMED":
                var c2 = t3.payload.producerId, d2 = L(L({}, e3[c2]), {}, { paused: false });
                return L(L({}, e3), {}, (0, i.A)({}, c2, d2));
              case "SET_PRODUCER_TRACK":
                var l2 = t3.payload, p2 = l2.producerId, u2 = l2.track, h2 = L(L({}, e3[p2]), {}, { track: u2 });
                return L(L({}, e3), {}, (0, i.A)({}, p2, h2));
              case "SET_PRODUCER_SCORE":
                var m2 = t3.payload, f2 = m2.producerId, g2 = m2.score, _2 = e3[f2];
                if (!_2) return e3;
                var v2 = L(L({}, _2), {}, { score: g2 });
                return L(L({}, e3), {}, (0, i.A)({}, f2, v2));
              default:
                return e3;
            }
          };
          function B(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var a2 = Object.getOwnPropertySymbols(e3);
              t3 && (a2 = a2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, a2);
            }
            return r2;
          }
          function F(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? B(Object(r2), true).forEach(function(t4) {
                (0, i.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : B(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var U = {};
          const W = function() {
            var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : U, t3 = arguments.length > 1 ? arguments[1] : void 0;
            switch (t3.type) {
              case "SET_ROOM_STATE":
                return "closed" === t3.payload.state ? {} : e3;
              case "ADD_DATA_PRODUCER":
                var r2 = t3.payload.dataProducer;
                return F(F({}, e3), {}, (0, i.A)({}, r2.id, r2));
              case "REMOVE_DATA_PRODUCER":
                var a2 = t3.payload.dataProducerId, n2 = F({}, e3);
                return delete n2[a2], n2;
              default:
                return e3;
            }
          };
          var q = r(5458);
          function H(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var a2 = Object.getOwnPropertySymbols(e3);
              t3 && (a2 = a2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, a2);
            }
            return r2;
          }
          function V(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? H(Object(r2), true).forEach(function(t4) {
                (0, i.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : H(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var G = {};
          function z(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var a2 = Object.getOwnPropertySymbols(e3);
              t3 && (a2 = a2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, a2);
            }
            return r2;
          }
          function $(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? z(Object(r2), true).forEach(function(t4) {
                (0, i.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : z(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var K = {};
          function J(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var a2 = Object.getOwnPropertySymbols(e3);
              t3 && (a2 = a2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, a2);
            }
            return r2;
          }
          function Q(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? J(Object(r2), true).forEach(function(t4) {
                (0, i.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : J(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          var Y = {};
          var X = [];
          const Z = function(e3) {
            for (var t3 = Object.keys(e3), r2 = {}, a2 = 0; a2 < t3.length; a2++) {
              var n2 = t3[a2];
              0, "function" == typeof e3[n2] && (r2[n2] = e3[n2]);
            }
            var s2, i2 = Object.keys(r2);
            try {
              !function(e4) {
                Object.keys(e4).forEach(function(t4) {
                  var r3 = e4[t4];
                  if (void 0 === r3(void 0, { type: g.INIT }))
                    throw new Error(h(12));
                  if (void 0 === r3(void 0, { type: g.PROBE_UNKNOWN_ACTION() }))
                    throw new Error(h(13));
                });
              }(r2);
            } catch (e4) {
              s2 = e4;
            }
            return function(e4, t4) {
              if (void 0 === e4 && (e4 = {}), s2) throw s2;
              for (var a3 = false, n3 = {}, o2 = 0; o2 < i2.length; o2++) {
                var c2 = i2[o2], d2 = r2[c2], l2 = e4[c2], p2 = d2(l2, t4);
                if (void 0 === p2) {
                  t4 && t4.type;
                  throw new Error(h(14));
                }
                n3[c2] = p2, a3 = a3 || p2 !== l2;
              }
              return (a3 = a3 || i2.length !== Object.keys(e4).length) ? n3 : e4;
            };
          }({
            room: O,
            me: M,
            producers: j,
            dataProducers: W,
            peers: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : G, t3 = arguments.length > 1 ? arguments[1] : void 0;
              switch (t3.type) {
                case "SET_ROOM_STATE":
                  return "closed" === t3.payload.state ? {} : e3;
                case "ADD_PEER":
                  var r2 = t3.payload.peer;
                  return V(V({}, e3), {}, (0, i.A)({}, r2.id, r2));
                case "REMOVE_PEER":
                  var a2 = t3.payload.peerId, n2 = V({}, e3);
                  return delete n2[a2], n2;
                case "SET_PEER_DISPLAY_NAME":
                  var s2 = t3.payload, o2 = s2.displayName, c2 = e3[s2.peerId];
                  if (!c2) throw new Error("no Peer found");
                  var d2 = V(V({}, c2), {}, { displayName: o2 });
                  return V(V({}, e3), {}, (0, i.A)({}, d2.id, d2));
                case "ADD_CONSUMER":
                  var l2 = t3.payload, p2 = l2.consumer, u2 = e3[l2.peerId];
                  if (!u2) throw new Error("no Peer found for new Consumer");
                  var h2 = [].concat((0, q.A)(u2.consumers), [p2.id]), m2 = V(V({}, u2), {}, { consumers: h2 });
                  return V(V({}, e3), {}, (0, i.A)({}, m2.id, m2));
                case "REMOVE_CONSUMER":
                  var f2 = t3.payload, g2 = f2.consumerId, _2 = e3[f2.peerId];
                  if (!_2) return e3;
                  var v2 = _2.consumers.indexOf(g2);
                  if (-1 === v2) throw new Error("Consumer not found");
                  var b2 = _2.consumers.slice();
                  b2.splice(v2, 1);
                  var y2 = V(V({}, _2), {}, { consumers: b2 });
                  return V(V({}, e3), {}, (0, i.A)({}, y2.id, y2));
                case "ADD_DATA_CONSUMER":
                  var w2 = t3.payload, S2 = w2.dataConsumer, R2 = w2.peerId;
                  if (!R2) return e3;
                  var E2 = e3[R2];
                  if (!E2) throw new Error("no Peer found for new DataConsumer");
                  var k2 = [].concat((0, q.A)(E2.dataConsumers), [S2.id]), T2 = V(V({}, E2), {}, { dataConsumers: k2 });
                  return V(V({}, e3), {}, (0, i.A)({}, T2.id, T2));
                case "REMOVE_DATA_CONSUMER":
                  var C2 = t3.payload, P2 = C2.dataConsumerId, O2 = C2.peerId;
                  if (!O2) return e3;
                  var D2 = e3[O2];
                  if (!D2) return e3;
                  var x2 = D2.dataConsumers.indexOf(P2);
                  if (-1 === x2) throw new Error("DataConsumer not found");
                  var I2 = D2.dataConsumers.slice();
                  I2.splice(x2, 1);
                  var M2 = V(V({}, D2), {}, { dataConsumers: I2 });
                  return V(V({}, e3), {}, (0, i.A)({}, M2.id, M2));
                default:
                  return e3;
              }
            },
            consumers: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : K, t3 = arguments.length > 1 ? arguments[1] : void 0;
              switch (t3.type) {
                case "SET_ROOM_STATE":
                  return "closed" === t3.payload.state ? {} : e3;
                case "ADD_CONSUMER":
                  var r2 = t3.payload.consumer;
                  return $($({}, e3), {}, (0, i.A)({}, r2.id, r2));
                case "REMOVE_CONSUMER":
                  var a2 = t3.payload.consumerId, n2 = $({}, e3);
                  return delete n2[a2], n2;
                case "SET_CONSUMER_PAUSED":
                  var s2, o2 = t3.payload, c2 = o2.consumerId, d2 = o2.originator, l2 = e3[c2];
                  return s2 = $(
                    $({}, l2),
                    {},
                    "local" === d2 ? { locallyPaused: true } : { remotelyPaused: true }
                  ), $($({}, e3), {}, (0, i.A)({}, c2, s2));
                case "SET_CONSUMER_RESUMED":
                  var p2, u2 = t3.payload, h2 = u2.consumerId, m2 = u2.originator, f2 = e3[h2];
                  return p2 = $(
                    $({}, f2),
                    {},
                    "local" === m2 ? { locallyPaused: false } : { remotelyPaused: false }
                  ), $($({}, e3), {}, (0, i.A)({}, h2, p2));
                case "SET_CONSUMER_CURRENT_LAYERS":
                  var g2 = t3.payload, _2 = g2.consumerId, v2 = g2.spatialLayer, b2 = g2.temporalLayer, y2 = $(
                    $({}, e3[_2]),
                    {},
                    { currentSpatialLayer: v2, currentTemporalLayer: b2 }
                  );
                  return $($({}, e3), {}, (0, i.A)({}, _2, y2));
                case "SET_CONSUMER_PREFERRED_LAYERS":
                  var w2 = t3.payload, S2 = w2.consumerId, R2 = w2.spatialLayer, E2 = w2.temporalLayer, k2 = $(
                    $({}, e3[S2]),
                    {},
                    { preferredSpatialLayer: R2, preferredTemporalLayer: E2 }
                  );
                  return $($({}, e3), {}, (0, i.A)({}, S2, k2));
                case "SET_CONSUMER_PRIORITY":
                  var T2 = t3.payload, C2 = T2.consumerId, P2 = T2.priority, O2 = $($({}, e3[C2]), {}, { priority: P2 });
                  return $($({}, e3), {}, (0, i.A)({}, C2, O2));
                case "SET_CONSUMER_TRACK":
                  var D2 = t3.payload, x2 = D2.consumerId, I2 = D2.track, M2 = $($({}, e3[x2]), {}, { track: I2 });
                  return $($({}, e3), {}, (0, i.A)({}, x2, M2));
                case "SET_CONSUMER_SCORE":
                  var A2 = t3.payload, L2 = A2.consumerId, N2 = A2.score, j2 = e3[L2];
                  if (!j2) return e3;
                  var B2 = $($({}, j2), {}, { score: N2 });
                  return $($({}, e3), {}, (0, i.A)({}, L2, B2));
                default:
                  return e3;
              }
            },
            dataConsumers: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Y, t3 = arguments.length > 1 ? arguments[1] : void 0;
              switch (t3.type) {
                case "SET_ROOM_STATE":
                  return "closed" === t3.payload.state ? {} : e3;
                case "ADD_DATA_CONSUMER":
                  var r2 = t3.payload.dataConsumer;
                  return Q(Q({}, e3), {}, (0, i.A)({}, r2.id, r2));
                case "REMOVE_DATA_CONSUMER":
                  var a2 = t3.payload.dataConsumerId, n2 = Q({}, e3);
                  return delete n2[a2], n2;
                default:
                  return e3;
              }
            },
            notifications: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : X, t3 = arguments.length > 1 ? arguments[1] : void 0;
              switch (t3.type) {
                case "ADD_NOTIFICATION":
                  var r2 = t3.payload.notification;
                  return [].concat((0, q.A)(e3), [r2]);
                case "REMOVE_NOTIFICATION":
                  var a2 = t3.payload.notificationId;
                  return e3.filter(function(e4) {
                    return e4.id !== a2;
                  });
                case "REMOVE_ALL_NOTIFICATIONS":
                  return [];
                default:
                  return e3;
              }
            }
          });
          var ee = r(2487);
          var te = r(7007), re = r(296), ae = (r(2487).default, (0, s.A)(function e3() {
            (0, n.A)(this, e3), this.roomClient = null;
          })), ne = new (function() {
            function e3() {
              (0, n.A)(this, e3), e3.instance || (e3.instance = new ae());
            }
            return (0, s.A)(e3, [
              {
                key: "getInstance",
                value: function() {
                  return e3.instance;
                }
              }
            ]);
          }())();
          Object.freeze(ne);
          var se = ne.getInstance(), ie = function() {
            return (0, s.A)(
              function e3(t3) {
                (0, n.A)(this, e3), this.id = t3.id, this.kind = t3.track.kind, this.codec = t3.codec, this.track = t3.track, this.producerOrConsumer = t3.instance, t3.appData && true === t3.appData.share && "video" === t3.track.kind && (this.kind = "share"), t3.appData && true === t3.appData.share && "audio" === t3.track.kind && (this.kind = "shareAudio");
              },
              [
                {
                  key: "pause",
                  value: function() {
                    se.roomClient._pauseConsumer(this.producerOrConsumer);
                  }
                },
                {
                  key: "resume",
                  value: function() {
                    se.roomClient._resumeConsumer(this.producerOrConsumer);
                  }
                },
                {
                  key: "paused",
                  get: function() {
                    return this.producerOrConsumer.paused;
                  }
                }
              ]
            );
          }();
          function oe(e3, t3) {
            var r2 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
            if (!r2) {
              if (Array.isArray(e3) || (r2 = function(e4, t4) {
                if (e4) {
                  if ("string" == typeof e4) return ce(e4, t4);
                  var r3 = {}.toString.call(e4).slice(8, -1);
                  return "Object" === r3 && e4.constructor && (r3 = e4.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e4) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? ce(e4, t4) : void 0;
                }
              }(e3)) || t3 && e3 && "number" == typeof e3.length) {
                r2 && (e3 = r2);
                var a2 = 0, n2 = function() {
                };
                return {
                  s: n2,
                  n: function() {
                    return a2 >= e3.length ? { done: true } : { done: false, value: e3[a2++] };
                  },
                  e: function(e4) {
                    throw e4;
                  },
                  f: n2
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            var s2, i2 = true, o2 = false;
            return {
              s: function() {
                r2 = r2.call(e3);
              },
              n: function() {
                var e4 = r2.next();
                return i2 = e4.done, e4;
              },
              e: function(e4) {
                o2 = true, s2 = e4;
              },
              f: function() {
                try {
                  i2 || null == r2.return || r2.return();
                } finally {
                  if (o2) throw s2;
                }
              }
            };
          }
          function ce(e3, t3) {
            (null == t3 || t3 > e3.length) && (t3 = e3.length);
            for (var r2 = 0, a2 = Array(t3); r2 < t3; r2++) a2[r2] = e3[r2];
            return a2;
          }
          var de = "stream-enabled", le = "stream-disabled", pe = "media-status-changed", ue = "video-quality-changed", he = function() {
            return (0, s.A)(
              function e4(r3) {
                var a3 = this;
                (0, n.A)(this, e4), (0, i.A)(
                  this,
                  "captureImage",
                  (0, t2.A)(
                    c().mark(function e5() {
                      var r4, n2, s2, i2, o3, d3, l2, p2, u2 = arguments;
                      return c().wrap(
                        function(e6) {
                          for (; ; )
                            switch (e6.prev = e6.next) {
                              case 0:
                                n2 = (r4 = u2.length > 0 && void 0 !== u2[0] ? u2[0] : {}).height, s2 = r4.width, e6.prev = 1, i2 = (0, q.A)(a3.streams.values()), o3 = oe(i2), e6.prev = 4, l2 = c().mark(function e7() {
                                  var r5, a4, i3, o4, l3;
                                  return c().wrap(
                                    function(e8) {
                                      for (; ; )
                                        switch (e8.prev = e8.next) {
                                          case 0:
                                            if ("video" != (r5 = d3.value).kind) {
                                              e8.next = 19;
                                              break;
                                            }
                                            return e8.prev = 2, (a4 = new MediaStream()).addTrack(
                                              r5.track
                                            ), (i3 = document.createElement(
                                              "video"
                                            )).srcObject = a4, i3.playsInline = true, (o4 = document.createElement(
                                              "canvas"
                                            )).id = "canvasId", e8.next = 12, new Promise(function(e9, r6) {
                                              i3.addEventListener(
                                                "loadeddata",
                                                (0, t2.A)(
                                                  c().mark(function t3() {
                                                    var a5, d4, l4, p3, u3, h2;
                                                    return c().wrap(
                                                      function(t4) {
                                                        for (; ; )
                                                          switch (t4.prev = t4.next) {
                                                            case 0:
                                                              return a5 = i3.videoWidth, d4 = i3.videoHeight, l4 = 16 / 9, null == n2 && null == s2 && (n2 = d4, s2 = a5), null == n2 && null == n2 || (n2 <= 0 || n2 > d4) && (n2 = d4), null == s2 && null == s2 || (s2 <= 0 || s2 > a5) && (s2 = a5), null == n2 && (n2 = s2 / l4), null == s2 && (s2 = n2 * l4), o4.width = s2, o4.height = n2, t4.prev = 9, t4.next = 12, i3.play();
                                                            case 12:
                                                              document.body.appendChild(
                                                                i3
                                                              ), p3 = (o4.width - a5 * l4) / 2, u3 = (o4.height - d4 * l4) / 2, o4.getContext(
                                                                "2d"
                                                              ).clearRect(
                                                                0,
                                                                0,
                                                                p3 / 2,
                                                                u3 / 2
                                                              ), o4.getContext(
                                                                "2d"
                                                              ).drawImage(
                                                                i3,
                                                                0,
                                                                0
                                                              ), h2 = o4.toDataURL(
                                                                "image/jpeg"
                                                              ).split(
                                                                ";base64,"
                                                              )[1], document.body.appendChild(
                                                                o4
                                                              ), document.body.removeChild(
                                                                o4
                                                              ), document.body.removeChild(
                                                                i3
                                                              ), e9(h2), t4.next = 28;
                                                              break;
                                                            case 24:
                                                              t4.prev = 24, t4.t0 = t4.catch(
                                                                9
                                                              ), r6(t4.t0), console.log(
                                                                "error in video",
                                                                t4.t0
                                                              );
                                                            case 28:
                                                            case "end":
                                                              return t4.stop();
                                                          }
                                                      },
                                                      t3,
                                                      null,
                                                      [[9, 24]]
                                                    );
                                                  })
                                                )
                                              );
                                            });
                                          case 12:
                                            return l3 = e8.sent, e8.abrupt("return", { v: l3 });
                                          case 16:
                                            e8.prev = 16, e8.t0 = e8.catch(2), console.error(
                                              "err on image capture",
                                              e8.t0
                                            );
                                          case 19:
                                          case "end":
                                            return e8.stop();
                                        }
                                    },
                                    e7,
                                    null,
                                    [[2, 16]]
                                  );
                                }), o3.s();
                              case 7:
                                if ((d3 = o3.n()).done) {
                                  e6.next = 14;
                                  break;
                                }
                                return e6.delegateYield(l2(), "t0", 9);
                              case 9:
                                if (!(p2 = e6.t0)) {
                                  e6.next = 12;
                                  break;
                                }
                                return e6.abrupt("return", p2.v);
                              case 12:
                                e6.next = 7;
                                break;
                              case 14:
                                e6.next = 19;
                                break;
                              case 16:
                                e6.prev = 16, e6.t1 = e6.catch(4), o3.e(e6.t1);
                              case 19:
                                return e6.prev = 19, o3.f(), e6.finish(19);
                              case 22:
                                throw new Error(
                                  "Camera must be on to capture an image"
                                );
                              case 25:
                                e6.prev = 25, e6.t2 = e6.catch(1), console.error(
                                  "Error in captureImage::",
                                  e6.t2
                                ), se.roomClient._videosdkLogs && se.roomClient._videosdkLogs.pushLogs({
                                  logText: "Error on image capture",
                                  logType: "ERROR",
                                  attributes: { error: e6.t2.message }
                                });
                              case 29:
                              case "end":
                                return e6.stop();
                            }
                        },
                        e5,
                        null,
                        [
                          [1, 25],
                          [4, 16, 19, 22]
                        ]
                      );
                    })
                  )
                ), this.id = r3.id, this.displayName = r3.displayName, this.streams = /* @__PURE__ */ new Map(), this.quality = "low", this.local = r3.local || false, this.pinState = { cam: false, share: false }, this.webcamOn = false, this.micOn = false, this.mode = r3.mode, this.metaData = r3.metaData, this.eventEmitter = new te.EventEmitter();
              },
              [
                {
                  key: "_setPinState",
                  value: function(e4) {
                    null != e4.cam && (this.pinState.cam = e4.cam), null != e4.share && (this.pinState.share = e4.share);
                  }
                },
                {
                  key: "remove",
                  value: function() {
                    se.roomClient.removePeer(this.id);
                  }
                },
                {
                  key: "enableMic",
                  value: function() {
                    se.roomClient.enablePeerMic(this.id);
                  }
                },
                {
                  key: "disableMic",
                  value: function() {
                    se.roomClient.disablePeerMic(this.id);
                  }
                },
                {
                  key: "enableWebcam",
                  value: function() {
                    se.roomClient.enablePeerWebcam(this.id);
                  }
                },
                {
                  key: "disableWebcam",
                  value: function() {
                    se.roomClient.disablePeerWebcam(this.id);
                  }
                },
                {
                  key: "addStream",
                  value: function(e4) {
                    this.streams.set(e4.id, e4), "video" !== e4.kind || this.local || se.roomClient.setConsumerQuality(e4.id, this.quality), this.eventEmitter.emit(de, e4);
                  }
                },
                {
                  key: "updateStream",
                  value: function(e4) {
                    this.streams.set(e4.id, e4), this.eventEmitter.emit(de, e4);
                  }
                },
                {
                  key: "deleteStream",
                  value: function(e4) {
                    var t3 = this.streams.get(e4);
                    if (null != t3)
                      return this.streams.delete(e4), this.eventEmitter.emit(le, t3), t3;
                  }
                },
                {
                  key: "updateParticipantMediaState",
                  value: function(e4, t3) {
                    "audio" == e4 ? this.micOn = t3 : "video" == e4 && (this.webcamOn = t3), this.eventEmitter.emit(pe, {
                      peerId: this.id,
                      kind: e4,
                      newStatus: t3
                    });
                  }
                },
                {
                  key: "videoQualityChanged",
                  value: function(e4, t3) {
                    this.eventEmitter.emit(ue, {
                      peerId: this.id,
                      prevQuality: e4,
                      currentQuality: t3
                    });
                  }
                },
                {
                  key: "setQuality",
                  value: function(e4) {
                    this.quality === e4 || this.local || (this.quality = e4, (0, q.A)(this.streams.entries()).forEach(function(t3) {
                      var r3 = t3[1];
                      "video" === r3.kind && se.roomClient.setConsumerQuality(r3.id, e4);
                    }));
                  }
                },
                {
                  key: "setViewPort",
                  value: function(e4, t3) {
                    (0, q.A)(this.streams.entries()).forEach(function(r3) {
                      var a3 = r3[1];
                      "video" === a3.kind && se.roomClient.setViewPort(a3.producerOrConsumer, e4, t3);
                    });
                  }
                },
                {
                  key: "pin",
                  value: function(e4) {
                    switch (e4) {
                      case "SHARE_AND_CAM":
                      case void 0:
                        this._setPinState({ cam: true, share: true });
                        break;
                      case "CAM":
                        this._setPinState({ cam: true });
                        break;
                      case "SHARE":
                        this._setPinState({ share: true });
                        break;
                      default:
                        throw new Error("Unknown pin type");
                    }
                    se.roomClient.pinStateChange({
                      peerId: this.id,
                      state: this.pinState
                    });
                  }
                },
                {
                  key: "unpin",
                  value: function(e4) {
                    switch (e4) {
                      case "SHARE_AND_CAM":
                      case void 0:
                        this._setPinState({ cam: false, share: false });
                        break;
                      case "CAM":
                        this._setPinState({ cam: false });
                        break;
                      case "SHARE":
                        this._setPinState({ share: false });
                        break;
                      default:
                        throw new Error("Unknown unpin type");
                    }
                    se.roomClient.pinStateChange({
                      peerId: this.id,
                      state: this.pinState
                    });
                  }
                },
                {
                  key: "switchTo",
                  value: (d2 = (0, t2.A)(
                    c().mark(function e4(t3) {
                      var r3, a3, n2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return r3 = t3.meetingId, a3 = t3.payload, n2 = t3.token, e5.next = 3, se.roomClient.switchPeerRoom({
                                  peerId: this.id,
                                  roomId: r3,
                                  payload: a3,
                                  token: n2
                                });
                              case 3:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function(e4) {
                    return d2.apply(this, arguments);
                  })
                },
                {
                  key: "getVideoStats",
                  value: (o2 = (0, t2.A)(
                    c().mark(function e4() {
                      var t3, r3, a3, n2, s2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (!this.local) {
                                  e5.next = 6;
                                  break;
                                }
                                return e5.next = 3, se.roomClient.getVideoRemoteStats();
                              case 3:
                                return e5.abrupt("return", e5.sent);
                              case 6:
                                t3 = (0, q.A)(this.streams.entries()), r3 = oe(t3), e5.prev = 8, r3.s();
                              case 10:
                                if ((a3 = r3.n()).done) {
                                  e5.next = 18;
                                  break;
                                }
                                if (n2 = (0, re.A)(a3.value, 2), s2 = n2[0], "video" != n2[1].kind) {
                                  e5.next = 16;
                                  break;
                                }
                                return e5.next = 15, se.roomClient.getConsumerRemoteStats(s2);
                              case 15:
                                return e5.abrupt("return", e5.sent);
                              case 16:
                                e5.next = 10;
                                break;
                              case 18:
                                e5.next = 23;
                                break;
                              case 20:
                                e5.prev = 20, e5.t0 = e5.catch(8), r3.e(e5.t0);
                              case 23:
                                return e5.prev = 23, r3.f(), e5.finish(23);
                              case 26:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this,
                        [[8, 20, 23, 26]]
                      );
                    })
                  ), function() {
                    return o2.apply(this, arguments);
                  })
                },
                {
                  key: "getShareStats",
                  value: (a2 = (0, t2.A)(
                    c().mark(function e4() {
                      var t3, r3, a3, n2, s2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (!this.local) {
                                  e5.next = 6;
                                  break;
                                }
                                return e5.next = 3, se.roomClient.getShareRemoteStats();
                              case 3:
                                return e5.abrupt("return", e5.sent);
                              case 6:
                                t3 = (0, q.A)(this.streams.entries()), r3 = oe(t3), e5.prev = 8, r3.s();
                              case 10:
                                if ((a3 = r3.n()).done) {
                                  e5.next = 18;
                                  break;
                                }
                                if (n2 = (0, re.A)(a3.value, 2), s2 = n2[0], "share" != n2[1].kind) {
                                  e5.next = 16;
                                  break;
                                }
                                return e5.next = 15, se.roomClient.getConsumerRemoteStats(s2);
                              case 15:
                                return e5.abrupt("return", e5.sent);
                              case 16:
                                e5.next = 10;
                                break;
                              case 18:
                                e5.next = 23;
                                break;
                              case 20:
                                e5.prev = 20, e5.t0 = e5.catch(8), r3.e(e5.t0);
                              case 23:
                                return e5.prev = 23, r3.f(), e5.finish(23);
                              case 26:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this,
                        [[8, 20, 23, 26]]
                      );
                    })
                  ), function() {
                    return a2.apply(this, arguments);
                  })
                },
                {
                  key: "getShareAudioStats",
                  value: (r2 = (0, t2.A)(
                    c().mark(function e4() {
                      var t3, r3, a3, n2, s2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (!this.local) {
                                  e5.next = 6;
                                  break;
                                }
                                return e5.next = 3, se.roomClient.getShareAudioRemoteStats();
                              case 3:
                                return e5.abrupt("return", e5.sent);
                              case 6:
                                t3 = (0, q.A)(this.streams.entries()), r3 = oe(t3), e5.prev = 8, r3.s();
                              case 10:
                                if ((a3 = r3.n()).done) {
                                  e5.next = 18;
                                  break;
                                }
                                if (n2 = (0, re.A)(a3.value, 2), s2 = n2[0], "shareAudio" != n2[1].kind) {
                                  e5.next = 16;
                                  break;
                                }
                                return e5.next = 15, se.roomClient.getConsumerRemoteStats(s2);
                              case 15:
                                return e5.abrupt("return", e5.sent);
                              case 16:
                                e5.next = 10;
                                break;
                              case 18:
                                e5.next = 23;
                                break;
                              case 20:
                                e5.prev = 20, e5.t0 = e5.catch(8), r3.e(e5.t0);
                              case 23:
                                return e5.prev = 23, r3.f(), e5.finish(23);
                              case 26:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this,
                        [[8, 20, 23, 26]]
                      );
                    })
                  ), function() {
                    return r2.apply(this, arguments);
                  })
                },
                {
                  key: "getAudioStats",
                  value: (e3 = (0, t2.A)(
                    c().mark(function e4() {
                      var t3, r3, a3, n2, s2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (this.micOn) {
                                  e5.next = 2;
                                  break;
                                }
                                return e5.abrupt("return", []);
                              case 2:
                                if (!this.local) {
                                  e5.next = 8;
                                  break;
                                }
                                return e5.next = 5, se.roomClient.getAudioRemoteStats();
                              case 5:
                                return e5.abrupt("return", e5.sent);
                              case 8:
                                t3 = (0, q.A)(this.streams.entries()), r3 = oe(t3), e5.prev = 10, r3.s();
                              case 12:
                                if ((a3 = r3.n()).done) {
                                  e5.next = 20;
                                  break;
                                }
                                if (n2 = (0, re.A)(a3.value, 2), s2 = n2[0], "audio" != n2[1].kind) {
                                  e5.next = 18;
                                  break;
                                }
                                return e5.next = 17, se.roomClient.getConsumerRemoteStats(s2);
                              case 17:
                                return e5.abrupt("return", e5.sent);
                              case 18:
                                e5.next = 12;
                                break;
                              case 20:
                                e5.next = 25;
                                break;
                              case 22:
                                e5.prev = 22, e5.t0 = e5.catch(10), r3.e(e5.t0);
                              case 25:
                                return e5.prev = 25, r3.f(), e5.finish(25);
                              case 28:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this,
                        [[10, 22, 25, 28]]
                      );
                    })
                  ), function() {
                    return e3.apply(this, arguments);
                  })
                },
                {
                  key: "consumeMicStreams",
                  value: function() {
                    se.roomClient.consumeMicStreams(this.id);
                  }
                },
                {
                  key: "consumeWebcamStreams",
                  value: function() {
                    se.roomClient.consumeWebcamStreams(this.id);
                  }
                },
                {
                  key: "stopConsumingWebcamStreams",
                  value: function() {
                    se.roomClient.stopConsumingWebcamStreams(this.id);
                  }
                },
                {
                  key: "stopConsumingMicStreams",
                  value: function() {
                    se.roomClient.stopConsumingMicStreams(this.id);
                  }
                },
                {
                  key: "on",
                  value: function(e4, t3) {
                    switch (e4) {
                      case de:
                      case le:
                      case pe:
                      case ue:
                        this.eventEmitter.on(e4, t3);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                },
                {
                  key: "off",
                  value: function(e4, t3) {
                    switch (e4) {
                      case de:
                      case le:
                      case pe:
                      case ue:
                        this.eventEmitter.off(e4, t3);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                }
              ]
            );
            var e3, r2, a2, o2, d2;
          }();
          function me(t3, r2) {
            if (r2 && ("object" == (0, e2.A)(r2) || "function" == typeof r2))
              return r2;
            if (void 0 !== r2)
              throw new TypeError(
                "Derived constructors may only return object or undefined"
              );
            return function(e3) {
              if (void 0 === e3)
                throw new ReferenceError(
                  "this hasn't been initialised - super() hasn't been called"
                );
              return e3;
            }(t3);
          }
          function fe(e3) {
            return fe = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            }, fe(e3);
          }
          function ge(e3, t3) {
            return ge = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e4, t4) {
              return e4.__proto__ = t4, e4;
            }, ge(e3, t3);
          }
          function _e(e3, t3) {
            if ("function" != typeof t3 && null !== t3)
              throw new TypeError(
                "Super expression must either be null or a function"
              );
            e3.prototype = Object.create(t3 && t3.prototype, {
              constructor: { value: e3, writable: true, configurable: true }
            }), Object.defineProperty(e3, "prototype", { writable: false }), t3 && ge(e3, t3);
          }
          var ve = {
            CHARACTER_SPEAKING: "CHARACTER_SPEAKING",
            CHARACTER_THINKING: "CHARACTER_THINKING",
            CHARACTER_LISTENING: "CHARACTER_LISTENING"
          };
          function be(e3, t3, r2) {
            return t3 = fe(t3), me(
              e3,
              ye() ? Reflect.construct(t3, r2 || [], fe(e3).constructor) : t3.apply(e3, r2)
            );
          }
          function ye() {
            try {
              var e3 = !Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {
                })
              );
            } catch (e4) {
            }
            return (ye = function() {
              return !!e3;
            })();
          }
          function we(e3, t3, r2) {
            Se(e3, t3), t3.set(e3, r2);
          }
          function Se(e3, t3) {
            if (t3.has(e3))
              throw new TypeError(
                "Cannot initialize the same private elements twice on an object"
              );
          }
          function Re(e3, t3) {
            return e3.get(ke(e3, t3));
          }
          function Ee(e3, t3, r2) {
            return e3.set(ke(e3, t3), r2), r2;
          }
          function ke(e3, t3, r2) {
            if ("function" == typeof e3 ? e3 === t3 : e3.has(t3))
              return arguments.length < 3 ? t3 : r2;
            throw new TypeError("Private element is not present on this object");
          }
          var Te = "stream-enabled", Ce = "stream-disabled", Pe = "character-joined", Oe = "character-left", De = "media-status-changed", xe = "video-quality-changed", Ie = "character-state-changed", Me = "character-message", Ae = /* @__PURE__ */ new WeakMap(), Le = /* @__PURE__ */ new WeakMap(), Ne = /* @__PURE__ */ new WeakMap(), je = /* @__PURE__ */ new WeakMap(), Be = /* @__PURE__ */ new WeakMap(), Fe = /* @__PURE__ */ new WeakMap(), Ue = /* @__PURE__ */ new WeakSet(), We = function(e3) {
            function r2(e4) {
              var a3, s2, o3;
              return (0, n.A)(this, r2), a3 = be(this, r2, [
                { id: e4.id, displayName: e4.displayName, mode: "CONFERENCE" }
              ]), Se(s2 = a3, o3 = Ue), o3.add(s2), we(a3, Ae, void 0), we(a3, Le, void 0), we(a3, Ne, void 0), we(a3, je, void 0), we(a3, Be, void 0), we(a3, Fe, void 0), (0, i.A)(
                a3,
                "captureImage",
                (0, t2.A)(
                  c().mark(function e5() {
                    var t3, r3 = arguments;
                    return c().wrap(function(e6) {
                      for (; ; )
                        switch (e6.prev = e6.next) {
                          case 0:
                            throw (t3 = r3.length > 0 && void 0 !== r3[0] ? r3[0] : {}).height, t3.width, new Error(
                              "captureImage method is not supported on character"
                            );
                          case 2:
                          case "end":
                            return e6.stop();
                        }
                    }, e5);
                  })
                )
              ), Ee(je, a3, e4.interactionId || null), a3.id = e4.id || null, Ee(Ae, a3, e4.characterRole), Ee(Le, a3, e4.characterMode), Ee(Ne, a3, e4.knowledgeBases || []), a3.displayName = e4.displayName, Ee(Be, a3, e4.state || ve.CHARACTER_LISTENING), Ee(Fe, a3, e4.roomClient), a3;
            }
            return _e(r2, e3), (0, s.A)(r2, [
              {
                key: "join",
                value: (u2 = (0, t2.A)(
                  c().mark(function e4() {
                    var t3;
                    return c().wrap(
                      function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              return e5.next = 2, Re(Fe, this).joinCharacter({
                                interactionId: Re(je, this),
                                characterId: this.id,
                                characterRole: Re(Ae, this),
                                displayName: this.displayName,
                                characterMode: Re(Le, this),
                                knowledgeBases: Re(Ne, this)
                              });
                            case 2:
                              (t3 = e5.sent) && (this.id = t3.characterId, this.displayName = t3.displayName, Ee(Le, this, t3.characterMode), Ee(Ae, this, t3.characterRole), Ee(je, this, t3.interactionId), Ee(Ne, this, t3.knowledgeBases), Re(Fe, this)._eventEmitter.emit(
                                "INIT_CHARACTER",
                                this
                              ));
                            case 4:
                            case "end":
                              return e5.stop();
                          }
                      },
                      e4,
                      this
                    );
                  })
                ), function() {
                  return u2.apply(this, arguments);
                })
              },
              {
                key: "leave",
                value: (p2 = (0, t2.A)(
                  c().mark(function e4() {
                    return c().wrap(
                      function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              return e5.next = 2, Re(Fe, this).removeCharacter();
                            case 2:
                            case "end":
                              return e5.stop();
                          }
                      },
                      e4,
                      this
                    );
                  })
                ), function() {
                  return p2.apply(this, arguments);
                })
              },
              {
                key: "remove",
                value: (l2 = (0, t2.A)(
                  c().mark(function e4() {
                    return c().wrap(function(e5) {
                      for (; ; )
                        switch (e5.prev = e5.next) {
                          case 0:
                            throw new Error(
                              "remove method is not supported on character"
                            );
                          case 1:
                          case "end":
                            return e5.stop();
                        }
                    }, e4);
                  })
                ), function() {
                  return l2.apply(this, arguments);
                })
              },
              {
                key: "sendMessage",
                value: (d2 = (0, t2.A)(
                  c().mark(function e4(t3) {
                    return c().wrap(
                      function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              return e5.next = 2, Re(Fe, this).sendCharacterMessage({
                                interactionId: Re(je, this),
                                text: t3
                              });
                            case 2:
                            case "end":
                              return e5.stop();
                          }
                      },
                      e4,
                      this
                    );
                  })
                ), function(e4) {
                  return d2.apply(this, arguments);
                })
              },
              {
                key: "handleCharacterStateChanged",
                value: function(e4) {
                  Object.keys(ve).includes(e4.status) && (ke(Ue, this, qe).call(this, e4.status), this.eventEmitter.emit(Ie, e4));
                }
              },
              {
                key: "handleCharacterMessage",
                value: function(e4) {
                  this.eventEmitter.emit(Me, e4);
                }
              },
              {
                key: "interrupt",
                value: (o2 = (0, t2.A)(
                  c().mark(function e4() {
                    return c().wrap(
                      function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              return e5.next = 2, Re(Fe, this).interruptCharacter({
                                interactionId: Re(je, this)
                              });
                            case 2:
                            case "end":
                              return e5.stop();
                          }
                      },
                      e4,
                      this
                    );
                  })
                ), function() {
                  return o2.apply(this, arguments);
                })
              },
              {
                key: "enableMic",
                value: function() {
                  Re(Fe, this).enablePeerMic(this.id);
                }
              },
              {
                key: "disableMic",
                value: function() {
                  Re(Fe, this).disablePeerMic(this.id);
                }
              },
              {
                key: "enableWebcam",
                value: function() {
                  Re(Fe, this).enablePeerWebcam(this.id);
                }
              },
              {
                key: "disableWebcam",
                value: function() {
                  Re(Fe, this).disablePeerWebcam(this.id);
                }
              },
              {
                key: "updateStream",
                value: function(e4) {
                  throw new Error(
                    "updateStream method is not supported on character"
                  );
                }
              },
              {
                key: "switchTo",
                value: (a2 = (0, t2.A)(
                  c().mark(function e4(t3) {
                    return c().wrap(function(e5) {
                      for (; ; )
                        switch (e5.prev = e5.next) {
                          case 0:
                            throw t3.meetingId, t3.payload, t3.token, new Error(
                              "switchTo method is not supported on character"
                            );
                          case 2:
                          case "end":
                            return e5.stop();
                        }
                    }, e4);
                  })
                ), function(e4) {
                  return a2.apply(this, arguments);
                })
              },
              {
                key: "on",
                value: function(e4, t3) {
                  switch (e4) {
                    case Te:
                    case Ce:
                    case Pe:
                    case Oe:
                    case De:
                    case xe:
                    case Ie:
                    case Me:
                      this.eventEmitter.on(e4, t3);
                      break;
                    default:
                      throw new Error("Invalid event type");
                  }
                }
              },
              {
                key: "off",
                value: function(e4, t3) {
                  switch (e4) {
                    case Te:
                    case Ce:
                    case Pe:
                    case Oe:
                    case De:
                    case xe:
                    case Ie:
                    case Me:
                      this.eventEmitter.off(e4, t3);
                      break;
                    default:
                      throw new Error("Invalid event type");
                  }
                }
              },
              {
                key: "state",
                get: function() {
                  return Re(Be, this);
                }
              },
              {
                key: "knowledgeBases",
                get: function() {
                  return Re(Ne, this);
                }
              },
              {
                key: "characterMode",
                get: function() {
                  return Re(Le, this);
                }
              },
              {
                key: "characterRole",
                get: function() {
                  return Re(Ae, this);
                }
              },
              {
                key: "interactionId",
                get: function() {
                  return Re(je, this);
                }
              }
            ]);
            var a2, o2, d2, l2, p2, u2;
          }(he);
          function qe(e3) {
            Ee(Be, this, e3);
          }
          function He(e3, t3, r2) {
            (function(e4, t4) {
              if (t4.has(e4))
                throw new TypeError(
                  "Cannot initialize the same private elements twice on an object"
                );
            })(e3, t3), t3.set(e3, r2);
          }
          function Ve(e3, t3, r2) {
            if ("function" == typeof e3 ? e3 === t3 : e3.has(t3))
              return arguments.length < 3 ? t3 : r2;
            throw new TypeError("Private element is not present on this object");
          }
          var Ge = /* @__PURE__ */ new WeakMap(), ze = function() {
            return (0, s.A)(
              function e4(t3, r2) {
                var a2, s2, i2, o2 = t3.id, c2 = t3.displayName;
                (0, n.A)(this, e4), He(this, Ge, void 0), this.id = o2, this.displayName = c2, s2 = this, i2 = r2, (a2 = Ge).set(Ve(a2, s2), i2);
              },
              [
                {
                  key: "switchTo",
                  value: (e3 = (0, t2.A)(
                    c().mark(function e4(t3) {
                      var r2, a2, n2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return r2 = t3.meetingId, a2 = t3.payload, n2 = t3.token, e5.next = 3, se.roomClient.connectionSwitchPeerRoom({
                                  roomId: r2,
                                  connectionRoomId: (s2 = Ge, i2 = this, s2.get(Ve(s2, i2))),
                                  payload: a2,
                                  peerId: this.id,
                                  token: n2
                                });
                              case 3:
                              case "end":
                                return e5.stop();
                            }
                          var s2, i2;
                        },
                        e4,
                        this
                      );
                    })
                  ), function(t3) {
                    return e3.apply(this, arguments);
                  })
                }
              ]
            );
            var e3;
          }(), $e = "participant-joined", Ke = "participant-left", Je = "chat-message", Qe = function() {
            return (0, s.A)(
              function e4(t3, r2) {
                var a2 = this;
                (0, n.A)(this, e4), this.eventEmitter = new te.EventEmitter(), this.id = t3, this.participants = /* @__PURE__ */ new Map(), r2.forEach(function(e5) {
                  a2.participants.set(e5.id, new ze(e5, a2.id));
                });
              },
              [
                {
                  key: "participantJoin",
                  value: function(e4) {
                    var t3 = new ze(e4, this.id);
                    this.participants.set(e4.id, t3), this.eventEmitter.emit($e, t3);
                  }
                },
                {
                  key: "participantLeft",
                  value: function(e4) {
                    this.participants.delete(e4), this.eventEmitter.emit(Ke, e4);
                  }
                },
                {
                  key: "sendChatMessage",
                  value: function(e4) {
                    se.roomClient.connectionSendChatMessage({
                      roomId: this.id,
                      message: e4
                    });
                  }
                },
                {
                  key: "sendChatMessageEvent",
                  value: function(e4) {
                    var t3 = e4.participantId, r2 = e4.message;
                    this.eventEmitter.emit(Je, {
                      participantId: t3,
                      message: r2
                    });
                  }
                },
                {
                  key: "end",
                  value: (e3 = (0, t2.A)(
                    c().mark(function e4() {
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return e5.next = 2, se.roomClient.connectionEndMeeting({
                                  roomId: this.id
                                });
                              case 2:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function() {
                    return e3.apply(this, arguments);
                  })
                },
                {
                  key: "on",
                  value: function(e4, t3) {
                    switch (e4) {
                      case $e:
                      case Ke:
                      case Je:
                        this.eventEmitter.on(e4, t3);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                },
                {
                  key: "off",
                  value: function(e4, t3) {
                    switch (e4) {
                      case $e:
                      case Ke:
                      case Je:
                        this.eventEmitter.off(e4, t3);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                }
              ]
            );
            var e3;
          }(), Ye = function() {
            return (0, s.A)(
              function e3(t3) {
                var r2 = t3.roomId, a2 = t3.peers, s2 = t3.payload;
                (0, n.A)(this, e3), this.id = r2, this.payload = s2, this.meeting = new Qe(r2, a2);
              },
              [
                {
                  key: "close",
                  value: function() {
                    se.roomClient.closeConnection(this.id);
                  }
                }
              ]
            );
          }();
          function Xe(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var a2 = Object.getOwnPropertySymbols(e3);
              t3 && (a2 = a2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, a2);
            }
            return r2;
          }
          function Ze(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? Xe(Object(r2), true).forEach(function(t4) {
                (0, i.A)(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : Xe(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          function et(e3, t3) {
            if (t3.has(e3))
              throw new TypeError(
                "Cannot initialize the same private elements twice on an object"
              );
          }
          function tt(e3, t3) {
            return e3.get(rt(e3, t3));
          }
          function rt(e3, t3, r2) {
            if ("function" == typeof e3 ? e3 === t3 : e3.has(t3))
              return arguments.length < 3 ? t3 : r2;
            throw new TypeError("Private element is not present on this object");
          }
          var at = "error", nt = "meeting-joined", st = "meeting-left", it = "participant-mode-changed", ot = "participant-joined", ct = "participant-left", dt = "speaker-changed", lt = "presenter-changed", pt = "main-participant-changed", ut = "chat-message", ht = "entry-requested", mt = "entry-responded", ft = "recording-state-changed", gt = "recording-started", _t = "recording-stopped", vt = "livestream-state-changed", bt = "livestream-started", yt = "livestream-stopped", wt = "hls-state-changed", St = "hls-started", Rt = "hls-stopped", Et = "whiteboard-started", kt = "whiteboard-stopped", Tt = "video-state-changed", Ct = "video-seeked", Pt = "mic-requested", Ot = "webcam-requested", Dt = "stream-enabled", xt = "stream-disabled", It = "pin-state-changed", Mt = "connection-open", At = "connection-close", Lt = "switch-meeting", Nt = "meeting-state-changed", jt = "transcription-state-changed", Bt = "transcription-text", Ft = "character-joined", Ut = "character-left", Wt = /* @__PURE__ */ new WeakMap(), qt = /* @__PURE__ */ new WeakSet(), Ht = function() {
            return (0, s.A)(
              function r3(a3, s2, o3) {
                var d3, l3, p3, u3, h3, m2 = this;
                (0, n.A)(this, r3), et(d3 = this, l3 = qt), l3.add(d3), function(e3, t3, r4) {
                  et(e3, t3), t3.set(e3, r4);
                }(this, Wt, void 0), (0, i.A)(this, "pubSub", {
                  publish: (h3 = (0, t2.A)(
                    c().mark(function t3(r4, a4, n2, s3) {
                      return c().wrap(function(t4) {
                        for (; ; )
                          switch (t4.prev = t4.next) {
                            case 0:
                              if (null == s3) {
                                t4.next = 3;
                                break;
                              }
                              if ("object" == (0, e2.A)(s3)) {
                                t4.next = 3;
                                break;
                              }
                              throw new Error(
                                '"payload" can only be object.'
                              );
                            case 3:
                              return t4.next = 5, m2.roomClient.pubsubPublish(r4, a4, n2, s3);
                            case 5:
                            case "end":
                              return t4.stop();
                          }
                      }, t3);
                    })
                  ), function(e3, t3, r4, a4) {
                    return h3.apply(this, arguments);
                  }),
                  subscribe: (u3 = (0, t2.A)(
                    c().mark(function e3(t3, r4) {
                      var a4;
                      return c().wrap(function(e4) {
                        for (; ; )
                          switch (e4.prev = e4.next) {
                            case 0:
                              if (!tt(Wt, m2).listeners(t3).includes(r4)) {
                                e4.next = 2;
                                break;
                              }
                              return e4.abrupt("return");
                            case 2:
                              return e4.next = 4, m2.roomClient.pubsubSubscribe(t3);
                            case 4:
                              return a4 = e4.sent, tt(Wt, m2).on(t3, r4), e4.abrupt("return", a4);
                            case 7:
                            case "end":
                              return e4.stop();
                          }
                      }, e3);
                    })
                  ), function(e3, t3) {
                    return u3.apply(this, arguments);
                  }),
                  unsubscribe: (p3 = (0, t2.A)(
                    c().mark(function e3(t3, r4) {
                      return c().wrap(function(e4) {
                        for (; ; )
                          switch (e4.prev = e4.next) {
                            case 0:
                              if (tt(Wt, m2).off(t3, r4), 0 != tt(Wt, m2).listeners(t3).length) {
                                e4.next = 4;
                                break;
                              }
                              return e4.next = 4, m2.roomClient.pubsubUnsubscribe(t3);
                            case 4:
                            case "end":
                              return e4.stop();
                          }
                      }, e3);
                    })
                  ), function(e3, t3) {
                    return p3.apply(this, arguments);
                  })
                }), (0, i.A)(
                  this,
                  "uploadBase64File",
                  function() {
                    var e3 = (0, t2.A)(
                      c().mark(function e4(t3) {
                        var r4, a4, n2, s3, i2, o4, d4;
                        return c().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (r4 = t3.base64Data, a4 = t3.token, n2 = t3.fileName, e5.prev = 1, r4 && a4 && n2) {
                                    e5.next = 4;
                                    break;
                                  }
                                  throw new Error(
                                    "please provide base64Data, token and fileName"
                                  );
                                case 4:
                                  return s3 = "https://".concat(
                                    m2.baseUrl,
                                    "/base64-upload?roomId="
                                  ).concat(m2.id), i2 = { fileName: n2, base64Data: r4 }, e5.next = 8, fetch(s3, {
                                    method: "POST",
                                    body: JSON.stringify(i2),
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization: a4
                                    }
                                  });
                                case 8:
                                  return o4 = e5.sent, e5.next = 11, o4.json();
                                case 11:
                                  return d4 = e5.sent, e5.abrupt("return", d4.url);
                                case 15:
                                  e5.prev = 15, e5.t0 = e5.catch(1), console.error(
                                    "Error while Uploading Base64 File::",
                                    e5.t0
                                  ), m2.roomClient._videosdkLogs && m2.roomClient._videosdkLogs.pushLogs({
                                    logText: "Error while Uploading Base64 File",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 19:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          null,
                          [[1, 15]]
                        );
                      })
                    );
                    return function(t3) {
                      return e3.apply(this, arguments);
                    };
                  }()
                ), (0, i.A)(
                  this,
                  "fetchBase64File",
                  function() {
                    var e3 = (0, t2.A)(
                      c().mark(function e4(t3) {
                        var r4, a4, n2, s3, i2;
                        return c().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (r4 = t3.url, a4 = t3.token, e5.prev = 1, r4 && a4) {
                                    e5.next = 4;
                                    break;
                                  }
                                  throw new Error(
                                    "please provide url and token"
                                  );
                                case 4:
                                  return e5.next = 6, fetch(r4, {
                                    headers: { Authorization: a4 }
                                  });
                                case 6:
                                  return n2 = e5.sent, e5.next = 9, n2.arrayBuffer();
                                case 9:
                                  return s3 = e5.sent, i2 = window.btoa(
                                    new Uint8Array(s3).reduce(
                                      function(e6, t4) {
                                        return e6 + String.fromCharCode(t4);
                                      },
                                      ""
                                    )
                                  ), e5.abrupt("return", i2);
                                case 14:
                                  e5.prev = 14, e5.t0 = e5.catch(1), console.error(
                                    "Error while fetching Base64 File::",
                                    e5.t0
                                  ), m2.roomClient._videosdkLogs && m2.roomClient._videosdkLogs.pushLogs({
                                    logText: "Error while fetching Base64 File",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 18:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          null,
                          [[1, 14]]
                        );
                      })
                    );
                    return function(t3) {
                      return e3.apply(this, arguments);
                    };
                  }()
                ), this.id = a3, this.roomClient = o3, this.activeSpeakerId = null, this.activePresenterId = null, this.mainParticipantId = null, this.connections = /* @__PURE__ */ new Map(), this.localParticipant = s2, this.participants = /* @__PURE__ */ new Map(), this.characters = /* @__PURE__ */ new Map(), this.baseUrl = null, this.livestreamState = "LIVESTREAM_STOPPED", this.recordingState = "RECORDING_STOPPED", this.hlsState = "HLS_STOPPED", this.transcriptionState = "TRANSCRIPTION_STOPPED", this.hlsUrls = {
                  downstreamUrl: null,
                  playbackHlsUrl: null,
                  livestreamUrl: null
                }, this.messages = [], this.eventEmitter = new te.EventEmitter(), function(e3, t3, r4) {
                  e3.set(rt(e3, t3), r4);
                }(Wt, this, new te.EventEmitter()), this.eventEmitter.setMaxListeners(9999), tt(Wt, this).setMaxListeners(9999), this.roomClient.on("ERROR", function(e3) {
                  return m2.handleError(e3);
                }), this.roomClient.on("ADD_PEER", function(e3) {
                  return m2.handlePeerAdd(e3);
                }), this.roomClient.on("REMOVE_PEER", function(e3) {
                  return m2.handlePeerRemove(e3);
                }), this.roomClient.on("ADD_PRODUCER", function(e3) {
                  return m2.handleProducerAdd(e3);
                }), this.roomClient.on("UPDATE_PRODUCER", function(e3) {
                  return m2.handleUpdateProducer(e3);
                }), this.roomClient.on("REMOVE_PRODUCER", function(e3) {
                  return m2.handleProducerRemove(e3);
                }), this.roomClient.on("ADD_CONSUMER", function(e3) {
                  return m2.handleConsumerAdd(e3);
                }), this.roomClient.on("REMOVE_CONSUMER", function(e3) {
                  return m2.handleConsumerRemove(e3);
                }), this.roomClient.on(
                  "PARTICIPANT_MEDIA_STATE_CHANGED",
                  function(e3) {
                    return m2.handleParticipantMediaStateChanged(e3);
                  }
                ), this.roomClient.on("CHAT_MESSAGE", function(e3) {
                  return m2.handleNewChatMessage(e3);
                }), this.roomClient.on("SET_ROOM_ACTIVE_SPEAKER", function(e3) {
                  return m2.handleSpeakerChange(e3);
                }), this.roomClient.on("ENTRY_REQUESTED", function(e3) {
                  return m2.handleEntryRequested(e3);
                }), this.roomClient.on("ENTRY_RESPONDED", function(e3) {
                  return m2.handleEntryResponded(e3);
                }), this.roomClient.on("MEETING_JOINED", function(e3) {
                  return m2.handleMeetingJoined(e3);
                }), this.roomClient.on("MEETING_LEFT", function(e3) {
                  return m2.handleMeetingLeft(e3);
                }), this.roomClient.on("RECORDING_STATE_CHANGED", function(e3) {
                  m2.handleRecordingStateChanged(e3);
                }), this.roomClient.on("RECORDING_STARTED", function(e3) {
                  return m2.handleRecordingStarted(e3);
                }), this.roomClient.on("RECORDING_STOPPED", function(e3) {
                  return m2.handleRecordingStopped(e3);
                }), this.roomClient.on("LIVESTREAM_STATE_CHANGED", function(e3) {
                  m2.handleLivestreamStateChanged(e3);
                }), this.roomClient.on("LIVESTREAM_STARTED", function(e3) {
                  return m2.handleLivestreamStarted(e3);
                }), this.roomClient.on("LIVESTREAM_STOPPED", function(e3) {
                  return m2.handleLivestreamStopped(e3);
                }), this.roomClient.on("HLS_STATE_CHANGED", function(e3) {
                  m2.handleHlsStateChanged(e3);
                }), this.roomClient.on("HLS_STARTED", function(e3) {
                  m2.handleHlsStarted(e3);
                }), this.roomClient.on("HLS_STOPPED", function(e3) {
                  m2.handleHlsStopped(e3);
                }), this.roomClient.on(
                  "TRANSCRIPTION_STATE_CHANGED",
                  function(e3) {
                    m2.handleTranscriptionStateChanged(e3);
                  }
                ), this.roomClient.on("TRANSCRIPTION_TEXT", function(e3) {
                  m2.handleTranscriptionText(e3);
                }), this.roomClient.on("WHITEBOARD_STARTED", function(e3) {
                  return m2.handleWhiteboardStarted(e3);
                }), this.roomClient.on("WHITEBOARD_STOPPED", function(e3) {
                  return m2.handleWhiteboardStopped(e3);
                }), this.roomClient.on("VIDEO_STATE_CHANGED", function(e3) {
                  return m2.handleVideoStateChanged(e3);
                }), this.roomClient.on("VIDEO_SEEKED", function(e3) {
                  return m2.handleVideoSeeked(e3);
                }), this.roomClient.on("PIN_STATE_CHANGED", function(e3) {
                  m2.handlePinStateChanged(e3);
                }), this.roomClient.on("MIC_REQUESTED", function(e3) {
                  return m2.handleMicRequested(e3);
                }), this.roomClient.on("WEBCAM_REQUESTED", function(e3) {
                  return m2.handleWebcamRequested(e3);
                }), this.roomClient.on("CONNECTION_OPEN", function(e3) {
                  return m2.handleConnectionOpen(e3);
                }), this.roomClient.on("CONNECTION_CLOSE", function(e3) {
                  return m2.handleConnectionClose(e3);
                }), this.roomClient.on(
                  "CONNECTION_PARTICIPANT_JOIN",
                  function(e3) {
                    return m2.handleConnectionParticipantJoin(e3);
                  }
                ), this.roomClient.on("SWITCH_ROOM", function(e3) {
                  return m2.handleSwitchMeeting(e3);
                }), this.roomClient.on("CONNECTION_CHAT_MESSAGE", function(e3) {
                  return m2.handleConnectionChatMessage(e3);
                }), this.roomClient.on(
                  "CONNECTION_PARTICIPANT_LEFT",
                  function(e3) {
                    m2.handleConnectionParticipantLeft(e3);
                  }
                ), this.roomClient.on("PUBSUB_MESSAGE", function(e3) {
                  return rt(qt, m2, Vt).call(m2, e3);
                }), this.roomClient.on("PEER_MODE_CHANGED", function(e3) {
                  return rt(qt, m2, Gt).call(m2, e3);
                }), this.updateMainParticipant(this.localParticipant.id), this.roomClient.on("MEETING_STATE_CHANGED", function(e3) {
                  return m2.handleMeetingStateChanged(e3);
                }), this.roomClient.on("VIDEO_QUALITY_CHANGED", function(e3) {
                  return m2.handleVideoQualityChanged(e3);
                }), this.roomClient.on("ADD_CHARACTER", function(e3) {
                  return m2.handleAddCharacter(e3);
                }), this.roomClient.on("INIT_CHARACTER", function(e3) {
                  return m2.handleInitCharacter(e3);
                }), this.roomClient.on("REMOVE_CHARACTER", function(e3) {
                  return m2.handleRemoveCharacter(e3);
                }), this.roomClient.on("CHARACTER_STATE_CHANGED", function(e3) {
                  return m2.handleCharacterStateChanged(e3);
                }), this.roomClient.on("CHARACTER_MESSAGE", function(e3) {
                  return m2.handleCharacterMessage(e3);
                });
              },
              [
                {
                  key: "handleError",
                  value: function(e3) {
                    this.eventEmitter.listenerCount(at) > 0 && this.eventEmitter.emit(at, e3);
                  }
                },
                {
                  key: "join",
                  value: function() {
                    this.roomClient.join();
                  }
                },
                {
                  key: "changeMode",
                  value: function(e3) {
                    this.roomClient.changeMode(e3);
                  }
                },
                {
                  key: "leave",
                  value: function() {
                    this.roomClient.close({ sendLeft: true });
                  }
                },
                {
                  key: "end",
                  value: function() {
                    this.roomClient.closeRoom();
                  }
                },
                {
                  key: "respondEntry",
                  value: function(e3, t3) {
                    this.roomClient.respondEntry(e3, t3);
                  }
                },
                {
                  key: "pinnedParticipants",
                  get: function() {
                    return this.roomClient._pinnedParticipants;
                  }
                },
                {
                  key: "muteMic",
                  value: function() {
                    this.roomClient.disableMic();
                  }
                },
                {
                  key: "unmuteMic",
                  value: function() {
                    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                    this.roomClient.enableMic(e3);
                  }
                },
                {
                  key: "publishAudio",
                  value: (h2 = (0, t2.A)(
                    c().mark(function e3() {
                      var t3, r3 = arguments;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return t3 = r3.length > 0 && void 0 !== r3[0] ? r3[0] : void 0, e4.next = 3, this.roomClient.enableMic(t3);
                              case 3:
                                return e4.abrupt("return");
                              case 4:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return h2.apply(this, arguments);
                  })
                },
                {
                  key: "unpublishAudio",
                  value: (u2 = (0, t2.A)(
                    c().mark(function e3() {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.next = 2, this.roomClient.disableMic();
                              case 2:
                                return e4.abrupt("return");
                              case 3:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return u2.apply(this, arguments);
                  })
                },
                {
                  key: "disableWebcam",
                  value: function() {
                    this.roomClient.disableWebcam();
                  }
                },
                {
                  key: "enableWebcam",
                  value: function() {
                    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                    this.roomClient.enableWebcam(e3);
                  }
                },
                {
                  key: "publishVideo",
                  value: (p2 = (0, t2.A)(
                    c().mark(function e3() {
                      var t3, r3 = arguments;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return t3 = r3.length > 0 && void 0 !== r3[0] ? r3[0] : void 0, this.roomClient.enableWebcam(t3), e4.abrupt("return");
                              case 3:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return p2.apply(this, arguments);
                  })
                },
                {
                  key: "unpublishVideo",
                  value: (l2 = (0, t2.A)(
                    c().mark(function e3() {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return this.roomClient.disableWebcam(), e4.abrupt("return");
                              case 2:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return l2.apply(this, arguments);
                  })
                },
                {
                  key: "disableScreenShare",
                  value: function() {
                    this.roomClient.disableShare();
                  }
                },
                {
                  key: "enableScreenShare",
                  value: function() {
                    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                    this.roomClient.enableShare(e3);
                  }
                },
                {
                  key: "pubblishScreenShare",
                  value: function() {
                    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                    this.roomClient.enableShare(e3);
                  }
                },
                {
                  key: "unpublishScreenShare",
                  value: function() {
                    this.roomClient.disableShare();
                  }
                },
                {
                  key: "sendChatMessage",
                  value: function(e3) {
                    this.roomClient.sendChatMessage(e3);
                    var t3 = {
                      text: e3,
                      timestamp: (/* @__PURE__ */ new Date()).getTime(),
                      senderId: this.localParticipant.id,
                      senderName: this.localParticipant.displayName
                    };
                    this.handleNewChatMessage(t3);
                  }
                },
                {
                  key: "startRecording",
                  value: function(e3, t3, r3, a3) {
                    this.roomClient.startRecording(e3, t3, r3, a3);
                  }
                },
                {
                  key: "stopRecording",
                  value: function() {
                    this.roomClient.stopRecording();
                  }
                },
                {
                  key: "startTranscription",
                  value: function(e3) {
                    this.roomClient.startTranscription(e3);
                  }
                },
                {
                  key: "stopTranscription",
                  value: function() {
                    this.roomClient.stopTranscription();
                  }
                },
                {
                  key: "startLivestream",
                  value: function(e3, t3) {
                    this.roomClient.startLivestream(e3, t3);
                  }
                },
                {
                  key: "stopLivestream",
                  value: function() {
                    this.roomClient.stopLivestream();
                  }
                },
                {
                  key: "startHls",
                  value: (d2 = (0, t2.A)(
                    c().mark(function e3(t3, r3) {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.next = 2, this.roomClient.startHls(t3, r3);
                              case 2:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function(e3, t3) {
                    return d2.apply(this, arguments);
                  })
                },
                {
                  key: "stopHls",
                  value: function() {
                    this.roomClient.stopHls();
                  }
                },
                {
                  key: "createCharacter",
                  value: function(e3) {
                    if (!e3.interactionId && !e3.id)
                      throw new Error("InteractionId or id is required");
                    return new We(
                      Ze(Ze({}, e3), {}, { roomClient: this.roomClient })
                    );
                  }
                },
                {
                  key: "getMics",
                  value: (o2 = (0, t2.A)(
                    c().mark(function e3() {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.next = 2, this.roomClient.getMics();
                              case 2:
                                return e4.abrupt("return", e4.sent);
                              case 3:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return o2.apply(this, arguments);
                  })
                },
                {
                  key: "getWebcams",
                  value: (a2 = (0, t2.A)(
                    c().mark(function e3() {
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.next = 2, this.roomClient.getWebcams();
                              case 2:
                                return e4.abrupt("return", e4.sent);
                              case 3:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return a2.apply(this, arguments);
                  })
                },
                {
                  key: "changeMic",
                  value: function(e3) {
                    this.roomClient.changeMic(e3);
                  }
                },
                {
                  key: "changeWebcam",
                  value: function(e3) {
                    this.roomClient.changeWebcam(e3);
                  }
                },
                {
                  key: "replaceWebcamStream",
                  value: function(e3) {
                    this.roomClient.replaceWebcamStream(e3);
                  }
                },
                {
                  key: "setWebcamQuality",
                  value: function(e3) {
                    this.roomClient.setWebcamQuality(e3);
                  }
                },
                {
                  key: "startWhiteboard",
                  value: function() {
                    this.roomClient.startWhiteboard();
                  }
                },
                {
                  key: "stopWhiteboard",
                  value: function() {
                    this.roomClient.stopWhiteboard();
                  }
                },
                {
                  key: "startVideo",
                  value: function(e3) {
                    var t3 = e3.link;
                    this.roomClient.startVideo({ link: t3 });
                  }
                },
                {
                  key: "stopVideo",
                  value: function() {
                    this.roomClient.stopVideo();
                  }
                },
                {
                  key: "resumeVideo",
                  value: function() {
                    this.roomClient.resumeVideo();
                  }
                },
                {
                  key: "refreshConnection",
                  value: function() {
                    this.roomClient.restartIce();
                  }
                },
                {
                  key: "pauseVideo",
                  value: function(e3) {
                    var t3 = e3.currentTime;
                    this.roomClient.pauseVideo(t3);
                  }
                },
                {
                  key: "seekVideo",
                  value: function(e3) {
                    var t3 = e3.currentTime;
                    this.roomClient.seekVideo(t3);
                  }
                },
                {
                  key: "handlePeerAdd",
                  value: function(e3) {
                    var t3 = e3.peer, r3 = new he(t3);
                    this.participants.set(r3.id, r3), this.eventEmitter.emit(ot, r3), 1 === this.participants.size && this.updateMainParticipant(r3.id);
                  }
                },
                {
                  key: "handlePeerRemove",
                  value: function(e3) {
                    var t3 = e3.peerId, r3 = this.participants.get(t3);
                    null != r3 && (this.participants.delete(t3), this.eventEmitter.emit(ct, r3), this.activePresenterId === r3.id && (this.activePresenterId = null, this.eventEmitter.emit(lt, this.activePresenterId)), this.mainParticipantId === r3.id && (this.participants.size > 0 ? this.updateMainParticipant(
                      this.participants.entries().next().value[1].id
                    ) : this.updateMainParticipant(
                      this.localParticipant.id
                    )));
                  }
                },
                {
                  key: "handleProducerAdd",
                  value: function(e3) {
                    var t3 = e3.producer, r3 = new ie(t3);
                    this.localParticipant.addStream(r3), "share" === r3.kind && (this.activePresenterId = this.localParticipant.id, this.eventEmitter.emit(lt, this.activePresenterId), this.updateMainParticipant(this.localParticipant.id));
                  }
                },
                {
                  key: "handleUpdateProducer",
                  value: function(e3) {
                    var t3 = e3.producer, r3 = new ie(t3);
                    this.localParticipant.updateStream(r3);
                  }
                },
                {
                  key: "handleProducerRemove",
                  value: function(e3) {
                    var t3 = e3.producerId, r3 = this.localParticipant.deleteStream(t3);
                    if (r3 && "share" === r3.kind) {
                      this.activePresenterId = null, this.eventEmitter.emit(lt, this.activePresenterId);
                      var a3 = this.participants.size > 0 ? this.participants.entries().next().value[1].id : null;
                      this.updateMainParticipant(
                        this.activeSpeakerId || a3 || this.localParticipant.id
                      );
                    }
                  }
                },
                {
                  key: "handleConsumerAdd",
                  value: function(e3) {
                    var t3 = e3.consumer, r3 = e3.peerId, a3 = this.participants.get(r3) || this.characters.get(r3);
                    if (a3) {
                      var n2 = new ie(t3);
                      a3.addStream(n2), this.eventEmitter.emit(Dt, n2), "share" === n2.kind && (this.activePresenterId = a3.id, this.eventEmitter.emit(lt, this.activePresenterId), this.updateMainParticipant(a3.id));
                    }
                  }
                },
                {
                  key: "handleConsumerRemove",
                  value: function(e3) {
                    var t3 = e3.consumerId, r3 = e3.peerId, a3 = this.participants.get(r3) || this.characters.get(r3);
                    if (null != a3 && a3) {
                      var n2 = a3.deleteStream(t3);
                      if (this.eventEmitter.emit(xt, n2), n2 && "share" === n2.kind) {
                        this.activePresenterId = null, this.eventEmitter.emit(lt, this.activePresenterId);
                        var s2 = this.participants.size > 0 ? this.participants.entries().next().value[1].id : null;
                        this.updateMainParticipant(
                          this.activeSpeakerId || s2 || this.localParticipant.id
                        );
                      }
                    }
                  }
                },
                {
                  key: "handleParticipantMediaStateChanged",
                  value: function(e3) {
                    var t3 = e3.peerId, r3 = e3.kind, a3 = e3.newState, n2 = this.participants.get(t3) || this.characters.get(t3);
                    this.localParticipant.id == t3 && (n2 = this.localParticipant), n2 && n2 && ("audio" == r3 ? n2.micOn = a3 : "video" == r3 && (n2.webcamOn = a3), n2.updateParticipantMediaState(r3, a3));
                  }
                },
                {
                  key: "handleSpeakerChange",
                  value: function(e3) {
                    var t3 = e3.peerId;
                    this.activeSpeakerId !== t3 && (this.activeSpeakerId = t3, this.eventEmitter.emit(dt, t3), t3 && t3 !== this.localParticipant.id && this.activePresenterId !== this.mainParticipantId && t3 !== this.mainParticipantId && this.updateMainParticipant(t3));
                  }
                },
                {
                  key: "handleNewChatMessage",
                  value: function(e3) {
                    var t3 = e3.senderId, r3 = { senderId: t3, text: e3.text, timestamp: e3.timestamp };
                    if (this.localParticipant.id === t3)
                      r3.senderName = this.localParticipant.displayName;
                    else {
                      var a3 = this.participants.get(t3);
                      a3 && (r3.senderName = a3.displayName);
                    }
                    this.messages.push(r3), this.eventEmitter.emit(ut, r3);
                  }
                },
                {
                  key: "updateMainParticipant",
                  value: function(e3) {
                    this.mainParticipantId = e3;
                    var t3 = null;
                    t3 = e3 === this.localParticipant.id ? this.localParticipant : this.participants.get(this.mainParticipantId), this.eventEmitter.emit(pt, t3);
                  }
                },
                {
                  key: "handleEntryRequested",
                  value: function(e3) {
                    var t3 = this, r3 = e3.id, a3 = e3.name;
                    this.eventEmitter.emit(ht, {
                      participantId: r3,
                      name: a3,
                      allow: function() {
                        t3.roomClient.respondEntry(r3, "allowed");
                      },
                      deny: function() {
                        t3.roomClient.respondEntry(r3, "denied");
                      }
                    });
                  }
                },
                {
                  key: "handleEntryResponded",
                  value: function(e3) {
                    var t3 = e3.id, r3 = e3.decision;
                    this.eventEmitter.emit(mt, t3, r3);
                  }
                },
                {
                  key: "handleMeetingJoined",
                  value: function(e3) {
                    var t3 = e3.peers, r3 = e3.poll, a3 = e3.messages, n2 = e3.baseUrl;
                    this.baseUrl = n2, a3.length > 0 && (this.messages = a3), this.eventEmitter.emit(nt, {
                      peers: t3,
                      poll: r3,
                      messages: a3
                    });
                  }
                },
                {
                  key: "handleMeetingLeft",
                  value: function(e3) {
                    this.eventEmitter.emit(st, e3);
                  }
                },
                {
                  key: "handleRecordingStateChanged",
                  value: function(e3) {
                    this.recordingState = e3.status, this.eventEmitter.emit(ft, e3);
                  }
                },
                {
                  key: "handleLivestreamStateChanged",
                  value: function(e3) {
                    this.livestreamState = e3.status, this.eventEmitter.emit(vt, e3);
                  }
                },
                {
                  key: "handleHlsStateChanged",
                  value: function(e3) {
                    this.hlsState = e3.status, "HLS_PLAYABLE" == e3.status ? this.hlsUrls = {
                      downstreamUrl: e3.downstreamUrl,
                      playbackHlsUrl: e3.playbackHlsUrl,
                      livestreamUrl: e3.livestreamUrl
                    } : "HLS_STOPPED" == e3.status && (this.hlsUrls = {
                      downstreamUrl: null,
                      playbackHlsUrl: null,
                      livestreamUrl: null
                    }), this.eventEmitter.emit(wt, e3);
                  }
                },
                {
                  key: "handleTranscriptionStateChanged",
                  value: function(e3) {
                    this.transcriptionState = e3.status, this.eventEmitter.emit(jt, e3);
                  }
                },
                {
                  key: "handleTranscriptionText",
                  value: function(e3) {
                    this.eventEmitter.emit(Bt, e3);
                  }
                },
                {
                  key: "handleRecordingStarted",
                  value: function() {
                    this.eventEmitter.emit(gt);
                  }
                },
                {
                  key: "handleRecordingStopped",
                  value: function() {
                    this.eventEmitter.emit(_t);
                  }
                },
                {
                  key: "handleLivestreamStarted",
                  value: function() {
                    this.eventEmitter.emit(bt);
                  }
                },
                {
                  key: "handleLivestreamStopped",
                  value: function() {
                    this.eventEmitter.emit(yt);
                  }
                },
                {
                  key: "handleHlsStarted",
                  value: function(e3) {
                    this.eventEmitter.emit(St, e3);
                  }
                },
                {
                  key: "handleHlsStopped",
                  value: function() {
                    this.eventEmitter.emit(Rt);
                  }
                },
                {
                  key: "handleWhiteboardStarted",
                  value: function(e3) {
                    var t3 = e3.state;
                    this.eventEmitter.emit(Et, t3);
                  }
                },
                {
                  key: "handleWhiteboardStopped",
                  value: function(e3) {
                    !function(e4) {
                      if (null == e4)
                        throw new TypeError("Cannot destructure " + e4);
                    }(e3), this.eventEmitter.emit(kt);
                  }
                },
                {
                  key: "handleAddCharacter",
                  value: function(e3) {
                    var t3, r3 = e3.id, a3 = null !== (t3 = this.characters.get(r3)) && void 0 !== t3 ? t3 : new We(
                      Ze(
                        Ze({}, e3),
                        {},
                        {
                          state: ve.CHARACTER_LISTENING,
                          roomClient: this.roomClient
                        }
                      )
                    );
                    this.characters.set(r3, a3), this.eventEmitter.emit(Ft, a3), a3.eventEmitter.emit(Ft);
                  }
                },
                {
                  key: "handleInitCharacter",
                  value: function(e3) {
                    this.characters.set(e3.id, e3);
                  }
                },
                {
                  key: "handleRemoveCharacter",
                  value: function(e3) {
                    var t3 = e3.id;
                    if (this.characters.has(t3)) {
                      var r3 = this.characters.get(t3);
                      this.eventEmitter.emit(Ut, r3), r3.eventEmitter.emit(Ut), this.characters.delete(t3);
                    }
                  }
                },
                {
                  key: "handleCharacterStateChanged",
                  value: function(e3) {
                    var t3 = e3.id;
                    this.characters.has(t3) && this.characters.get(t3).handleCharacterStateChanged(e3);
                  }
                },
                {
                  key: "handleCharacterMessage",
                  value: function(e3) {
                    var t3 = e3.id;
                    this.characters.has(t3) && this.characters.get(t3).handleCharacterMessage(e3);
                  }
                },
                {
                  key: "handleVideoStateChanged",
                  value: function(e3) {
                    this.eventEmitter.emit(Tt, e3);
                  }
                },
                {
                  key: "handleVideoSeeked",
                  value: function(e3) {
                    var t3 = e3.currentTime;
                    this.eventEmitter.emit(Ct, { currentTime: t3 });
                  }
                },
                {
                  key: "handlePinStateChanged",
                  value: function(e3) {
                    var t3 = e3.peerId, r3 = e3.state, a3 = e3.pinnedBy;
                    this.eventEmitter.emit(It, {
                      participantId: t3,
                      state: r3,
                      pinnedBy: a3
                    });
                  }
                },
                {
                  key: "handleMeetingStateChanged",
                  value: function(e3) {
                    var t3 = e3.state;
                    this.eventEmitter.emit(Nt, { state: t3 });
                  }
                },
                {
                  key: "handleVideoQualityChanged",
                  value: function(e3) {
                    var t3 = e3.peerId, r3 = e3.prevQuality, a3 = e3.currentQuality, n2 = this.participants.get(t3) || this.characters.get(t3);
                    n2 && n2 && n2.videoQualityChanged(r3, a3);
                  }
                },
                {
                  key: "handleMicRequested",
                  value: function(e3) {
                    var t3 = this, r3 = e3.peerId;
                    this.eventEmitter.emit(Pt, {
                      participantId: r3,
                      accept: function() {
                        return t3.unmuteMic();
                      },
                      reject: function() {
                      }
                    });
                  }
                },
                {
                  key: "handleWebcamRequested",
                  value: function(e3) {
                    var t3 = this, r3 = e3.peerId;
                    this.eventEmitter.emit(Ot, {
                      participantId: r3,
                      accept: function() {
                        return t3.enableWebcam();
                      },
                      reject: function() {
                      }
                    });
                  }
                },
                {
                  key: "handleConnectionParticipantJoin",
                  value: function(e3) {
                    var t3 = e3.roomId, r3 = e3.peer, a3 = this.connections.get(t3);
                    null != a3 && a3.meeting.participantJoin(r3);
                  }
                },
                {
                  key: "handleConnectionParticipantLeft",
                  value: function(e3) {
                    var t3 = e3.roomId, r3 = e3.peerId, a3 = this.connections.get(t3);
                    null != a3 && a3.meeting.participantLeft(r3);
                  }
                },
                {
                  key: "handleConnectionOpen",
                  value: function(e3) {
                    var t3 = e3.peers, r3 = e3.roomId, a3 = e3.payload, n2 = new Ye({ roomId: r3, peers: t3, payload: a3 });
                    this.connections.set(n2.id, n2), this.eventEmitter.emit(Mt, n2);
                  }
                },
                {
                  key: "handleConnectionClose",
                  value: function(e3) {
                    var t3 = e3.roomId;
                    null != this.connections.get(t3) && (this.connections.delete(t3), this.eventEmitter.emit(At, t3));
                  }
                },
                {
                  key: "handleSwitchMeeting",
                  value: function(e3) {
                    var t3 = e3.roomId, r3 = e3.token, a3 = e3.payload, n2 = e3.peerId, s2 = e3.connectionPeerId, i2 = e3.connectionRoomId, o3 = n2 ? {
                      meetingId: t3,
                      payload: a3,
                      token: r3,
                      participantId: n2
                    } : {
                      meetingId: t3,
                      payload: a3,
                      token: r3,
                      connectionParticipantId: s2,
                      connectionMeetingId: i2
                    };
                    this.eventEmitter.emit(Lt, o3);
                  }
                },
                {
                  key: "handleConnectionChatMessage",
                  value: function(e3) {
                    var t3 = e3.roomId, r3 = e3.peerId, a3 = e3.message, n2 = this.connections.get(t3);
                    null != n2 && n2.meeting.sendChatMessageEvent({
                      participantId: r3,
                      message: a3
                    });
                  }
                },
                {
                  key: "connectTo",
                  value: (r2 = (0, t2.A)(
                    c().mark(function e3(t3) {
                      var r3, a3;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return r3 = t3.meetingId, a3 = t3.payload, e4.next = 3, this.roomClient.openConnection({
                                  roomId: r3,
                                  payload: a3
                                });
                              case 3:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function(e3) {
                    return r2.apply(this, arguments);
                  })
                },
                {
                  key: "selectedCameraDevice",
                  get: function() {
                    var e3;
                    return null === (e3 = this.roomClient._webcam) || void 0 === e3 ? void 0 : e3.device;
                  }
                },
                {
                  key: "selectedMicrophoneDevice",
                  get: function() {
                    var e3;
                    return null === (e3 = this.roomClient._mic) || void 0 === e3 ? void 0 : e3.device;
                  }
                },
                {
                  key: "on",
                  value: function(e3, t3) {
                    switch (e3) {
                      case ot:
                      case ct:
                      case dt:
                      case lt:
                      case pt:
                      case ut:
                      case ht:
                      case mt:
                      case ft:
                      case gt:
                      case _t:
                      case vt:
                      case bt:
                      case yt:
                      case St:
                      case Rt:
                      case wt:
                      case jt:
                      case Bt:
                      case Dt:
                      case xt:
                      case Et:
                      case kt:
                      case Ft:
                      case Ut:
                      case nt:
                      case st:
                      case Tt:
                      case Ct:
                      case Pt:
                      case Ot:
                      case It:
                      case Mt:
                      case At:
                      case Lt:
                      case Nt:
                      case it:
                      case at:
                        this.eventEmitter.on(e3, t3);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                },
                {
                  key: "off",
                  value: function(e3, t3) {
                    switch (e3) {
                      case ot:
                      case ct:
                      case dt:
                      case lt:
                      case pt:
                      case ut:
                      case ht:
                      case mt:
                      case ft:
                      case gt:
                      case _t:
                      case vt:
                      case bt:
                      case yt:
                      case wt:
                      case St:
                      case Rt:
                      case jt:
                      case Bt:
                      case Dt:
                      case xt:
                      case Et:
                      case kt:
                      case Ft:
                      case Ut:
                      case nt:
                      case st:
                      case Tt:
                      case Ct:
                      case Pt:
                      case Ot:
                      case It:
                      case Mt:
                      case At:
                      case Lt:
                      case Nt:
                      case at:
                      case it:
                        this.eventEmitter.off(e3, t3);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                }
              ]
            );
            var r2, a2, o2, d2, l2, p2, u2, h2;
          }();
          function Vt(e3) {
            var t3 = e3.topic, r2 = e3.message, a2 = e3.senderId, n2 = e3.timestamp, s2 = e3.senderName, i2 = e3.id, o2 = e3.payload;
            t3 && r2 && tt(Wt, this).emit(t3, {
              message: r2,
              senderId: a2,
              timestamp: n2,
              topic: t3,
              senderName: s2,
              id: i2,
              payload: o2
            });
          }
          function Gt(e3) {
            var t3 = e3.peerId, r2 = e3.mode;
            t3 === this.localParticipant.id ? this.localParticipant.mode = r2 : this.participants.get(t3).mode = r2, this.eventEmitter.emit(it, { participantId: t3, mode: r2 });
          }
          var zt = r(7080), $t = r(5071), Kt = r(2107), Jt = r(4973), Qt = r(9027);
          function Yt(e3, t3, r2) {
            return t3 = fe(t3), me(
              e3,
              Xt() ? Reflect.construct(t3, r2 || [], fe(e3).constructor) : t3.apply(e3, r2)
            );
          }
          function Xt() {
            try {
              var e3 = !Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {
                })
              );
            } catch (e4) {
            }
            return (Xt = function() {
              return !!e3;
            })();
          }
          var Zt = function(e3) {
            function t3(e4, r2, a2, s2) {
              return (0, n.A)(this, t3), Yt(this, t3, [e4, r2, a2, s2]);
            }
            return _e(t3, e3), (0, s.A)(t3);
          }(
            (0, s.A)(function e3(t3, r2, a2, s2) {
              (0, n.A)(this, e3), this.deviceId = t3, this.groupId = r2, this.kind = a2, this.label = s2;
            })
          ), er = function(e3) {
            function t3(e4, r2, a2, s2) {
              return (0, n.A)(this, t3), Yt(this, t3, [e4, r2, a2, s2]);
            }
            return _e(t3, e3), (0, s.A)(t3);
          }(Zt), tr = function(e3) {
            function t3(e4, r2, a2, s2) {
              return (0, n.A)(this, t3), Yt(this, t3, [e4, r2, a2, s2]);
            }
            return _e(t3, e3), (0, s.A)(t3);
          }(Zt), rr = function(e3) {
            function t3(e4, r2, a2, s2) {
              return (0, n.A)(this, t3), Yt(this, t3, [e4, r2, a2, s2]);
            }
            return _e(t3, e3), (0, s.A)(t3);
          }(Zt), ar = {
            AUDIO: "audio",
            VIDEO: "video",
            AUDIO_AND_VIDEO: "audio_video"
          }, nr = (r(328), r(7654));
          function sr(e3, t3) {
            return null == e3 || null == t3 ? NaN : e3 < t3 ? -1 : e3 > t3 ? 1 : e3 >= t3 ? 0 : NaN;
          }
          function ir(e3, t3) {
            return null == e3 || null == t3 ? NaN : t3 < e3 ? -1 : t3 > e3 ? 1 : t3 >= e3 ? 0 : NaN;
          }
          function or(e3) {
            let t3, r2, a2;
            function n2(e4, a3, n3 = 0, s2 = e4.length) {
              if (n3 < s2) {
                if (0 !== t3(a3, a3)) return s2;
                do {
                  const t4 = n3 + s2 >>> 1;
                  r2(e4[t4], a3) < 0 ? n3 = t4 + 1 : s2 = t4;
                } while (n3 < s2);
              }
              return n3;
            }
            return 2 !== e3.length ? (t3 = sr, r2 = (t4, r3) => sr(e3(t4), r3), a2 = (t4, r3) => e3(t4) - r3) : (t3 = e3 === sr || e3 === ir ? e3 : cr, r2 = e3, a2 = e3), {
              left: n2,
              center: function(e4, t4, r3 = 0, s2 = e4.length) {
                const i2 = n2(e4, t4, r3, s2 - 1);
                return i2 > r3 && a2(e4[i2 - 1], t4) > -a2(e4[i2], t4) ? i2 - 1 : i2;
              },
              right: function(e4, a3, n3 = 0, s2 = e4.length) {
                if (n3 < s2) {
                  if (0 !== t3(a3, a3)) return s2;
                  do {
                    const t4 = n3 + s2 >>> 1;
                    r2(e4[t4], a3) <= 0 ? n3 = t4 + 1 : s2 = t4;
                  } while (n3 < s2);
                }
                return n3;
              }
            };
          }
          function cr() {
            return 0;
          }
          const dr = or(sr), lr = dr.right, pr = (dr.left, or(function(e3) {
            return null === e3 ? NaN : +e3;
          }).center, lr);
          function ur(e3, t3) {
            switch (arguments.length) {
              case 0:
                break;
              case 1:
                this.range(e3);
                break;
              default:
                this.range(t3).domain(e3);
            }
            return this;
          }
          function hr() {
            var e3, t3 = [0.5], r2 = [0, 1], a2 = 1;
            function n2(n3) {
              return null != n3 && n3 <= n3 ? r2[pr(t3, n3, 0, a2)] : e3;
            }
            return n2.domain = function(e4) {
              return arguments.length ? (t3 = Array.from(e4), a2 = Math.min(t3.length, r2.length - 1), n2) : t3.slice();
            }, n2.range = function(e4) {
              return arguments.length ? (r2 = Array.from(e4), a2 = Math.min(t3.length, r2.length - 1), n2) : r2.slice();
            }, n2.invertExtent = function(e4) {
              var a3 = r2.indexOf(e4);
              return [t3[a3 - 1], t3[a3]];
            }, n2.unknown = function(t4) {
              return arguments.length ? (e3 = t4, n2) : e3;
            }, n2.copy = function() {
              return hr().domain(t3).range(r2).unknown(e3);
            }, ur.apply(n2, arguments);
          }
          function mr(e3, t3) {
            var r2 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var a2 = Object.getOwnPropertySymbols(e3);
              t3 && (a2 = a2.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r2.push.apply(r2, a2);
            }
            return r2;
          }
          function fr(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var r2 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? mr(Object(r2), true).forEach(function(t4) {
                br(e3, t4, r2[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : mr(Object(r2)).forEach(function(t4) {
                Object.defineProperty(
                  e3,
                  t4,
                  Object.getOwnPropertyDescriptor(r2, t4)
                );
              });
            }
            return e3;
          }
          function gr(e3, t3) {
            if (!(e3 instanceof t3))
              throw new TypeError("Cannot call a class as a function");
          }
          function _r(e3, t3) {
            for (var r2 = 0; r2 < t3.length; r2++) {
              var a2 = t3[r2];
              a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(e3, Ar(a2.key), a2);
            }
          }
          function vr(e3, t3, r2) {
            return t3 && _r(e3.prototype, t3), r2 && _r(e3, r2), Object.defineProperty(e3, "prototype", { writable: false }), e3;
          }
          function br(e3, t3, r2) {
            return (t3 = Ar(t3)) in e3 ? Object.defineProperty(e3, t3, {
              value: r2,
              enumerable: true,
              configurable: true,
              writable: true
            }) : e3[t3] = r2, e3;
          }
          function yr(e3, t3) {
            if ("function" != typeof t3 && null !== t3)
              throw new TypeError(
                "Super expression must either be null or a function"
              );
            e3.prototype = Object.create(t3 && t3.prototype, {
              constructor: { value: e3, writable: true, configurable: true }
            }), Object.defineProperty(e3, "prototype", { writable: false }), t3 && Sr(e3, t3);
          }
          function wr(e3) {
            return wr = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            }, wr(e3);
          }
          function Sr(e3, t3) {
            return Sr = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e4, t4) {
              return e4.__proto__ = t4, e4;
            }, Sr(e3, t3);
          }
          function Rr(e3, t3) {
            if (null == e3) return {};
            var r2, a2, n2 = function(e4, t4) {
              if (null == e4) return {};
              var r3, a3, n3 = {}, s3 = Object.keys(e4);
              for (a3 = 0; a3 < s3.length; a3++)
                r3 = s3[a3], t4.indexOf(r3) >= 0 || (n3[r3] = e4[r3]);
              return n3;
            }(e3, t3);
            if (Object.getOwnPropertySymbols) {
              var s2 = Object.getOwnPropertySymbols(e3);
              for (a2 = 0; a2 < s2.length; a2++)
                r2 = s2[a2], t3.indexOf(r2) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, r2) && (n2[r2] = e3[r2]);
            }
            return n2;
          }
          function Er(e3) {
            if (void 0 === e3)
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            return e3;
          }
          function kr(e3) {
            var t3 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct) return false;
              if (Reflect.construct.sham) return false;
              if ("function" == typeof Proxy) return true;
              try {
                return Boolean.prototype.valueOf.call(
                  Reflect.construct(Boolean, [], function() {
                  })
                ), true;
              } catch (e4) {
                return false;
              }
            }();
            return function() {
              var r2, a2 = wr(e3);
              if (t3) {
                var n2 = wr(this).constructor;
                r2 = Reflect.construct(a2, arguments, n2);
              } else r2 = a2.apply(this, arguments);
              return function(e4, t4) {
                if (t4 && ("object" == typeof t4 || "function" == typeof t4))
                  return t4;
                if (void 0 !== t4)
                  throw new TypeError(
                    "Derived constructors may only return object or undefined"
                  );
                return Er(e4);
              }(this, r2);
            };
          }
          function Tr(e3, t3) {
            for (; !Object.prototype.hasOwnProperty.call(e3, t3) && null !== (e3 = wr(e3)); ) ;
            return e3;
          }
          function Cr() {
            return Cr = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(e3, t3, r2) {
              var a2 = Tr(e3, t3);
              if (a2) {
                var n2 = Object.getOwnPropertyDescriptor(a2, t3);
                return n2.get ? n2.get.call(arguments.length < 3 ? e3 : r2) : n2.value;
              }
            }, Cr.apply(this, arguments);
          }
          function Pr(e3, t3, r2, a2) {
            return Pr = "undefined" != typeof Reflect && Reflect.set ? Reflect.set : function(e4, t4, r3, a3) {
              var n2, s2 = Tr(e4, t4);
              if (s2) {
                if ((n2 = Object.getOwnPropertyDescriptor(s2, t4)).set)
                  return n2.set.call(a3, r3), true;
                if (!n2.writable) return false;
              }
              if (n2 = Object.getOwnPropertyDescriptor(a3, t4)) {
                if (!n2.writable) return false;
                n2.value = r3, Object.defineProperty(a3, t4, n2);
              } else br(a3, t4, r3);
              return true;
            }, Pr(e3, t3, r2, a2);
          }
          function Or(e3, t3, r2, a2, n2) {
            if (!Pr(e3, t3, r2, a2 || e3) && n2)
              throw new TypeError("failed to set property");
            return r2;
          }
          function Dr(e3, t3) {
            return function(e4) {
              if (Array.isArray(e4)) return e4;
            }(e3) || function(e4, t4) {
              var r2 = null == e4 ? null : "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
              if (null != r2) {
                var a2, n2, s2, i2, o2 = [], c2 = true, d2 = false;
                try {
                  if (s2 = (r2 = r2.call(e4)).next, 0 === t4) {
                    if (Object(r2) !== r2) return;
                    c2 = false;
                  } else
                    for (; !(c2 = (a2 = s2.call(r2)).done) && (o2.push(a2.value), o2.length !== t4); c2 = true) ;
                } catch (e5) {
                  d2 = true, n2 = e5;
                } finally {
                  try {
                    if (!c2 && null != r2.return && (i2 = r2.return(), Object(i2) !== i2))
                      return;
                  } finally {
                    if (d2) throw n2;
                  }
                }
                return o2;
              }
            }(e3, t3) || Ir(e3, t3) || function() {
              throw new TypeError(
                "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }();
          }
          function xr(e3) {
            return function(e4) {
              if (Array.isArray(e4)) return Mr(e4);
            }(e3) || function(e4) {
              if ("undefined" != typeof Symbol && null != e4[Symbol.iterator] || null != e4["@@iterator"])
                return Array.from(e4);
            }(e3) || Ir(e3) || function() {
              throw new TypeError(
                "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }();
          }
          function Ir(e3, t3) {
            if (e3) {
              if ("string" == typeof e3) return Mr(e3, t3);
              var r2 = Object.prototype.toString.call(e3).slice(8, -1);
              return "Object" === r2 && e3.constructor && (r2 = e3.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(e3) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? Mr(e3, t3) : void 0;
            }
          }
          function Mr(e3, t3) {
            (null == t3 || t3 > e3.length) && (t3 = e3.length);
            for (var r2 = 0, a2 = new Array(t3); r2 < t3; r2++) a2[r2] = e3[r2];
            return a2;
          }
          function Ar(e3) {
            var t3 = function(e4, t4) {
              if ("object" != typeof e4 || null === e4) return e4;
              var r2 = e4[Symbol.toPrimitive];
              if (void 0 !== r2) {
                var a2 = r2.call(e4, t4 || "default");
                if ("object" != typeof a2) return a2;
                throw new TypeError(
                  "@@toPrimitive must return a primitive value."
                );
              }
              return ("string" === t4 ? String : Number)(e4);
            }(e3, "string");
            return "symbol" == typeof t3 ? t3 : String(t3);
          }
          function Lr(e3, t3) {
            return function(e4, t4) {
              if (t4.get) return t4.get.call(e4);
              return t4.value;
            }(e3, jr(e3, t3, "get"));
          }
          function Nr(e3, t3, r2) {
            return function(e4, t4, r3) {
              if (t4.set) t4.set.call(e4, r3);
              else {
                if (!t4.writable)
                  throw new TypeError(
                    "attempted to set read only private field"
                  );
                t4.value = r3;
              }
            }(e3, jr(e3, t3, "set"), r2), r2;
          }
          function jr(e3, t3, r2) {
            if (!t3.has(e3))
              throw new TypeError(
                "attempted to " + r2 + " private field on non-instance"
              );
            return t3.get(e3);
          }
          function Br(e3, t3, r2) {
            if (!t3.has(e3))
              throw new TypeError(
                "attempted to get private field on non-instance"
              );
            return r2;
          }
          function Fr(e3, t3) {
            if (t3.has(e3))
              throw new TypeError(
                "Cannot initialize the same private elements twice on an object"
              );
          }
          function Ur(e3, t3, r2) {
            Fr(e3, t3), t3.set(e3, r2);
          }
          function Wr(e3, t3) {
            Fr(e3, t3), t3.add(e3);
          }
          var qr = "https://speed.cloudflare.com", Hr = {
            autoStart: true,
            downloadApiUrl: "".concat(qr, "/__down"),
            uploadApiUrl: "".concat(qr, "/__up"),
            logMeasurementApiUrl: null,
            logAimApiUrl: "https://aim.cloudflare.com/__log",
            turnServerUri: "turn.speed.cloudflare.com:50000",
            turnServerCredsApiUrl: "".concat(qr, "/turn-creds"),
            turnServerUser: null,
            turnServerPass: null,
            rpkiInvalidHost: "invalid.rpki.cloudflare.com",
            cfTraceUrl: "".concat(qr, "/cdn-cgi/trace"),
            includeCredentials: false,
            measurements: [
              { type: "latency", numPackets: 1 },
              { type: "download", bytes: 1e5, count: 1, bypassMinDuration: true },
              { type: "latency", numPackets: 20 },
              { type: "download", bytes: 1e5, count: 9 },
              { type: "download", bytes: 1e6, count: 8 },
              { type: "upload", bytes: 1e5, count: 8 },
              {
                type: "packetLoss",
                numPackets: 1e3,
                batchSize: 10,
                batchWaitTime: 10,
                responsesWaitTime: 3e3
              },
              { type: "upload", bytes: 1e6, count: 6 },
              { type: "download", bytes: 1e7, count: 6 },
              { type: "upload", bytes: 1e7, count: 4 },
              { type: "download", bytes: 25e6, count: 4 },
              { type: "upload", bytes: 25e6, count: 4 },
              { type: "download", bytes: 1e8, count: 3 },
              { type: "upload", bytes: 5e7, count: 3 },
              { type: "download", bytes: 25e7, count: 2 }
            ],
            measureDownloadLoadedLatency: true,
            measureUploadLoadedLatency: true,
            loadedLatencyThrottle: 400,
            bandwidthFinishRequestDuration: 1e3,
            estimatedServerTime: 10,
            latencyPercentile: 0.5,
            bandwidthPercentile: 0.9,
            bandwidthMinRequestDuration: 10,
            loadedRequestMinDuration: 250,
            loadedLatencyMaxPoints: 20
          }, Vr = {
            aimMeasurementScoring: {
              packetLoss: hr([0.01, 0.05, 0.25, 0.5], [10, 5, 0, -10, -20]),
              latency: hr([10, 20, 50, 100, 500], [20, 10, 5, 0, -10, -20]),
              loadedLatencyIncrease: hr(
                [10, 20, 50, 100, 500],
                [20, 10, 5, 0, -10, -20]
              ),
              jitter: hr([10, 20, 100, 500], [10, 5, 0, -10, -20]),
              download: hr([1e6, 1e7, 5e7, 1e8], [0, 5, 10, 20, 30]),
              upload: hr([1e6, 1e7, 5e7, 1e8], [0, 5, 10, 20, 30])
            },
            aimExperiencesDefs: {
              streaming: {
                input: [
                  "latency",
                  "packetLoss",
                  "download",
                  "loadedLatencyIncrease"
                ],
                pointThresholds: [15, 20, 40, 60]
              },
              gaming: {
                input: ["latency", "packetLoss", "loadedLatencyIncrease"],
                pointThresholds: [5, 15, 25, 30]
              },
              rtc: {
                input: [
                  "latency",
                  "jitter",
                  "packetLoss",
                  "loadedLatencyIncrease"
                ],
                pointThresholds: [5, 15, 25, 40]
              }
            }
          }, Gr = function(e3) {
            var t3 = e3.headers.get("server-timing");
            if (t3) {
              var r2 = t3.match(/dur=([0-9.]+)/);
              if (r2) return +r2[1];
            }
          }, zr = function(e3) {
            return e3.responseStart - e3.requestStart;
          }, $r = function(e3) {
            return e3.responseEnd - e3.responseStart;
          }, Kr = function(e3) {
            return e3.ping + e3.payloadDownloadTime;
          }, Jr = function(e3) {
            return e3.ttfb;
          }, Qr = function(e3, t3) {
            var r2 = e3.duration, a2 = e3.transferSize, n2 = r2 / 1e3;
            return n2 ? 8 * (a2 || 1.005 * +t3) / n2 : void 0;
          }, Yr = function(e3, t3) {
            var r2 = e3.duration / 1e3;
            return r2 ? 8 * t3 * 1.005 / r2 : void 0;
          }, Xr = nr(function(e3) {
            return "0".repeat(e3);
          }), Zr = /* @__PURE__ */ new WeakMap(), ea = /* @__PURE__ */ new WeakMap(), ta = /* @__PURE__ */ new WeakMap(), ra = /* @__PURE__ */ new WeakMap(), aa = /* @__PURE__ */ new WeakMap(), na = /* @__PURE__ */ new WeakMap(), sa = /* @__PURE__ */ new WeakMap(), ia = /* @__PURE__ */ new WeakMap(), oa = /* @__PURE__ */ new WeakMap(), ca = /* @__PURE__ */ new WeakMap(), da = /* @__PURE__ */ new WeakMap(), la = /* @__PURE__ */ new WeakMap(), pa = /* @__PURE__ */ new WeakMap(), ua = /* @__PURE__ */ new WeakMap(), ha = /* @__PURE__ */ new WeakMap(), ma = /* @__PURE__ */ new WeakMap(), fa = /* @__PURE__ */ new WeakMap(), ga = /* @__PURE__ */ new WeakMap(), _a = /* @__PURE__ */ new WeakMap(), va = /* @__PURE__ */ new WeakMap(), ba = /* @__PURE__ */ new WeakMap(), ya = /* @__PURE__ */ new WeakMap(), wa = /* @__PURE__ */ new WeakSet(), Sa = /* @__PURE__ */ new WeakSet(), Ra = /* @__PURE__ */ new WeakSet(), Ea = /* @__PURE__ */ new WeakSet();
          function ka(e3) {
            var t3 = this;
            e3 !== Lr(this, la) && (Nr(this, la, e3), setTimeout(function() {
              return Lr(t3, ra).call(t3, Lr(t3, la));
            }));
          }
          function Ta(e3, t3) {
            var r2 = this, a2 = Lr(this, oa)[e3], n2 = a2.bytes, s2 = a2.dir, i2 = Lr(this, ua), o2 = i2[s2].hasOwnProperty(n2) ? i2[s2][n2] : {
              timings: [],
              numMeasurements: Lr(this, oa).filter(function(e4) {
                var t4 = e4.bytes, r3 = e4.dir;
                return n2 === t4 && s2 === r3;
              }).map(function(e4) {
                return e4.count;
              }).reduce(function(e4, t4) {
                return e4 + t4;
              }, 0)
            };
            t3 && o2.timings.push(t3), o2.timings = o2.timings.slice(-o2.numMeasurements), i2[s2][n2] = o2, t3 ? setTimeout(function() {
              Lr(r2, na).call(r2, fr({ type: s2, bytes: n2 }, t3), i2);
            }) : Lr(this, aa).call(this, Lr(this, oa)[e3], i2);
          }
          function Ca() {
            var e3 = this, t3 = Lr(this, oa), r2 = t3[Lr(this, ha)];
            if (Lr(this, ma) >= r2.count) {
              var a2 = Lr(this, pa);
              if (Lr(this, ga) > this.finishRequestDuration && !r2.bypassMinDuration) {
                var n2 = r2.dir;
                Lr(this, pa)[n2] = true, Object.values(Lr(this, pa)).every(function(e4) {
                  return e4;
                }) && Lr(this, sa).call(this, Lr(this, ua));
              }
              Nr(this, ma, 0), Nr(this, ga, -1 / 0), performance.clearResourceTimings();
              do {
                Nr(this, ha, Lr(this, ha) + 1);
              } while (Lr(this, ha) < t3.length && a2[t3[Lr(this, ha)].dir]);
              if (Lr(this, ha) >= t3.length)
                return Nr(this, pa, { down: true, up: true }), Br(this, wa, ka).call(this, false), void Lr(this, sa).call(this, Lr(this, ua));
              r2 = t3[Lr(this, ha)];
            }
            var s2 = Lr(this, ha);
            0 === Lr(this, ma) && Br(this, Sa, Ta).call(this, s2);
            var i2 = r2, o2 = i2.bytes, c2 = "down" === i2.dir, d2 = Lr(this, c2 ? ca : da), l2 = Object.assign({}, Lr(this, Zr));
            c2 && (l2.bytes = "".concat(o2));
            var p2, u2 = "".concat(
              d2.startsWith("http") || d2.startsWith("//") ? "" : window.location.origin
            ).concat(d2, "?").concat(
              Object.entries(l2).map(function(e4) {
                var t4 = Dr(e4, 2), r3 = t4[0], a3 = t4[1];
                return "".concat(r3, "=").concat(a3);
              }).join("&")
            ), h2 = Object.assign(
              {},
              c2 ? {} : { method: "POST", body: Xr(o2) },
              Lr(this, ea)
            ), m2 = Nr(
              this,
              ba,
              fetch(u2, h2).then(function(e4) {
                if (e4.ok) return e4;
                throw Error(e4.statusText);
              }).then(function(t4) {
                return e3.getServerTime && (p2 = e3.getServerTime(t4)), t4;
              }).then(function(t4) {
                return t4.text().then(function(r3) {
                  return Lr(e3, ta) && Lr(e3, ta).call(e3, {
                    url: u2,
                    headers: t4.headers,
                    body: r3
                  }), r3;
                });
              }).then(function(t4, r3) {
                if (m2._cancel) r3("cancelled");
                else {
                  var a3 = performance.getEntriesByName(u2).slice(-1)[0], n3 = {
                    transferSize: a3.transferSize,
                    ttfb: zr(a3),
                    payloadDownloadTime: $r(a3),
                    serverTime: p2 || -1,
                    measTime: /* @__PURE__ */ new Date()
                  };
                  if (n3.ping = Math.max(0.01, n3.ttfb - (p2 || Lr(e3, va))), n3.duration = (c2 ? Kr : Jr)(n3), n3.bps = (c2 ? Qr : Yr)(n3, o2), c2 && o2) {
                    var i3 = +o2;
                    n3.transferSize && (n3.transferSize < i3 || n3.transferSize / i3 > 1.05) && console.warn(
                      "Requested ".concat(i3, "B but received ").concat(n3.transferSize, "B (").concat(
                        Math.round(n3.transferSize / i3 * 1e4) / 100,
                        "%)."
                      )
                    );
                  }
                  Br(e3, Sa, Ta).call(e3, s2, n3);
                  var d3 = n3.duration;
                  Nr(e3, ga, Lr(e3, ga) < 0 ? d3 : Math.min(Lr(e3, ga), d3)), Nr(e3, ma, Lr(e3, ma) + 1), Nr(e3, fa, 0), Lr(e3, _a) ? Nr(
                    e3,
                    ya,
                    setTimeout(function() {
                      return Br(e3, Ra, Ca).call(e3);
                    }, Lr(e3, _a))
                  ) : Br(e3, Ra, Ca).call(e3);
                }
              }).catch(function(t4) {
                var r3, a3;
                m2._cancel || (console.warn("Error fetching ".concat(u2, ": ").concat(t4)), Nr(e3, fa, (r3 = Lr(e3, fa), a3 = r3++, r3)), a3 < 20 ? Br(e3, Ra, Ca).call(e3) : (Nr(e3, fa, 0), Br(e3, wa, ka).call(e3, false), Lr(e3, ia).call(
                  e3,
                  "Connection failed to ".concat(u2, ". Gave up after ").concat(20, " retries.")
                )));
              })
            );
          }
          function Pa() {
            var e3 = Lr(this, ba);
            e3 && (e3._cancel = true);
          }
          var Oa = function() {
            function e3(t3) {
              var r2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, a2 = r2.downloadApiUrl, n2 = r2.uploadApiUrl, s2 = r2.throttleMs, i2 = void 0 === s2 ? 0 : s2, o2 = r2.estimatedServerTime, c2 = void 0 === o2 ? 0 : o2;
              if (gr(this, e3), Wr(this, Ea), Wr(this, Ra), Wr(this, Sa), Wr(this, wa), Ur(this, Zr, { writable: true, value: {} }), Ur(this, ea, { writable: true, value: {} }), br(this, "finishRequestDuration", 1e3), br(this, "getServerTime", Gr), Ur(this, ta, {
                writable: true,
                value: function(e4) {
                  return e4;
                }
              }), Ur(this, ra, { writable: true, value: function() {
              } }), Ur(this, aa, { writable: true, value: function() {
              } }), Ur(this, na, { writable: true, value: function() {
              } }), Ur(this, sa, { writable: true, value: function() {
              } }), Ur(this, ia, { writable: true, value: function() {
              } }), Ur(this, oa, { writable: true, value: void 0 }), Ur(this, ca, { writable: true, value: void 0 }), Ur(this, da, { writable: true, value: void 0 }), Ur(this, la, { writable: true, value: false }), Ur(this, pa, { writable: true, value: { down: false, up: false } }), Ur(this, ua, { writable: true, value: { down: {}, up: {} } }), Ur(this, ha, { writable: true, value: 0 }), Ur(this, ma, { writable: true, value: 0 }), Ur(this, fa, { writable: true, value: 0 }), Ur(this, ga, { writable: true, value: -1 / 0 }), Ur(this, _a, { writable: true, value: 0 }), Ur(this, va, { writable: true, value: 0 }), Ur(this, ba, { writable: true, value: void 0 }), Ur(this, ya, { writable: true, value: void 0 }), !t3)
                throw new Error("Missing measurements argument");
              if (!a2) throw new Error("Missing downloadApiUrl argument");
              if (!n2) throw new Error("Missing uploadApiUrl argument");
              Nr(this, oa, t3), Nr(this, ca, a2), Nr(this, da, n2), Nr(this, _a, i2), Nr(this, va, Math.max(0, c2));
            }
            return vr(e3, [
              {
                key: "results",
                get: function() {
                  return Lr(this, ua);
                }
              },
              {
                key: "qsParams",
                get: function() {
                  return Lr(this, Zr);
                },
                set: function(e4) {
                  Nr(this, Zr, e4);
                }
              },
              {
                key: "fetchOptions",
                get: function() {
                  return Lr(this, ea);
                },
                set: function(e4) {
                  Nr(this, ea, e4);
                }
              },
              {
                key: "responseHook",
                set: function(e4) {
                  Nr(this, ta, e4);
                }
              },
              {
                key: "onRunningChange",
                set: function(e4) {
                  Nr(this, ra, e4);
                }
              },
              {
                key: "onNewMeasurementStarted",
                set: function(e4) {
                  Nr(this, aa, e4);
                }
              },
              {
                key: "onMeasurementResult",
                set: function(e4) {
                  Nr(this, na, e4);
                }
              },
              {
                key: "onFinished",
                set: function(e4) {
                  Nr(this, sa, e4);
                }
              },
              {
                key: "onConnectionError",
                set: function(e4) {
                  Nr(this, ia, e4);
                }
              },
              {
                key: "pause",
                value: function() {
                  clearTimeout(Lr(this, ya)), Br(this, Ea, Pa).call(this), Br(this, wa, ka).call(this, false);
                }
              },
              {
                key: "play",
                value: function() {
                  Lr(this, la) || (Br(this, wa, ka).call(this, true), Br(this, Ra, Ca).call(this));
                }
              }
            ]), e3;
          }(), Da = [
            "measureParallelLatency",
            "parallelLatencyThrottleMs",
            "downloadApiUrl",
            "uploadApiUrl",
            "estimatedServerTime"
          ], xa = /* @__PURE__ */ new WeakMap(), Ia = /* @__PURE__ */ new WeakSet();
          function Ma(e3) {
            var t3 = this;
            Lr(this, xa) && (e3 ? setTimeout(function() {
              return Lr(t3, xa).play();
            }, 20) : Lr(this, xa).pause());
          }
          var Aa = function(e3) {
            yr(r2, e3);
            var t3 = kr(r2);
            function r2(e4) {
              var a2, n2, s2, i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, o2 = i2.measureParallelLatency, c2 = void 0 !== o2 && o2, d2 = i2.parallelLatencyThrottleMs, l2 = void 0 === d2 ? 100 : d2, p2 = i2.downloadApiUrl, u2 = i2.uploadApiUrl, h2 = i2.estimatedServerTime, m2 = void 0 === h2 ? 0 : h2, f2 = Rr(i2, Da);
              return gr(this, r2), Wr(
                Er(
                  s2 = t3.call(
                    this,
                    e4,
                    fr(
                      {
                        downloadApiUrl: p2,
                        uploadApiUrl: u2,
                        estimatedServerTime: m2
                      },
                      f2
                    )
                  )
                ),
                Ia
              ), Ur(Er(s2), xa, { writable: true, value: void 0 }), c2 && (Nr(
                Er(s2),
                xa,
                new Oa(
                  [
                    {
                      dir: "down",
                      bytes: 0,
                      count: 1 / 0,
                      bypassMinDuration: true
                    }
                  ],
                  {
                    downloadApiUrl: p2,
                    uploadApiUrl: u2,
                    estimatedServerTime: m2,
                    throttleMs: l2
                  }
                )
              ), Lr(Er(s2), xa).qsParams = {
                during: "".concat(e4[0].dir, "load")
              }, Or(
                (a2 = Er(s2), wr(r2.prototype)),
                "onRunningChange",
                Br(Er(s2), Ia, Ma),
                a2,
                true
              ), Or(
                (n2 = Er(s2), wr(r2.prototype)),
                "onConnectionError",
                function() {
                  return Lr(Er(s2), xa).pause();
                },
                n2,
                true
              )), s2;
            }
            return vr(r2, [
              {
                key: "latencyResults",
                get: function() {
                  return Lr(this, xa) && Lr(this, xa).results.down[0].timings;
                }
              },
              {
                key: "onParallelLatencyResult",
                set: function(e4) {
                  Lr(this, xa) && (Lr(this, xa).onMeasurementResult = function(t4) {
                    return e4(t4);
                  });
                }
              },
              {
                key: "fetchOptions",
                get: function() {
                  return Cr(wr(r2.prototype), "fetchOptions", this);
                },
                set: function(e4) {
                  Or(wr(r2.prototype), "fetchOptions", e4, this, true), Lr(this, xa) && (Lr(this, xa).fetchOptions = e4);
                }
              },
              {
                key: "onRunningChange",
                set: function(e4) {
                  var t4 = this;
                  Or(
                    wr(r2.prototype),
                    "onRunningChange",
                    function(r3) {
                      Br(t4, Ia, Ma).call(t4, r3), e4(r3);
                    },
                    this,
                    true
                  );
                }
              },
              {
                key: "onConnectionError",
                set: function(e4) {
                  var t4 = this;
                  Or(
                    wr(r2.prototype),
                    "onConnectionError",
                    function() {
                      Lr(t4, xa) && Lr(t4, xa).pause(), e4.apply(void 0, arguments);
                    },
                    this,
                    true
                  );
                }
              }
            ]), r2;
          }(Oa), La = ["measurementId", "logApiUrl"], Na = /* @__PURE__ */ new WeakMap(), ja = /* @__PURE__ */ new WeakMap(), Ba = /* @__PURE__ */ new WeakMap(), Fa = /* @__PURE__ */ new WeakMap(), Ua = /* @__PURE__ */ new WeakSet(), Wa = /* @__PURE__ */ new WeakSet();
          function qa(e3) {
            Lr(this, Fa) && (Nr(this, Ba, +e3.headers.get("cf-meta-request-time")), Nr(this, ja, e3.body.slice(-300).split("___").pop()));
          }
          function Ha(e3) {
            if (Lr(this, Fa)) {
              var t3 = {
                type: e3.type,
                bytes: e3.bytes,
                ping: Math.round(e3.ping),
                ttfb: Math.round(e3.ttfb),
                payloadDownloadTime: Math.round(e3.payloadDownloadTime),
                duration: Math.round(e3.duration),
                transferSize: Math.round(e3.transferSize),
                serverTime: Math.round(e3.serverTime),
                token: Lr(this, ja),
                requestTime: Lr(this, Ba),
                measId: Lr(this, Na)
              };
              Nr(this, ja, null), Nr(this, Ba, null), fetch(
                Lr(this, Fa),
                fr(
                  { method: "POST", body: JSON.stringify(t3) },
                  this.fetchOptions
                )
              );
            }
          }
          var Va = function(e3) {
            yr(r2, e3);
            var t3 = kr(r2);
            function r2(e4) {
              var a2, n2, s2, i2, o2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, c2 = o2.measurementId, d2 = o2.logApiUrl, l2 = Rr(o2, La);
              return gr(this, r2), Wr(Er(i2 = t3.call(this, e4, l2)), Wa), Wr(Er(i2), Ua), Ur(Er(i2), Na, { writable: true, value: void 0 }), Ur(Er(i2), ja, { writable: true, value: void 0 }), Ur(Er(i2), Ba, { writable: true, value: void 0 }), Ur(Er(i2), Fa, { writable: true, value: void 0 }), Nr(Er(i2), Na, c2), Nr(Er(i2), Fa, d2), Or(
                (a2 = Er(i2), wr(r2.prototype)),
                "qsParams",
                d2 ? { measId: Lr(Er(i2), Na) } : {},
                a2,
                true
              ), Or(
                (n2 = Er(i2), wr(r2.prototype)),
                "responseHook",
                function(e5) {
                  return Br(Er(i2), Ua, qa).call(Er(i2), e5);
                },
                n2,
                true
              ), Or(
                (s2 = Er(i2), wr(r2.prototype)),
                "onMeasurementResult",
                function(e5) {
                  return Br(Er(i2), Wa, Ha).call(Er(i2), e5);
                },
                s2,
                true
              ), i2;
            }
            return vr(r2, [
              {
                key: "qsParams",
                set: function(e4) {
                  Or(
                    wr(r2.prototype),
                    "qsParams",
                    Lr(this, Fa) ? fr({ measId: Lr(this, Na) }, e4) : e4,
                    this,
                    true
                  );
                }
              },
              {
                key: "responseHook",
                set: function(e4) {
                  var t4 = this;
                  Or(
                    wr(r2.prototype),
                    "responseHook",
                    function(r3) {
                      e4(r3), Br(t4, Ua, qa).call(t4, r3);
                    },
                    this,
                    true
                  );
                }
              },
              {
                key: "onMeasurementResult",
                set: function(e4) {
                  var t4 = this;
                  Or(
                    wr(r2.prototype),
                    "onMeasurementResult",
                    function(r3) {
                      for (var a2 = arguments.length, n2 = new Array(a2 > 1 ? a2 - 1 : 0), s2 = 1; s2 < a2; s2++)
                        n2[s2 - 1] = arguments[s2];
                      e4.apply(void 0, [r3].concat(n2)), Br(t4, Wa, Ha).call(t4, r3);
                    },
                    this,
                    true
                  );
                }
              }
            ]), r2;
          }(Aa), Ga = /* @__PURE__ */ new WeakMap(), za = /* @__PURE__ */ new WeakMap(), $a = /* @__PURE__ */ new WeakMap(), Ka = /* @__PURE__ */ new WeakSet(), Ja = /* @__PURE__ */ new WeakSet(), Qa = /* @__PURE__ */ new WeakSet(), Ya = function() {
            function e3(t3) {
              if (gr(this, e3), Wr(this, Qa), Wr(this, Ja), Wr(this, Ka), Ur(this, Ga, { writable: true, value: false }), Ur(this, za, { writable: true, value: void 0 }), Ur(this, $a, { writable: true, value: void 0 }), !t3)
                throw new Error("Missing operation to perform");
              Nr(this, $a, t3), this.play();
            }
            return vr(e3, [
              {
                key: "pause",
                value: function() {
                  Br(this, Qa, en).call(this), Br(this, Ka, Xa).call(this, false);
                }
              },
              {
                key: "stop",
                value: function() {
                  this.pause();
                }
              },
              {
                key: "play",
                value: function() {
                  Lr(this, Ga) || (Br(this, Ka, Xa).call(this, true), Br(this, Ja, Za).call(this));
                }
              }
            ]), e3;
          }();
          function Xa(e3) {
            e3 !== Lr(this, Ga) && Nr(this, Ga, e3);
          }
          function Za() {
            var e3 = this, t3 = Nr(
              this,
              za,
              Lr(this, $a).call(this).then(function() {
                !t3._cancel && Br(e3, Ja, Za).call(e3);
              })
            );
          }
          function en() {
            var e3 = Lr(this, za);
            e3 && (e3._cancel = true);
          }
          var tn = /* @__PURE__ */ new WeakMap(), rn = function() {
            function e3() {
              var t3 = this, r2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a2 = r2.download, n2 = r2.upload;
              if (gr(this, e3), br(this, "qsParams", {}), br(this, "fetchOptions", {}), Ur(this, tn, { writable: true, value: [] }), !a2 && !n2)
                throw new Error(
                  "Missing at least one of download/upload config"
                );
              [
                [a2, "download"],
                [n2, "upload"]
              ].filter(function(e4) {
                return Dr(e4, 1)[0];
              }).forEach(function(e4) {
                var t4 = Dr(e4, 2), r3 = t4[0], a3 = t4[1], n3 = r3.apiUrl, s3 = r3.chunkSize;
                if (!n3)
                  throw new Error("Missing ".concat(a3, " apiUrl argument"));
                if (!s3)
                  throw new Error(
                    "Missing ".concat(a3, " chunkSize argument")
                  );
              });
              var s2 = function(e4) {
                var r3 = e4.apiUrl, a3 = e4.qsParams, n3 = void 0 === a3 ? {} : a3, s3 = e4.fetchOptions, i2 = void 0 === s3 ? {} : s3;
                return new Ya(function() {
                  var e5 = Object.assign({}, n3, t3.qsParams), a4 = "".concat(
                    r3.startsWith("http") || r3.startsWith("//") ? "" : window.location.origin
                  ).concat(r3, "?").concat(
                    Object.entries(e5).map(function(e6) {
                      var t4 = Dr(e6, 2), r4 = t4[0], a5 = t4[1];
                      return "".concat(r4, "=").concat(a5);
                    }).join("&")
                  ), s4 = Object.assign({}, i2, t3.fetchOptions);
                  return fetch(a4, s4).then(function(e6) {
                    if (e6.ok) return e6;
                    throw Error(e6.statusText);
                  }).then(function(e6) {
                    return e6.text();
                  });
                });
              };
              a2 && Lr(this, tn).push(
                s2({
                  apiUrl: a2.apiUrl,
                  qsParams: { bytes: "".concat(a2.chunkSize) }
                })
              ), n2 && Lr(this, tn).push(
                s2({
                  apiUrl: n2.apiUrl,
                  fetchOptions: {
                    method: "POST",
                    body: "0".repeat(n2.chunkSize)
                  }
                })
              );
            }
            return vr(e3, [
              {
                key: "pause",
                value: function() {
                  Lr(this, tn).forEach(function(e4) {
                    return e4.pause();
                  });
                }
              },
              {
                key: "stop",
                value: function() {
                  this.pause();
                }
              },
              {
                key: "play",
                value: function() {
                  Lr(this, tn).forEach(function(e4) {
                    return e4.play();
                  });
                }
              }
            ]), e3;
          }(), an = ["iceServers", "acceptIceCandidate", "dataChannelCfg"], nn = /* @__PURE__ */ new WeakMap(), sn = /* @__PURE__ */ new WeakMap(), on = /* @__PURE__ */ new WeakMap(), cn = /* @__PURE__ */ new WeakMap(), dn = /* @__PURE__ */ new WeakMap(), ln = function() {
            function e3() {
              var t3 = this, r2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a2 = r2.iceServers, n2 = void 0 === a2 ? [] : a2, s2 = r2.acceptIceCandidate, i2 = void 0 === s2 ? function(e4) {
                var t4 = e4.protocol || "";
                if (!t4 && e4.candidate) {
                  var r3 = e4.candidate.split(" ");
                  r3.length >= 3 && (t4 = r3[2]);
                }
                return "udp" === t4.toLowerCase();
              } : s2, o2 = r2.dataChannelCfg, c2 = void 0 === o2 ? { ordered: false, maxRetransmits: 0 } : o2, d2 = Rr(r2, an);
              gr(this, e3), br(this, "onOpen", function() {
              }), br(this, "onClose", function() {
              }), br(this, "onMessageReceived", function() {
              }), Ur(this, nn, { writable: true, value: false }), Ur(this, sn, { writable: true, value: void 0 }), Ur(this, on, { writable: true, value: void 0 }), Ur(this, cn, { writable: true, value: void 0 }), Ur(this, dn, { writable: true, value: void 0 });
              var l2 = new RTCPeerConnection(fr({ iceServers: n2 }, d2)), p2 = new RTCPeerConnection(fr({ iceServers: n2 }, d2)), u2 = l2.createDataChannel("channel", c2);
              u2.onopen = function() {
                Nr(t3, nn, true), t3.onOpen();
              }, u2.onclose = function() {
                return t3.close();
              }, p2.ondatachannel = function(e4) {
                var r3 = e4.channel;
                r3.onclose = function() {
                  return t3.close();
                }, r3.onmessage = function(e5) {
                  return t3.onMessageReceived(e5.data);
                }, Nr(t3, dn, r3);
              }, l2.onicecandidate = function(e4) {
                e4.candidate && i2(e4.candidate) && p2.addIceCandidate(e4.candidate);
              }, p2.onicecandidate = function(e4) {
                e4.candidate && i2(e4.candidate) && l2.addIceCandidate(e4.candidate);
              }, l2.createOffer().then(function(e4) {
                return l2.setLocalDescription(e4);
              }).then(function() {
                return p2.setRemoteDescription(l2.localDescription);
              }).then(function() {
                return p2.createAnswer();
              }).then(function(e4) {
                return p2.setLocalDescription(e4);
              }).then(function() {
                return l2.setRemoteDescription(p2.localDescription);
              }), Nr(this, sn, l2), Nr(this, on, p2), Nr(this, cn, u2), Nr(this, nn, false);
            }
            return vr(e3, [
              {
                key: "send",
                value: function(e4) {
                  return Lr(this, cn).send(e4);
                }
              },
              {
                key: "close",
                value: function() {
                  return Lr(this, sn) && Lr(this, sn).close(), Lr(this, on) && Lr(this, on).close(), Lr(this, cn) && Lr(this, cn).close(), Lr(this, dn) && Lr(this, dn).close(), Lr(this, nn) && this.onClose(), Nr(this, nn, false), this;
                }
              }
            ]), e3;
          }(), pn = /* @__PURE__ */ new WeakMap(), un = /* @__PURE__ */ new WeakMap(), hn = /* @__PURE__ */ new WeakMap(), mn = /* @__PURE__ */ new WeakMap(), fn = /* @__PURE__ */ new WeakMap(), gn = /* @__PURE__ */ new WeakMap(), _n = function() {
            function e3() {
              var t3 = this, r2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a2 = r2.turnServerUri, n2 = r2.turnServerCredsApi, s2 = r2.turnServerCredsApiParser, i2 = void 0 === s2 ? function(e4) {
                return {
                  turnServerUser: e4.username,
                  turnServerPass: e4.credential
                };
              } : s2, o2 = r2.turnServerCredsApiIncludeCredentials, c2 = void 0 !== o2 && o2, d2 = r2.turnServerUser, l2 = r2.turnServerPass, p2 = r2.numMsgs, u2 = void 0 === p2 ? 100 : p2, h2 = r2.batchSize, m2 = void 0 === h2 ? 10 : h2, f2 = r2.batchWaitTime, g2 = void 0 === f2 ? 10 : f2, _2 = r2.responsesWaitTime, v2 = void 0 === _2 ? 5e3 : _2, b2 = r2.connectionTimeout, y2 = void 0 === b2 ? 5e3 : b2;
              if (gr(this, e3), Ur(this, pn, { writable: true, value: function() {
              } }), Ur(this, un, { writable: true, value: function() {
              } }), Ur(this, hn, { writable: true, value: function() {
              } }), br(this, "onMsgSent", function() {
              }), br(this, "onAllMsgsSent", function() {
              }), br(this, "onMsgReceived", function() {
              }), Ur(this, mn, { writable: true, value: {} }), Ur(this, fn, { writable: true, value: void 0 }), Ur(this, gn, { writable: true, value: void 0 }), !a2)
                throw new Error("Missing turnServerUri argument");
              if (!(d2 && l2 || n2))
                throw new Error(
                  "Missing either turnServerCredsApi or turnServerUser+turnServerPass arguments"
                );
              Nr(this, gn, u2), (d2 && l2 ? Promise.resolve({ turnServerUser: d2, turnServerPass: l2 }) : fetch(n2, { credentials: c2 ? "include" : void 0 }).then(function(e4) {
                return e4.json();
              }).then(function(e4) {
                if (e4.error) throw e4.error;
                return e4;
              }).then(i2)).catch(function(e4) {
                return Lr(t3, pn).call(t3, e4);
              }).then(function(e4) {
                var r3 = e4.turnServerUser, n3 = e4.turnServerPass, s3 = Nr(
                  t3,
                  fn,
                  new ln({
                    iceServers: [
                      {
                        urls: "turn:".concat(a2, "?transport=udp"),
                        username: r3,
                        credential: n3
                      }
                    ],
                    iceTransportPolicy: "relay"
                  })
                ), i3 = false;
                setTimeout(function() {
                  i3 || (s3.close(), Lr(t3, un).call(t3, "ICE connection timeout!"));
                }, y2);
                var o3 = Lr(t3, mn);
                s3.onOpen = function() {
                  i3 = true;
                  var e5 = t3;
                  !function t4(r4) {
                    if (r4 <= u2) {
                      for (var a3 = r4; a3 <= Math.min(u2, r4 + m2 - 1); )
                        o3[a3] = false, s3.send(a3), e5.onMsgSent(a3), a3++;
                      setTimeout(function() {
                        return t4(a3);
                      }, g2);
                    } else {
                      e5.onAllMsgsSent(Object.keys(o3).length);
                      var n4 = function() {
                        s3.close(), Lr(e5, hn).call(e5, e5.results);
                      }, i4 = setTimeout(n4, v2), c3 = Object.values(Lr(e5, mn)).filter(function(e6) {
                        return !e6;
                      }).length;
                      s3.onMessageReceived = function(t5) {
                        clearTimeout(i4), o3[t5] = true, e5.onMsgReceived(t5), --c3 <= 0 && Object.values(Lr(e5, mn)).every(function(e6) {
                          return e6;
                        }) ? n4() : i4 = setTimeout(n4, v2);
                      };
                    }
                  }(1);
                }, s3.onMessageReceived = function(e5) {
                  o3[e5] = true, t3.onMsgReceived(e5);
                };
              }).catch(function(e4) {
                return Lr(t3, un).call(t3, e4.toString());
              });
            }
            return vr(e3, [
              {
                key: "onCredentialsFailure",
                set: function(e4) {
                  Nr(this, pn, e4);
                }
              },
              {
                key: "onConnectionError",
                set: function(e4) {
                  Nr(this, un, e4);
                }
              },
              {
                key: "onFinished",
                set: function(e4) {
                  Nr(this, hn, e4);
                }
              },
              {
                key: "results",
                get: function() {
                  var e4 = Lr(this, gn), t3 = Object.keys(Lr(this, mn)).length, r2 = Object.entries(Lr(this, mn)).filter(function(e5) {
                    return !Dr(e5, 2)[1];
                  }).map(function(e5) {
                    return +Dr(e5, 1)[0];
                  });
                  return {
                    totalMessages: e4,
                    numMessagesSent: t3,
                    packetLoss: r2.length / t3,
                    lostMessages: r2
                  };
                }
              }
            ]), e3;
          }(), vn = [
            "downloadChunkSize",
            "uploadChunkSize",
            "downloadApiUrl",
            "uploadApiUrl"
          ], bn = /* @__PURE__ */ new WeakMap(), yn = function(e3) {
            yr(r2, e3);
            var t3 = kr(r2);
            function r2() {
              var e4, a2, n2, s2, i2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, o2 = i2.downloadChunkSize, c2 = i2.uploadChunkSize, d2 = i2.downloadApiUrl, l2 = i2.uploadApiUrl, p2 = Rr(i2, vn);
              return gr(this, r2), Ur(Er(s2 = t3.call(this, p2)), bn, {
                writable: true,
                value: void 0
              }), (o2 || c2) && (Nr(
                Er(s2),
                bn,
                new rn({
                  download: o2 ? { apiUrl: d2, chunkSize: o2 } : null,
                  upload: c2 ? { apiUrl: l2, chunkSize: c2 } : null
                })
              ), Or(
                (e4 = Er(s2), wr(r2.prototype)),
                "onCredentialsFailure",
                Or(
                  (n2 = Er(s2), wr(r2.prototype)),
                  "onConnectionError",
                  Or(
                    (a2 = Er(s2), wr(r2.prototype)),
                    "onFinished",
                    function() {
                      return Lr(Er(s2), bn).stop();
                    },
                    a2,
                    true
                  ),
                  n2,
                  true
                ),
                e4,
                true
              )), s2;
            }
            return vr(r2, [
              {
                key: "qsParams",
                set: function(e4) {
                  Lr(this, bn) && (Lr(this, bn).qsParams = e4);
                }
              },
              {
                key: "fetchOptions",
                set: function(e4) {
                  Lr(this, bn) && (Lr(this, bn).fetchOptions = e4);
                }
              },
              {
                key: "onCredentialsFailure",
                set: function(e4) {
                  var t4 = this;
                  Or(
                    wr(r2.prototype),
                    "onCredentialsFailure",
                    function() {
                      e4.apply(void 0, arguments), Lr(t4, bn) && Lr(t4, bn).stop();
                    },
                    this,
                    true
                  );
                }
              },
              {
                key: "onConnectionError",
                set: function(e4) {
                  var t4 = this;
                  Or(
                    wr(r2.prototype),
                    "onConnectionError",
                    function() {
                      e4.apply(void 0, arguments), Lr(t4, bn) && Lr(t4, bn).stop();
                    },
                    this,
                    true
                  );
                }
              },
              {
                key: "onFinished",
                set: function(e4) {
                  var t4 = this;
                  Or(
                    wr(r2.prototype),
                    "onFinished",
                    function() {
                      e4.apply(void 0, arguments), Lr(t4, bn) && Lr(t4, bn).stop();
                    },
                    this,
                    true
                  );
                }
              }
            ]), r2;
          }(_n), wn = ["reachable"], Sn = vr(function e3(t3) {
            var r2 = this, a2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n2 = a2.timeout, s2 = void 0 === n2 ? -1 : n2, i2 = a2.fetchOptions, o2 = void 0 === i2 ? {} : i2;
            gr(this, e3), br(this, "onFinished", function() {
            });
            var c2 = false, d2 = function(e4) {
              var a3 = e4.reachable, n3 = Rr(e4, wn);
              c2 || (c2 = true, r2.onFinished(fr({ targetUrl: t3, reachable: a3 }, n3)));
            };
            fetch(t3, o2).then(function(e4) {
              d2({ reachable: true, response: e4 });
            }).catch(function(e4) {
              d2({ reachable: false, error: e4 });
            }), s2 > 0 && setTimeout(function() {
              return d2({ reachable: false, error: "Request timeout" });
            }, s2);
          }), Rn = function(e3) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0.5;
            if (!e3.length) return 0;
            var r2 = e3.slice().sort(function(e4, t4) {
              return e4 - t4;
            }), a2 = (e3.length - 1) * t3, n2 = a2 % 1;
            if (0 === n2) return r2[Math.round(a2)];
            var s2 = [Math.floor, Math.ceil].map(function(e4) {
              return r2[e4(a2)];
            });
            return s2[0] + (s2[1] - s2[0]) * n2;
          }, En = /* @__PURE__ */ new WeakMap(), kn = /* @__PURE__ */ new WeakMap(), Tn = function() {
            function e3(t3) {
              var r2 = this;
              gr(this, e3), br(this, "getLatencyPoints", function(e4) {
                return e4.timings.map(function(e5) {
                  return e5.ping;
                });
              }), br(this, "getLatency", function(e4) {
                return Rn(r2.getLatencyPoints(e4), Lr(r2, En).latencyPercentile);
              }), br(this, "getBandwidthPoints", function(e4) {
                return Object.entries(e4).map(function(e5) {
                  var t4 = Dr(e5, 2), r3 = t4[0];
                  return t4[1].timings.map(function(e6) {
                    var t5 = e6.bps, a2 = e6.duration, n2 = e6.ping, s2 = e6.measTime, i2 = e6.serverTime, o2 = e6.transferSize;
                    return {
                      bytes: +r3,
                      bps: t5,
                      duration: a2,
                      ping: n2,
                      measTime: s2,
                      serverTime: i2,
                      transferSize: o2
                    };
                  });
                }).flat();
              }), br(this, "getBandwidth", function(e4) {
                return Rn(
                  r2.getBandwidthPoints(e4).filter(function(e5) {
                    return e5.duration >= Lr(r2, En).bandwidthMinRequestDuration;
                  }).map(function(e5) {
                    return e5.bps;
                  }).filter(function(e5) {
                    return e5;
                  }),
                  Lr(r2, En).bandwidthPercentile
                );
              }), br(this, "getLoadedLatency", function(e4) {
                return r2.getLatency({ timings: Lr(r2, kn).call(r2, e4) });
              }), br(this, "getLoadedJitter", function(e4) {
                return r2.getJitter({ timings: Lr(r2, kn).call(r2, e4) });
              }), br(this, "getLoadedLatencyPoints", function(e4) {
                return r2.getLatencyPoints({ timings: Lr(r2, kn).call(r2, e4) });
              }), br(this, "getPacketLoss", function(e4) {
                return e4.packetLoss;
              }), br(this, "getPacketLossDetails", function(e4) {
                return e4;
              }), br(this, "getReachability", function(e4) {
                return !!e4.reachable;
              }), br(this, "getReachabilityDetails", function(e4) {
                return { host: e4.host, reachable: e4.reachable };
              }), Ur(this, En, { writable: true, value: void 0 }), Ur(this, kn, {
                writable: true,
                value: function(e4) {
                  return Object.values(e4).filter(function(e5) {
                    return e5.timings.length && Math.min.apply(
                      Math,
                      xr(
                        e5.timings.map(function(e6) {
                          return e6.duration;
                        })
                      )
                    ) >= Lr(r2, En).loadedRequestMinDuration;
                  }).map(function(e5) {
                    return e5.sideLatency || [];
                  }).flat().slice(-Lr(r2, En).loadedLatencyMaxPoints);
                }
              }), Nr(this, En, t3);
            }
            return vr(e3, [
              {
                key: "getJitter",
                value: function(e4) {
                  var t3 = this.getLatencyPoints(e4);
                  return t3.length < 2 ? null : t3.reduce(function(e5, t4) {
                    var r2 = e5.sumDeltas, a2 = void 0 === r2 ? 0 : r2, n2 = e5.prevLatency;
                    return {
                      sumDeltas: a2 + (void 0 !== n2 ? Math.abs(n2 - t4) : 0),
                      prevLatency: t4
                    };
                  }, {}).sumDeltas / (t3.length - 1);
                }
              }
            ]), e3;
          }(), Cn = ["bad", "poor", "average", "good", "great"], Pn = {
            loadedLatencyIncrease: function(e3) {
              return e3.latency && (e3.downLoadedLatency || e3.upLoadedLatency) ? Math.max(e3.downLoadedLatency, e3.upLoadedLatency) - e3.latency : void 0;
            }
          }, On = { packetLoss: 0 }, Dn = /* @__PURE__ */ new WeakMap(), xn = function() {
            function e3(t3) {
              gr(this, e3), Ur(this, Dn, { writable: true, value: void 0 }), Nr(this, Dn, t3);
            }
            return vr(e3, [
              {
                key: "getScores",
                value: function(e4) {
                  var t3 = Object.assign.apply(
                    Object,
                    xr(
                      Object.entries(Lr(this, Dn).aimMeasurementScoring).map(
                        function(t4) {
                          var r2 = Dr(t4, 2), a2 = r2[0], n2 = r2[1], s2 = Pn.hasOwnProperty(a2) ? Pn[a2](e4) : e4[a2];
                          return void 0 === s2 ? On.hasOwnProperty(a2) ? br({}, a2, On[a2]) : {} : br({}, a2, void 0 === s2 ? 0 : +n2(s2));
                        }
                      )
                    )
                  );
                  return Object.assign.apply(
                    Object,
                    [{}].concat(
                      xr(
                        Object.entries(Lr(this, Dn).aimExperiencesDefs).filter(function(e5) {
                          return Dr(e5, 2)[1].input.every(function(e6) {
                            return t3.hasOwnProperty(e6);
                          });
                        }).map(function(e5) {
                          var r2, a2 = Dr(e5, 2), n2 = a2[0], s2 = a2[1], i2 = s2.input, o2 = s2.pointThresholds, c2 = Math.max(
                            0,
                            (r2 = i2.map(function(e6) {
                              return t3[e6];
                            }), r2.reduce(function(e6, t4) {
                              return e6 + t4;
                            }, 0))
                          ), d2 = hr(o2, [0, 1, 2, 3, 4])(c2);
                          return br({}, n2, {
                            points: c2,
                            classificationIdx: d2,
                            classificationName: Cn[d2]
                          });
                        })
                      )
                    )
                  );
                }
              }
            ]), e3;
          }(), In = /* @__PURE__ */ new WeakMap(), Mn = /* @__PURE__ */ new WeakMap(), An = /* @__PURE__ */ new WeakMap(), Ln = /* @__PURE__ */ new WeakMap(), Nn = /* @__PURE__ */ new WeakMap(), jn = /* @__PURE__ */ new WeakMap(), Bn = /* @__PURE__ */ new WeakMap(), Fn = /* @__PURE__ */ new WeakMap(), Un = function() {
            function e3(t3) {
              var r2 = this;
              gr(this, e3), br(this, "raw", void 0), br(this, "getUnloadedLatency", function() {
                return Lr(r2, Ln).call(r2, "getLatency", "latency");
              }), br(this, "getUnloadedJitter", function() {
                return Lr(r2, Ln).call(r2, "getJitter", "latency");
              }), br(this, "getUnloadedLatencyPoints", function() {
                return Lr(r2, Ln).call(r2, "getLatencyPoints", "latency", []);
              }), br(this, "getDownLoadedLatency", function() {
                return Lr(r2, Ln).call(r2, "getLoadedLatency", "download");
              }), br(this, "getDownLoadedJitter", function() {
                return Lr(r2, Ln).call(r2, "getLoadedJitter", "download");
              }), br(this, "getDownLoadedLatencyPoints", function() {
                return Lr(r2, Ln).call(
                  r2,
                  "getLoadedLatencyPoints",
                  "download",
                  []
                );
              }), br(this, "getUpLoadedLatency", function() {
                return Lr(r2, Ln).call(r2, "getLoadedLatency", "upload");
              }), br(this, "getUpLoadedJitter", function() {
                return Lr(r2, Ln).call(r2, "getLoadedJitter", "upload");
              }), br(this, "getUpLoadedLatencyPoints", function() {
                return Lr(r2, Ln).call(
                  r2,
                  "getLoadedLatencyPoints",
                  "upload",
                  []
                );
              }), br(this, "getDownloadBandwidth", function() {
                return Lr(r2, Ln).call(r2, "getBandwidth", "download");
              }), br(this, "getDownloadBandwidthPoints", function() {
                return Lr(r2, Ln).call(
                  r2,
                  "getBandwidthPoints",
                  "download",
                  []
                );
              }), br(this, "getUploadBandwidth", function() {
                return Lr(r2, Ln).call(r2, "getBandwidth", "upload");
              }), br(this, "getUploadBandwidthPoints", function() {
                return Lr(r2, Ln).call(r2, "getBandwidthPoints", "upload", []);
              }), br(this, "getPacketLoss", function() {
                return Lr(r2, Ln).call(r2, "getPacketLoss", "packetLoss");
              }), br(this, "getPacketLossDetails", function() {
                return Lr(r2, Ln).call(
                  r2,
                  "getPacketLossDetails",
                  "packetLoss",
                  void 0,
                  true
                );
              }), br(this, "getScores", function() {
                return Lr(r2, An).getScores(r2.getSummary());
              }), Ur(this, In, { writable: true, value: void 0 }), Ur(this, Mn, { writable: true, value: void 0 }), Ur(this, An, { writable: true, value: void 0 }), Ur(this, Ln, {
                writable: true,
                value: function(e4, t4) {
                  var a2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, n2 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
                  return r2.raw.hasOwnProperty(t4) && r2.raw[t4].started ? n2 && r2.raw[t4].error ? { error: r2.raw[t4].error } : Lr(r2, Mn)[e4](r2.raw[t4].results) : a2;
                }
              }), Ur(this, Nn, {
                writable: true,
                value: function() {
                  return Lr(r2, Ln).call(
                    r2,
                    "getReachability",
                    "v4Reachability"
                  );
                }
              }), Ur(this, jn, {
                writable: true,
                value: function() {
                  return Lr(r2, Ln).call(
                    r2,
                    "getReachabilityDetails",
                    "v4Reachability"
                  );
                }
              }), Ur(this, Bn, {
                writable: true,
                value: function() {
                  return Lr(r2, Ln).call(
                    r2,
                    "getReachability",
                    "v6Reachability"
                  );
                }
              }), Ur(this, Fn, {
                writable: true,
                value: function() {
                  return Lr(r2, Ln).call(
                    r2,
                    "getReachabilityDetails",
                    "v6Reachability"
                  );
                }
              }), Nr(this, In, t3), this.clear(), Nr(this, Mn, new Tn(Lr(this, In))), Nr(this, An, new xn(Lr(this, In)));
            }
            return vr(e3, [
              {
                key: "isFinished",
                get: function() {
                  return Object.values(this.raw).every(function(e4) {
                    return e4.finished;
                  });
                }
              },
              {
                key: "clear",
                value: function() {
                  this.raw = Object.assign.apply(
                    Object,
                    [{}].concat(
                      xr(
                        xr(
                          new Set(
                            Lr(this, In).measurements.map(function(e4) {
                              return e4.type;
                            })
                          )
                        ).map(function(e4) {
                          return br({}, e4, {
                            started: false,
                            finished: false,
                            results: {}
                          });
                        })
                      )
                    )
                  );
                }
              },
              {
                key: "getSummary",
                value: function() {
                  var e4 = {
                    download: this.getDownloadBandwidth,
                    upload: this.getUploadBandwidth,
                    latency: this.getUnloadedLatency,
                    jitter: this.getUnloadedJitter,
                    downLoadedLatency: this.getDownLoadedLatency,
                    downLoadedJitter: this.getDownLoadedJitter,
                    upLoadedLatency: this.getUpLoadedLatency,
                    upLoadedJitter: this.getUpLoadedJitter,
                    packetLoss: this.getPacketLoss,
                    v4Reachability: Lr(this, Nn),
                    v6Reachability: Lr(this, Bn)
                  };
                  return Object.assign.apply(
                    Object,
                    xr(
                      Object.entries(e4).map(function(e5) {
                        var t3 = Dr(e5, 2), r2 = t3[0], a2 = (0, t3[1])();
                        return void 0 === a2 ? {} : br({}, r2, a2);
                      })
                    )
                  );
                }
              }
            ]), e3;
          }(), Wn = function(e3) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
            return e3 ? Math.round(e3 * Math.pow(10, t3)) / Math.pow(10, t3) : e3;
          }, qn = function(e3) {
            return e3.map(function(e4) {
              return Wn(e4, 2);
            });
          }, Hn = function(e3) {
            return e3.map(function(e4) {
              return { bytes: +e4.bytes, bps: Wn(e4.bps) };
            });
          }, Vn = {
            latencyMs: ["getUnloadedLatencyPoints", qn],
            download: ["getDownloadBandwidthPoints", Hn],
            upload: ["getUploadBandwidthPoints", Hn],
            downLoadedLatencyMs: ["getDownLoadedLatencyPoints", qn],
            upLoadedLatencyMs: ["getUpLoadedLatencyPoints", qn],
            packetLoss: [
              "getPacketLossDetails",
              function(e3) {
                return e3.error ? void 0 : {
                  numMessages: e3.numMessagesSent,
                  lossRatio: Wn(e3.packetLoss, 4)
                };
              }
            ]
          }, Gn = function(e3, t3) {
            var r2 = t3.apiUrl, a2 = {};
            Object.entries(Vn).forEach(function(t4) {
              var r3 = Dr(t4, 2), n3 = r3[0], s2 = Dr(r3[1], 2), i2 = s2[0], o2 = s2[1], c2 = void 0 === o2 ? function(e4) {
                return e4;
              } : o2, d2 = e3[i2]();
              d2 && (a2[n3] = c2(d2));
            });
            var n2 = e3.getScores();
            n2 && (a2.scores = Object.assign.apply(
              Object,
              [{}].concat(
                xr(
                  Object.entries(n2).map(function(e4) {
                    var t4, r3 = Dr(e4, 2), a3 = r3[0], n3 = r3[1];
                    return br({}, a3, {
                      points: (t4 = n3).points,
                      classification: t4.classificationName
                    });
                  })
                )
              )
            )), fetch(r2, { method: "POST", body: JSON.stringify(a2) });
          }, zn = ["type"], $n = ["numPackets"], Kn = ["bytes"], Jn = ["latency", "latencyUnderLoad", "download", "upload"], Qn = function() {
            return "".concat(Math.round(1e16 * Math.random()));
          }, Yn = /* @__PURE__ */ new WeakMap(), Xn = /* @__PURE__ */ new WeakMap(), Zn = /* @__PURE__ */ new WeakMap(), es = /* @__PURE__ */ new WeakMap(), ts = /* @__PURE__ */ new WeakMap(), rs = /* @__PURE__ */ new WeakMap(), as = /* @__PURE__ */ new WeakMap(), ns = /* @__PURE__ */ new WeakMap(), ss = /* @__PURE__ */ new WeakMap(), is = /* @__PURE__ */ new WeakMap(), os = /* @__PURE__ */ new WeakMap(), cs = /* @__PURE__ */ new WeakSet(), ds = /* @__PURE__ */ new WeakSet(), ls = /* @__PURE__ */ new WeakSet(), ps = /* @__PURE__ */ new WeakSet(), us = /* @__PURE__ */ new WeakSet(), hs = /* @__PURE__ */ new WeakSet(), ms = /* @__PURE__ */ new WeakSet(), fs = function() {
            function e3() {
              var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              gr(this, e3), Wr(this, ms), Wr(this, hs), Wr(this, us), Wr(this, ps), Wr(this, ls), Wr(this, ds), Wr(this, cs), br(this, "onRunningChange", function() {
              }), br(this, "onResultsChange", function() {
              }), Ur(this, Yn, { writable: true, value: function() {
              } }), Ur(this, Xn, { writable: true, value: function() {
              } }), Ur(this, Zn, { writable: true, value: void 0 }), Ur(this, es, { writable: true, value: void 0 }), Ur(this, ts, { writable: true, value: Qn() }), Ur(this, rs, { writable: true, value: -1 }), Ur(this, as, { writable: true, value: void 0 }), Ur(this, ns, { writable: true, value: 1e6 }), Ur(this, ss, { writable: true, value: 1e6 }), Ur(this, is, { writable: true, value: false }), Ur(this, os, { writable: true, value: false }), Nr(this, Zn, Object.assign({}, Hr, t3, Vr)), Nr(this, es, new Un(Lr(this, Zn))), Lr(this, Zn).autoStart && this.play();
            }
            return vr(e3, [
              {
                key: "results",
                get: function() {
                  return Lr(this, es);
                }
              },
              {
                key: "isRunning",
                get: function() {
                  return Lr(this, is);
                }
              },
              {
                key: "isFinished",
                get: function() {
                  return Lr(this, os);
                }
              },
              {
                key: "onFinish",
                set: function(e4) {
                  Nr(this, Yn, e4);
                }
              },
              {
                key: "onError",
                set: function(e4) {
                  Nr(this, Xn, e4);
                }
              },
              {
                key: "pause",
                value: function() {
                  Jn.includes(Br(this, ls, vs).call(this)) && Lr(this, as).pause(), Br(this, cs, gs).call(this, false);
                }
              },
              {
                key: "play",
                value: function() {
                  Lr(this, is) || (Br(this, cs, gs).call(this, true), Br(this, ms, Ss).call(this));
                }
              },
              {
                key: "restart",
                value: function() {
                  Br(this, us, ys).call(this), this.play();
                }
              }
            ]), e3;
          }();
          function gs(e3) {
            e3 !== Lr(this, is) && (Nr(this, is, e3), this.onRunningChange(Lr(this, is)));
          }
          function _s(e3) {
            var t3 = this;
            e3 !== Lr(this, os) && (Nr(this, os, e3), e3 && setTimeout(function() {
              return Lr(t3, Yn).call(t3, t3.results);
            }));
          }
          function vs() {
            return Lr(this, rs) < 0 || Lr(this, rs) >= Lr(this, Zn).measurements.length ? null : Lr(this, Zn).measurements[Lr(this, rs)].type;
          }
          function bs() {
            return Lr(this, es).raw[Br(this, ls, vs).call(this)] || void 0;
          }
          function ys() {
            Br(this, hs, ws).call(this), Nr(this, ts, Qn()), Nr(this, rs, -1), Nr(this, as, void 0), Br(this, cs, gs).call(this, false), Br(this, ds, _s).call(this, false), Lr(this, es).clear();
          }
          function ws() {
            var e3 = Lr(this, as);
            e3 && (e3.onFinished = e3.onConnectionError = e3.onFail = e3.onMsgReceived = e3.onCredentialsFailure = e3.onMeasurementResult = function() {
            }, Jn.includes(Br(this, ls, vs).call(this)) && e3.pause());
          }
          function Ss() {
            var e3, t3 = this;
            if (!(Jn.includes(Br(this, ls, vs).call(this)) && Br(this, ps, bs).call(this) && Br(this, ps, bs).call(this).started) || Br(this, ps, bs).call(this).finished || Br(this, ps, bs).call(this).finishedCurrentRound || Br(this, ps, bs).call(this).error) {
              if (Nr(this, rs, (e3 = Lr(this, rs), ++e3)), Lr(this, rs) >= Lr(this, Zn).measurements.length)
                return Br(this, cs, gs).call(this, false), void Br(this, ds, _s).call(this, true);
              var r2, a2 = Lr(this, Zn).measurements[Lr(this, rs)], n2 = a2.type, s2 = Rr(a2, zn), i2 = Br(this, ps, bs).call(this), o2 = Lr(this, Zn), c2 = o2.downloadApiUrl, d2 = o2.uploadApiUrl, l2 = o2.estimatedServerTime;
              switch (n2) {
                case "v4Reachability":
                case "v6Reachability":
                  (r2 = new Sn("https://".concat(s2.host), {
                    fetchOptions: { method: "GET", mode: "no-cors" }
                  })).onFinished = function(e4) {
                    i2.finished = true, i2.results = fr({ host: s2.host }, e4), t3.onResultsChange({ type: n2 }), Br(t3, ms, Ss).call(t3);
                  };
                  break;
                case "rpki":
                  (r2 = new Sn("https://".concat(Lr(this, Zn).rpkiInvalidHost), {
                    timeout: 5e3
                  })).onFinished = function(e4) {
                    (e4.response ? e4.response.json() : Promise.resolve()).then(
                      function(r3) {
                        i2.finished = true, i2.results = fr(
                          {
                            host: Lr(t3, Zn).rpkiInvalidHost,
                            filteringInvalids: !e4.reachable
                          },
                          r3 ? { asn: r3.asn, name: r3.name } : {}
                        ), t3.onResultsChange({ type: n2 }), Br(t3, ms, Ss).call(t3);
                      }
                    );
                  };
                  break;
                case "nxdomain":
                  (r2 = new Sn("https://".concat(s2.nxhost), {
                    fetchOptions: { mode: "no-cors" }
                  })).onFinished = function(e4) {
                    i2.finished = true, i2.results = { host: s2.nxhost, reachable: e4.reachable }, t3.onResultsChange({ type: n2 }), Br(t3, ms, Ss).call(t3);
                  };
                  break;
                case "packetLoss":
                case "packetLossUnderLoad":
                  i2.finished = false;
                  var p2 = s2.numPackets, u2 = Rr(s2, $n), h2 = Lr(this, Zn), m2 = h2.turnServerUri, f2 = h2.turnServerCredsApiUrl, g2 = h2.turnServerUser, _2 = h2.turnServerPass, v2 = h2.includeCredentials;
                  (r2 = new yn(
                    fr(
                      {
                        turnServerUri: m2,
                        turnServerCredsApi: f2,
                        turnServerCredsApiIncludeCredentials: v2,
                        turnServerUser: g2,
                        turnServerPass: _2,
                        numMsgs: p2,
                        downloadChunkSize: s2.loadDown ? Lr(this, ns) : void 0,
                        uploadChunkSize: s2.loadUp ? Lr(this, ss) : void 0,
                        downloadApiUrl: c2,
                        uploadApiUrl: d2
                      },
                      u2
                    )
                  )).onMsgReceived = function() {
                    i2.results = Object.assign({}, r2.results), t3.onResultsChange({ type: n2 });
                  }, r2.onFinished = function() {
                    i2.finished = true, t3.onResultsChange({ type: n2 }), Br(t3, ms, Ss).call(t3);
                  }, r2.onConnectionError = function(e4) {
                    i2.error = e4, t3.onResultsChange({ type: n2 }), Lr(t3, Xn).call(
                      t3,
                      "Connection error while measuring packet loss: ".concat(
                        e4
                      )
                    ), Br(t3, ms, Ss).call(t3);
                  }, r2.onCredentialsFailure = function() {
                    i2.error = "unable to get turn server credentials", t3.onResultsChange({ type: n2 }), Lr(t3, Xn).call(
                      t3,
                      "Error while measuring packet loss: unable to get turn server credentials."
                    ), Br(t3, ms, Ss).call(t3);
                  };
                  break;
                case "latency":
                case "latencyUnderLoad":
                  i2.finished = false, (r2 = new Va(
                    [
                      {
                        dir: "down",
                        bytes: 0,
                        count: s2.numPackets,
                        bypassMinDuration: true
                      }
                    ],
                    {
                      downloadApiUrl: c2,
                      uploadApiUrl: d2,
                      estimatedServerTime: l2,
                      logApiUrl: Lr(this, Zn).logMeasurementApiUrl,
                      measurementId: Lr(this, ts),
                      downloadChunkSize: s2.loadDown ? Lr(this, ns) : void 0,
                      uploadChunkSize: s2.loadUp ? Lr(this, ss) : void 0
                    }
                  )).fetchOptions = {
                    credentials: Lr(this, Zn).includeCredentials ? "include" : void 0
                  }, r2.onMeasurementResult = r2.onNewMeasurementStarted = function(e4, r3) {
                    i2.results = Object.assign({}, r3.down[0]), t3.onResultsChange({ type: n2 });
                  }, r2.onFinished = function() {
                    i2.finished = true, t3.onResultsChange({ type: n2 }), Lr(t3, is) && Br(t3, ms, Ss).call(t3);
                  }, r2.onConnectionError = function(e4) {
                    i2.error = e4, t3.onResultsChange({ type: n2 }), Lr(t3, Xn).call(
                      t3,
                      "Connection error while measuring latency: ".concat(e4)
                    ), Br(t3, ms, Ss).call(t3);
                  }, r2.play();
                  break;
                case "download":
                case "upload":
                  if (i2.finished || i2.error) Br(this, ms, Ss).call(this);
                  else {
                    delete i2.finishedCurrentRound;
                    var b2 = Lr(this, Zn)["measure".concat(
                      "download" === n2 ? "Down" : "Up",
                      "loadLoadedLatency"
                    )];
                    (r2 = new Va(
                      [fr({ dir: "download" === n2 ? "down" : "up" }, s2)],
                      {
                        downloadApiUrl: c2,
                        uploadApiUrl: d2,
                        estimatedServerTime: l2,
                        logApiUrl: Lr(this, Zn).logMeasurementApiUrl,
                        measurementId: Lr(this, ts),
                        measureParallelLatency: b2,
                        parallelLatencyThrottleMs: Lr(this, Zn).loadedLatencyThrottle
                      }
                    )).fetchOptions = {
                      credentials: Lr(this, Zn).includeCredentials ? "include" : void 0
                    }, r2.finishRequestDuration = Lr(
                      this,
                      Zn
                    ).bandwidthFinishRequestDuration, r2.onNewMeasurementStarted = function(e4) {
                      var r3 = e4.count, a3 = e4.bytes, s3 = i2.results = Object.assign({}, i2.results);
                      !s3.hasOwnProperty(a3) && (s3[a3] = {
                        timings: [],
                        numMeasurements: 0,
                        sideLatency: b2 ? [] : void 0
                      }), s3[a3].numMeasurements - s3[a3].timings.length !== r3 && (s3[a3].numMeasurements += r3, t3.onResultsChange({ type: n2 }));
                    }, r2.onMeasurementResult = function(e4) {
                      var r3 = e4.bytes, a3 = Rr(e4, Kn);
                      i2.results[r3].timings.push(a3), i2.results = Object.assign({}, i2.results), t3.onResultsChange({ type: n2 });
                    }, r2.onParallelLatencyResult = function(e4) {
                      i2.results[s2.bytes].sideLatency.push(e4), i2.results = Object.assign({}, i2.results), t3.onResultsChange({ type: n2 });
                    }, r2.onFinished = function(e4) {
                      var r3 = !Lr(t3, Zn).measurements.slice(Lr(t3, rs) + 1).map(function(e5) {
                        return e5.type;
                      }).includes(n2), a3 = Math.min.apply(
                        Math,
                        xr(
                          Object.values("download" === n2 ? e4.down : e4.up).slice(-1)[0].timings.map(function(e5) {
                            return e5.duration;
                          })
                        )
                      );
                      if (r3 || !s2.bypassMinDuration && a3 > Lr(t3, Zn).bandwidthFinishRequestDuration) {
                        i2.finished = true, t3.onResultsChange({ type: n2 });
                        var o3 = 0.5 * Object.keys(i2.results).map(function(e5) {
                          return +e5;
                        }).sort(function(e5, t4) {
                          return t4 - e5;
                        })[0];
                        "download" === n2 && Nr(t3, ns, o3), "upload" === n2 && Nr(t3, ss, o3);
                      } else i2.finishedCurrentRound = true;
                      Lr(t3, is) && Br(t3, ms, Ss).call(t3);
                    }, r2.onConnectionError = function(e4) {
                      i2.error = e4, t3.onResultsChange({ type: n2 }), Lr(t3, Xn).call(
                        t3,
                        "Connection error while measuring ".concat(n2, ": ").concat(e4)
                      ), Br(t3, ms, Ss).call(t3);
                    }, r2.play();
                  }
              }
              Nr(this, as, r2), i2.started = true, this.onResultsChange({ type: n2 });
            } else Lr(this, as).play();
          }
          var Rs = /* @__PURE__ */ new WeakMap(), Es = /* @__PURE__ */ new WeakMap(), ks = function(e3) {
            yr(r2, e3);
            var t3 = kr(r2);
            function r2(e4) {
              var a2, n2;
              gr(this, r2);
              for (var s2 = arguments.length, i2 = new Array(s2 > 1 ? s2 - 1 : 0), o2 = 1; o2 < s2; o2++)
                i2[o2 - 1] = arguments[o2];
              return Ur(Er(n2 = t3.call.apply(t3, [this, e4].concat(i2))), Rs, {
                writable: true,
                value: void 0
              }), Ur(Er(n2), Es, {
                writable: true,
                value: function(e5) {
                  Lr(Er(n2), Rs) && Gn(e5, { apiUrl: Lr(Er(n2), Rs) });
                }
              }), Or(
                (a2 = Er(n2), wr(r2.prototype)),
                "onFinish",
                Lr(Er(n2), Es),
                a2,
                true
              ), Nr(Er(n2), Rs, Object.assign({}, Hr, e4, Vr).logAimApiUrl), n2;
            }
            return vr(r2, [
              {
                key: "onFinish",
                set: function(e4) {
                  var t4 = this;
                  Or(
                    wr(r2.prototype),
                    "onFinish",
                    function(r3) {
                      e4(r3), Lr(t4, Es).call(t4, r3);
                    },
                    this,
                    true
                  );
                }
              }
            ]), r2;
          }(fs);
          function Ts(e3, t3) {
            var r2 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
            if (!r2) {
              if (Array.isArray(e3) || (r2 = function(e4, t4) {
                if (e4) {
                  if ("string" == typeof e4) return Cs(e4, t4);
                  var r3 = {}.toString.call(e4).slice(8, -1);
                  return "Object" === r3 && e4.constructor && (r3 = e4.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e4) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? Cs(e4, t4) : void 0;
                }
              }(e3)) || t3 && e3 && "number" == typeof e3.length) {
                r2 && (e3 = r2);
                var a2 = 0, n2 = function() {
                };
                return {
                  s: n2,
                  n: function() {
                    return a2 >= e3.length ? { done: true } : { done: false, value: e3[a2++] };
                  },
                  e: function(e4) {
                    throw e4;
                  },
                  f: n2
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            var s2, i2 = true, o2 = false;
            return {
              s: function() {
                r2 = r2.call(e3);
              },
              n: function() {
                var e4 = r2.next();
                return i2 = e4.done, e4;
              },
              e: function(e4) {
                o2 = true, s2 = e4;
              },
              f: function() {
                try {
                  i2 || null == r2.return || r2.return();
                } finally {
                  if (o2) throw s2;
                }
              }
            };
          }
          function Cs(e3, t3) {
            (null == t3 || t3 > e3.length) && (t3 = e3.length);
            for (var r2 = 0, a2 = Array(t3); r2 < t3; r2++) a2[r2] = e3[r2];
            return a2;
          }
          var Ps = [R], Os = false, Ds = function() {
            return (0, s.A)(
              function e3() {
                (0, n.A)(this, e3);
              },
              null,
              [
                {
                  key: "config",
                  value: function(e3) {
                    if (!e3)
                      throw new Error(
                        "'token' is empty, please provide it in config"
                      );
                    this.apiKey = e3;
                    var t3 = v(Z, void 0, y.apply(void 0, Ps));
                    window.STORE = t3, ee.default.init({ store: t3 });
                  }
                },
                {
                  key: "getCameras",
                  value: (f2 = (0, t2.A)(
                    c().mark(function e3() {
                      var r3, a3, n2, s2;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (e4.prev = 0, r3 = navigator.userAgent.includes("Firefox"), a3 = [], !r3) {
                                  e4.next = 8;
                                  break;
                                }
                                return e4.next = 6, new Promise(function(e5, r4) {
                                  navigator.mediaDevices.getUserMedia({ audio: false, video: true }).then(
                                    function() {
                                      var r5 = (0, t2.A)(
                                        c().mark(function t3(r6) {
                                          var n3;
                                          return c().wrap(function(t4) {
                                            for (; ; )
                                              switch (t4.prev = t4.next) {
                                                case 0:
                                                  return t4.next = 2, navigator.mediaDevices.enumerateDevices();
                                                case 2:
                                                  n3 = t4.sent, a3 = n3.filter(function(e6) {
                                                    return "videoinput" === e6.kind;
                                                  }).map(function(e6) {
                                                    return new er(
                                                      e6.deviceId,
                                                      e6.groupId,
                                                      e6.kind,
                                                      e6.label
                                                    );
                                                  }), e5(a3), r6.getTracks().forEach(function(e6) {
                                                    return e6.stop();
                                                  });
                                                case 6:
                                                case "end":
                                                  return t4.stop();
                                              }
                                          }, t3);
                                        })
                                      );
                                      return function(e6) {
                                        return r5.apply(this, arguments);
                                      };
                                    }()
                                  ).catch(function(e6) {
                                    console.error(
                                      "Error in getCameras()",
                                      e6
                                    ), r4(e6);
                                  });
                                });
                              case 6:
                                e4.next = 12;
                                break;
                              case 8:
                                return e4.next = 10, navigator.mediaDevices.enumerateDevices();
                              case 10:
                                n2 = e4.sent, a3 = n2.filter(function(e5) {
                                  return "videoinput" === e5.kind;
                                }).map(function(e5) {
                                  return new er(
                                    e5.deviceId,
                                    e5.groupId,
                                    e5.kind,
                                    e5.label
                                  );
                                });
                              case 12:
                                return e4.abrupt("return", a3);
                              case 15:
                                e4.prev = 15, e4.t0 = e4.catch(0), s2 = e4.t0.message, e4.t0 instanceof TypeError && "TypeError" === e4.t0.name && (s2 = zt.q.ERROR_CAMERA_ACCESS_UNAVAILABLE.message), console.error(
                                  "An error occurred in getCameras(), ".concat(
                                    s2
                                  )
                                );
                              case 20:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        null,
                        [[0, 15]]
                      );
                    })
                  ), function() {
                    return f2.apply(this, arguments);
                  })
                },
                {
                  key: "getMicrophones",
                  value: (m2 = (0, t2.A)(
                    c().mark(function e3() {
                      var r3, a3, n2, s2;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (e4.prev = 0, r3 = navigator.userAgent.includes("Firefox"), a3 = [], !r3) {
                                  e4.next = 8;
                                  break;
                                }
                                return e4.next = 6, new Promise(function(e5, r4) {
                                  navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(
                                    function() {
                                      var r5 = (0, t2.A)(
                                        c().mark(function t3(r6) {
                                          var n3;
                                          return c().wrap(function(t4) {
                                            for (; ; )
                                              switch (t4.prev = t4.next) {
                                                case 0:
                                                  return t4.next = 2, navigator.mediaDevices.enumerateDevices();
                                                case 2:
                                                  n3 = t4.sent, a3 = n3.filter(function(e6) {
                                                    return "audioinput" === e6.kind;
                                                  }).map(function(e6) {
                                                    return new tr(
                                                      e6.deviceId,
                                                      e6.groupId,
                                                      e6.kind,
                                                      e6.label
                                                    );
                                                  }), e5(a3), r6.getTracks().forEach(function(e6) {
                                                    return e6.stop();
                                                  });
                                                case 6:
                                                case "end":
                                                  return t4.stop();
                                              }
                                          }, t3);
                                        })
                                      );
                                      return function(e6) {
                                        return r5.apply(this, arguments);
                                      };
                                    }()
                                  ).catch(function(e6) {
                                    console.error(
                                      "Error in getMicrophones()",
                                      e6
                                    ), r4(e6);
                                  });
                                });
                              case 6:
                                e4.next = 12;
                                break;
                              case 8:
                                return e4.next = 10, navigator.mediaDevices.enumerateDevices();
                              case 10:
                                n2 = e4.sent, a3 = n2.filter(function(e5) {
                                  return "audioinput" === e5.kind;
                                }).map(function(e5) {
                                  return new tr(
                                    e5.deviceId,
                                    e5.groupId,
                                    e5.kind,
                                    e5.label
                                  );
                                });
                              case 12:
                                return e4.abrupt("return", a3);
                              case 15:
                                e4.prev = 15, e4.t0 = e4.catch(0), s2 = e4.t0.message, e4.t0 instanceof TypeError && "TypeError" === e4.t0.name && (s2 = zt.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE.message), console.error(
                                  "An error occurred in getMicrophones(), ".concat(
                                    s2
                                  )
                                );
                              case 20:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        null,
                        [[0, 15]]
                      );
                    })
                  ), function() {
                    return m2.apply(this, arguments);
                  })
                },
                {
                  key: "getPlaybackDevices",
                  value: (h2 = (0, t2.A)(
                    c().mark(function e3() {
                      var r3, a3, n2, s2;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (e4.prev = 0, r3 = navigator.userAgent.includes("Firefox"), a3 = [], !r3) {
                                  e4.next = 8;
                                  break;
                                }
                                return e4.next = 6, new Promise(function(e5, r4) {
                                  navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(
                                    function() {
                                      var r5 = (0, t2.A)(
                                        c().mark(function t3(r6) {
                                          var n3;
                                          return c().wrap(function(t4) {
                                            for (; ; )
                                              switch (t4.prev = t4.next) {
                                                case 0:
                                                  return t4.next = 2, navigator.mediaDevices.enumerateDevices();
                                                case 2:
                                                  n3 = t4.sent, a3 = n3.filter(function(e6) {
                                                    return "audiooutput" === e6.kind;
                                                  }).map(function(e6) {
                                                    return new rr(
                                                      e6.deviceId,
                                                      e6.groupId,
                                                      e6.kind,
                                                      e6.label
                                                    );
                                                  }), e5(a3), r6.getTracks().forEach(function(e6) {
                                                    return e6.stop();
                                                  });
                                                case 6:
                                                case "end":
                                                  return t4.stop();
                                              }
                                          }, t3);
                                        })
                                      );
                                      return function(e6) {
                                        return r5.apply(this, arguments);
                                      };
                                    }()
                                  ).catch(function(e6) {
                                    console.error(
                                      "Error in getPlaybackDevices()",
                                      e6
                                    ), r4(e6);
                                  });
                                });
                              case 6:
                                e4.next = 12;
                                break;
                              case 8:
                                return e4.next = 10, navigator.mediaDevices.enumerateDevices();
                              case 10:
                                n2 = e4.sent, a3 = n2.filter(function(e5) {
                                  return "audiooutput" === e5.kind;
                                }).map(function(e5) {
                                  return new rr(
                                    e5.deviceId,
                                    e5.groupId,
                                    e5.kind,
                                    e5.label
                                  );
                                });
                              case 12:
                                return e4.abrupt("return", a3);
                              case 15:
                                e4.prev = 15, e4.t0 = e4.catch(0), s2 = e4.t0.message, e4.t0 instanceof TypeError && "TypeError" === e4.t0.name && (s2 = "Playback device access unavailable: Please ensure your device is compatible and that you're on a secure website (https://)"), console.error(
                                  "An error occurred in getPlaybackDevices(), ".concat(
                                    s2
                                  )
                                );
                              case 20:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        null,
                        [[0, 15]]
                      );
                    })
                  ), function() {
                    return h2.apply(this, arguments);
                  })
                },
                {
                  key: "getDevices",
                  value: (u2 = (0, t2.A)(
                    c().mark(function e3() {
                      var t3, r3, a3, n2, s2, i3;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return e4.prev = 0, e4.next = 3, navigator.mediaDevices.enumerateDevices();
                              case 3:
                                t3 = e4.sent, r3 = [], a3 = Ts(t3);
                                try {
                                  for (a3.s(); !(n2 = a3.n()).done; )
                                    s2 = n2.value, r3.push(
                                      new Zt(
                                        s2.deviceId,
                                        s2.groupId,
                                        s2.kind,
                                        s2.label
                                      )
                                    );
                                } catch (e5) {
                                  a3.e(e5);
                                } finally {
                                  a3.f();
                                }
                                return e4.abrupt("return", r3);
                              case 10:
                                e4.prev = 10, e4.t0 = e4.catch(0), i3 = e4.t0.message, e4.t0 instanceof TypeError && (i3 = "TypeError" === e4.t0.name ? "Could not access devices : Please ensure your devices is compatible and that you're on a secure website (https://)" : e4.t0.message), console.error(
                                  "An error occurred in getDevices(), ".concat(
                                    i3
                                  )
                                );
                              case 15:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        null,
                        [[0, 10]]
                      );
                    })
                  ), function() {
                    return u2.apply(this, arguments);
                  })
                },
                {
                  key: "on",
                  value: function(e3, t3) {
                    if ("device-changed" !== e3)
                      throw new Error("Unsupported event type");
                    this.addDeviceChangeEvent(), this.eventEmitter.on(e3, t3);
                  }
                },
                {
                  key: "addDeviceChangeEvent",
                  value: function() {
                    var e3 = this;
                    if (!Os) {
                      this.getDevices().then(function(t3) {
                        e3.devices = t3;
                      });
                      try {
                        navigator.mediaDevices.addEventListener(
                          "devicechange",
                          function() {
                            var r4 = (0, t2.A)(
                              c().mark(function t3(r5) {
                                var a3, n2, s2, i3, o3;
                                return c().wrap(
                                  function(t4) {
                                    for (; ; )
                                      switch (t4.prev = t4.next) {
                                        case 0:
                                          return a3 = e3.devices, t4.next = 3, e3.getDevices();
                                        case 3:
                                          e3.devices = t4.sent, n2 = new Array(), s2 = Ts(e3.devices), t4.prev = 6, o3 = c().mark(function e4() {
                                            var t5;
                                            return c().wrap(function(e5) {
                                              for (; ; )
                                                switch (e5.prev = e5.next) {
                                                  case 0:
                                                    t5 = i3.value, 0 == a3.filter(function(e6) {
                                                      return e6.deviceId == t5.deviceId && e6.kind == t5.kind;
                                                    }).length ? n2.push(t5) : a3 = a3.filter(
                                                      function(e6) {
                                                        return !(e6.deviceId == t5.deviceId && e6.kind == t5.kind);
                                                      }
                                                    );
                                                  case 3:
                                                  case "end":
                                                    return e5.stop();
                                                }
                                            }, e4);
                                          }), s2.s();
                                        case 9:
                                          if ((i3 = s2.n()).done) {
                                            t4.next = 13;
                                            break;
                                          }
                                          return t4.delegateYield(o3(), "t0", 11);
                                        case 11:
                                          t4.next = 9;
                                          break;
                                        case 13:
                                          t4.next = 18;
                                          break;
                                        case 15:
                                          t4.prev = 15, t4.t1 = t4.catch(6), s2.e(t4.t1);
                                        case 18:
                                          return t4.prev = 18, s2.f(), t4.finish(18);
                                        case 21:
                                          0 != n2.length && e3.eventEmitter.emit(
                                            "device-changed",
                                            { devices: e3.devices }
                                          ), 0 != a3.length && e3.eventEmitter.emit(
                                            "device-changed",
                                            { devices: e3.devices }
                                          );
                                        case 23:
                                        case "end":
                                          return t4.stop();
                                      }
                                  },
                                  t3,
                                  null,
                                  [[6, 15, 18, 21]]
                                );
                              })
                            );
                            return function(e4) {
                              return r4.apply(this, arguments);
                            };
                          }()
                        ), Os = true;
                      } catch (e4) {
                        var r3 = e4.message;
                        e4 instanceof TypeError && (r3 = "TypeError" === e4.name ? "Could not access devices : Please ensure your devices is compatible and that you're on a secure website (https://)" : e4.message), console.error(
                          "An error occurred in device-change event, ".concat(
                            r3
                          )
                        );
                      }
                    }
                  }
                },
                {
                  key: "off",
                  value: function(e3, t3) {
                    if ("device-changed" !== e3)
                      throw new Error("Unsupported event type");
                    this.eventEmitter.off(e3, t3);
                  }
                },
                {
                  key: "checkPermissions",
                  value: (p2 = (0, t2.A)(
                    c().mark(function e3(t3) {
                      var r3, a3, n2, s2, i3;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (t3 || (t3 = ar.AUDIO_AND_VIDEO), r3 = /* @__PURE__ */ new Map(), !t3.includes(ar.AUDIO) && !t3.includes(ar.AUDIO_AND_VIDEO)) {
                                  e4.next = 15;
                                  break;
                                }
                                return a3 = true, e4.prev = 4, e4.next = 7, navigator.permissions.query({
                                  name: "microphone"
                                });
                              case 7:
                                "prompt" != (n2 = e4.sent).state && "denied" != n2.state || (a3 = false), e4.next = 14;
                                break;
                              case 11:
                                throw e4.prev = 11, e4.t0 = e4.catch(4), Error(
                                  "Browser does not support microphone permission check"
                                );
                              case 14:
                                r3.set(ar.AUDIO, a3);
                              case 15:
                                if (!t3.includes(ar.VIDEO) && !t3.includes(ar.AUDIO_AND_VIDEO)) {
                                  e4.next = 28;
                                  break;
                                }
                                return s2 = true, e4.prev = 17, e4.next = 20, navigator.permissions.query({
                                  name: "camera"
                                });
                              case 20:
                                "prompt" != (i3 = e4.sent).state && "denied" != i3.state || (s2 = false), e4.next = 27;
                                break;
                              case 24:
                                throw e4.prev = 24, e4.t1 = e4.catch(17), Error(
                                  "Browser does not support camera permission check"
                                );
                              case 27:
                                r3.set(ar.VIDEO, s2);
                              case 28:
                                return e4.abrupt("return", r3);
                              case 29:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        null,
                        [
                          [4, 11],
                          [17, 24]
                        ]
                      );
                    })
                  ), function(e3) {
                    return p2.apply(this, arguments);
                  })
                },
                {
                  key: "requestPermission",
                  value: (d2 = (0, t2.A)(
                    c().mark(function e3(t3) {
                      var r3, a3, n2, s2, i3, o3, d3, l2, p3, u3, h3, m3, f3;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (t3 || (t3 = ar.AUDIO_AND_VIDEO), r3 = /* @__PURE__ */ new Map(), !t3.includes(ar.AUDIO_AND_VIDEO)) {
                                  e4.next = 32;
                                  break;
                                }
                                return n2 = { audio: true, video: true }, s2 = true, e4.prev = 5, e4.next = 8, navigator.mediaDevices.getUserMedia(n2);
                              case 8:
                                a3 = e4.sent, e4.next = 30;
                                break;
                              case 11:
                                if (e4.prev = 11, e4.t0 = e4.catch(5), !(e4.t0 instanceof DOMException)) {
                                  e4.next = 27;
                                  break;
                                }
                                e4.t1 = e4.t0.name, e4.next = "NotAllowedError" === e4.t1 ? 17 : "NotReadableError" === e4.t1 ? 19 : "NotFoundError" === e4.t1 ? 21 : 24;
                                break;
                              case 17:
                                return "Permission denied by system" === e4.t0.message && (i3 = zt.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 25);
                              case 19:
                                return i3 = Is(e4.t0, "video"), e4.abrupt("break", 25);
                              case 21:
                                return i3 = zt.q.ERROR_CAMERA_NOT_FOUND.message, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                  "Firefox"
                                ) && (i3 = zt.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 25);
                              case 24:
                                i3 = e4.t0.message;
                              case 25:
                                e4.next = 28;
                                break;
                              case 27:
                                i3 = e4.t0 instanceof TypeError && "TypeError" === e4.t0.name ? zt.q.ERROR_CAMERA_ACCESS_UNAVAILABLE.message : e4.t0.message;
                              case 28:
                                s2 = false, i3 && console.error(
                                  "An error occurred in request permission, ".concat(
                                    i3
                                  )
                                );
                              case 30:
                                a3 && setTimeout(function() {
                                  a3.getTracks().forEach(function(e5) {
                                    e5.stop();
                                  });
                                }, 100), r3.set(ar.AUDIO_AND_VIDEO, s2);
                              case 32:
                                if (!t3.includes(ar.VIDEO)) {
                                  e4.next = 62;
                                  break;
                                }
                                return d3 = { audio: false, video: true }, l2 = true, e4.prev = 35, e4.next = 38, navigator.mediaDevices.getUserMedia(d3);
                              case 38:
                                o3 = e4.sent, e4.next = 60;
                                break;
                              case 41:
                                if (e4.prev = 41, e4.t2 = e4.catch(35), !(e4.t2 instanceof DOMException)) {
                                  e4.next = 57;
                                  break;
                                }
                                e4.t3 = e4.t2.name, e4.next = "NotAllowedError" === e4.t3 ? 47 : "NotReadableError" === e4.t3 ? 49 : "NotFoundError" === e4.t3 ? 51 : 54;
                                break;
                              case 47:
                                return "Permission denied by system" === e4.t2.message && (p3 = zt.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 55);
                              case 49:
                                return p3 = Is(e4.t2, "video"), e4.abrupt("break", 55);
                              case 51:
                                return p3 = zt.q.ERROR_CAMERA_NOT_FOUND.message, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                  "Firefox"
                                ) && (p3 = zt.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 55);
                              case 54:
                                p3 = e4.t2.message;
                              case 55:
                                e4.next = 58;
                                break;
                              case 57:
                                p3 = e4.t2 instanceof TypeError && "TypeError" === e4.t2.name ? zt.q.ERROR_CAMERA_ACCESS_UNAVAILABLE.message : e4.t2.message;
                              case 58:
                                l2 = false, p3 && console.error(
                                  "An error occurred in request permission, ".concat(
                                    p3
                                  )
                                );
                              case 60:
                                o3 && o3.getTracks().forEach(function(e5) {
                                  e5.stop();
                                }), r3.set(ar.VIDEO, l2);
                              case 62:
                                if (!t3.includes(ar.AUDIO)) {
                                  e4.next = 92;
                                  break;
                                }
                                return h3 = { audio: true, video: false }, m3 = true, e4.prev = 65, e4.next = 68, navigator.mediaDevices.getUserMedia(h3);
                              case 68:
                                u3 = e4.sent, e4.next = 90;
                                break;
                              case 71:
                                if (e4.prev = 71, e4.t4 = e4.catch(65), !(e4.t4 instanceof DOMException)) {
                                  e4.next = 87;
                                  break;
                                }
                                e4.t5 = e4.t4.name, e4.next = "NotAllowedError" === e4.t5 ? 77 : "NotReadableError" === e4.t5 ? 79 : "NotFoundError" === e4.t5 ? 81 : 84;
                                break;
                              case 77:
                                return "Permission denied by system" === e4.t4.message && (f3 = zt.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 85);
                              case 79:
                                return f3 = Is(e4.t4, "audio"), e4.abrupt("break", 85);
                              case 81:
                                return f3 = zt.q.ERROR_MICROPHONE_NOT_FOUND.message, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                  "Firefox"
                                ) && (f3 = zt.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 85);
                              case 84:
                                f3 = e4.t4.message;
                              case 85:
                                e4.next = 88;
                                break;
                              case 87:
                                f3 = e4.t4 instanceof TypeError && "TypeError" === e4.t4.name ? zt.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE.message : e4.t4.message;
                              case 88:
                                m3 = false, f3 && console.error(
                                  "An error occurred in request permission, ".concat(
                                    f3
                                  )
                                );
                              case 90:
                                u3 && u3.getTracks().forEach(function(e5) {
                                  e5.stop();
                                }), r3.set(ar.AUDIO, m3);
                              case 92:
                                return e4.abrupt("return", r3);
                              case 93:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        null,
                        [
                          [5, 11],
                          [35, 41],
                          [65, 71]
                        ]
                      );
                    })
                  ), function(e3) {
                    return d2.apply(this, arguments);
                  })
                },
                {
                  key: "isInt",
                  value: function(e3) {
                    return "number" == typeof e3 && e3 % 1 == 0;
                  }
                },
                {
                  key: "getNetworkStats",
                  value: (o2 = (0, t2.A)(
                    c().mark(function e3() {
                      var t3, r3, a3, n2 = arguments;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                return (t3 = (n2.length > 0 && void 0 !== n2[0] ? n2[0] : {}).timeoutDuration) && this.isInt(t3) || (t3 = 6e4), r3 = new Promise(function(e5, r4) {
                                  setTimeout(function() {
                                    r4(
                                      "Not able to get NetworkStats due to timeout"
                                    );
                                  }, t3);
                                }), a3 = new Promise(function(e5, t4) {
                                  if (navigator.onLine) {
                                    var r4 = new ks({
                                      measureDownloadLoadedLatency: false,
                                      measureUploadLoadedLatency: false,
                                      measurements: [
                                        {
                                          type: "upload",
                                          bytes: 3e6,
                                          count: 1,
                                          bypassMinDuration: true
                                        },
                                        {
                                          type: "download",
                                          bytes: 3e6,
                                          count: 1,
                                          bypassMinDuration: true
                                        }
                                      ]
                                    });
                                    r4.isRunning ? (r4.onFinish = function(t5) {
                                      e5({
                                        downloadSpeed: parseFloat(
                                          Number(
                                            t5.getDownloadBandwidth() / 1048576
                                          ).toFixed(2)
                                        ),
                                        uploadSpeed: parseFloat(
                                          Number(
                                            t5.getUploadBandwidth() / 1048576
                                          ).toFixed(2)
                                        )
                                      });
                                    }, r4.onError = function(e6) {
                                      t4("Not able to get NetworkStats");
                                    }) : t4("Not able to get NetworkStats");
                                  } else t4("Not able to get NetworkStats due to no Network");
                                }), e4.abrupt("return", Promise.race([a3, r3]));
                              case 5:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this
                      );
                    })
                  ), function() {
                    return o2.apply(this, arguments);
                  })
                },
                {
                  key: "analytics",
                  value: function(e3) {
                    var t3, r3, a3;
                    !e3 && navigator && navigator.userAgent && (r3 = navigator.userAgent, delete (a3 = l().parse(r3)).engine);
                    try {
                      var n2;
                      null !== (n2 = e3) && void 0 !== n2 && n2.browserUserAgent || (r3 = navigator.userAgent, delete (a3 = l().parse(r3)).engine);
                    } catch (e4) {
                    }
                    e3 && e3.rawUserAgent && (r3 = e3.rawUserAgent, delete (a3 = l().parse(r3)).engine), e3 || (e3 = {});
                    var s2 = {};
                    s2.sdkType = e3.sdkType || "javascript", s2.sdkVersion = e3.sdkVersion || "0.0.89", s2.platform = e3.platform || (null === (t3 = a3) || void 0 === t3 || null === (t3 = t3.platform) || void 0 === t3 ? void 0 : t3.type) || "", "null" == e3.browserUserAgent ? s2.browserUserAgent = void 0 : s2.browserUserAgent = a3, e3.deviceUserAgent && (s2.deviceUserAgent = e3.deviceUserAgent), this._deviceInfo = s2;
                  }
                },
                {
                  key: "initMeeting",
                  value: function(t3) {
                    var r3, a3 = t3.meetingId, n2 = t3.customCameraVideoTrack, s2 = void 0 === n2 ? void 0 : n2, i3 = t3.customMicrophoneAudioTrack, o3 = void 0 === i3 ? void 0 : i3, c2 = t3.autoConsume, d3 = void 0 === c2 || c2, l2 = t3.preferredProtocol, p3 = t3.mode, u3 = t3.multiStream, h3 = void 0 === u3 || u3, m3 = t3.participantId, f3 = t3.name, g2 = t3.micEnabled, _2 = t3.webcamEnabled, v2 = t3.maxResolution, b2 = t3.metaData, y2 = t3.chatEnabled, w2 = t3.useSpartialLayerAnalytics, S2 = t3.signalingBaseUrl, R2 = t3.defaultCamera, E2 = t3.debugMode, T2 = void 0 === E2 || E2;
                    if (!a3)
                      throw new Error(
                        "'meetingId' is empty, please verify it or generate new meetingId using the API."
                      );
                    var C2 = m3 ? m3.toString() : k()({ length: 8 }).toLowerCase(), P2 = f3 || k()({ length: 6 }).toLowerCase();
                    switch (this._deviceInfo || this.analytics(), "string" != typeof l2 && (l2 = "UDP_OVER_TCP"), null === (r3 = l2) || void 0 === r3 ? void 0 : r3.toUpperCase()) {
                      case "UDP_ONLY":
                      case "UDP_OVER_TCP":
                      case "TCP_ONLY":
                        l2 = l2.toUpperCase();
                        break;
                      default:
                        l2 = "UDP_OVER_TCP";
                    }
                    if (p3 || (p3 = Kt.n.CONFERENCE), p3 !== Kt.n.CONFERENCE && p3 !== Kt.n.VIEWER)
                      throw new Error(
                        '"mode" can only be either '.concat(Kt.n.CONFERENCE, " or ").concat(Kt.n.VIEWER)
                      );
                    if (null != b2 && "object" != (0, e2.A)(b2))
                      throw new Error('"metaData" can only be object.');
                    var O2 = "react-native" === this._deviceInfo.sdkType, D2 = O2 ? R2 ? "front" === R2 ? 1 : 0 : s2 ? "user" === s2.getVideoTracks()[0].getConstraints().facingMode ? 1 : 0 : O2 ? 1 : 0 : 0, x2 = new ee.default({
                      roomId: a3,
                      peerId: C2,
                      secret: this.apiKey,
                      device: "unknown",
                      displayName: P2,
                      mode: p3,
                      useSimulcast: h3,
                      produce: true,
                      consume: true,
                      useSharingSimulcast: true,
                      datachannel: false !== y2,
                      micEnabled: false !== g2,
                      webcamEnabled: false !== _2,
                      maxResolution: v2 || "hd",
                      useSpartialLayerAnalytics: w2,
                      _deviceInfo: this._deviceInfo,
                      customCameraVideoTrack: s2,
                      customMicrophoneAudioTrack: o3,
                      autoConsume: d3,
                      preferredProtocol: l2,
                      signalingBaseUrl: S2,
                      metaData: b2,
                      defaultCameraIndex: D2,
                      debugMode: T2
                    });
                    se.roomClient = x2;
                    var I2 = new he({
                      id: C2,
                      displayName: P2,
                      local: true,
                      mode: p3,
                      metaData: b2
                    });
                    return new Ht(a3, I2, x2);
                  }
                },
                {
                  key: "createCameraVideoTrack",
                  value: (i2 = (0, t2.A)(
                    c().mark(function e3(t3) {
                      var r3, a3, n2, s2, i3, o3, d3, l2, p3, u3, h3, m3, f3, g2, _2, v2;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (r3 = t3.cameraId, a3 = void 0 === r3 ? void 0 : r3, n2 = t3.encoderConfig, s2 = void 0 === n2 ? void 0 : n2, i3 = t3.facingMode, o3 = void 0 === i3 ? void 0 : i3, d3 = t3.optimizationMode, l2 = void 0 === d3 ? void 0 : d3, p3 = t3.multiStream, u3 = void 0 === p3 || p3, !a3) {
                                  e4.next = 6;
                                  break;
                                }
                                return e4.next = 4, this.getCameras();
                              case 4:
                                (h3 = e4.sent) && h3.some(function(e5) {
                                  return e5.deviceId;
                                }) && (h3.some(function(e5) {
                                  return e5.deviceId === a3;
                                }) || console.error(
                                  "No camera device found for the given cameraId, please check the passed cameraId. The default camera will be used instead."
                                ));
                              case 6:
                                return e4.prev = 6, m3 = s2 ? Qt.$.videoProfiles[s2] : Qt.$.videoProfiles.h360p_w640p, f3 = {
                                  video: {
                                    deviceId: a3 || void 0,
                                    facingMode: o3 || void 0,
                                    width: m3.width,
                                    height: m3.height,
                                    frameRate: m3.frameRate
                                  }
                                }, e4.next = 11, (0, Jt.lp)(f3);
                              case 11:
                                return g2 = e4.sent, l2 && (g2.contentHint = l2), g2.encoderConfig = s2 || "h360p_w640p", g2.contentHint = l2 || "", g2.multiStream = u3, g2.cameraId = a3, e4.abrupt("return", g2);
                              case 20:
                                if (e4.prev = 20, e4.t0 = e4.catch(6), "SecurityError" !== e4.t0.name) {
                                  e4.next = 26;
                                  break;
                                }
                                _2 = zt.q.ERROR_RN_CAMERA_ACCESS_DENIED_OR_DISMISSED.message, e4.next = 46;
                                break;
                              case 26:
                                if ("DOMException" !== e4.t0.name) {
                                  e4.next = 30;
                                  break;
                                }
                                _2 = zt.q.ERROR_RN_CAMERA_NOT_FOUND.message, e4.next = 46;
                                break;
                              case 30:
                                if (!(e4.t0 instanceof DOMException)) {
                                  e4.next = 45;
                                  break;
                                }
                                e4.t1 = e4.t0.name, e4.next = "NotAllowedError" === e4.t1 ? 34 : "NotReadableError" === e4.t1 ? 36 : "NotFoundError" === e4.t1 ? 38 : 41;
                                break;
                              case 34:
                                return _2 = xs(e4.t0, "video"), e4.abrupt("break", 43);
                              case 36:
                                return _2 = Is(e4.t0, "video"), e4.abrupt("break", 43);
                              case 38:
                                return _2 = zt.q.ERROR_CAMERA_NOT_FOUND.message, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                  "Firefox"
                                ) && (_2 = zt.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 43);
                              case 41:
                                return _2 = e4.t0.message, e4.abrupt("break", 43);
                              case 43:
                                e4.next = 46;
                                break;
                              case 45:
                                "getUserMedia is not implemented in this browser" == e4.t0.message ? (v2 = zt.q.ERROR_CAMERA_ACCESS_UNAVAILABLE, _2 = v2.message) : _2 = e4.t0.message;
                              case 46:
                                console.error(
                                  "An error occurred in creating video track, ".concat(
                                    _2
                                  )
                                );
                              case 47:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this,
                        [[6, 20]]
                      );
                    })
                  ), function(e3) {
                    return i2.apply(this, arguments);
                  })
                },
                {
                  key: "createScreenShareVideoTrack",
                  value: (a2 = (0, t2.A)(
                    c().mark(function e3(t3) {
                      var r3, a3, n2, s2, i3, o3, d3, l2, p3;
                      return c().wrap(function(e4) {
                        for (; ; )
                          switch (e4.prev = e4.next) {
                            case 0:
                              return r3 = t3.encoderConfig, a3 = void 0 === r3 ? void 0 : r3, n2 = t3.optimizationMode, s2 = void 0 === n2 ? void 0 : n2, i3 = t3.withAudio, o3 = void 0 === i3 ? "enable" : i3, d3 = a3 ? Qt.$.screenShareProfiles[a3] : Qt.$.screenShareProfiles.h720p_15fps, l2 = {
                                audio: "enable" === o3,
                                video: {
                                  width: d3.width,
                                  height: d3.height,
                                  frameRate: d3.frameRate
                                }
                              }, e4.next = 5, (0, Jt.Zu)(l2);
                            case 5:
                              return p3 = e4.sent, s2 && (p3.contentHint = s2), e4.abrupt("return", p3);
                            case 8:
                            case "end":
                              return e4.stop();
                          }
                      }, e3);
                    })
                  ), function(e3) {
                    return a2.apply(this, arguments);
                  })
                },
                {
                  key: "createMicrophoneAudioTrack",
                  value: (r2 = (0, t2.A)(
                    c().mark(function e3(t3) {
                      var r3, a3, n2, s2, i3, o3, d3, l2, p3, u3, h3, m3;
                      return c().wrap(
                        function(e4) {
                          for (; ; )
                            switch (e4.prev = e4.next) {
                              case 0:
                                if (r3 = t3.noiseConfig, a3 = void 0 === r3 ? void 0 : r3, n2 = t3.encoderConfig, s2 = void 0 === n2 ? void 0 : n2, i3 = t3.microphoneId, !(o3 = void 0 === i3 ? void 0 : i3)) {
                                  e4.next = 6;
                                  break;
                                }
                                return e4.next = 4, this.getMicrophones();
                              case 4:
                                (d3 = e4.sent) && d3.some(function(e5) {
                                  return e5.deviceId;
                                }) && (d3.some(function(e5) {
                                  return e5.deviceId === o3;
                                }) || console.error(
                                  "No microphone device found for the given microphoneId, please check the passed microphoneId. The default microphone will be used instead."
                                ));
                              case 6:
                                return e4.prev = 6, l2 = s2 ? Qt.$.audioProfiles[s2] : Qt.$.audioProfiles.speech_standard, p3 = {
                                  audio: {
                                    deviceId: o3,
                                    sampleRate: l2.sampleRate,
                                    echoCancellation: a3 ? a3 && a3.acousticEchoCancellation : l2.echoCancellation,
                                    autoGainControl: a3 ? a3 && a3.autoGainControl : l2.autoGainControl,
                                    noiseSuppression: a3 ? a3 && a3.noiseSuppression : l2.noiseSuppression,
                                    channelCount: l2.channelCount
                                  }
                                }, e4.next = 11, (0, Jt.lp)(p3);
                              case 11:
                                return (u3 = e4.sent).encoderConfig = s2 || "speech_standard", u3.microphoneId = o3, e4.abrupt("return", u3);
                              case 17:
                                if (e4.prev = 17, e4.t0 = e4.catch(6), "SecurityError" !== e4.t0.name) {
                                  e4.next = 23;
                                  break;
                                }
                                h3 = zt.q.ERROR_RN_MIC_ACCESS_DENIED_OR_DISMISSED.message, e4.next = 43;
                                break;
                              case 23:
                                if ("DOMException" !== e4.t0.name) {
                                  e4.next = 27;
                                  break;
                                }
                                h3 = zt.q.ERROR_RN_MIC_NOT_FOUND.message, e4.next = 43;
                                break;
                              case 27:
                                if (!(e4.t0 instanceof DOMException)) {
                                  e4.next = 42;
                                  break;
                                }
                                e4.t1 = e4.t0.name, e4.next = "NotAllowedError" === e4.t1 ? 31 : "NotReadableError" === e4.t1 ? 33 : "NotFoundError" === e4.t1 ? 35 : 38;
                                break;
                              case 31:
                                return h3 = xs(e4.t0, "audio"), e4.abrupt("break", 40);
                              case 33:
                                return h3 = Is(e4.t0, "audio"), e4.abrupt("break", 40);
                              case 35:
                                return h3 = zt.q.ERROR_MICROPHONE_NOT_FOUND.message, navigator && navigator.userAgent && -1 != navigator.userAgent.indexOf(
                                  "Firefox"
                                ) && (h3 = zt.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS.message), e4.abrupt("break", 40);
                              case 38:
                                return h3 = e4.t0.message, e4.abrupt("break", 40);
                              case 40:
                                e4.next = 43;
                                break;
                              case 42:
                                "getUserMedia is not implemented in this browser" == e4.t0.message ? (m3 = zt.q.ERROR_MICROPHONE_ACCESS_UNAVAILABLE, h3 = m3.message) : h3 = e4.t0.message;
                              case 43:
                                console.error(
                                  "An error occurred in creating audio track, ".concat(
                                    h3
                                  )
                                );
                              case 44:
                              case "end":
                                return e4.stop();
                            }
                        },
                        e3,
                        this,
                        [[6, 17]]
                      );
                    })
                  ), function(e3) {
                    return r2.apply(this, arguments);
                  })
                }
              ]
            );
            var r2, a2, i2, o2, d2, p2, u2, h2, m2, f2;
          }();
          function xs(e3, t3) {
            return ("Permission denied" === e3.message || "Permission dismissed" === e3.message ? "video" === t3 ? zt.q.ERROR_CAMERA_ACCESS_DENIED_OR_DISMISSED : zt.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED : e3.message.includes(
              "The request is not allowed by the user agent"
            ) ? "video" === t3 ? zt.q.ERROR_CAMERA_PERMISSION_OR_AUTOPLAY_ISSUE : zt.q.ERROR_MICROPHONE_ACCESS_DENIED_OR_DISMISSED : "Permission denied by system" === e3.message ? "video" === t3 ? zt.q.ERROR_CAMERA_PERMISSION_DENIED_BY_OS : zt.q.ERROR_MICROPHONE_PERMISSION_DENIED_BY_OS : "video" === t3 ? zt.q.ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED : zt.q.ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED).message;
          }
          function Is(e3, t3) {
            return ("Device in use" === e3.message ? "video" === t3 ? zt.q.ERROR_CAMERA_IN_USE : zt.q.ERROR_MICROPHONE_IN_USE : "video" === t3 ? zt.q.ERROR_VIDEO_SOURCE_INITIATION_FAILED : zt.q.ERROR_MICROPHONE_IN_USE).message;
          }
          (0, i.A)(Ds, "devices", []), (0, i.A)(Ds, "eventEmitter", new te()), (0, i.A)(Ds, "Constants", {
            errors: zt.s,
            recordingEvents: {
              RECORDING_STARTING: "RECORDING_STARTING",
              RECORDING_STARTED: "RECORDING_STARTED",
              RECORDING_STOPPING: "RECORDING_STOPPING",
              RECORDING_STOPPED: "RECORDING_STOPPED"
            },
            livestreamEvents: {
              LIVESTREAM_STARTING: "LIVESTREAM_STARTING",
              LIVESTREAM_STARTED: "LIVESTREAM_STARTED",
              LIVESTREAM_STOPPING: "LIVESTREAM_STOPPING",
              LIVESTREAM_STOPPED: "LIVESTREAM_STOPPED"
            },
            characterState: ve,
            characterMode: {
              TEXT: "text",
              CO_PILOT: "co_pilot",
              AUTO_PILOT: "auto_pilot",
              VISION_PILOT: "vision_pilot"
            },
            hlsEvents: $t.V,
            transcriptionEvents: {
              TRANSCRIPTION_STARTING: "TRANSCRIPTION_STARTING",
              TRANSCRIPTION_STARTED: "TRANSCRIPTION_STARTED",
              TRANSCRIPTION_STOPPING: "TRANSCRIPTION_STOPPING",
              TRANSCRIPTION_STOPPED: "TRANSCRIPTION_STOPPED"
            },
            modes: Kt.n,
            permission: ar
          });
          var Ms = Ds;
        })(), a;
      })()
    );
  }
});

// node_modules/@videosdk.live/react-sdk/dist/index.modern.js
var import_react = __toESM(require_react());
var import_events = __toESM(require_events());
var import_js_sdk = __toESM(require_videosdk());
var import_js_sdk2 = __toESM(require_videosdk());
var eventPrifix = "videosdk-live-react-sdk";
var events = {
  "participant-joined": eventPrifix + "-participant-joined",
  "participant-left": eventPrifix + "-participant-left",
  "speaker-changed": eventPrifix + "-speaker-changed",
  "presenter-changed": eventPrifix + "-presenter-changed",
  "main-participant-changed": eventPrifix + "-main-participant-changed",
  "entry-requested": eventPrifix + "-entry-requested",
  "entry-responded": eventPrifix + "-entry-responded",
  "recording-started": eventPrifix + "-recording-started",
  "recording-stopped": eventPrifix + "-recording-stopped",
  "chat-message": eventPrifix + "-chat-message",
  "meeting-joined": eventPrifix + "-meeting-joined",
  "meeting-left": eventPrifix + "-meeting-left",
  "live-stream-started": eventPrifix + "-live-stream-started",
  "live-stream-stopped": eventPrifix + "-live-stream-stopped",
  "video-state-changed": eventPrifix + "-video-state-changed",
  "video-seeked": eventPrifix + "-video-seeked",
  "webcam-requested": eventPrifix + "-webcam-requested",
  "mic-requested": eventPrifix + "-mic-requested",
  "pin-state-changed": eventPrifix + "-pin-state-changed",
  "connection-open": eventPrifix + "-connection-open",
  "connection-close": eventPrifix + "-connection-close",
  "switch-meeting": eventPrifix + "-switch-meeting",
  error: eventPrifix + "-error",
  "hls-started": eventPrifix + "-hls-started",
  "hls-stopped": eventPrifix + "-hls-stopped",
  "hls-state-changed": eventPrifix + "-hls-state-changed",
  "hls-playable-state-changed": eventPrifix + "-hls-playable-state-changed",
  "recording-state-changed": eventPrifix + "-recording-state-changed",
  "livestream-state-changed": eventPrifix + "-livestream-state-changed",
  "meeting-state-changed": eventPrifix + "-meeting-state-changed",
  "participant-mode-changed": eventPrifix + "-participant-mode-changed",
  "transcription-state-changed": eventPrifix + "-transcription-state-changed",
  "transcription-text": eventPrifix + "-transcription-text",
  "character-joined": eventPrifix + "-character-joined",
  "character-left": eventPrifix + "-character-left"
};
var eventEmitter = new import_events.default();
eventEmitter.setMaxListeners(9999);
var MeetingProviderContex = (0, import_react.createContext)();
var useMeeting = function useMeeting2(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onParticipantJoi = _ref.onParticipantJoined, onParticipantJoined = _ref$onParticipantJoi === void 0 ? function() {
  } : _ref$onParticipantJoi, _ref$onParticipantLef = _ref.onParticipantLeft, onParticipantLeft = _ref$onParticipantLef === void 0 ? function() {
  } : _ref$onParticipantLef, _ref$onSpeakerChanged = _ref.onSpeakerChanged, onSpeakerChanged = _ref$onSpeakerChanged === void 0 ? function() {
  } : _ref$onSpeakerChanged, _ref$onPresenterChang = _ref.onPresenterChanged, onPresenterChanged = _ref$onPresenterChang === void 0 ? function() {
  } : _ref$onPresenterChang, _ref$onMainParticipan = _ref.onMainParticipantChanged, onMainParticipantChanged = _ref$onMainParticipan === void 0 ? function() {
  } : _ref$onMainParticipan, _ref$onEntryRequested = _ref.onEntryRequested, onEntryRequested = _ref$onEntryRequested === void 0 ? function() {
  } : _ref$onEntryRequested, _ref$onEntryResponded = _ref.onEntryResponded, onEntryResponded = _ref$onEntryResponded === void 0 ? function() {
  } : _ref$onEntryResponded, _ref$onRecordingStart = _ref.onRecordingStarted, onRecordingStarted = _ref$onRecordingStart === void 0 ? function() {
  } : _ref$onRecordingStart, _ref$onRecordingStopp = _ref.onRecordingStopped, onRecordingStopped = _ref$onRecordingStopp === void 0 ? function() {
  } : _ref$onRecordingStopp, _ref$onChatMessage = _ref.onChatMessage, onChatMessage = _ref$onChatMessage === void 0 ? function() {
  } : _ref$onChatMessage, _ref$onMeetingJoined = _ref.onMeetingJoined, onMeetingJoined = _ref$onMeetingJoined === void 0 ? function() {
  } : _ref$onMeetingJoined, _ref$onMeetingLeft = _ref.onMeetingLeft, onMeetingLeft = _ref$onMeetingLeft === void 0 ? function() {
  } : _ref$onMeetingLeft, _ref$onLiveStreamStar = _ref.onLiveStreamStarted, onLiveStreamStarted = _ref$onLiveStreamStar === void 0 ? function() {
  } : _ref$onLiveStreamStar, _ref$onLiveStreamStop = _ref.onLiveStreamStopped, onLiveStreamStopped = _ref$onLiveStreamStop === void 0 ? function() {
  } : _ref$onLiveStreamStop, _ref$onVideoStateChan = _ref.onVideoStateChanged, onVideoStateChanged = _ref$onVideoStateChan === void 0 ? function() {
  } : _ref$onVideoStateChan, _ref$onVideoSeeked = _ref.onVideoSeeked, onVideoSeeked = _ref$onVideoSeeked === void 0 ? function() {
  } : _ref$onVideoSeeked, _ref$onWebcamRequeste = _ref.onWebcamRequested, onWebcamRequested = _ref$onWebcamRequeste === void 0 ? function() {
  } : _ref$onWebcamRequeste, _ref$onMicRequested = _ref.onMicRequested, onMicRequested = _ref$onMicRequested === void 0 ? function() {
  } : _ref$onMicRequested, _ref$onPinStateChange = _ref.onPinStateChanged, onPinStateChanged = _ref$onPinStateChange === void 0 ? function() {
  } : _ref$onPinStateChange, _ref$onConnectionOpen = _ref.onConnectionOpen, onConnectionOpen = _ref$onConnectionOpen === void 0 ? function() {
  } : _ref$onConnectionOpen, _ref$onConnetionClose = _ref.onConnetionClose, onConnetionClose = _ref$onConnetionClose === void 0 ? function() {
  } : _ref$onConnetionClose, _ref$onSwitchMeeting = _ref.onSwitchMeeting, onSwitchMeeting = _ref$onSwitchMeeting === void 0 ? function() {
  } : _ref$onSwitchMeeting, _ref$onError = _ref.onError, onError = _ref$onError === void 0 ? function() {
  } : _ref$onError, _ref$onHlsStarted = _ref.onHlsStarted, onHlsStarted = _ref$onHlsStarted === void 0 ? function() {
  } : _ref$onHlsStarted, _ref$onHlsStopped = _ref.onHlsStopped, onHlsStopped = _ref$onHlsStopped === void 0 ? function() {
  } : _ref$onHlsStopped, _ref$onHlsStateChange = _ref.onHlsStateChanged, onHlsStateChanged = _ref$onHlsStateChange === void 0 ? function() {
  } : _ref$onHlsStateChange, _ref$onRecordingState = _ref.onRecordingStateChanged, onRecordingStateChanged = _ref$onRecordingState === void 0 ? function() {
  } : _ref$onRecordingState, _ref$onLivestreamStat = _ref.onLivestreamStateChanged, onLivestreamStateChanged = _ref$onLivestreamStat === void 0 ? function() {
  } : _ref$onLivestreamStat, _ref$onMeetingStateCh = _ref.onMeetingStateChanged, onMeetingStateChanged = _ref$onMeetingStateCh === void 0 ? function() {
  } : _ref$onMeetingStateCh, _ref$onParticipantMod = _ref.onParticipantModeChanged, onParticipantModeChanged = _ref$onParticipantMod === void 0 ? function() {
  } : _ref$onParticipantMod, _ref$onCharacterJoine = _ref.onCharacterJoined, onCharacterJoined = _ref$onCharacterJoine === void 0 ? function() {
  } : _ref$onCharacterJoine, _ref$onCharacterLeft = _ref.onCharacterLeft, onCharacterLeft = _ref$onCharacterLeft === void 0 ? function() {
  } : _ref$onCharacterLeft;
  (0, import_react.useEffect)(function() {
    eventEmitter.on(events["participant-joined"], onParticipantJoined);
    eventEmitter.on(events["participant-left"], onParticipantLeft);
    eventEmitter.on(events["speaker-changed"], onSpeakerChanged);
    eventEmitter.on(events["presenter-changed"], onPresenterChanged);
    eventEmitter.on(events["main-participant-changed"], onMainParticipantChanged);
    eventEmitter.on(events["entry-requested"], onEntryRequested);
    eventEmitter.on(events["entry-responded"], onEntryResponded);
    eventEmitter.on(events["recording-started"], onRecordingStarted);
    eventEmitter.on(events["recording-stopped"], onRecordingStopped);
    eventEmitter.on(events["chat-message"], onChatMessage);
    eventEmitter.on(events["meeting-joined"], onMeetingJoined);
    eventEmitter.on(events["meeting-left"], onMeetingLeft);
    eventEmitter.on(events["live-stream-started"], onLiveStreamStarted);
    eventEmitter.on(events["live-stream-stopped"], onLiveStreamStopped);
    eventEmitter.on(events["video-state-changed"], onVideoStateChanged);
    eventEmitter.on(events["video-seeked"], onVideoSeeked);
    eventEmitter.on(events["webcam-requested"], onWebcamRequested);
    eventEmitter.on(events["mic-requested"], onMicRequested);
    eventEmitter.on(events["pin-state-changed"], onPinStateChanged);
    eventEmitter.on(events["connection-open"], onConnectionOpen);
    eventEmitter.on(events["connection-close"], onConnetionClose);
    eventEmitter.on(events["switch-meeting"], onSwitchMeeting);
    eventEmitter.on(events["error"], onError);
    eventEmitter.on(events["hls-started"], onHlsStarted);
    eventEmitter.on(events["hls-stopped"], onHlsStopped);
    eventEmitter.on(events["hls-state-changed"], onHlsStateChanged);
    eventEmitter.on(events["recording-state-changed"], onRecordingStateChanged);
    eventEmitter.on(events["livestream-state-changed"], onLivestreamStateChanged);
    eventEmitter.on(events["meeting-state-changed"], onMeetingStateChanged);
    eventEmitter.on(events["participant-mode-changed"], onParticipantModeChanged);
    eventEmitter.on(events["character-joined"], onCharacterJoined);
    eventEmitter.on(events["character-left"], onCharacterLeft);
    return function() {
      eventEmitter.off(events["meeting-state-changed"], onMeetingStateChanged);
      eventEmitter.off(events["participant-joined"], onParticipantJoined);
      eventEmitter.off(events["participant-left"], onParticipantLeft);
      eventEmitter.off(events["speaker-changed"], onSpeakerChanged);
      eventEmitter.off(events["presenter-changed"], onPresenterChanged);
      eventEmitter.off(events["main-participant-changed"], onMainParticipantChanged);
      eventEmitter.off(events["entry-requested"], onEntryRequested);
      eventEmitter.off(events["entry-responded"], onEntryResponded);
      eventEmitter.off(events["recording-started"], onRecordingStarted);
      eventEmitter.off(events["recording-stopped"], onRecordingStopped);
      eventEmitter.off(events["chat-message"], onChatMessage);
      eventEmitter.off(events["meeting-joined"], onMeetingJoined);
      eventEmitter.off(events["meeting-left"], onMeetingLeft);
      eventEmitter.off(events["live-stream-started"], onLiveStreamStarted);
      eventEmitter.off(events["live-stream-stopped"], onLiveStreamStopped);
      eventEmitter.off(events["video-state-changed"], onVideoStateChanged);
      eventEmitter.off(events["video-seeked"], onVideoSeeked);
      eventEmitter.off(events["webcam-requested"], onWebcamRequested);
      eventEmitter.off(events["mic-requested"], onMicRequested);
      eventEmitter.off(events["pin-state-changed"], onPinStateChanged);
      eventEmitter.off(events["connection-open"], onConnectionOpen);
      eventEmitter.off(events["connection-close"], onConnetionClose);
      eventEmitter.off(events["switch-meeting"], onSwitchMeeting);
      eventEmitter.off(events["error"], onError);
      eventEmitter.off(events["hls-started"], onHlsStarted);
      eventEmitter.off(events["hls-stopped"], onHlsStopped);
      eventEmitter.off(events["hls-state-changed"], onHlsStateChanged);
      eventEmitter.off(events["recording-state-changed"], onRecordingStateChanged);
      eventEmitter.off(events["livestream-state-changed"], onLivestreamStateChanged);
      eventEmitter.off(events["participant-mode-changed"], onParticipantModeChanged);
      eventEmitter.off(events["character-joined"], onCharacterJoined);
      eventEmitter.off(events["character-left"], onCharacterLeft);
    };
  }, []);
  return (0, import_react.useContext)(MeetingProviderContex);
};
var MeetingConsumer = function MeetingConsumer2(_ref2) {
  var children = _ref2.children, _ref2$onParticipantJo = _ref2.onParticipantJoined, onParticipantJoined = _ref2$onParticipantJo === void 0 ? function() {
  } : _ref2$onParticipantJo, _ref2$onParticipantLe = _ref2.onParticipantLeft, onParticipantLeft = _ref2$onParticipantLe === void 0 ? function() {
  } : _ref2$onParticipantLe, _ref2$onSpeakerChange = _ref2.onSpeakerChanged, onSpeakerChanged = _ref2$onSpeakerChange === void 0 ? function() {
  } : _ref2$onSpeakerChange, _ref2$onPresenterChan = _ref2.onPresenterChanged, onPresenterChanged = _ref2$onPresenterChan === void 0 ? function() {
  } : _ref2$onPresenterChan, _ref2$onMainParticipa = _ref2.onMainParticipantChanged, onMainParticipantChanged = _ref2$onMainParticipa === void 0 ? function() {
  } : _ref2$onMainParticipa, _ref2$onEntryRequeste = _ref2.onEntryRequested, onEntryRequested = _ref2$onEntryRequeste === void 0 ? function() {
  } : _ref2$onEntryRequeste, _ref2$onEntryResponde = _ref2.onEntryResponded, onEntryResponded = _ref2$onEntryResponde === void 0 ? function() {
  } : _ref2$onEntryResponde, _ref2$onRecordingStar = _ref2.onRecordingStarted, onRecordingStarted = _ref2$onRecordingStar === void 0 ? function() {
  } : _ref2$onRecordingStar, _ref2$onRecordingStop = _ref2.onRecordingStopped, onRecordingStopped = _ref2$onRecordingStop === void 0 ? function() {
  } : _ref2$onRecordingStop, _ref2$onChatMessage = _ref2.onChatMessage, onChatMessage = _ref2$onChatMessage === void 0 ? function() {
  } : _ref2$onChatMessage, _ref2$onMeetingJoined = _ref2.onMeetingJoined, onMeetingJoined = _ref2$onMeetingJoined === void 0 ? function() {
  } : _ref2$onMeetingJoined, _ref2$onMeetingLeft = _ref2.onMeetingLeft, onMeetingLeft = _ref2$onMeetingLeft === void 0 ? function() {
  } : _ref2$onMeetingLeft, _ref2$onLiveStreamSta = _ref2.onLiveStreamStarted, onLiveStreamStarted = _ref2$onLiveStreamSta === void 0 ? function() {
  } : _ref2$onLiveStreamSta, _ref2$onLiveStreamSto = _ref2.onLiveStreamStopped, onLiveStreamStopped = _ref2$onLiveStreamSto === void 0 ? function() {
  } : _ref2$onLiveStreamSto, _ref2$onVideoStateCha = _ref2.onVideoStateChanged, onVideoStateChanged = _ref2$onVideoStateCha === void 0 ? function() {
  } : _ref2$onVideoStateCha, _ref2$onVideoSeeked = _ref2.onVideoSeeked, onVideoSeeked = _ref2$onVideoSeeked === void 0 ? function() {
  } : _ref2$onVideoSeeked, _ref2$onWebcamRequest = _ref2.onWebcamRequested, onWebcamRequested = _ref2$onWebcamRequest === void 0 ? function() {
  } : _ref2$onWebcamRequest, _ref2$onMicRequested = _ref2.onMicRequested, onMicRequested = _ref2$onMicRequested === void 0 ? function() {
  } : _ref2$onMicRequested, _ref2$onPinStateChang = _ref2.onPinStateChanged, onPinStateChanged = _ref2$onPinStateChang === void 0 ? function() {
  } : _ref2$onPinStateChang, _ref2$onConnectionOpe = _ref2.onConnectionOpen, onConnectionOpen = _ref2$onConnectionOpe === void 0 ? function() {
  } : _ref2$onConnectionOpe, _ref2$onConnetionClos = _ref2.onConnetionClose, onConnetionClose = _ref2$onConnetionClos === void 0 ? function() {
  } : _ref2$onConnetionClos, _ref2$onSwitchMeeting = _ref2.onSwitchMeeting, onSwitchMeeting = _ref2$onSwitchMeeting === void 0 ? function() {
  } : _ref2$onSwitchMeeting, _ref2$onError = _ref2.onError, onError = _ref2$onError === void 0 ? function() {
  } : _ref2$onError, _ref2$onHlsStarted = _ref2.onHlsStarted, onHlsStarted = _ref2$onHlsStarted === void 0 ? function() {
  } : _ref2$onHlsStarted, _ref2$onHlsStopped = _ref2.onHlsStopped, onHlsStopped = _ref2$onHlsStopped === void 0 ? function() {
  } : _ref2$onHlsStopped, _ref2$onHlsStateChang = _ref2.onHlsStateChanged, onHlsStateChanged = _ref2$onHlsStateChang === void 0 ? function() {
  } : _ref2$onHlsStateChang, _ref2$onRecordingStat = _ref2.onRecordingStateChanged, onRecordingStateChanged = _ref2$onRecordingStat === void 0 ? function() {
  } : _ref2$onRecordingStat, _ref2$onLivestreamSta = _ref2.onLivestreamStateChanged, onLivestreamStateChanged = _ref2$onLivestreamSta === void 0 ? function() {
  } : _ref2$onLivestreamSta, _ref2$onMeetingStateC = _ref2.onMeetingStateChanged, onMeetingStateChanged = _ref2$onMeetingStateC === void 0 ? function() {
  } : _ref2$onMeetingStateC, _ref2$onParticipantMo = _ref2.onParticipantModeChanged, onParticipantModeChanged = _ref2$onParticipantMo === void 0 ? function() {
  } : _ref2$onParticipantMo, _ref2$onCharacterJoin = _ref2.onCharacterJoined, onCharacterJoined = _ref2$onCharacterJoin === void 0 ? function() {
  } : _ref2$onCharacterJoin, _ref2$onCharacterLeft = _ref2.onCharacterLeft, onCharacterLeft = _ref2$onCharacterLeft === void 0 ? function() {
  } : _ref2$onCharacterLeft;
  (0, import_react.useEffect)(function() {
    eventEmitter.on(events["meeting-state-changed"], onMeetingStateChanged);
    eventEmitter.on(events["participant-joined"], onParticipantJoined);
    eventEmitter.on(events["participant-left"], onParticipantLeft);
    eventEmitter.on(events["speaker-changed"], onSpeakerChanged);
    eventEmitter.on(events["presenter-changed"], onPresenterChanged);
    eventEmitter.on(events["main-participant-changed"], onMainParticipantChanged);
    eventEmitter.on(events["entry-requested"], onEntryRequested);
    eventEmitter.on(events["entry-responded"], onEntryResponded);
    eventEmitter.on(events["recording-started"], onRecordingStarted);
    eventEmitter.on(events["recording-stopped"], onRecordingStopped);
    eventEmitter.on(events["chat-message"], onChatMessage);
    eventEmitter.on(events["meeting-joined"], onMeetingJoined);
    eventEmitter.on(events["meeting-left"], onMeetingLeft);
    eventEmitter.on(events["live-stream-enabled"], onLiveStreamStarted);
    eventEmitter.on(events["live-stream-disabled"], onLiveStreamStopped);
    eventEmitter.on(events["video-state-changed"], onVideoStateChanged);
    eventEmitter.on(events["video-seeked"], onVideoSeeked);
    eventEmitter.on(events["webcam-requested"], onWebcamRequested);
    eventEmitter.on(events["mic-requested"], onMicRequested);
    eventEmitter.on(events["pin-state-changed"], onPinStateChanged);
    eventEmitter.on(events["connection-open"], onConnectionOpen);
    eventEmitter.on(events["connection-close"], onConnetionClose);
    eventEmitter.on(events["switch-meeting"], onSwitchMeeting);
    eventEmitter.on(events["error"], onError);
    eventEmitter.on(events["hls-started"], onHlsStarted);
    eventEmitter.on(events["hls-stopped"], onHlsStopped);
    eventEmitter.on(events["hls-state-changed"], onHlsStateChanged);
    eventEmitter.on(events["recording-state-changed"], onRecordingStateChanged);
    eventEmitter.on(events["livestream-state-changed"], onLivestreamStateChanged);
    eventEmitter.on(events["participant-mode-changed"], onParticipantModeChanged);
    eventEmitter.on(events["character-joined"], onCharacterJoined);
    eventEmitter.on(events["character-left"], onCharacterLeft);
    return function() {
      eventEmitter.off(events["meeting-state-changed"], onMeetingStateChanged);
      eventEmitter.off(events["participant-joined"], onParticipantJoined);
      eventEmitter.off(events["participant-left"], onParticipantLeft);
      eventEmitter.off(events["speaker-changed"], onSpeakerChanged);
      eventEmitter.off(events["presenter-changed"], onPresenterChanged);
      eventEmitter.off(events["main-participant-changed"], onMainParticipantChanged);
      eventEmitter.off(events["entry-requested"], onEntryRequested);
      eventEmitter.off(events["entry-responded"], onEntryResponded);
      eventEmitter.off(events["recording-started"], onRecordingStarted);
      eventEmitter.off(events["recording-stopped"], onRecordingStopped);
      eventEmitter.off(events["chat-message"], onChatMessage);
      eventEmitter.off(events["meeting-joined"], onMeetingJoined);
      eventEmitter.off(events["meeting-left"], onMeetingLeft);
      eventEmitter.off(events["live-stream-enabled"], onLiveStreamStarted);
      eventEmitter.off(events["live-stream-disabled"], onLiveStreamStopped);
      eventEmitter.off(events["video-state-changed"], onVideoStateChanged);
      eventEmitter.off(events["video-seeked"], onVideoSeeked);
      eventEmitter.off(events["webcam-requested"], onWebcamRequested);
      eventEmitter.off(events["mic-requested"], onMicRequested);
      eventEmitter.off(events["pin-state-changed"], onPinStateChanged);
      eventEmitter.off(events["connection-open"], onConnectionOpen);
      eventEmitter.off(events["connection-close"], onConnetionClose);
      eventEmitter.off(events["switch-meeting"], onSwitchMeeting);
      eventEmitter.off(events["error"], onError);
      eventEmitter.off(events["hls-started"], onHlsStarted);
      eventEmitter.off(events["hls-stopped"], onHlsStopped);
      eventEmitter.off(events["hls-state-changed"], onHlsStateChanged);
      eventEmitter.off(events["recording-state-changed"], onRecordingStateChanged);
      eventEmitter.off(events["livestream-state-changed"], onLivestreamStateChanged);
      eventEmitter.off(events["participant-mode-changed"], onParticipantModeChanged);
      eventEmitter.off(events["character-joined"], onCharacterJoined);
      eventEmitter.off(events["character-left"], onCharacterLeft);
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(MeetingProviderContex.Consumer, null, children));
};
var version = "0.1.97";
var MeetingProvider = function MeetingProvider2(_ref) {
  var children = _ref.children, config = _ref.config, token = _ref.token, joinWithoutUserInteraction = _ref.joinWithoutUserInteraction, _reinitialiseMeetingOnConfigChange = _ref.reinitialiseMeetingOnConfigChange, deviceInfo = _ref.deviceInfo;
  var _useState = (0, import_react.useState)(null), meeting = _useState[0], setMeeting = _useState[1];
  var _useState2 = (0, import_react.useState)(null), localParticipant = _useState2[0], setLocalParticipant = _useState2[1];
  var _useState3 = (0, import_react.useState)(null), mainParticipant = _useState3[0], setMainParticipant = _useState3[1];
  var _useState4 = (0, import_react.useState)(null), activeSpeakerId = _useState4[0], setActiveSpeakerId = _useState4[1];
  var _useState5 = (0, import_react.useState)(null), presenterId = _useState5[0], setPresenterId = _useState5[1];
  var _useState6 = (0, import_react.useState)(false), localMicOn = _useState6[0], setLocalMicOn = _useState6[1];
  var _useState7 = (0, import_react.useState)(false), localWebcamOn = _useState7[0], setLocalWebcamOn = _useState7[1];
  var _useState8 = (0, import_react.useState)(false), localScreenShareOn = _useState8[0], setLocalScreenShareOn = _useState8[1];
  var _useState9 = (0, import_react.useState)(false), isRecording = _useState9[0], setIsRecording = _useState9[1];
  var _useState10 = (0, import_react.useState)([]), messages = _useState10[0], setMessages = _useState10[1];
  var _useState11 = (0, import_react.useState)(/* @__PURE__ */ new Map()), participants = _useState11[0], setParticipants = _useState11[1];
  var _useState12 = (0, import_react.useState)(/* @__PURE__ */ new Map()), characters = _useState12[0], setCharacters = _useState12[1];
  var _useState13 = (0, import_react.useState)(/* @__PURE__ */ new Map()), pinnedParticipants = _useState13[0], setPinnedParticipants = _useState13[1];
  var _useState14 = (0, import_react.useState)(false), isLiveStreaming = _useState14[0], setIsLiveStreaming = _useState14[1];
  var _useState15 = (0, import_react.useState)(/* @__PURE__ */ new Map()), connections = _useState15[0], setConnections = _useState15[1];
  var _useState16 = (0, import_react.useState)(false), isMeetingJoined = _useState16[0], setIsMeetingJoined = _useState16[1];
  var _useState17 = (0, import_react.useState)(false), isHls = _useState17[0], setIsHls = _useState17[1];
  var _useState18 = (0, import_react.useState)("RECORDING_STOPPED"), recordingState = _useState18[0], setRecordingState = _useState18[1];
  var _useState19 = (0, import_react.useState)("LIVESTREAM_STOPPED"), livestreamState = _useState19[0], setLivestreamState = _useState19[1];
  var _useState20 = (0, import_react.useState)("HLS_STOPPED"), hlsState = _useState20[0], setHlsState = _useState20[1];
  var _useState21 = (0, import_react.useState)({
    downstreamUrl: null,
    playbackHlsUrl: null,
    livestreamUrl: null
  }), hlsUrls = _useState21[0], setHlsUrls = _useState21[1];
  var _useState22 = (0, import_react.useState)("TRANSCRIPTION_STOPPED"), transcriptionState = _useState22[0], setTranscriptionState = _useState22[1];
  var meetingRef = (0, import_react.useRef)();
  var localMicOnRef = (0, import_react.useRef)();
  var localWebcamOnRef = (0, import_react.useRef)();
  var localScreenShareOnRef = (0, import_react.useRef)();
  var isRecordingRef = (0, import_react.useRef)();
  var configRef = (0, import_react.useRef)(config);
  var tokenRef = (0, import_react.useRef)(token);
  var joinedOnFirstRender = (0, import_react.useRef)(false);
  var isHlsRef = (0, import_react.useRef)();
  var reinitialiseMeetingOnConfigChange = (0, import_react.useMemo)(function() {
    return _reinitialiseMeetingOnConfigChange;
  }, []);
  (0, import_react.useEffect)(function() {
    meetingRef.current = meeting;
  }, [meeting]);
  (0, import_react.useEffect)(function() {
    localMicOnRef.current = localMicOn;
  }, [localMicOn]);
  (0, import_react.useEffect)(function() {
    localWebcamOnRef.current = localWebcamOn;
  }, [localWebcamOn]);
  (0, import_react.useEffect)(function() {
    localScreenShareOnRef.current = localScreenShareOn;
  }, [localScreenShareOn]);
  (0, import_react.useEffect)(function() {
    isRecordingRef.current = isRecording;
  }, [isRecording]);
  (0, import_react.useEffect)(function() {
    configRef.current = config;
  }, [config]);
  (0, import_react.useEffect)(function() {
    tokenRef.current = token;
  }, [token]);
  (0, import_react.useEffect)(function() {
    isHlsRef.current = isHls;
  }, [isHls]);
  var resetStates = function resetStates2() {
    setMeeting(null);
    setLocalParticipant(null);
    setMainParticipant(null);
    setActiveSpeakerId(null);
    setPresenterId(null);
    setLocalMicOn(false);
    setLocalWebcamOn(false);
    setLocalScreenShareOn(false);
    setIsRecording(false);
    setMessages([]);
    setIsLiveStreaming(false);
    setParticipants(/* @__PURE__ */ new Map());
    setCharacters(/* @__PURE__ */ new Map());
    setPinnedParticipants(/* @__PURE__ */ new Map());
    setConnections(/* @__PURE__ */ new Map());
    setIsMeetingJoined(false);
    setIsHls(false);
    setRecordingState("RECORDING_STOPPED");
    setLivestreamState("LIVESTREAM_STOPPED");
    setHlsState("HLS_STOPPED");
    setTranscriptionState("TRANSCRIPTION_STOPPED");
    setHlsUrls({
      downstreamUrl: null,
      playbackHlsUrl: null,
      livestreamUrl: null
    });
  };
  var _handle_participant_joined = function _handle_participant_joined2(participant) {
    setParticipants(function(participants2) {
      participants2.set(participant.id, participant);
      var participantsToSet = new Map(participants2);
      return participantsToSet;
    });
    eventEmitter.emit(events["participant-joined"], participant);
  };
  var _handle_participant_left = function _handle_participant_left2(participant) {
    setParticipants(function(participants2) {
      participants2["delete"](participant.id);
      var newParticipants = new Map(participants2);
      return newParticipants;
    });
    eventEmitter.emit(events["participant-left"], participant);
  };
  var _handle_presenter_changed = function _handle_presenter_changed2(presenterId2) {
    var _meetingRef$current, _meetingRef$current$l;
    setPresenterId(presenterId2);
    setLocalScreenShareOn(presenterId2 === (meetingRef === null || meetingRef === void 0 ? void 0 : (_meetingRef$current = meetingRef.current) === null || _meetingRef$current === void 0 ? void 0 : (_meetingRef$current$l = _meetingRef$current.localParticipant) === null || _meetingRef$current$l === void 0 ? void 0 : _meetingRef$current$l.id));
    eventEmitter.emit(events["presenter-changed"], presenterId2);
  };
  var _handle_main_participant_changed = function _handle_main_participant_changed2(participant) {
    setMainParticipant(participant);
    eventEmitter.emit(events["main-participant-changed"], participant);
  };
  var _handle_speaker_changed = function _handle_speaker_changed2(activeSpeakerId2) {
    setActiveSpeakerId(activeSpeakerId2);
    eventEmitter.emit(events["speaker-changed"], activeSpeakerId2);
  };
  var _handle_chat_message = function _handle_chat_message2(data) {
    setMessages(function(s) {
      return [].concat(s, [data]);
    });
    eventEmitter.emit(events["chat-message"], data);
  };
  var _handle_entry_requested = function _handle_entry_requested2(data) {
    eventEmitter.emit(events["entry-requested"], data);
  };
  var _handle_entry_responded = function _handle_entry_responded2(participantId, decision) {
    eventEmitter.emit(events["entry-responded"], participantId, decision);
  };
  var _handle_recording_started = function _handle_recording_started2() {
    setIsRecording(true);
    eventEmitter.emit(events["recording-started"]);
  };
  var _handle_recording_stopped = function _handle_recording_stopped2() {
    setIsRecording(false);
    eventEmitter.emit(events["recording-stopped"]);
  };
  var _handle_localParticipant_stream_enabled = function _handle_localParticipant_stream_enabled2(stream) {
    if (stream.track.readyState === "live") {
      if (stream.kind === "video") {
        setLocalWebcamOn(true);
      } else if (stream.kind === "audio") {
        setLocalMicOn(true);
      }
    }
  };
  var _handle_localParticipant_stream_disabled = function _handle_localParticipant_stream_disabled2(stream) {
    if (stream.kind === "video") {
      setLocalWebcamOn(false);
    } else if (stream.kind === "audio") {
      setLocalMicOn(false);
    }
  };
  var _handle_live_stream_started = function _handle_live_stream_started2(data) {
    setIsLiveStreaming(true);
    eventEmitter.emit(events["live-stream-started"], data);
  };
  var _handle_live_stream_stopped = function _handle_live_stream_stopped2() {
    setIsLiveStreaming(false);
    eventEmitter.emit(events["live-stream-stopped"]);
  };
  var _handle_hls_started = function _handle_hls_started2(data) {
    setIsHls(true);
    eventEmitter.emit(events["hls-started"], data);
  };
  var _handle_hls_stopped = function _handle_hls_stopped2() {
    setIsHls(false);
    eventEmitter.emit(events["hls-stopped"]);
  };
  var _handle_video_state_changed = function _handle_video_state_changed2(data) {
    eventEmitter.emit(events["video-state-changed"], data);
  };
  var _handle_video_seeked = function _handle_video_seeked2(data) {
    eventEmitter.emit(events["video-seeked"], data);
  };
  var _handle_webcam_requested = function _handle_webcam_requested2(data) {
    eventEmitter.emit(events["webcam-requested"], data);
  };
  var _handle_mic_requested = function _handle_mic_requested2(data) {
    eventEmitter.emit(events["mic-requested"], data);
  };
  var _handle_meeting_joined = function _handle_meeting_joined2(data) {
    joinedOnFirstRender.current = true;
    setMessages(function(s) {
      return [].concat(s, data.messages);
    });
    eventEmitter.emit(events["meeting-joined"], data);
    setIsMeetingJoined(true);
  };
  var _handle_meeting_left2 = function _handle_meeting_left() {
    eventEmitter.emit(events["meeting-left"]);
    var meeting2 = meetingRef.current;
    if (meeting2) {
      var _meeting$localPartici;
      if (typeof (meeting2 === null || meeting2 === void 0 ? void 0 : meeting2.off) === "function") {
        meeting2.off("meeting-state-changed", _handle_meeting_state_changed);
        meeting2.off("participant-joined", _handle_participant_joined);
        meeting2.off("participant-left", _handle_participant_left);
        meeting2.off("presenter-changed", _handle_presenter_changed);
        meeting2.off("main-participant-changed", _handle_main_participant_changed);
        meeting2.off("speaker-changed", _handle_speaker_changed);
        meeting2.off("entry-requested", _handle_entry_requested);
        meeting2.off("entry-responded", _handle_entry_responded);
        meeting2.off("chat-message", _handle_chat_message);
        meeting2.off("recording-started", _handle_recording_started);
        meeting2.off("recording-stopped", _handle_recording_stopped);
        meeting2.off("meeting-joined", _handle_meeting_joined);
        meeting2.off("meeting-left", _handle_meeting_left2);
        meeting2.off("livestream-started", _handle_live_stream_started);
        meeting2.off("livestream-stopped", _handle_live_stream_stopped);
        meeting2.off("video-state-changed", _handle_video_state_changed);
        meeting2.off("video-seeked", _handle_video_seeked);
        meeting2.off("webcam-requested", _handle_webcam_requested);
        meeting2.off("mic-requested", _handle_mic_requested);
        meeting2.off("pin-state-changed", _handle_pin_state_changed);
        meeting2.off("connection-open", _handle_connection_open);
        meeting2.off("connection-close", _handle_connection_close);
        meeting2.off("switch-meeting", _handle_switch_meeting);
        meeting2.off("error", _handle_error);
        meeting2.off("hls-started", _handle_hls_started);
        meeting2.off("hls-stopped", _handle_hls_stopped);
        meeting2.off("recording-state-changed", _handle_recording_state_changed);
        meeting2.off("livestream-state-changed", _handle_livestream_state_changed);
        meeting2.off("hls-state-changed", _handle_hls_state_changed);
        meeting2.off("participant-mode-changed", _handel_participant_mode_changed);
        meeting2.off("transcription-state-changed", _handle_transcription_state_changed);
        meeting2.off("character-joined", _handle_character_joined);
        meeting2.off("character-left", _handle_character_left);
      }
      if (typeof (meeting2 === null || meeting2 === void 0 ? void 0 : (_meeting$localPartici = meeting2.localParticipant) === null || _meeting$localPartici === void 0 ? void 0 : _meeting$localPartici.off) === "function") {
        meeting2.localParticipant.off("stream-enabled", _handle_localParticipant_stream_enabled);
        meeting2.localParticipant.off("stream-disabled", _handle_localParticipant_stream_disabled);
      }
      resetStates();
    }
  };
  var _handle_pin_state_changed = function _handle_pin_state_changed2(_ref2) {
    var participantId = _ref2.participantId, state = _ref2.state, pinnedBy = _ref2.pinnedBy;
    setPinnedParticipants(function(pinnedParticipants2) {
      if (!state.cam && !state.share) {
        pinnedParticipants2["delete"](participantId);
      } else {
        pinnedParticipants2.set(participantId, state);
      }
      var pinnedParticipantsToSet = new Map(pinnedParticipants2);
      return pinnedParticipantsToSet;
    });
    eventEmitter.emit(events["pin-state-changed"], {
      participantId,
      state,
      pinnedBy
    });
  };
  var _handle_connection_open = function _handle_connection_open2(connection) {
    setConnections(function(s) {
      s.set(connection.id, connection);
      var connectionsToSet = new Map(s);
      return connectionsToSet;
    });
    eventEmitter.emit(events["connection-open"], connection);
  };
  var _handle_connection_close = function _handle_connection_close2(connectionId) {
    setConnections(function(s) {
      s["delete"](connectionId);
      var newConnections = new Map(s);
      return newConnections;
    });
    eventEmitter.emit(events["connection-close"], connectionId);
  };
  var _handle_switch_meeting = function _handle_switch_meeting2(d) {
    eventEmitter.emit(events["switch-meeting"], d);
  };
  var _handle_error = function _handle_error2(data) {
    eventEmitter.emit(events["error"], data);
  };
  var _handle_recording_state_changed = function _handle_recording_state_changed2(data) {
    setRecordingState(data === null || data === void 0 ? void 0 : data.status);
    eventEmitter.emit(events["recording-state-changed"], data);
  };
  var _handle_livestream_state_changed = function _handle_livestream_state_changed2(data) {
    setLivestreamState(data === null || data === void 0 ? void 0 : data.status);
    eventEmitter.emit(events["livestream-state-changed"], data);
  };
  var _handle_hls_state_changed = function _handle_hls_state_changed2(data) {
    setHlsState(data === null || data === void 0 ? void 0 : data.status);
    if ((data === null || data === void 0 ? void 0 : data.status) == "HLS_PLAYABLE") {
      setHlsUrls({
        downstreamUrl: data === null || data === void 0 ? void 0 : data.downstreamUrl,
        playbackHlsUrl: data === null || data === void 0 ? void 0 : data.playbackHlsUrl,
        livestreamUrl: data === null || data === void 0 ? void 0 : data.livestreamUrl
      });
    } else if ((data === null || data === void 0 ? void 0 : data.status) == "HLS_STOPPED") {
      setHlsUrls({
        downstreamUrl: null,
        playbackHlsUrl: null,
        livestreamUrl: null
      });
    }
    eventEmitter.emit(events["hls-state-changed"], data);
  };
  var _handle_meeting_state_changed = function _handle_meeting_state_changed2(data) {
    eventEmitter.emit(events["meeting-state-changed"], data);
  };
  var _handle_transcription_state_changed = function _handle_transcription_state_changed2(data) {
    setTranscriptionState(data === null || data === void 0 ? void 0 : data.status);
    eventEmitter.emit(events["transcription-state-changed"], data);
  };
  var _handle_transcription_text = function _handle_transcription_text2(data) {
    eventEmitter.emit(events["transcription-text"], data);
  };
  var _handle_character_joined = function _handle_character_joined2(character) {
    setCharacters(function(characters2) {
      characters2.set(character.id, character);
      var charactersToSet = new Map(characters2);
      return charactersToSet;
    });
    eventEmitter.emit(events["character-joined"], character);
  };
  var _handle_character_left = function _handle_character_left2(character) {
    setCharacters(function(characters2) {
      characters2["delete"](character.id);
      var newCharacters = new Map(characters2);
      return newCharacters;
    });
    eventEmitter.emit(events["character-left"], character);
  };
  var _handel_participant_mode_changed = function _handel_participant_mode_changed2(data) {
    var _meetingRef$current2, _meetingRef$current2$;
    setParticipants(function(participants2) {
      var part = participants2.get(data.participantId);
      part.mode = data.mode;
      participants2.set(part.id, part);
      var participantsToSet = new Map(participants2);
      return participantsToSet;
    });
    if (data.participantId === (meetingRef === null || meetingRef === void 0 ? void 0 : (_meetingRef$current2 = meetingRef.current) === null || _meetingRef$current2 === void 0 ? void 0 : (_meetingRef$current2$ = _meetingRef$current2.localParticipant) === null || _meetingRef$current2$ === void 0 ? void 0 : _meetingRef$current2$.id)) {
      setLocalParticipant(function(participant) {
        participant.mode = data.mode;
        return participant;
      });
    }
    eventEmitter.emit(events["participant-mode-changed"], data);
  };
  var join = function join2() {
    var meeting2 = import_js_sdk.VideoSDK && import_js_sdk.VideoSDK.initMeeting(configRef.current);
    setMeeting(meeting2);
    var localParticipant2 = meeting2.localParticipant, participants2 = meeting2.participants, characters2 = meeting2.characters;
    participants2.set(localParticipant2.id, localParticipant2);
    setParticipants(participants2);
    setCharacters(characters2);
    setLocalParticipant(localParticipant2);
    meeting2.on("meeting-state-changed", _handle_meeting_state_changed);
    meeting2.on("participant-joined", _handle_participant_joined);
    meeting2.on("participant-left", _handle_participant_left);
    meeting2.on("presenter-changed", _handle_presenter_changed);
    meeting2.on("main-participant-changed", _handle_main_participant_changed);
    meeting2.on("speaker-changed", _handle_speaker_changed);
    meeting2.on("entry-requested", _handle_entry_requested);
    meeting2.on("entry-responded", _handle_entry_responded);
    meeting2.on("chat-message", _handle_chat_message);
    meeting2.on("recording-started", _handle_recording_started);
    meeting2.on("recording-stopped", _handle_recording_stopped);
    meeting2.on("meeting-joined", _handle_meeting_joined);
    meeting2.on("meeting-left", _handle_meeting_left2);
    meeting2.on("livestream-started", _handle_live_stream_started);
    meeting2.on("livestream-stopped", _handle_live_stream_stopped);
    meeting2.on("video-state-changed", _handle_video_state_changed);
    meeting2.on("video-seeked", _handle_video_seeked);
    meeting2.on("webcam-requested", _handle_webcam_requested);
    meeting2.on("mic-requested", _handle_mic_requested);
    meeting2.on("pin-state-changed", _handle_pin_state_changed);
    meeting2.on("connection-open", _handle_connection_open);
    meeting2.on("connection-close", _handle_connection_close);
    meeting2.on("switch-meeting", _handle_switch_meeting);
    meeting2.on("error", _handle_error);
    meeting2.on("hls-started", _handle_hls_started);
    meeting2.on("hls-stopped", _handle_hls_stopped);
    meeting2.on("recording-state-changed", _handle_recording_state_changed);
    meeting2.on("livestream-state-changed", _handle_livestream_state_changed);
    meeting2.on("hls-state-changed", _handle_hls_state_changed);
    meeting2.on("participant-mode-changed", _handel_participant_mode_changed);
    meeting2.on("transcription-state-changed", _handle_transcription_state_changed);
    meeting2.on("transcription-text", _handle_transcription_text);
    meeting2.on("character-joined", _handle_character_joined);
    meeting2.on("character-left", _handle_character_left);
    meeting2.localParticipant.on("stream-enabled", _handle_localParticipant_stream_enabled);
    meeting2.localParticipant.on("stream-disabled", _handle_localParticipant_stream_disabled);
    meeting2.join();
  };
  var leave = function leave2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.leave();
    }
  };
  var end = function end2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.end();
    }
  };
  var startRecording = function startRecording2(webhookUrl, awsDirPath, config2, transcription) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.startRecording(webhookUrl, awsDirPath, config2, transcription);
    }
  };
  var stopRecording = function stopRecording2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      var _isRecording = isRecordingRef.current;
      if (_isRecording) {
        meeting2.stopRecording();
      }
    }
  };
  var unmuteMic = function unmuteMic2(customAudioTrack) {
    if (customAudioTrack === void 0) {
      customAudioTrack = void 0;
    }
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.unmuteMic(customAudioTrack);
    }
  };
  var muteMic = function muteMic2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.muteMic();
    }
  };
  var toggleMic = function toggleMic2(customAudioTrack) {
    if (customAudioTrack === void 0) {
      customAudioTrack = void 0;
    }
    var localMicOn2 = localMicOnRef.current;
    if (localMicOn2) {
      muteMic();
    } else {
      unmuteMic(customAudioTrack);
    }
  };
  var disableWebcam = function disableWebcam2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.disableWebcam();
    }
  };
  var enableWebcam = function enableWebcam2(customVideoTrack) {
    if (customVideoTrack === void 0) {
      customVideoTrack = void 0;
    }
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.enableWebcam(customVideoTrack);
    }
  };
  var toggleWebcam = function toggleWebcam2(customVideoTrack) {
    if (customVideoTrack === void 0) {
      customVideoTrack = void 0;
    }
    var localWebcamOn2 = localWebcamOnRef.current;
    if (localWebcamOn2) {
      disableWebcam();
    } else {
      enableWebcam(customVideoTrack);
    }
  };
  var disableScreenShare = function disableScreenShare2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.disableScreenShare();
    }
  };
  var enableScreenShare = function enableScreenShare2(customScreenShareTrack) {
    if (customScreenShareTrack === void 0) {
      customScreenShareTrack = void 0;
    }
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.enableScreenShare(customScreenShareTrack);
    }
  };
  var toggleScreenShare = function toggleScreenShare2(customScreenShareTrack) {
    if (customScreenShareTrack === void 0) {
      customScreenShareTrack = void 0;
    }
    var localScreenShareOn2 = localScreenShareOnRef.current;
    if (localScreenShareOn2) {
      disableScreenShare();
    } else {
      enableScreenShare(customScreenShareTrack);
    }
  };
  var changeMode = function changeMode2(mode) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.changeMode(mode);
    }
  };
  var sendChatMessage = function sendChatMessage2(text) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.sendChatMessage(text);
    }
  };
  var respondEntry = function respondEntry2(participantId, decision) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.respondEntry(participantId, decision);
    }
  };
  var getMics = function getMics2() {
    try {
      var _meeting = meetingRef.current;
      return Promise.resolve(function() {
        if (_meeting) {
          return Promise.resolve(_meeting.getMics());
        }
      }());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getWebcams = function getWebcams2() {
    try {
      var _meeting2 = meetingRef.current;
      return Promise.resolve(function() {
        if (_meeting2) {
          return Promise.resolve(_meeting2.getWebcams());
        }
      }());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var changeWebcam = function changeWebcam2(obj) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.changeWebcam(obj);
    }
  };
  var replaceWebcamStream = function replaceWebcamStream2(stream) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.replaceWebcamStream(stream);
    }
  };
  var changeMic = function changeMic2(obj) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.changeMic(obj);
    }
  };
  var startVideo = function startVideo2(_ref3) {
    var link = _ref3.link;
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.startVideo({
        link
      });
    }
  };
  var stopVideo = function stopVideo2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.stopVideo();
    }
  };
  var resumeVideo = function resumeVideo2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.resumeVideo();
    }
  };
  var pauseVideo = function pauseVideo2(_ref4) {
    var currentTime = _ref4.currentTime;
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.pauseVideo({
        currentTime
      });
    }
  };
  var seekVideo = function seekVideo2(_ref5) {
    var currentTime = _ref5.currentTime;
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.seekVideo({
        currentTime
      });
    }
  };
  var startLivestream = function startLivestream2(streamInfo, config2) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.startLivestream(streamInfo, config2);
    }
  };
  var stopLivestream = function stopLivestream2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.stopLivestream();
    }
  };
  var connectTo = function connectTo2(_ref6) {
    var meetingId = _ref6.meetingId, payload = _ref6.payload;
    try {
      var _meeting3 = meetingRef.current;
      var _temp = function() {
        if (_meeting3) {
          return Promise.resolve(_meeting3.connectTo({
            meetingId,
            payload
          })).then(function() {
          });
        }
      }();
      return Promise.resolve(_temp && _temp.then ? _temp.then(function() {
      }) : void 0);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var startHls = function startHls2(config2, transcription) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.startHls(config2, transcription);
    }
  };
  var stopHls = function stopHls2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.stopHls();
    }
  };
  var initSDK = function initSDK2() {
    import_js_sdk.VideoSDK.config(tokenRef.current);
    if (deviceInfo) {
      import_js_sdk.VideoSDK.analytics(deviceInfo);
    } else {
      import_js_sdk.VideoSDK.analytics({
        sdkType: "react-web",
        sdkVersion: version
      });
    }
    if (joinWithoutUserInteraction) {
      join();
    }
  };
  (0, import_react.useEffect)(function() {
    initSDK();
  }, []);
  (0, import_react.useEffect)(function() {
    if (reinitialiseMeetingOnConfigChange && joinedOnFirstRender.current) {
      leave();
      initSDK();
      !joinWithoutUserInteraction && join();
    }
  }, [config.meetingId, token, reinitialiseMeetingOnConfigChange]);
  return import_react.default.createElement(MeetingProviderContex.Provider, {
    value: {
      meetingId: meeting === null || meeting === void 0 ? void 0 : meeting.id,
      meeting,
      baseUrl: meeting === null || meeting === void 0 ? void 0 : meeting.baseUrl,
      localParticipant,
      mainParticipant,
      activeSpeakerId,
      participants,
      characters,
      presenterId,
      localMicOn,
      localWebcamOn,
      localScreenShareOn,
      messages,
      isRecording,
      isLiveStreaming,
      pinnedParticipants,
      connections,
      isHls,
      recordingState,
      livestreamState,
      hlsState,
      hlsUrls,
      transcriptionState,
      isMeetingJoined,
      selectedCameraDevice: meeting === null || meeting === void 0 ? void 0 : meeting.selectedCameraDevice,
      selectedMicrophoneDevice: meeting === null || meeting === void 0 ? void 0 : meeting.selectedMicrophoneDevice,
      join,
      leave,
      end,
      startRecording,
      stopRecording,
      sendChatMessage,
      respondEntry,
      muteMic,
      unmuteMic,
      toggleMic,
      disableWebcam,
      enableWebcam,
      toggleWebcam,
      disableScreenShare,
      enableScreenShare,
      toggleScreenShare,
      getMics,
      getWebcams,
      changeWebcam,
      replaceWebcamStream,
      changeMic,
      changeMode,
      startVideo,
      stopVideo,
      resumeVideo,
      pauseVideo,
      seekVideo,
      startLivestream,
      stopLivestream,
      connectTo,
      startHls,
      stopHls
    }
  }, children);
};
var useParticipant = function useParticipant2(participantId, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onStreamEnabled = _ref.onStreamEnabled, onStreamEnabled = _ref$onStreamEnabled === void 0 ? function() {
  } : _ref$onStreamEnabled, _ref$onStreamDisabled = _ref.onStreamDisabled, onStreamDisabled = _ref$onStreamDisabled === void 0 ? function() {
  } : _ref$onStreamDisabled, _ref$onMediaStatusCha = _ref.onMediaStatusChanged, onMediaStatusChanged = _ref$onMediaStatusCha === void 0 ? function() {
  } : _ref$onMediaStatusCha, _ref$onVideoQualityCh = _ref.onVideoQualityChanged, onVideoQualityChanged = _ref$onVideoQualityCh === void 0 ? function() {
  } : _ref$onVideoQualityCh;
  var _useState = (0, import_react.useState)(null), webcamStream = _useState[0], setwebcamStream = _useState[1];
  var _useState2 = (0, import_react.useState)(null), micStream = _useState2[0], setMicStream = _useState2[1];
  var _useState3 = (0, import_react.useState)(null), screenShareStream = _useState3[0], setScreenShareStream = _useState3[1];
  var _useState4 = (0, import_react.useState)(null), screenShareAudioStream = _useState4[0], setScreenShareAudioStream = _useState4[1];
  var meeting = useMeeting();
  var _useMemo = (0, import_react.useMemo)(function() {
    var _meeting$pinnedPartic;
    var participants2 = meeting === null || meeting === void 0 ? void 0 : meeting.participants;
    var localParticipant2 = meeting === null || meeting === void 0 ? void 0 : meeting.localParticipant;
    var activeSpeakerId2 = meeting === null || meeting === void 0 ? void 0 : meeting.activeSpeakerId;
    var mainParticipant2 = meeting === null || meeting === void 0 ? void 0 : meeting.mainParticipant;
    var pinState2 = (meeting === null || meeting === void 0 ? void 0 : (_meeting$pinnedPartic = meeting.pinnedParticipants) === null || _meeting$pinnedPartic === void 0 ? void 0 : _meeting$pinnedPartic.get(participantId)) || {
      cam: false,
      share: false
    };
    return {
      participants: participants2,
      localParticipant: localParticipant2,
      activeSpeakerId: activeSpeakerId2,
      mainParticipant: mainParticipant2,
      pinState: pinState2
    };
  }, [meeting]), participants = _useMemo.participants, localParticipant = _useMemo.localParticipant, activeSpeakerId = _useMemo.activeSpeakerId, mainParticipant = _useMemo.mainParticipant, pinState = _useMemo.pinState;
  var participant = participants === null || participants === void 0 ? void 0 : participants.get(participantId);
  var _useState5 = (0, import_react.useState)(participant === null || participant === void 0 ? void 0 : participant.webcamOn), webcamOn = _useState5[0], setWebcamOn = _useState5[1];
  var _useState6 = (0, import_react.useState)(participant === null || participant === void 0 ? void 0 : participant.micOn), micOn = _useState6[0], setMicOn = _useState6[1];
  var _useState7 = (0, import_react.useState)(participant === null || participant === void 0 ? void 0 : participant.mode), mode = _useState7[0], setMode = _useState7[1];
  var setTrack = function setTrack2(stream) {
    if (stream.track.readyState === "live") {
      switch (stream.kind) {
        case "video":
          if (webcamStream != null) {
            setwebcamStream(null);
          }
          setwebcamStream(stream);
          break;
        case "audio":
          if (micStream != null) {
            setMicStream(null);
          }
          setMicStream(stream);
          break;
        case "share":
          if (screenShareStream != null) {
            setScreenShareStream(null);
          }
          setScreenShareStream(stream);
          break;
        case "shareAudio":
          if (screenShareAudioStream != null) {
            setScreenShareAudioStream(null);
          }
          setScreenShareAudioStream(stream);
          break;
      }
    }
  };
  var unSetTrack = function unSetTrack2(stream) {
    switch (stream.kind) {
      case "video":
        setwebcamStream(null);
        break;
      case "audio":
        setMicStream(null);
        break;
      case "share":
        setScreenShareStream(null);
        break;
      case "shareAudio":
        setScreenShareAudioStream(null);
        break;
    }
  };
  var _handleStreamEnabled = function _handleStreamEnabled2(stream) {
    setTrack(stream);
    onStreamEnabled(stream);
  };
  var _handleParticipantModeChanged = function _handleParticipantModeChanged2(data) {
    if (participantId === data.participantId) {
      setMode(data.mode);
    }
  };
  var _handleStreamDisabled = function _handleStreamDisabled2(stream) {
    unSetTrack(stream);
    onStreamDisabled(stream);
  };
  var _handleVideoQualityChanged = function _handleVideoQualityChanged2(data) {
    var peerId = data.peerId, prevQuality = data.prevQuality, currentQuality = data.currentQuality;
    onVideoQualityChanged({
      peerId,
      prevQuality,
      currentQuality
    });
  };
  var _handleMediaStatusChanged = function _handleMediaStatusChanged2(data) {
    var kind = data.kind, peerId = data.peerId, newStatus = data.newStatus;
    if (kind == "audio") {
      setMicOn(newStatus);
    } else if (kind == "video") {
      setWebcamOn(newStatus);
    }
    onMediaStatusChanged({
      kind,
      peerId,
      newStatus
    });
  };
  var setQuality = function setQuality2(quality) {
    participant === null || participant === void 0 ? void 0 : participant.setQuality(quality);
  };
  var setViewPort = function setViewPort2(width, height) {
    participant === null || participant === void 0 ? void 0 : participant.setViewPort(width, height);
  };
  var enableMic = function enableMic2() {
    participant === null || participant === void 0 ? void 0 : participant.enableMic();
  };
  var disableMic = function disableMic2() {
    participant === null || participant === void 0 ? void 0 : participant.disableMic();
  };
  var enableWebcam = function enableWebcam2() {
    participant === null || participant === void 0 ? void 0 : participant.enableWebcam();
  };
  var disableWebcam = function disableWebcam2() {
    participant === null || participant === void 0 ? void 0 : participant.disableWebcam();
  };
  var pin = function pin2(data) {
    participant === null || participant === void 0 ? void 0 : participant.pin(data);
  };
  var unpin = function unpin2(data) {
    participant === null || participant === void 0 ? void 0 : participant.unpin(data);
  };
  var remove = function remove2() {
    participant === null || participant === void 0 ? void 0 : participant.remove();
  };
  var captureImage = function captureImage2(_temp2) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2, height = _ref2.height, width = _ref2.width;
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.captureImage({
      height,
      width
    }));
  };
  var getAudioStats = function getAudioStats2() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getAudioStats());
  };
  var getVideoStats = function getVideoStats2() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getVideoStats());
  };
  var getShareStats = function getShareStats2() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getShareStats());
  };
  var getShareAudioStats = function getShareAudioStats2() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getShareAudioStats());
  };
  var consumeWebcamStreams = function consumeWebcamStreams2() {
    participant === null || participant === void 0 ? void 0 : participant.consumeWebcamStreams();
  };
  var consumeMicStreams = function consumeMicStreams2() {
    participant === null || participant === void 0 ? void 0 : participant.consumeMicStreams();
  };
  var stopConsumingWebcamStreams = function stopConsumingWebcamStreams2() {
    participant === null || participant === void 0 ? void 0 : participant.stopConsumingWebcamStreams();
  };
  var stopConsumingMicStreams = function stopConsumingMicStreams2() {
    participant === null || participant === void 0 ? void 0 : participant.stopConsumingMicStreams();
  };
  var switchTo = function switchTo2(data) {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.switchTo(data)).then(function() {
    });
  };
  (0, import_react.useEffect)(function() {
    var streams = participant === null || participant === void 0 ? void 0 : participant.streams;
    if (streams) {
      streams.forEach(function(stream) {
        setTrack(stream);
      });
    }
    if (participant !== null && participant !== void 0 && participant.micOn) {
      setMicOn(micOn);
    }
    if (participant !== null && participant !== void 0 && participant.webcamOn) {
      setWebcamOn(webcamOn);
    }
    participant === null || participant === void 0 ? void 0 : participant.on("stream-enabled", _handleStreamEnabled);
    participant === null || participant === void 0 ? void 0 : participant.on("stream-disabled", _handleStreamDisabled);
    participant === null || participant === void 0 ? void 0 : participant.on("media-status-changed", _handleMediaStatusChanged);
    participant === null || participant === void 0 ? void 0 : participant.on("video-quality-changed", _handleVideoQualityChanged);
    eventEmitter.on(events["participant-mode-changed"], _handleParticipantModeChanged);
    return function() {
      participant === null || participant === void 0 ? void 0 : participant.off("stream-enabled", _handleStreamEnabled);
      participant === null || participant === void 0 ? void 0 : participant.off("stream-disabled", _handleStreamDisabled);
      participant === null || participant === void 0 ? void 0 : participant.off("media-status-changed", _handleMediaStatusChanged);
      participant === null || participant === void 0 ? void 0 : participant.off("video-quality-changed", _handleVideoQualityChanged);
      eventEmitter.off(events["participant-mode-changed"], _handleParticipantModeChanged);
    };
  }, [participant]);
  return {
    displayName: participant === null || participant === void 0 ? void 0 : participant.displayName,
    participant,
    webcamStream,
    micStream,
    screenShareStream,
    screenShareAudioStream,
    webcamOn: webcamOn || !!webcamStream,
    micOn: micOn || !!micStream,
    mode,
    metaData: participant === null || participant === void 0 ? void 0 : participant.metaData,
    screenShareOn: !!screenShareStream,
    isLocal: (localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.id) === participantId,
    isActiveSpeaker: activeSpeakerId === participantId,
    isMainParticipant: (mainParticipant === null || mainParticipant === void 0 ? void 0 : mainParticipant.id) === participantId,
    pinState,
    consumeMicStreams,
    consumeWebcamStreams,
    stopConsumingMicStreams,
    stopConsumingWebcamStreams,
    setQuality,
    setViewPort,
    enableMic,
    disableMic,
    enableWebcam,
    disableWebcam,
    captureImage,
    pin,
    unpin,
    remove,
    switchTo,
    getAudioStats,
    getVideoStats,
    getShareStats,
    getShareAudioStats
  };
};
var useConnection = function useConnection2(connectionId, _temp) {
  var _ref = _temp === void 0 ? {
    onMeeting: {
      onParticipantJoined: function onParticipantJoined2() {
      },
      onParticipantLeft: function onParticipantLeft2() {
      },
      onChatMessage: function onChatMessage2() {
      }
    }
  } : _temp, onMeeting = _ref.onMeeting;
  var onParticipantJoined = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onParticipantJoined;
  var onParticipantLeft = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onParticipantLeft;
  var onChatMessage = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onChatMessage;
  var meeting = useMeeting();
  var _useMemo = (0, import_react.useMemo)(function() {
    var connection2 = meeting === null || meeting === void 0 ? void 0 : meeting.connections.get(connectionId);
    if (!connection2) {
      throw new Error("connectionId not found");
    }
    var connectionParticipants2 = new Map(connection2.meeting.participants);
    return {
      connection: connection2,
      connectionParticipants: connectionParticipants2
    };
  }, [meeting]), connection = _useMemo.connection, connectionParticipants = _useMemo.connectionParticipants;
  var _useState = (0, import_react.useState)(new Map(connectionParticipants)), _connectionParticipants = _useState[0], setConnectionParticipants = _useState[1];
  var _handleParticipantJoined = function _handleParticipantJoined2(participant) {
    setConnectionParticipants(function(s) {
      s.set(participant.id, participant);
      var participantsToSet = new Map(s);
      return participantsToSet;
    });
    onParticipantJoined(participant);
  };
  var _handleParticipantLeft = function _handleParticipantLeft2(participantId) {
    setConnectionParticipants(function(s) {
      s["delete"](participantId);
      var newParticipants = new Map(s);
      return newParticipants;
    });
    onParticipantLeft(participantId);
  };
  var _handleChatMessage = function _handleChatMessage2(data) {
    onChatMessage(data);
  };
  (0, import_react.useEffect)(function() {
    connection === null || connection === void 0 ? void 0 : connection.meeting.on("participant-joined", _handleParticipantJoined);
    connection === null || connection === void 0 ? void 0 : connection.meeting.on("participant-left", _handleParticipantLeft);
    connection === null || connection === void 0 ? void 0 : connection.meeting.on("chat-message", _handleChatMessage);
    return function() {
      connection === null || connection === void 0 ? void 0 : connection.meeting.off("participant-joined", _handleParticipantJoined);
      connection === null || connection === void 0 ? void 0 : connection.meeting.off("participant-left", _handleParticipantLeft);
      connection === null || connection === void 0 ? void 0 : connection.meeting.off("chat-message", _handleChatMessage);
    };
  }, [connection]);
  return {
    connection: {
      id: connection.id,
      close: connection.close,
      payload: connection.payload,
      meeting: {
        id: connection.meeting.id,
        sendChatMessage: connection.meeting.sendChatMessage,
        end: connection.meeting.end,
        participants: _connectionParticipants
      }
    }
  };
};
var usePubSub = function usePubSub2(topic, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onMessageReceive = _ref.onMessageReceived, onMessageReceived = _ref$onMessageReceive === void 0 ? function() {
  } : _ref$onMessageReceive, _ref$onOldMessagesRec = _ref.onOldMessagesReceived, onOldMessagesReceived = _ref$onOldMessagesRec === void 0 ? function() {
  } : _ref$onOldMessagesRec;
  var _useMeeting = useMeeting(), meeting = _useMeeting.meeting, isMeetingJoined = _useMeeting.isMeetingJoined;
  var _useState = (0, import_react.useState)([]), messages = _useState[0], setMessages = _useState[1];
  var isSubscribed = (0, import_react.useRef)(false);
  var publish = function publish2(message2, options, payload) {
    if (meeting) {
      meeting.pubSub.publish(topic, message2, options, payload);
    }
  };
  var _handlePubSub = function _handlePubSub2(data) {
    setMessages(function(s) {
      return [].concat(s, [data]);
    });
    onMessageReceived(data);
  };
  var subscribeToPubsub = function subscribeToPubsub2(meeting2) {
    try {
      var _meeting$pubSub;
      return Promise.resolve(meeting2 === null || meeting2 === void 0 ? void 0 : (_meeting$pubSub = meeting2.pubSub) === null || _meeting$pubSub === void 0 ? void 0 : _meeting$pubSub.subscribe(topic, _handlePubSub)).then(function(data) {
        if (data) {
          onOldMessagesReceived(data.messages);
          setMessages(data.messages);
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };
  (0, import_react.useEffect)(function() {
    if (meeting && !isSubscribed.current && isMeetingJoined) {
      isSubscribed.current = true;
      subscribeToPubsub(meeting);
      return function() {
        var _meeting$pubSub2;
        meeting === null || meeting === void 0 ? void 0 : (_meeting$pubSub2 = meeting.pubSub) === null || _meeting$pubSub2 === void 0 ? void 0 : _meeting$pubSub2.unsubscribe(topic, _handlePubSub);
      };
    }
  }, [meeting, isMeetingJoined]);
  return {
    publish,
    messages
  };
};
var useFile = function useFile2() {
  var mMeeting = useMeeting();
  var uploadBase64File = function uploadBase64File2(_ref) {
    var base64Data = _ref.base64Data, token = _ref.token, fileName = _ref.fileName;
    try {
      return Promise.resolve(mMeeting.meeting.uploadBase64File({
        base64Data,
        token,
        fileName
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var fetchBase64File = function fetchBase64File2(_ref2) {
    var url = _ref2.url, token = _ref2.token;
    try {
      return Promise.resolve(mMeeting.meeting.fetchBase64File({
        url,
        token
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  return {
    uploadBase64File,
    fetchBase64File
  };
};
var useMediaDevice = function useMediaDevice2(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onDeviceChanged = _ref.onDeviceChanged, onDeviceChanged = _ref$onDeviceChanged === void 0 ? function() {
  } : _ref$onDeviceChanged;
  var getDevices = function getDevices2() {
    try {
      return Promise.resolve(import_js_sdk.VideoSDK.getDevices());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getCameras = function getCameras2() {
    try {
      return Promise.resolve(import_js_sdk.VideoSDK.getCameras());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getMicrophones = function getMicrophones2() {
    try {
      return Promise.resolve(import_js_sdk.VideoSDK.getMicrophones());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getPlaybackDevices = function getPlaybackDevices2() {
    try {
      return Promise.resolve(import_js_sdk.VideoSDK.getPlaybackDevices());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var checkPermissions = function checkPermissions2(permissions) {
    if (permissions === void 0) {
      permissions = void 0;
    }
    try {
      return Promise.resolve(import_js_sdk.VideoSDK.checkPermissions(permissions));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var requestPermission = function requestPermission2(permissions) {
    if (permissions === void 0) {
      permissions = void 0;
    }
    try {
      return Promise.resolve(import_js_sdk.VideoSDK.requestPermission(permissions));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  (0, import_react.useEffect)(function() {
    import_js_sdk.VideoSDK.on("device-changed", onDeviceChanged);
    return function() {
      import_js_sdk.VideoSDK.off("device-changed", onDeviceChanged);
    };
  }, []);
  return {
    getDevices,
    getCameras,
    getMicrophones,
    getPlaybackDevices,
    requestPermission,
    checkPermissions
  };
};
var useTranscription = function useTranscription2(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onTranscriptionS = _ref.onTranscriptionStateChanged, onTranscriptionStateChanged = _ref$onTranscriptionS === void 0 ? function() {
  } : _ref$onTranscriptionS, _ref$onTranscriptionT = _ref.onTranscriptionText, onTranscriptionText = _ref$onTranscriptionT === void 0 ? function() {
  } : _ref$onTranscriptionT;
  var mMeeting = useMeeting();
  (0, import_react.useEffect)(function() {
    eventEmitter.on(events["transcription-state-changed"], onTranscriptionStateChanged);
    eventEmitter.on(events["transcription-text"], onTranscriptionText);
    return function() {
      eventEmitter.off(events["transcription-state-changed"], onTranscriptionStateChanged);
      eventEmitter.off(events["transcription-text"], onTranscriptionText);
    };
  }, []);
  var startTranscription = function startTranscription2(config) {
    try {
      return Promise.resolve(mMeeting.meeting.startTranscription(config));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var stopTranscription = function stopTranscription2() {
    try {
      return Promise.resolve(mMeeting.meeting.stopTranscription());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  return {
    startTranscription,
    stopTranscription
  };
};
var useCharacter = function useCharacter2(_ref, _temp) {
  var interactionId = _ref.interactionId, id = _ref.id, characterMode = _ref.characterMode, displayName = _ref.displayName, characterRole = _ref.characterRole, knowledgeBases = _ref.knowledgeBases;
  var _ref2 = _temp === void 0 ? {} : _temp, _ref2$onCharacterStat = _ref2.onCharacterStateChanged, onCharacterStateChanged = _ref2$onCharacterStat === void 0 ? function() {
  } : _ref2$onCharacterStat, _ref2$onCharacterMess = _ref2.onCharacterMessage, onCharacterMessage = _ref2$onCharacterMess === void 0 ? function() {
  } : _ref2$onCharacterMess, _ref2$onCharacterJoin = _ref2.onCharacterJoined, onCharacterJoined = _ref2$onCharacterJoin === void 0 ? function() {
  } : _ref2$onCharacterJoin, _ref2$onCharacterLeft = _ref2.onCharacterLeft, onCharacterLeft = _ref2$onCharacterLeft === void 0 ? function() {
  } : _ref2$onCharacterLeft, _ref2$onStreamEnabled = _ref2.onStreamEnabled, onStreamEnabled = _ref2$onStreamEnabled === void 0 ? function() {
  } : _ref2$onStreamEnabled, _ref2$onStreamDisable = _ref2.onStreamDisabled, onStreamDisabled = _ref2$onStreamDisable === void 0 ? function() {
  } : _ref2$onStreamDisable, _ref2$onMediaStatusCh = _ref2.onMediaStatusChanged, onMediaStatusChanged = _ref2$onMediaStatusCh === void 0 ? function() {
  } : _ref2$onMediaStatusCh, _ref2$onVideoQualityC = _ref2.onVideoQualityChanged, onVideoQualityChanged = _ref2$onVideoQualityC === void 0 ? function() {
  } : _ref2$onVideoQualityC;
  var _useState = (0, import_react.useState)(null), webcamStream = _useState[0], setwebcamStream = _useState[1];
  var _useState2 = (0, import_react.useState)(null), micStream = _useState2[0], setMicStream = _useState2[1];
  var mMeeting = useMeeting();
  var _useMemo = (0, import_react.useMemo)(function() {
    var chars = Array.from(mMeeting.characters.values());
    var activeSpeakerId2 = mMeeting === null || mMeeting === void 0 ? void 0 : mMeeting.activeSpeakerId;
    return {
      character: chars.find(function(chars2) {
        return chars2.interactionId == interactionId;
      }) || mMeeting.characters.get(id) || mMeeting.meeting.createCharacter({
        interactionId,
        displayName,
        id,
        characterRole,
        characterMode,
        knowledgeBases
      }),
      activeSpeakerId: activeSpeakerId2
    };
  }, [mMeeting.characters]), character = _useMemo.character, activeSpeakerId = _useMemo.activeSpeakerId;
  var _useState3 = (0, import_react.useState)(character === null || character === void 0 ? void 0 : character.webcamOn), webcamOn = _useState3[0], setWebcamOn = _useState3[1];
  var _useState4 = (0, import_react.useState)(character === null || character === void 0 ? void 0 : character.micOn), micOn = _useState4[0], setMicOn = _useState4[1];
  var _useState5 = (0, import_react.useState)(null), characterState = _useState5[0], setCharacterState = _useState5[1];
  var setTrack = function setTrack2(stream) {
    if (stream.track.readyState === "live") {
      switch (stream.kind) {
        case "video":
          if (webcamStream != null) {
            setwebcamStream(null);
          }
          setwebcamStream(stream);
          break;
        case "audio":
          if (micStream != null) {
            setMicStream(null);
          }
          setMicStream(stream);
          break;
      }
    }
  };
  var unSetTrack = function unSetTrack2(stream) {
    switch (stream.kind) {
      case "video":
        setwebcamStream(null);
        break;
      case "audio":
        setMicStream(null);
        break;
    }
  };
  var _handleCharacterStateChanged = function _handleCharacterStateChanged2(d) {
    var status = d.status;
    setCharacterState(status);
    onCharacterStateChanged(d);
  };
  var _handleCharacterMessage = function _handleCharacterMessage2(d) {
    onCharacterMessage(d);
  };
  var _handleCharacterJoined = function _handleCharacterJoined2() {
    onCharacterJoined();
  };
  var _handleCharacterLeft = function _handleCharacterLeft2() {
    onCharacterLeft();
  };
  var _handleStreamEnabled = function _handleStreamEnabled2(stream) {
    setTrack(stream);
    onStreamEnabled(stream);
  };
  var _handleStreamDisabled = function _handleStreamDisabled2(stream) {
    unSetTrack(stream);
    onStreamDisabled(stream);
  };
  var _handleVideoQualityChanged = function _handleVideoQualityChanged2(data) {
    var peerId = data.peerId, prevQuality = data.prevQuality, currentQuality = data.currentQuality;
    onVideoQualityChanged({
      peerId,
      prevQuality,
      currentQuality
    });
  };
  var _handleMediaStatusChanged = function _handleMediaStatusChanged2(data) {
    var kind = data.kind, peerId = data.peerId, newStatus = data.newStatus;
    if (kind == "audio") {
      setMicOn(newStatus);
    } else if (kind == "video") {
      setWebcamOn(newStatus);
    }
    onMediaStatusChanged({
      kind,
      peerId,
      newStatus
    });
  };
  var enableMic = function enableMic2() {
    character === null || character === void 0 ? void 0 : character.enableMic();
  };
  var disableMic = function disableMic2() {
    character === null || character === void 0 ? void 0 : character.disableMic();
  };
  var enableWebcam = function enableWebcam2() {
    character === null || character === void 0 ? void 0 : character.enableWebcam();
  };
  var disableWebcam = function disableWebcam2() {
    character === null || character === void 0 ? void 0 : character.disableWebcam();
  };
  var join = function join2() {
    return Promise.resolve(character === null || character === void 0 ? void 0 : character.join()).then(function() {
    });
  };
  var sendMessage = function sendMessage2(d) {
    return Promise.resolve(character === null || character === void 0 ? void 0 : character.sendMessage(d)).then(function() {
    });
  };
  var interrupt = function interrupt2() {
    return Promise.resolve(character === null || character === void 0 ? void 0 : character.interrupt()).then(function() {
    });
  };
  var leave = function leave2() {
    return Promise.resolve(character === null || character === void 0 ? void 0 : character.leave()).then(function() {
    });
  };
  (0, import_react.useEffect)(function() {
    var streams = character === null || character === void 0 ? void 0 : character.streams;
    if (streams) {
      streams.forEach(function(stream) {
        setTrack(stream);
      });
    }
    if (character !== null && character !== void 0 && character.micOn) {
      setMicOn(micOn);
    }
    if (character !== null && character !== void 0 && character.webcamOn) {
      setWebcamOn(webcamOn);
    }
    character === null || character === void 0 ? void 0 : character.on("character-state-changed", _handleCharacterStateChanged);
    character === null || character === void 0 ? void 0 : character.on("character-message", _handleCharacterMessage);
    character === null || character === void 0 ? void 0 : character.on("stream-enabled", _handleStreamEnabled);
    character === null || character === void 0 ? void 0 : character.on("stream-disabled", _handleStreamDisabled);
    character === null || character === void 0 ? void 0 : character.on("media-status-changed", _handleMediaStatusChanged);
    character === null || character === void 0 ? void 0 : character.on("video-quality-changed", _handleVideoQualityChanged);
    character === null || character === void 0 ? void 0 : character.on("character-joined", _handleCharacterJoined);
    character === null || character === void 0 ? void 0 : character.on("character-left", _handleCharacterLeft);
    return function() {
      character === null || character === void 0 ? void 0 : character.off("character-state-changed", _handleCharacterStateChanged);
      character === null || character === void 0 ? void 0 : character.off("character-message", _handleCharacterMessage);
      character === null || character === void 0 ? void 0 : character.off("stream-enabled", _handleStreamEnabled);
      character === null || character === void 0 ? void 0 : character.off("stream-disabled", _handleStreamDisabled);
      character === null || character === void 0 ? void 0 : character.off("media-status-changed", _handleMediaStatusChanged);
      character === null || character === void 0 ? void 0 : character.off("video-quality-changed", _handleVideoQualityChanged);
      character === null || character === void 0 ? void 0 : character.off("character-joined", _handleCharacterJoined);
      character === null || character === void 0 ? void 0 : character.off("character-left", _handleCharacterLeft);
    };
  }, [character]);
  return {
    displayName: character === null || character === void 0 ? void 0 : character.displayName,
    webcamStream,
    micStream,
    webcamOn: webcamOn || !!webcamStream,
    micOn: micOn || !!micStream,
    isActiveSpeaker: activeSpeakerId === id,
    interactionId: character === null || character === void 0 ? void 0 : character.interactionId,
    id: character === null || character === void 0 ? void 0 : character.id,
    characterMode: character === null || character === void 0 ? void 0 : character.characterMode,
    characterState: characterState || (character === null || character === void 0 ? void 0 : character.characterState),
    knowledgeBases: character === null || character === void 0 ? void 0 : character.knowledgeBases,
    enableMic,
    disableMic,
    enableWebcam,
    disableWebcam,
    join,
    leave,
    sendMessage,
    interrupt
  };
};
var Constants = import_js_sdk.VideoSDK.Constants;
var createCameraVideoTrack = function createCameraVideoTrack2(_ref) {
  var _ref$cameraId = _ref.cameraId, cameraId = _ref$cameraId === void 0 ? void 0 : _ref$cameraId, _ref$encoderConfig = _ref.encoderConfig, encoderConfig = _ref$encoderConfig === void 0 ? void 0 : _ref$encoderConfig, _ref$facingMode = _ref.facingMode, facingMode = _ref$facingMode === void 0 ? void 0 : _ref$facingMode, _ref$optimizationMode = _ref.optimizationMode, optimizationMode = _ref$optimizationMode === void 0 ? void 0 : _ref$optimizationMode, _ref$multiStream = _ref.multiStream, multiStream = _ref$multiStream === void 0 ? true : _ref$multiStream;
  try {
    return Promise.resolve(import_js_sdk.VideoSDK.createCameraVideoTrack({
      cameraId,
      encoderConfig,
      facingMode,
      optimizationMode,
      multiStream
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var createScreenShareVideoTrack = function createScreenShareVideoTrack2(_ref2) {
  var _ref2$encoderConfig = _ref2.encoderConfig, encoderConfig = _ref2$encoderConfig === void 0 ? void 0 : _ref2$encoderConfig, _ref2$optimizationMod = _ref2.optimizationMode, optimizationMode = _ref2$optimizationMod === void 0 ? void 0 : _ref2$optimizationMod, _ref2$withAudio = _ref2.withAudio, withAudio = _ref2$withAudio === void 0 ? "enable" : _ref2$withAudio;
  try {
    return Promise.resolve(import_js_sdk.VideoSDK.createScreenShareVideoTrack({
      encoderConfig,
      optimizationMode,
      withAudio
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var createMicrophoneAudioTrack = function createMicrophoneAudioTrack2(_ref3) {
  var _ref3$noiseConfig = _ref3.noiseConfig, noiseConfig = _ref3$noiseConfig === void 0 ? void 0 : _ref3$noiseConfig, _ref3$encoderConfig = _ref3.encoderConfig, encoderConfig = _ref3$encoderConfig === void 0 ? void 0 : _ref3$encoderConfig, _ref3$microphoneId = _ref3.microphoneId, microphoneId = _ref3$microphoneId === void 0 ? void 0 : _ref3$microphoneId;
  try {
    return Promise.resolve(import_js_sdk.VideoSDK.createMicrophoneAudioTrack({
      noiseConfig,
      encoderConfig,
      microphoneId
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var getNetworkStats = function getNetworkStats2(_temp) {
  var _ref4 = _temp === void 0 ? {} : _temp, timeoutDuration = _ref4.timeoutDuration;
  try {
    return Promise.resolve(import_js_sdk.VideoSDK.getNetworkStats({
      timeoutDuration
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var export_CameraDeviceInfo = import_js_sdk2.CameraDeviceInfo;
var export_DeviceInfo = import_js_sdk2.DeviceInfo;
var export_MicrophoneDeviceInfo = import_js_sdk2.MicrophoneDeviceInfo;
export {
  export_CameraDeviceInfo as CameraDeviceInfo,
  Constants,
  export_DeviceInfo as DeviceInfo,
  MeetingConsumer,
  MeetingProvider,
  export_MicrophoneDeviceInfo as MicrophoneDeviceInfo,
  createCameraVideoTrack,
  createMicrophoneAudioTrack,
  createScreenShareVideoTrack,
  getNetworkStats,
  useCharacter,
  useConnection,
  useFile,
  useMediaDevice,
  useMeeting,
  useParticipant,
  usePubSub,
  useTranscription
};
/*! Bundled license information:

@videosdk.live/js-sdk/videosdk.js:
  (*! For license information please see videosdk.js.LICENSE.txt *)
*/
//# sourceMappingURL=@videosdk__live_react-sdk.js.map

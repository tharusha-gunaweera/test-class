import React, { createContext, useEffect, useContext, useState, useRef, useMemo } from 'react';
import EventEmitter from 'events';
import { VideoSDK } from '@videosdk.live/js-sdk';
export { CameraDeviceInfo, DeviceInfo, MicrophoneDeviceInfo } from '@videosdk.live/js-sdk';

var eventPrifix = 'videosdk-live-react-sdk';
var events = {
  'participant-joined': eventPrifix + "-participant-joined",
  'participant-left': eventPrifix + "-participant-left",
  'speaker-changed': eventPrifix + "-speaker-changed",
  'presenter-changed': eventPrifix + "-presenter-changed",
  'main-participant-changed': eventPrifix + "-main-participant-changed",
  'entry-requested': eventPrifix + "-entry-requested",
  'entry-responded': eventPrifix + "-entry-responded",
  'recording-started': eventPrifix + "-recording-started",
  'recording-stopped': eventPrifix + "-recording-stopped",
  'chat-message': eventPrifix + "-chat-message",
  'meeting-joined': eventPrifix + "-meeting-joined",
  'meeting-left': eventPrifix + "-meeting-left",
  'live-stream-started': eventPrifix + "-live-stream-started",
  'live-stream-stopped': eventPrifix + "-live-stream-stopped",
  'video-state-changed': eventPrifix + "-video-state-changed",
  'video-seeked': eventPrifix + "-video-seeked",
  'webcam-requested': eventPrifix + "-webcam-requested",
  'mic-requested': eventPrifix + "-mic-requested",
  'pin-state-changed': eventPrifix + "-pin-state-changed",
  'connection-open': eventPrifix + "-connection-open",
  'connection-close': eventPrifix + "-connection-close",
  'switch-meeting': eventPrifix + "-switch-meeting",
  error: eventPrifix + "-error",
  'hls-started': eventPrifix + "-hls-started",
  'hls-stopped': eventPrifix + "-hls-stopped",
  'hls-state-changed': eventPrifix + "-hls-state-changed",
  'hls-playable-state-changed': eventPrifix + "-hls-playable-state-changed",
  'recording-state-changed': eventPrifix + "-recording-state-changed",
  'livestream-state-changed': eventPrifix + "-livestream-state-changed",
  'meeting-state-changed': eventPrifix + "-meeting-state-changed",
  'participant-mode-changed': eventPrifix + "-participant-mode-changed",
  'transcription-state-changed': eventPrifix + "-transcription-state-changed",
  'transcription-text': eventPrifix + "-transcription-text",
  'character-joined': eventPrifix + "-character-joined",
  'character-left': eventPrifix + "-character-left"
};
var eventEmitter = new EventEmitter();
eventEmitter.setMaxListeners(9999);

var MeetingProviderContex = createContext();
var useMeeting = function useMeeting(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
    _ref$onParticipantJoi = _ref.onParticipantJoined,
    onParticipantJoined = _ref$onParticipantJoi === void 0 ? function () {} : _ref$onParticipantJoi,
    _ref$onParticipantLef = _ref.onParticipantLeft,
    onParticipantLeft = _ref$onParticipantLef === void 0 ? function () {} : _ref$onParticipantLef,
    _ref$onSpeakerChanged = _ref.onSpeakerChanged,
    onSpeakerChanged = _ref$onSpeakerChanged === void 0 ? function () {} : _ref$onSpeakerChanged,
    _ref$onPresenterChang = _ref.onPresenterChanged,
    onPresenterChanged = _ref$onPresenterChang === void 0 ? function () {} : _ref$onPresenterChang,
    _ref$onMainParticipan = _ref.onMainParticipantChanged,
    onMainParticipantChanged = _ref$onMainParticipan === void 0 ? function () {} : _ref$onMainParticipan,
    _ref$onEntryRequested = _ref.onEntryRequested,
    onEntryRequested = _ref$onEntryRequested === void 0 ? function () {} : _ref$onEntryRequested,
    _ref$onEntryResponded = _ref.onEntryResponded,
    onEntryResponded = _ref$onEntryResponded === void 0 ? function () {} : _ref$onEntryResponded,
    _ref$onRecordingStart = _ref.onRecordingStarted,
    onRecordingStarted = _ref$onRecordingStart === void 0 ? function () {} : _ref$onRecordingStart,
    _ref$onRecordingStopp = _ref.onRecordingStopped,
    onRecordingStopped = _ref$onRecordingStopp === void 0 ? function () {} : _ref$onRecordingStopp,
    _ref$onChatMessage = _ref.onChatMessage,
    onChatMessage = _ref$onChatMessage === void 0 ? function () {} : _ref$onChatMessage,
    _ref$onMeetingJoined = _ref.onMeetingJoined,
    onMeetingJoined = _ref$onMeetingJoined === void 0 ? function () {} : _ref$onMeetingJoined,
    _ref$onMeetingLeft = _ref.onMeetingLeft,
    onMeetingLeft = _ref$onMeetingLeft === void 0 ? function () {} : _ref$onMeetingLeft,
    _ref$onLiveStreamStar = _ref.onLiveStreamStarted,
    onLiveStreamStarted = _ref$onLiveStreamStar === void 0 ? function () {} : _ref$onLiveStreamStar,
    _ref$onLiveStreamStop = _ref.onLiveStreamStopped,
    onLiveStreamStopped = _ref$onLiveStreamStop === void 0 ? function () {} : _ref$onLiveStreamStop,
    _ref$onVideoStateChan = _ref.onVideoStateChanged,
    onVideoStateChanged = _ref$onVideoStateChan === void 0 ? function () {} : _ref$onVideoStateChan,
    _ref$onVideoSeeked = _ref.onVideoSeeked,
    onVideoSeeked = _ref$onVideoSeeked === void 0 ? function () {} : _ref$onVideoSeeked,
    _ref$onWebcamRequeste = _ref.onWebcamRequested,
    onWebcamRequested = _ref$onWebcamRequeste === void 0 ? function () {} : _ref$onWebcamRequeste,
    _ref$onMicRequested = _ref.onMicRequested,
    onMicRequested = _ref$onMicRequested === void 0 ? function () {} : _ref$onMicRequested,
    _ref$onPinStateChange = _ref.onPinStateChanged,
    onPinStateChanged = _ref$onPinStateChange === void 0 ? function () {} : _ref$onPinStateChange,
    _ref$onConnectionOpen = _ref.onConnectionOpen,
    onConnectionOpen = _ref$onConnectionOpen === void 0 ? function () {} : _ref$onConnectionOpen,
    _ref$onConnetionClose = _ref.onConnetionClose,
    onConnetionClose = _ref$onConnetionClose === void 0 ? function () {} : _ref$onConnetionClose,
    _ref$onSwitchMeeting = _ref.onSwitchMeeting,
    onSwitchMeeting = _ref$onSwitchMeeting === void 0 ? function () {} : _ref$onSwitchMeeting,
    _ref$onError = _ref.onError,
    onError = _ref$onError === void 0 ? function () {} : _ref$onError,
    _ref$onHlsStarted = _ref.onHlsStarted,
    onHlsStarted = _ref$onHlsStarted === void 0 ? function () {} : _ref$onHlsStarted,
    _ref$onHlsStopped = _ref.onHlsStopped,
    onHlsStopped = _ref$onHlsStopped === void 0 ? function () {} : _ref$onHlsStopped,
    _ref$onHlsStateChange = _ref.onHlsStateChanged,
    onHlsStateChanged = _ref$onHlsStateChange === void 0 ? function () {} : _ref$onHlsStateChange,
    _ref$onRecordingState = _ref.onRecordingStateChanged,
    onRecordingStateChanged = _ref$onRecordingState === void 0 ? function () {} : _ref$onRecordingState,
    _ref$onLivestreamStat = _ref.onLivestreamStateChanged,
    onLivestreamStateChanged = _ref$onLivestreamStat === void 0 ? function () {} : _ref$onLivestreamStat,
    _ref$onMeetingStateCh = _ref.onMeetingStateChanged,
    onMeetingStateChanged = _ref$onMeetingStateCh === void 0 ? function () {} : _ref$onMeetingStateCh,
    _ref$onParticipantMod = _ref.onParticipantModeChanged,
    onParticipantModeChanged = _ref$onParticipantMod === void 0 ? function () {} : _ref$onParticipantMod,
    _ref$onCharacterJoine = _ref.onCharacterJoined,
    onCharacterJoined = _ref$onCharacterJoine === void 0 ? function () {} : _ref$onCharacterJoine,
    _ref$onCharacterLeft = _ref.onCharacterLeft,
    onCharacterLeft = _ref$onCharacterLeft === void 0 ? function () {} : _ref$onCharacterLeft;
  useEffect(function () {
    eventEmitter.on(events['participant-joined'], onParticipantJoined);
    eventEmitter.on(events['participant-left'], onParticipantLeft);
    eventEmitter.on(events['speaker-changed'], onSpeakerChanged);
    eventEmitter.on(events['presenter-changed'], onPresenterChanged);
    eventEmitter.on(events['main-participant-changed'], onMainParticipantChanged);
    eventEmitter.on(events['entry-requested'], onEntryRequested);
    eventEmitter.on(events['entry-responded'], onEntryResponded);
    eventEmitter.on(events['recording-started'], onRecordingStarted);
    eventEmitter.on(events['recording-stopped'], onRecordingStopped);
    eventEmitter.on(events['chat-message'], onChatMessage);
    eventEmitter.on(events['meeting-joined'], onMeetingJoined);
    eventEmitter.on(events['meeting-left'], onMeetingLeft);
    eventEmitter.on(events['live-stream-started'], onLiveStreamStarted);
    eventEmitter.on(events['live-stream-stopped'], onLiveStreamStopped);
    eventEmitter.on(events['video-state-changed'], onVideoStateChanged);
    eventEmitter.on(events['video-seeked'], onVideoSeeked);
    eventEmitter.on(events['webcam-requested'], onWebcamRequested);
    eventEmitter.on(events['mic-requested'], onMicRequested);
    eventEmitter.on(events['pin-state-changed'], onPinStateChanged);
    eventEmitter.on(events['connection-open'], onConnectionOpen);
    eventEmitter.on(events['connection-close'], onConnetionClose);
    eventEmitter.on(events['switch-meeting'], onSwitchMeeting);
    eventEmitter.on(events['error'], onError);
    eventEmitter.on(events['hls-started'], onHlsStarted);
    eventEmitter.on(events['hls-stopped'], onHlsStopped);
    eventEmitter.on(events['hls-state-changed'], onHlsStateChanged);
    eventEmitter.on(events['recording-state-changed'], onRecordingStateChanged);
    eventEmitter.on(events['livestream-state-changed'], onLivestreamStateChanged);
    eventEmitter.on(events['meeting-state-changed'], onMeetingStateChanged);
    eventEmitter.on(events['participant-mode-changed'], onParticipantModeChanged);
    eventEmitter.on(events['character-joined'], onCharacterJoined);
    eventEmitter.on(events['character-left'], onCharacterLeft);
    return function () {
      eventEmitter.off(events['meeting-state-changed'], onMeetingStateChanged);
      eventEmitter.off(events['participant-joined'], onParticipantJoined);
      eventEmitter.off(events['participant-left'], onParticipantLeft);
      eventEmitter.off(events['speaker-changed'], onSpeakerChanged);
      eventEmitter.off(events['presenter-changed'], onPresenterChanged);
      eventEmitter.off(events['main-participant-changed'], onMainParticipantChanged);
      eventEmitter.off(events['entry-requested'], onEntryRequested);
      eventEmitter.off(events['entry-responded'], onEntryResponded);
      eventEmitter.off(events['recording-started'], onRecordingStarted);
      eventEmitter.off(events['recording-stopped'], onRecordingStopped);
      eventEmitter.off(events['chat-message'], onChatMessage);
      eventEmitter.off(events['meeting-joined'], onMeetingJoined);
      eventEmitter.off(events['meeting-left'], onMeetingLeft);
      eventEmitter.off(events['live-stream-started'], onLiveStreamStarted);
      eventEmitter.off(events['live-stream-stopped'], onLiveStreamStopped);
      eventEmitter.off(events['video-state-changed'], onVideoStateChanged);
      eventEmitter.off(events['video-seeked'], onVideoSeeked);
      eventEmitter.off(events['webcam-requested'], onWebcamRequested);
      eventEmitter.off(events['mic-requested'], onMicRequested);
      eventEmitter.off(events['pin-state-changed'], onPinStateChanged);
      eventEmitter.off(events['connection-open'], onConnectionOpen);
      eventEmitter.off(events['connection-close'], onConnetionClose);
      eventEmitter.off(events['switch-meeting'], onSwitchMeeting);
      eventEmitter.off(events['error'], onError);
      eventEmitter.off(events['hls-started'], onHlsStarted);
      eventEmitter.off(events['hls-stopped'], onHlsStopped);
      eventEmitter.off(events['hls-state-changed'], onHlsStateChanged);
      eventEmitter.off(events['recording-state-changed'], onRecordingStateChanged);
      eventEmitter.off(events['livestream-state-changed'], onLivestreamStateChanged);
      eventEmitter.off(events['participant-mode-changed'], onParticipantModeChanged);
      eventEmitter.off(events['character-joined'], onCharacterJoined);
      eventEmitter.off(events['character-left'], onCharacterLeft);
    };
  }, []);
  return useContext(MeetingProviderContex);
};
var MeetingConsumer = function MeetingConsumer(_ref2) {
  var children = _ref2.children,
    _ref2$onParticipantJo = _ref2.onParticipantJoined,
    onParticipantJoined = _ref2$onParticipantJo === void 0 ? function () {} : _ref2$onParticipantJo,
    _ref2$onParticipantLe = _ref2.onParticipantLeft,
    onParticipantLeft = _ref2$onParticipantLe === void 0 ? function () {} : _ref2$onParticipantLe,
    _ref2$onSpeakerChange = _ref2.onSpeakerChanged,
    onSpeakerChanged = _ref2$onSpeakerChange === void 0 ? function () {} : _ref2$onSpeakerChange,
    _ref2$onPresenterChan = _ref2.onPresenterChanged,
    onPresenterChanged = _ref2$onPresenterChan === void 0 ? function () {} : _ref2$onPresenterChan,
    _ref2$onMainParticipa = _ref2.onMainParticipantChanged,
    onMainParticipantChanged = _ref2$onMainParticipa === void 0 ? function () {} : _ref2$onMainParticipa,
    _ref2$onEntryRequeste = _ref2.onEntryRequested,
    onEntryRequested = _ref2$onEntryRequeste === void 0 ? function () {} : _ref2$onEntryRequeste,
    _ref2$onEntryResponde = _ref2.onEntryResponded,
    onEntryResponded = _ref2$onEntryResponde === void 0 ? function () {} : _ref2$onEntryResponde,
    _ref2$onRecordingStar = _ref2.onRecordingStarted,
    onRecordingStarted = _ref2$onRecordingStar === void 0 ? function () {} : _ref2$onRecordingStar,
    _ref2$onRecordingStop = _ref2.onRecordingStopped,
    onRecordingStopped = _ref2$onRecordingStop === void 0 ? function () {} : _ref2$onRecordingStop,
    _ref2$onChatMessage = _ref2.onChatMessage,
    onChatMessage = _ref2$onChatMessage === void 0 ? function () {} : _ref2$onChatMessage,
    _ref2$onMeetingJoined = _ref2.onMeetingJoined,
    onMeetingJoined = _ref2$onMeetingJoined === void 0 ? function () {} : _ref2$onMeetingJoined,
    _ref2$onMeetingLeft = _ref2.onMeetingLeft,
    onMeetingLeft = _ref2$onMeetingLeft === void 0 ? function () {} : _ref2$onMeetingLeft,
    _ref2$onLiveStreamSta = _ref2.onLiveStreamStarted,
    onLiveStreamStarted = _ref2$onLiveStreamSta === void 0 ? function () {} : _ref2$onLiveStreamSta,
    _ref2$onLiveStreamSto = _ref2.onLiveStreamStopped,
    onLiveStreamStopped = _ref2$onLiveStreamSto === void 0 ? function () {} : _ref2$onLiveStreamSto,
    _ref2$onVideoStateCha = _ref2.onVideoStateChanged,
    onVideoStateChanged = _ref2$onVideoStateCha === void 0 ? function () {} : _ref2$onVideoStateCha,
    _ref2$onVideoSeeked = _ref2.onVideoSeeked,
    onVideoSeeked = _ref2$onVideoSeeked === void 0 ? function () {} : _ref2$onVideoSeeked,
    _ref2$onWebcamRequest = _ref2.onWebcamRequested,
    onWebcamRequested = _ref2$onWebcamRequest === void 0 ? function () {} : _ref2$onWebcamRequest,
    _ref2$onMicRequested = _ref2.onMicRequested,
    onMicRequested = _ref2$onMicRequested === void 0 ? function () {} : _ref2$onMicRequested,
    _ref2$onPinStateChang = _ref2.onPinStateChanged,
    onPinStateChanged = _ref2$onPinStateChang === void 0 ? function () {} : _ref2$onPinStateChang,
    _ref2$onConnectionOpe = _ref2.onConnectionOpen,
    onConnectionOpen = _ref2$onConnectionOpe === void 0 ? function () {} : _ref2$onConnectionOpe,
    _ref2$onConnetionClos = _ref2.onConnetionClose,
    onConnetionClose = _ref2$onConnetionClos === void 0 ? function () {} : _ref2$onConnetionClos,
    _ref2$onSwitchMeeting = _ref2.onSwitchMeeting,
    onSwitchMeeting = _ref2$onSwitchMeeting === void 0 ? function () {} : _ref2$onSwitchMeeting,
    _ref2$onError = _ref2.onError,
    onError = _ref2$onError === void 0 ? function () {} : _ref2$onError,
    _ref2$onHlsStarted = _ref2.onHlsStarted,
    onHlsStarted = _ref2$onHlsStarted === void 0 ? function () {} : _ref2$onHlsStarted,
    _ref2$onHlsStopped = _ref2.onHlsStopped,
    onHlsStopped = _ref2$onHlsStopped === void 0 ? function () {} : _ref2$onHlsStopped,
    _ref2$onHlsStateChang = _ref2.onHlsStateChanged,
    onHlsStateChanged = _ref2$onHlsStateChang === void 0 ? function () {} : _ref2$onHlsStateChang,
    _ref2$onRecordingStat = _ref2.onRecordingStateChanged,
    onRecordingStateChanged = _ref2$onRecordingStat === void 0 ? function () {} : _ref2$onRecordingStat,
    _ref2$onLivestreamSta = _ref2.onLivestreamStateChanged,
    onLivestreamStateChanged = _ref2$onLivestreamSta === void 0 ? function () {} : _ref2$onLivestreamSta,
    _ref2$onMeetingStateC = _ref2.onMeetingStateChanged,
    onMeetingStateChanged = _ref2$onMeetingStateC === void 0 ? function () {} : _ref2$onMeetingStateC,
    _ref2$onParticipantMo = _ref2.onParticipantModeChanged,
    onParticipantModeChanged = _ref2$onParticipantMo === void 0 ? function () {} : _ref2$onParticipantMo,
    _ref2$onCharacterJoin = _ref2.onCharacterJoined,
    onCharacterJoined = _ref2$onCharacterJoin === void 0 ? function () {} : _ref2$onCharacterJoin,
    _ref2$onCharacterLeft = _ref2.onCharacterLeft,
    onCharacterLeft = _ref2$onCharacterLeft === void 0 ? function () {} : _ref2$onCharacterLeft;
  useEffect(function () {
    eventEmitter.on(events['meeting-state-changed'], onMeetingStateChanged);
    eventEmitter.on(events['participant-joined'], onParticipantJoined);
    eventEmitter.on(events['participant-left'], onParticipantLeft);
    eventEmitter.on(events['speaker-changed'], onSpeakerChanged);
    eventEmitter.on(events['presenter-changed'], onPresenterChanged);
    eventEmitter.on(events['main-participant-changed'], onMainParticipantChanged);
    eventEmitter.on(events['entry-requested'], onEntryRequested);
    eventEmitter.on(events['entry-responded'], onEntryResponded);
    eventEmitter.on(events['recording-started'], onRecordingStarted);
    eventEmitter.on(events['recording-stopped'], onRecordingStopped);
    eventEmitter.on(events['chat-message'], onChatMessage);
    eventEmitter.on(events['meeting-joined'], onMeetingJoined);
    eventEmitter.on(events['meeting-left'], onMeetingLeft);
    eventEmitter.on(events['live-stream-enabled'], onLiveStreamStarted);
    eventEmitter.on(events['live-stream-disabled'], onLiveStreamStopped);
    eventEmitter.on(events['video-state-changed'], onVideoStateChanged);
    eventEmitter.on(events['video-seeked'], onVideoSeeked);
    eventEmitter.on(events['webcam-requested'], onWebcamRequested);
    eventEmitter.on(events['mic-requested'], onMicRequested);
    eventEmitter.on(events['pin-state-changed'], onPinStateChanged);
    eventEmitter.on(events['connection-open'], onConnectionOpen);
    eventEmitter.on(events['connection-close'], onConnetionClose);
    eventEmitter.on(events['switch-meeting'], onSwitchMeeting);
    eventEmitter.on(events['error'], onError);
    eventEmitter.on(events['hls-started'], onHlsStarted);
    eventEmitter.on(events['hls-stopped'], onHlsStopped);
    eventEmitter.on(events['hls-state-changed'], onHlsStateChanged);
    eventEmitter.on(events['recording-state-changed'], onRecordingStateChanged);
    eventEmitter.on(events['livestream-state-changed'], onLivestreamStateChanged);
    eventEmitter.on(events['participant-mode-changed'], onParticipantModeChanged);
    eventEmitter.on(events['character-joined'], onCharacterJoined);
    eventEmitter.on(events['character-left'], onCharacterLeft);
    return function () {
      eventEmitter.off(events['meeting-state-changed'], onMeetingStateChanged);
      eventEmitter.off(events['participant-joined'], onParticipantJoined);
      eventEmitter.off(events['participant-left'], onParticipantLeft);
      eventEmitter.off(events['speaker-changed'], onSpeakerChanged);
      eventEmitter.off(events['presenter-changed'], onPresenterChanged);
      eventEmitter.off(events['main-participant-changed'], onMainParticipantChanged);
      eventEmitter.off(events['entry-requested'], onEntryRequested);
      eventEmitter.off(events['entry-responded'], onEntryResponded);
      eventEmitter.off(events['recording-started'], onRecordingStarted);
      eventEmitter.off(events['recording-stopped'], onRecordingStopped);
      eventEmitter.off(events['chat-message'], onChatMessage);
      eventEmitter.off(events['meeting-joined'], onMeetingJoined);
      eventEmitter.off(events['meeting-left'], onMeetingLeft);
      eventEmitter.off(events['live-stream-enabled'], onLiveStreamStarted);
      eventEmitter.off(events['live-stream-disabled'], onLiveStreamStopped);
      eventEmitter.off(events['video-state-changed'], onVideoStateChanged);
      eventEmitter.off(events['video-seeked'], onVideoSeeked);
      eventEmitter.off(events['webcam-requested'], onWebcamRequested);
      eventEmitter.off(events['mic-requested'], onMicRequested);
      eventEmitter.off(events['pin-state-changed'], onPinStateChanged);
      eventEmitter.off(events['connection-open'], onConnectionOpen);
      eventEmitter.off(events['connection-close'], onConnetionClose);
      eventEmitter.off(events['switch-meeting'], onSwitchMeeting);
      eventEmitter.off(events['error'], onError);
      eventEmitter.off(events['hls-started'], onHlsStarted);
      eventEmitter.off(events['hls-stopped'], onHlsStopped);
      eventEmitter.off(events['hls-state-changed'], onHlsStateChanged);
      eventEmitter.off(events['recording-state-changed'], onRecordingStateChanged);
      eventEmitter.off(events['livestream-state-changed'], onLivestreamStateChanged);
      eventEmitter.off(events['participant-mode-changed'], onParticipantModeChanged);
      eventEmitter.off(events['character-joined'], onCharacterJoined);
      eventEmitter.off(events['character-left'], onCharacterLeft);
    };
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MeetingProviderContex.Consumer, null, children));
};

var version = "0.1.97";

var MeetingProvider = function MeetingProvider(_ref) {
  var children = _ref.children,
    config = _ref.config,
    token = _ref.token,
    joinWithoutUserInteraction = _ref.joinWithoutUserInteraction,
    _reinitialiseMeetingOnConfigChange = _ref.reinitialiseMeetingOnConfigChange,
    deviceInfo = _ref.deviceInfo;
  var _useState = useState(null),
    meeting = _useState[0],
    setMeeting = _useState[1];
  var _useState2 = useState(null),
    localParticipant = _useState2[0],
    setLocalParticipant = _useState2[1];
  var _useState3 = useState(null),
    mainParticipant = _useState3[0],
    setMainParticipant = _useState3[1];
  var _useState4 = useState(null),
    activeSpeakerId = _useState4[0],
    setActiveSpeakerId = _useState4[1];
  var _useState5 = useState(null),
    presenterId = _useState5[0],
    setPresenterId = _useState5[1];
  var _useState6 = useState(false),
    localMicOn = _useState6[0],
    setLocalMicOn = _useState6[1];
  var _useState7 = useState(false),
    localWebcamOn = _useState7[0],
    setLocalWebcamOn = _useState7[1];
  var _useState8 = useState(false),
    localScreenShareOn = _useState8[0],
    setLocalScreenShareOn = _useState8[1];
  var _useState9 = useState(false),
    isRecording = _useState9[0],
    setIsRecording = _useState9[1];
  var _useState10 = useState([]),
    messages = _useState10[0],
    setMessages = _useState10[1];
  var _useState11 = useState(new Map()),
    participants = _useState11[0],
    setParticipants = _useState11[1];
  var _useState12 = useState(new Map()),
    characters = _useState12[0],
    setCharacters = _useState12[1];
  var _useState13 = useState(new Map()),
    pinnedParticipants = _useState13[0],
    setPinnedParticipants = _useState13[1];
  var _useState14 = useState(false),
    isLiveStreaming = _useState14[0],
    setIsLiveStreaming = _useState14[1];
  var _useState15 = useState(new Map()),
    connections = _useState15[0],
    setConnections = _useState15[1];
  var _useState16 = useState(false),
    isMeetingJoined = _useState16[0],
    setIsMeetingJoined = _useState16[1];
  var _useState17 = useState(false),
    isHls = _useState17[0],
    setIsHls = _useState17[1];
  var _useState18 = useState('RECORDING_STOPPED'),
    recordingState = _useState18[0],
    setRecordingState = _useState18[1];
  var _useState19 = useState('LIVESTREAM_STOPPED'),
    livestreamState = _useState19[0],
    setLivestreamState = _useState19[1];
  var _useState20 = useState('HLS_STOPPED'),
    hlsState = _useState20[0],
    setHlsState = _useState20[1];
  var _useState21 = useState({
      downstreamUrl: null,
      playbackHlsUrl: null,
      livestreamUrl: null
    }),
    hlsUrls = _useState21[0],
    setHlsUrls = _useState21[1];
  var _useState22 = useState('TRANSCRIPTION_STOPPED'),
    transcriptionState = _useState22[0],
    setTranscriptionState = _useState22[1];
  var meetingRef = useRef();
  var localMicOnRef = useRef();
  var localWebcamOnRef = useRef();
  var localScreenShareOnRef = useRef();
  var isRecordingRef = useRef();
  var configRef = useRef(config);
  var tokenRef = useRef(token);
  var joinedOnFirstRender = useRef(false);
  var isHlsRef = useRef();
  var reinitialiseMeetingOnConfigChange = useMemo(function () {
    return _reinitialiseMeetingOnConfigChange;
  }, []);
  useEffect(function () {
    meetingRef.current = meeting;
  }, [meeting]);
  useEffect(function () {
    localMicOnRef.current = localMicOn;
  }, [localMicOn]);
  useEffect(function () {
    localWebcamOnRef.current = localWebcamOn;
  }, [localWebcamOn]);
  useEffect(function () {
    localScreenShareOnRef.current = localScreenShareOn;
  }, [localScreenShareOn]);
  useEffect(function () {
    isRecordingRef.current = isRecording;
  }, [isRecording]);
  useEffect(function () {
    configRef.current = config;
  }, [config]);
  useEffect(function () {
    tokenRef.current = token;
  }, [token]);
  useEffect(function () {
    isHlsRef.current = isHls;
  }, [isHls]);
  var resetStates = function resetStates() {
    setMeeting(null);
    setLocalParticipant(null);
    setMainParticipant(null);
    setActiveSpeakerId(null);
    setPresenterId(null);
    setLocalMicOn(false);
    setLocalWebcamOn(false);
    setLocalScreenShareOn(false);
    setIsRecording(false);
    setMessages([]);
    setIsLiveStreaming(false);
    setParticipants(new Map());
    setCharacters(new Map());
    setPinnedParticipants(new Map());
    setConnections(new Map());
    setIsMeetingJoined(false);
    setIsHls(false);
    setRecordingState('RECORDING_STOPPED');
    setLivestreamState('LIVESTREAM_STOPPED');
    setHlsState('HLS_STOPPED');
    setTranscriptionState('TRANSCRIPTION_STOPPED');
    setHlsUrls({
      downstreamUrl: null,
      playbackHlsUrl: null,
      livestreamUrl: null
    });
  };
  var _handle_participant_joined = function _handle_participant_joined(participant) {
    setParticipants(function (participants) {
      participants.set(participant.id, participant);
      var participantsToSet = new Map(participants);
      return participantsToSet;
    });
    eventEmitter.emit(events['participant-joined'], participant);
  };
  var _handle_participant_left = function _handle_participant_left(participant) {
    setParticipants(function (participants) {
      participants["delete"](participant.id);
      var newParticipants = new Map(participants);
      return newParticipants;
    });
    eventEmitter.emit(events['participant-left'], participant);
  };
  var _handle_presenter_changed = function _handle_presenter_changed(presenterId) {
    var _meetingRef$current, _meetingRef$current$l;
    setPresenterId(presenterId);
    setLocalScreenShareOn(presenterId === (meetingRef === null || meetingRef === void 0 ? void 0 : (_meetingRef$current = meetingRef.current) === null || _meetingRef$current === void 0 ? void 0 : (_meetingRef$current$l = _meetingRef$current.localParticipant) === null || _meetingRef$current$l === void 0 ? void 0 : _meetingRef$current$l.id));
    eventEmitter.emit(events['presenter-changed'], presenterId);
  };
  var _handle_main_participant_changed = function _handle_main_participant_changed(participant) {
    setMainParticipant(participant);
    eventEmitter.emit(events['main-participant-changed'], participant);
  };
  var _handle_speaker_changed = function _handle_speaker_changed(activeSpeakerId) {
    setActiveSpeakerId(activeSpeakerId);
    eventEmitter.emit(events['speaker-changed'], activeSpeakerId);
  };
  var _handle_chat_message = function _handle_chat_message(data) {
    setMessages(function (s) {
      return [].concat(s, [data]);
    });
    eventEmitter.emit(events['chat-message'], data);
  };
  var _handle_entry_requested = function _handle_entry_requested(data) {
    eventEmitter.emit(events['entry-requested'], data);
  };
  var _handle_entry_responded = function _handle_entry_responded(participantId, decision) {
    eventEmitter.emit(events['entry-responded'], participantId, decision);
  };
  var _handle_recording_started = function _handle_recording_started() {
    setIsRecording(true);
    eventEmitter.emit(events['recording-started']);
  };
  var _handle_recording_stopped = function _handle_recording_stopped() {
    setIsRecording(false);
    eventEmitter.emit(events['recording-stopped']);
  };
  var _handle_localParticipant_stream_enabled = function _handle_localParticipant_stream_enabled(stream) {
    if (stream.track.readyState === 'live') {
      if (stream.kind === 'video') {
        setLocalWebcamOn(true);
      } else if (stream.kind === 'audio') {
        setLocalMicOn(true);
      }
    }
  };
  var _handle_localParticipant_stream_disabled = function _handle_localParticipant_stream_disabled(stream) {
    if (stream.kind === 'video') {
      setLocalWebcamOn(false);
    } else if (stream.kind === 'audio') {
      setLocalMicOn(false);
    }
  };
  var _handle_live_stream_started = function _handle_live_stream_started(data) {
    setIsLiveStreaming(true);
    eventEmitter.emit(events['live-stream-started'], data);
  };
  var _handle_live_stream_stopped = function _handle_live_stream_stopped() {
    setIsLiveStreaming(false);
    eventEmitter.emit(events['live-stream-stopped']);
  };
  var _handle_hls_started = function _handle_hls_started(data) {
    setIsHls(true);
    eventEmitter.emit(events['hls-started'], data);
  };
  var _handle_hls_stopped = function _handle_hls_stopped() {
    setIsHls(false);
    eventEmitter.emit(events['hls-stopped']);
  };
  var _handle_video_state_changed = function _handle_video_state_changed(data) {
    eventEmitter.emit(events['video-state-changed'], data);
  };
  var _handle_video_seeked = function _handle_video_seeked(data) {
    eventEmitter.emit(events['video-seeked'], data);
  };
  var _handle_webcam_requested = function _handle_webcam_requested(data) {
    eventEmitter.emit(events['webcam-requested'], data);
  };
  var _handle_mic_requested = function _handle_mic_requested(data) {
    eventEmitter.emit(events['mic-requested'], data);
  };
  var _handle_meeting_joined = function _handle_meeting_joined(data) {
    joinedOnFirstRender.current = true;
    setMessages(function (s) {
      return [].concat(s, data.messages);
    });
    eventEmitter.emit(events['meeting-joined'], data);
    setIsMeetingJoined(true);
  };
  var _handle_meeting_left2 = function _handle_meeting_left() {
    eventEmitter.emit(events['meeting-left']);
    var meeting = meetingRef.current;
    if (meeting) {
      var _meeting$localPartici;
      if (typeof (meeting === null || meeting === void 0 ? void 0 : meeting.off) === 'function') {
        meeting.off('meeting-state-changed', _handle_meeting_state_changed);
        meeting.off('participant-joined', _handle_participant_joined);
        meeting.off('participant-left', _handle_participant_left);
        meeting.off('presenter-changed', _handle_presenter_changed);
        meeting.off('main-participant-changed', _handle_main_participant_changed);
        meeting.off('speaker-changed', _handle_speaker_changed);
        meeting.off('entry-requested', _handle_entry_requested);
        meeting.off('entry-responded', _handle_entry_responded);
        meeting.off('chat-message', _handle_chat_message);
        meeting.off('recording-started', _handle_recording_started);
        meeting.off('recording-stopped', _handle_recording_stopped);
        meeting.off('meeting-joined', _handle_meeting_joined);
        meeting.off('meeting-left', _handle_meeting_left2);
        meeting.off('livestream-started', _handle_live_stream_started);
        meeting.off('livestream-stopped', _handle_live_stream_stopped);
        meeting.off('video-state-changed', _handle_video_state_changed);
        meeting.off('video-seeked', _handle_video_seeked);
        meeting.off('webcam-requested', _handle_webcam_requested);
        meeting.off('mic-requested', _handle_mic_requested);
        meeting.off('pin-state-changed', _handle_pin_state_changed);
        meeting.off('connection-open', _handle_connection_open);
        meeting.off('connection-close', _handle_connection_close);
        meeting.off('switch-meeting', _handle_switch_meeting);
        meeting.off('error', _handle_error);
        meeting.off('hls-started', _handle_hls_started);
        meeting.off('hls-stopped', _handle_hls_stopped);
        meeting.off('recording-state-changed', _handle_recording_state_changed);
        meeting.off('livestream-state-changed', _handle_livestream_state_changed);
        meeting.off('hls-state-changed', _handle_hls_state_changed);
        meeting.off('participant-mode-changed', _handel_participant_mode_changed);
        meeting.off('transcription-state-changed', _handle_transcription_state_changed);
        meeting.off('character-joined', _handle_character_joined);
        meeting.off('character-left', _handle_character_left);
      }
      if (typeof (meeting === null || meeting === void 0 ? void 0 : (_meeting$localPartici = meeting.localParticipant) === null || _meeting$localPartici === void 0 ? void 0 : _meeting$localPartici.off) === 'function') {
        meeting.localParticipant.off('stream-enabled', _handle_localParticipant_stream_enabled);
        meeting.localParticipant.off('stream-disabled', _handle_localParticipant_stream_disabled);
      }
      resetStates();
    }
  };
  var _handle_pin_state_changed = function _handle_pin_state_changed(_ref2) {
    var participantId = _ref2.participantId,
      state = _ref2.state,
      pinnedBy = _ref2.pinnedBy;
    setPinnedParticipants(function (pinnedParticipants) {
      if (!state.cam && !state.share) {
        pinnedParticipants["delete"](participantId);
      } else {
        pinnedParticipants.set(participantId, state);
      }
      var pinnedParticipantsToSet = new Map(pinnedParticipants);
      return pinnedParticipantsToSet;
    });
    eventEmitter.emit(events['pin-state-changed'], {
      participantId: participantId,
      state: state,
      pinnedBy: pinnedBy
    });
  };
  var _handle_connection_open = function _handle_connection_open(connection) {
    setConnections(function (s) {
      s.set(connection.id, connection);
      var connectionsToSet = new Map(s);
      return connectionsToSet;
    });
    eventEmitter.emit(events['connection-open'], connection);
  };
  var _handle_connection_close = function _handle_connection_close(connectionId) {
    setConnections(function (s) {
      s["delete"](connectionId);
      var newConnections = new Map(s);
      return newConnections;
    });
    eventEmitter.emit(events['connection-close'], connectionId);
  };
  var _handle_switch_meeting = function _handle_switch_meeting(d) {
    eventEmitter.emit(events['switch-meeting'], d);
  };
  var _handle_error = function _handle_error(data) {
    eventEmitter.emit(events['error'], data);
  };
  var _handle_recording_state_changed = function _handle_recording_state_changed(data) {
    setRecordingState(data === null || data === void 0 ? void 0 : data.status);
    eventEmitter.emit(events['recording-state-changed'], data);
  };
  var _handle_livestream_state_changed = function _handle_livestream_state_changed(data) {
    setLivestreamState(data === null || data === void 0 ? void 0 : data.status);
    eventEmitter.emit(events['livestream-state-changed'], data);
  };
  var _handle_hls_state_changed = function _handle_hls_state_changed(data) {
    setHlsState(data === null || data === void 0 ? void 0 : data.status);
    if ((data === null || data === void 0 ? void 0 : data.status) == 'HLS_PLAYABLE') {
      setHlsUrls({
        downstreamUrl: data === null || data === void 0 ? void 0 : data.downstreamUrl,
        playbackHlsUrl: data === null || data === void 0 ? void 0 : data.playbackHlsUrl,
        livestreamUrl: data === null || data === void 0 ? void 0 : data.livestreamUrl
      });
    } else if ((data === null || data === void 0 ? void 0 : data.status) == 'HLS_STOPPED') {
      setHlsUrls({
        downstreamUrl: null,
        playbackHlsUrl: null,
        livestreamUrl: null
      });
    }
    eventEmitter.emit(events['hls-state-changed'], data);
  };
  var _handle_meeting_state_changed = function _handle_meeting_state_changed(data) {
    eventEmitter.emit(events['meeting-state-changed'], data);
  };
  var _handle_transcription_state_changed = function _handle_transcription_state_changed(data) {
    setTranscriptionState(data === null || data === void 0 ? void 0 : data.status);
    eventEmitter.emit(events['transcription-state-changed'], data);
  };
  var _handle_transcription_text = function _handle_transcription_text(data) {
    eventEmitter.emit(events['transcription-text'], data);
  };
  var _handle_character_joined = function _handle_character_joined(character) {
    setCharacters(function (characters) {
      characters.set(character.id, character);
      var charactersToSet = new Map(characters);
      return charactersToSet;
    });
    eventEmitter.emit(events['character-joined'], character);
  };
  var _handle_character_left = function _handle_character_left(character) {
    setCharacters(function (characters) {
      characters["delete"](character.id);
      var newCharacters = new Map(characters);
      return newCharacters;
    });
    eventEmitter.emit(events['character-left'], character);
  };
  var _handel_participant_mode_changed = function _handel_participant_mode_changed(data) {
    var _meetingRef$current2, _meetingRef$current2$;
    setParticipants(function (participants) {
      var part = participants.get(data.participantId);
      part.mode = data.mode;
      participants.set(part.id, part);
      var participantsToSet = new Map(participants);
      return participantsToSet;
    });
    if (data.participantId === (meetingRef === null || meetingRef === void 0 ? void 0 : (_meetingRef$current2 = meetingRef.current) === null || _meetingRef$current2 === void 0 ? void 0 : (_meetingRef$current2$ = _meetingRef$current2.localParticipant) === null || _meetingRef$current2$ === void 0 ? void 0 : _meetingRef$current2$.id)) {
      setLocalParticipant(function (participant) {
        participant.mode = data.mode;
        return participant;
      });
    }
    eventEmitter.emit(events['participant-mode-changed'], data);
  };
  var join = function join() {
    var meeting = VideoSDK && VideoSDK.initMeeting(configRef.current);
    setMeeting(meeting);
    var localParticipant = meeting.localParticipant,
      participants = meeting.participants,
      characters = meeting.characters;
    participants.set(localParticipant.id, localParticipant);
    setParticipants(participants);
    setCharacters(characters);
    setLocalParticipant(localParticipant);
    meeting.on('meeting-state-changed', _handle_meeting_state_changed);
    meeting.on('participant-joined', _handle_participant_joined);
    meeting.on('participant-left', _handle_participant_left);
    meeting.on('presenter-changed', _handle_presenter_changed);
    meeting.on('main-participant-changed', _handle_main_participant_changed);
    meeting.on('speaker-changed', _handle_speaker_changed);
    meeting.on('entry-requested', _handle_entry_requested);
    meeting.on('entry-responded', _handle_entry_responded);
    meeting.on('chat-message', _handle_chat_message);
    meeting.on('recording-started', _handle_recording_started);
    meeting.on('recording-stopped', _handle_recording_stopped);
    meeting.on('meeting-joined', _handle_meeting_joined);
    meeting.on('meeting-left', _handle_meeting_left2);
    meeting.on('livestream-started', _handle_live_stream_started);
    meeting.on('livestream-stopped', _handle_live_stream_stopped);
    meeting.on('video-state-changed', _handle_video_state_changed);
    meeting.on('video-seeked', _handle_video_seeked);
    meeting.on('webcam-requested', _handle_webcam_requested);
    meeting.on('mic-requested', _handle_mic_requested);
    meeting.on('pin-state-changed', _handle_pin_state_changed);
    meeting.on('connection-open', _handle_connection_open);
    meeting.on('connection-close', _handle_connection_close);
    meeting.on('switch-meeting', _handle_switch_meeting);
    meeting.on('error', _handle_error);
    meeting.on('hls-started', _handle_hls_started);
    meeting.on('hls-stopped', _handle_hls_stopped);
    meeting.on('recording-state-changed', _handle_recording_state_changed);
    meeting.on('livestream-state-changed', _handle_livestream_state_changed);
    meeting.on('hls-state-changed', _handle_hls_state_changed);
    meeting.on('participant-mode-changed', _handel_participant_mode_changed);
    meeting.on('transcription-state-changed', _handle_transcription_state_changed);
    meeting.on('transcription-text', _handle_transcription_text);
    meeting.on('character-joined', _handle_character_joined);
    meeting.on('character-left', _handle_character_left);
    meeting.localParticipant.on('stream-enabled', _handle_localParticipant_stream_enabled);
    meeting.localParticipant.on('stream-disabled', _handle_localParticipant_stream_disabled);
    meeting.join();
  };
  var leave = function leave() {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.leave();
    }
  };
  var end = function end() {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.end();
    }
  };
  var startRecording = function startRecording(webhookUrl, awsDirPath, config, transcription) {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.startRecording(webhookUrl, awsDirPath, config, transcription);
    }
  };
  var stopRecording = function stopRecording() {
    var meeting = meetingRef.current;
    if (meeting) {
      var _isRecording = isRecordingRef.current;
      if (_isRecording) {
        meeting.stopRecording();
      }
    }
  };
  var unmuteMic = function unmuteMic(customAudioTrack) {
    if (customAudioTrack === void 0) {
      customAudioTrack = undefined;
    }
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.unmuteMic(customAudioTrack);
    }
  };
  var muteMic = function muteMic() {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.muteMic();
    }
  };
  var toggleMic = function toggleMic(customAudioTrack) {
    if (customAudioTrack === void 0) {
      customAudioTrack = undefined;
    }
    var localMicOn = localMicOnRef.current;
    if (localMicOn) {
      muteMic();
    } else {
      unmuteMic(customAudioTrack);
    }
  };
  var disableWebcam = function disableWebcam() {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.disableWebcam();
    }
  };
  var enableWebcam = function enableWebcam(customVideoTrack) {
    if (customVideoTrack === void 0) {
      customVideoTrack = undefined;
    }
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.enableWebcam(customVideoTrack);
    }
  };
  var toggleWebcam = function toggleWebcam(customVideoTrack) {
    if (customVideoTrack === void 0) {
      customVideoTrack = undefined;
    }
    var localWebcamOn = localWebcamOnRef.current;
    if (localWebcamOn) {
      disableWebcam();
    } else {
      enableWebcam(customVideoTrack);
    }
  };
  var disableScreenShare = function disableScreenShare() {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.disableScreenShare();
    }
  };
  var enableScreenShare = function enableScreenShare(customScreenShareTrack) {
    if (customScreenShareTrack === void 0) {
      customScreenShareTrack = undefined;
    }
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.enableScreenShare(customScreenShareTrack);
    }
  };
  var toggleScreenShare = function toggleScreenShare(customScreenShareTrack) {
    if (customScreenShareTrack === void 0) {
      customScreenShareTrack = undefined;
    }
    var localScreenShareOn = localScreenShareOnRef.current;
    if (localScreenShareOn) {
      disableScreenShare();
    } else {
      enableScreenShare(customScreenShareTrack);
    }
  };
  var changeMode = function changeMode(mode) {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.changeMode(mode);
    }
  };
  var sendChatMessage = function sendChatMessage(text) {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.sendChatMessage(text);
    }
  };
  var respondEntry = function respondEntry(participantId, decision) {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.respondEntry(participantId, decision);
    }
  };
  var getMics = function getMics() {
    try {
      var _meeting = meetingRef.current;
      return Promise.resolve(function () {
        if (_meeting) {
          return Promise.resolve(_meeting.getMics());
        }
      }());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getWebcams = function getWebcams() {
    try {
      var _meeting2 = meetingRef.current;
      return Promise.resolve(function () {
        if (_meeting2) {
          return Promise.resolve(_meeting2.getWebcams());
        }
      }());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var changeWebcam = function changeWebcam(obj) {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.changeWebcam(obj);
    }
  };
  var replaceWebcamStream = function replaceWebcamStream(stream) {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.replaceWebcamStream(stream);
    }
  };
  var changeMic = function changeMic(obj) {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.changeMic(obj);
    }
  };
  var startVideo = function startVideo(_ref3) {
    var link = _ref3.link;
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.startVideo({
        link: link
      });
    }
  };
  var stopVideo = function stopVideo() {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.stopVideo();
    }
  };
  var resumeVideo = function resumeVideo() {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.resumeVideo();
    }
  };
  var pauseVideo = function pauseVideo(_ref4) {
    var currentTime = _ref4.currentTime;
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.pauseVideo({
        currentTime: currentTime
      });
    }
  };
  var seekVideo = function seekVideo(_ref5) {
    var currentTime = _ref5.currentTime;
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.seekVideo({
        currentTime: currentTime
      });
    }
  };
  var startLivestream = function startLivestream(streamInfo, config) {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.startLivestream(streamInfo, config);
    }
  };
  var stopLivestream = function stopLivestream() {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.stopLivestream();
    }
  };
  var connectTo = function connectTo(_ref6) {
    var meetingId = _ref6.meetingId,
      payload = _ref6.payload;
    try {
      var _meeting3 = meetingRef.current;
      var _temp = function () {
        if (_meeting3) {
          return Promise.resolve(_meeting3.connectTo({
            meetingId: meetingId,
            payload: payload
          })).then(function () {});
        }
      }();
      return Promise.resolve(_temp && _temp.then ? _temp.then(function () {}) : void 0);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var startHls = function startHls(config, transcription) {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.startHls(config, transcription);
    }
  };
  var stopHls = function stopHls() {
    var meeting = meetingRef.current;
    if (meeting) {
      meeting.stopHls();
    }
  };
  var initSDK = function initSDK() {
    VideoSDK.config(tokenRef.current);
    if (deviceInfo) {
      VideoSDK.analytics(deviceInfo);
    } else {
      VideoSDK.analytics({
        sdkType: 'react-web',
        sdkVersion: version
      });
    }
    if (joinWithoutUserInteraction) {
      join();
    }
  };
  useEffect(function () {
    initSDK();
  }, []);
  useEffect(function () {
    if (reinitialiseMeetingOnConfigChange && joinedOnFirstRender.current) {
      leave();
      initSDK();
      !joinWithoutUserInteraction && join();
    }
  }, [config.meetingId, token, reinitialiseMeetingOnConfigChange]);
  return /*#__PURE__*/React.createElement(MeetingProviderContex.Provider, {
    value: {
      meetingId: meeting === null || meeting === void 0 ? void 0 : meeting.id,
      meeting: meeting,
      baseUrl: meeting === null || meeting === void 0 ? void 0 : meeting.baseUrl,
      localParticipant: localParticipant,
      mainParticipant: mainParticipant,
      activeSpeakerId: activeSpeakerId,
      participants: participants,
      characters: characters,
      presenterId: presenterId,
      localMicOn: localMicOn,
      localWebcamOn: localWebcamOn,
      localScreenShareOn: localScreenShareOn,
      messages: messages,
      isRecording: isRecording,
      isLiveStreaming: isLiveStreaming,
      pinnedParticipants: pinnedParticipants,
      connections: connections,
      isHls: isHls,
      recordingState: recordingState,
      livestreamState: livestreamState,
      hlsState: hlsState,
      hlsUrls: hlsUrls,
      transcriptionState: transcriptionState,
      isMeetingJoined: isMeetingJoined,
      selectedCameraDevice: meeting === null || meeting === void 0 ? void 0 : meeting.selectedCameraDevice,
      selectedMicrophoneDevice: meeting === null || meeting === void 0 ? void 0 : meeting.selectedMicrophoneDevice,
      join: join,
      leave: leave,
      end: end,
      startRecording: startRecording,
      stopRecording: stopRecording,
      sendChatMessage: sendChatMessage,
      respondEntry: respondEntry,
      muteMic: muteMic,
      unmuteMic: unmuteMic,
      toggleMic: toggleMic,
      disableWebcam: disableWebcam,
      enableWebcam: enableWebcam,
      toggleWebcam: toggleWebcam,
      disableScreenShare: disableScreenShare,
      enableScreenShare: enableScreenShare,
      toggleScreenShare: toggleScreenShare,
      getMics: getMics,
      getWebcams: getWebcams,
      changeWebcam: changeWebcam,
      replaceWebcamStream: replaceWebcamStream,
      changeMic: changeMic,
      changeMode: changeMode,
      startVideo: startVideo,
      stopVideo: stopVideo,
      resumeVideo: resumeVideo,
      pauseVideo: pauseVideo,
      seekVideo: seekVideo,
      startLivestream: startLivestream,
      stopLivestream: stopLivestream,
      connectTo: connectTo,
      startHls: startHls,
      stopHls: stopHls
    }
  }, children);
};

var useParticipant = function useParticipant(participantId, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
    _ref$onStreamEnabled = _ref.onStreamEnabled,
    onStreamEnabled = _ref$onStreamEnabled === void 0 ? function () {} : _ref$onStreamEnabled,
    _ref$onStreamDisabled = _ref.onStreamDisabled,
    onStreamDisabled = _ref$onStreamDisabled === void 0 ? function () {} : _ref$onStreamDisabled,
    _ref$onMediaStatusCha = _ref.onMediaStatusChanged,
    onMediaStatusChanged = _ref$onMediaStatusCha === void 0 ? function () {} : _ref$onMediaStatusCha,
    _ref$onVideoQualityCh = _ref.onVideoQualityChanged,
    onVideoQualityChanged = _ref$onVideoQualityCh === void 0 ? function () {} : _ref$onVideoQualityCh;
  var _useState = useState(null),
    webcamStream = _useState[0],
    setwebcamStream = _useState[1];
  var _useState2 = useState(null),
    micStream = _useState2[0],
    setMicStream = _useState2[1];
  var _useState3 = useState(null),
    screenShareStream = _useState3[0],
    setScreenShareStream = _useState3[1];
  var _useState4 = useState(null),
    screenShareAudioStream = _useState4[0],
    setScreenShareAudioStream = _useState4[1];
  var meeting = useMeeting();
  var _useMemo = useMemo(function () {
      var _meeting$pinnedPartic;
      var participants = meeting === null || meeting === void 0 ? void 0 : meeting.participants;
      var localParticipant = meeting === null || meeting === void 0 ? void 0 : meeting.localParticipant;
      var activeSpeakerId = meeting === null || meeting === void 0 ? void 0 : meeting.activeSpeakerId;
      var mainParticipant = meeting === null || meeting === void 0 ? void 0 : meeting.mainParticipant;
      var pinState = (meeting === null || meeting === void 0 ? void 0 : (_meeting$pinnedPartic = meeting.pinnedParticipants) === null || _meeting$pinnedPartic === void 0 ? void 0 : _meeting$pinnedPartic.get(participantId)) || {
        cam: false,
        share: false
      };
      return {
        participants: participants,
        localParticipant: localParticipant,
        activeSpeakerId: activeSpeakerId,
        mainParticipant: mainParticipant,
        pinState: pinState
      };
    }, [meeting]),
    participants = _useMemo.participants,
    localParticipant = _useMemo.localParticipant,
    activeSpeakerId = _useMemo.activeSpeakerId,
    mainParticipant = _useMemo.mainParticipant,
    pinState = _useMemo.pinState;
  var participant = participants === null || participants === void 0 ? void 0 : participants.get(participantId);
  var _useState5 = useState(participant === null || participant === void 0 ? void 0 : participant.webcamOn),
    webcamOn = _useState5[0],
    setWebcamOn = _useState5[1];
  var _useState6 = useState(participant === null || participant === void 0 ? void 0 : participant.micOn),
    micOn = _useState6[0],
    setMicOn = _useState6[1];
  var _useState7 = useState(participant === null || participant === void 0 ? void 0 : participant.mode),
    mode = _useState7[0],
    setMode = _useState7[1];
  var setTrack = function setTrack(stream) {
    if (stream.track.readyState === 'live') {
      switch (stream.kind) {
        case 'video':
          if (webcamStream != null) {
            setwebcamStream(null);
          }
          setwebcamStream(stream);
          break;
        case 'audio':
          if (micStream != null) {
            setMicStream(null);
          }
          setMicStream(stream);
          break;
        case 'share':
          if (screenShareStream != null) {
            setScreenShareStream(null);
          }
          setScreenShareStream(stream);
          break;
        case 'shareAudio':
          if (screenShareAudioStream != null) {
            setScreenShareAudioStream(null);
          }
          setScreenShareAudioStream(stream);
          break;
      }
    }
  };
  var unSetTrack = function unSetTrack(stream) {
    switch (stream.kind) {
      case 'video':
        setwebcamStream(null);
        break;
      case 'audio':
        setMicStream(null);
        break;
      case 'share':
        setScreenShareStream(null);
        break;
      case 'shareAudio':
        setScreenShareAudioStream(null);
        break;
    }
  };
  var _handleStreamEnabled = function _handleStreamEnabled(stream) {
    setTrack(stream);
    onStreamEnabled(stream);
  };
  var _handleParticipantModeChanged = function _handleParticipantModeChanged(data) {
    if (participantId === data.participantId) {
      setMode(data.mode);
    }
  };
  var _handleStreamDisabled = function _handleStreamDisabled(stream) {
    unSetTrack(stream);
    onStreamDisabled(stream);
  };
  var _handleVideoQualityChanged = function _handleVideoQualityChanged(data) {
    var peerId = data.peerId,
      prevQuality = data.prevQuality,
      currentQuality = data.currentQuality;
    onVideoQualityChanged({
      peerId: peerId,
      prevQuality: prevQuality,
      currentQuality: currentQuality
    });
  };
  var _handleMediaStatusChanged = function _handleMediaStatusChanged(data) {
    var kind = data.kind,
      peerId = data.peerId,
      newStatus = data.newStatus;
    if (kind == 'audio') {
      setMicOn(newStatus);
    } else if (kind == 'video') {
      setWebcamOn(newStatus);
    }
    onMediaStatusChanged({
      kind: kind,
      peerId: peerId,
      newStatus: newStatus
    });
  };
  var setQuality = function setQuality(quality) {
    participant === null || participant === void 0 ? void 0 : participant.setQuality(quality);
  };
  var setViewPort = function setViewPort(width, height) {
    participant === null || participant === void 0 ? void 0 : participant.setViewPort(width, height);
  };
  var enableMic = function enableMic() {
    participant === null || participant === void 0 ? void 0 : participant.enableMic();
  };
  var disableMic = function disableMic() {
    participant === null || participant === void 0 ? void 0 : participant.disableMic();
  };
  var enableWebcam = function enableWebcam() {
    participant === null || participant === void 0 ? void 0 : participant.enableWebcam();
  };
  var disableWebcam = function disableWebcam() {
    participant === null || participant === void 0 ? void 0 : participant.disableWebcam();
  };
  var pin = function pin(data) {
    participant === null || participant === void 0 ? void 0 : participant.pin(data);
  };
  var unpin = function unpin(data) {
    participant === null || participant === void 0 ? void 0 : participant.unpin(data);
  };
  var remove = function remove() {
    participant === null || participant === void 0 ? void 0 : participant.remove();
  };
  var captureImage = function captureImage(_temp2) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2,
      height = _ref2.height,
      width = _ref2.width;
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.captureImage({
      height: height,
      width: width
    }));
  };
  var getAudioStats = function getAudioStats() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getAudioStats());
  };
  var getVideoStats = function getVideoStats() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getVideoStats());
  };
  var getShareStats = function getShareStats() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getShareStats());
  };
  var getShareAudioStats = function getShareAudioStats() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getShareAudioStats());
  };
  var consumeWebcamStreams = function consumeWebcamStreams() {
    participant === null || participant === void 0 ? void 0 : participant.consumeWebcamStreams();
  };
  var consumeMicStreams = function consumeMicStreams() {
    participant === null || participant === void 0 ? void 0 : participant.consumeMicStreams();
  };
  var stopConsumingWebcamStreams = function stopConsumingWebcamStreams() {
    participant === null || participant === void 0 ? void 0 : participant.stopConsumingWebcamStreams();
  };
  var stopConsumingMicStreams = function stopConsumingMicStreams() {
    participant === null || participant === void 0 ? void 0 : participant.stopConsumingMicStreams();
  };
  var switchTo = function switchTo(data) {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.switchTo(data)).then(function () {});
  };
  useEffect(function () {
    var streams = participant === null || participant === void 0 ? void 0 : participant.streams;
    if (streams) {
      streams.forEach(function (stream) {
        setTrack(stream);
      });
    }
    if (participant !== null && participant !== void 0 && participant.micOn) {
      setMicOn(micOn);
    }
    if (participant !== null && participant !== void 0 && participant.webcamOn) {
      setWebcamOn(webcamOn);
    }
    participant === null || participant === void 0 ? void 0 : participant.on('stream-enabled', _handleStreamEnabled);
    participant === null || participant === void 0 ? void 0 : participant.on('stream-disabled', _handleStreamDisabled);
    participant === null || participant === void 0 ? void 0 : participant.on('media-status-changed', _handleMediaStatusChanged);
    participant === null || participant === void 0 ? void 0 : participant.on('video-quality-changed', _handleVideoQualityChanged);
    eventEmitter.on(events['participant-mode-changed'], _handleParticipantModeChanged);
    return function () {
      participant === null || participant === void 0 ? void 0 : participant.off('stream-enabled', _handleStreamEnabled);
      participant === null || participant === void 0 ? void 0 : participant.off('stream-disabled', _handleStreamDisabled);
      participant === null || participant === void 0 ? void 0 : participant.off('media-status-changed', _handleMediaStatusChanged);
      participant === null || participant === void 0 ? void 0 : participant.off('video-quality-changed', _handleVideoQualityChanged);
      eventEmitter.off(events['participant-mode-changed'], _handleParticipantModeChanged);
    };
  }, [participant]);
  return {
    displayName: participant === null || participant === void 0 ? void 0 : participant.displayName,
    participant: participant,
    webcamStream: webcamStream,
    micStream: micStream,
    screenShareStream: screenShareStream,
    screenShareAudioStream: screenShareAudioStream,
    webcamOn: webcamOn || !!webcamStream,
    micOn: micOn || !!micStream,
    mode: mode,
    metaData: participant === null || participant === void 0 ? void 0 : participant.metaData,
    screenShareOn: !!screenShareStream,
    isLocal: (localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.id) === participantId,
    isActiveSpeaker: activeSpeakerId === participantId,
    isMainParticipant: (mainParticipant === null || mainParticipant === void 0 ? void 0 : mainParticipant.id) === participantId,
    pinState: pinState,
    consumeMicStreams: consumeMicStreams,
    consumeWebcamStreams: consumeWebcamStreams,
    stopConsumingMicStreams: stopConsumingMicStreams,
    stopConsumingWebcamStreams: stopConsumingWebcamStreams,
    setQuality: setQuality,
    setViewPort: setViewPort,
    enableMic: enableMic,
    disableMic: disableMic,
    enableWebcam: enableWebcam,
    disableWebcam: disableWebcam,
    captureImage: captureImage,
    pin: pin,
    unpin: unpin,
    remove: remove,
    switchTo: switchTo,
    getAudioStats: getAudioStats,
    getVideoStats: getVideoStats,
    getShareStats: getShareStats,
    getShareAudioStats: getShareAudioStats
  };
};

var useConnection = function useConnection(connectionId, _temp) {
  var _ref = _temp === void 0 ? {
      onMeeting: {
        onParticipantJoined: function onParticipantJoined() {},
        onParticipantLeft: function onParticipantLeft() {},
        onChatMessage: function onChatMessage() {}
      }
    } : _temp,
    onMeeting = _ref.onMeeting;
  var onParticipantJoined = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onParticipantJoined;
  var onParticipantLeft = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onParticipantLeft;
  var onChatMessage = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onChatMessage;
  var meeting = useMeeting();
  var _useMemo = useMemo(function () {
      var connection = meeting === null || meeting === void 0 ? void 0 : meeting.connections.get(connectionId);
      if (!connection) {
        throw new Error('connectionId not found');
      }
      var connectionParticipants = new Map(connection.meeting.participants);
      return {
        connection: connection,
        connectionParticipants: connectionParticipants
      };
    }, [meeting]),
    connection = _useMemo.connection,
    connectionParticipants = _useMemo.connectionParticipants;
  var _useState = useState(new Map(connectionParticipants)),
    _connectionParticipants = _useState[0],
    setConnectionParticipants = _useState[1];
  var _handleParticipantJoined = function _handleParticipantJoined(participant) {
    setConnectionParticipants(function (s) {
      s.set(participant.id, participant);
      var participantsToSet = new Map(s);
      return participantsToSet;
    });
    onParticipantJoined(participant);
  };
  var _handleParticipantLeft = function _handleParticipantLeft(participantId) {
    setConnectionParticipants(function (s) {
      s["delete"](participantId);
      var newParticipants = new Map(s);
      return newParticipants;
    });
    onParticipantLeft(participantId);
  };
  var _handleChatMessage = function _handleChatMessage(data) {
    onChatMessage(data);
  };
  useEffect(function () {
    connection === null || connection === void 0 ? void 0 : connection.meeting.on('participant-joined', _handleParticipantJoined);
    connection === null || connection === void 0 ? void 0 : connection.meeting.on('participant-left', _handleParticipantLeft);
    connection === null || connection === void 0 ? void 0 : connection.meeting.on('chat-message', _handleChatMessage);
    return function () {
      connection === null || connection === void 0 ? void 0 : connection.meeting.off('participant-joined', _handleParticipantJoined);
      connection === null || connection === void 0 ? void 0 : connection.meeting.off('participant-left', _handleParticipantLeft);
      connection === null || connection === void 0 ? void 0 : connection.meeting.off('chat-message', _handleChatMessage);
    };
  }, [connection]);
  return {
    connection: {
      id: connection.id,
      close: connection.close,
      payload: connection.payload,
      meeting: {
        id: connection.meeting.id,
        sendChatMessage: connection.meeting.sendChatMessage,
        end: connection.meeting.end,
        participants: _connectionParticipants
      }
    }
  };
};

var usePubSub = function usePubSub(topic, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
    _ref$onMessageReceive = _ref.onMessageReceived,
    onMessageReceived = _ref$onMessageReceive === void 0 ? function () {} : _ref$onMessageReceive,
    _ref$onOldMessagesRec = _ref.onOldMessagesReceived,
    onOldMessagesReceived = _ref$onOldMessagesRec === void 0 ? function () {} : _ref$onOldMessagesRec;
  var _useMeeting = useMeeting(),
    meeting = _useMeeting.meeting,
    isMeetingJoined = _useMeeting.isMeetingJoined;
  var _useState = useState([]),
    messages = _useState[0],
    setMessages = _useState[1];
  var isSubscribed = useRef(false);
  var publish = function publish(message, options, payload) {
    if (meeting) {
      meeting.pubSub.publish(topic, message, options, payload);
    }
  };
  var _handlePubSub = function _handlePubSub(data) {
    setMessages(function (s) {
      return [].concat(s, [data]);
    });
    onMessageReceived(data);
  };
  var subscribeToPubsub = function subscribeToPubsub(meeting) {
    try {
      var _meeting$pubSub;
      return Promise.resolve(meeting === null || meeting === void 0 ? void 0 : (_meeting$pubSub = meeting.pubSub) === null || _meeting$pubSub === void 0 ? void 0 : _meeting$pubSub.subscribe(topic, _handlePubSub)).then(function (data) {
        if (data) {
          onOldMessagesReceived(data.messages);
          setMessages(data.messages);
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };
  useEffect(function () {
    if (meeting && !isSubscribed.current && isMeetingJoined) {
      isSubscribed.current = true;
      subscribeToPubsub(meeting);
      return function () {
        var _meeting$pubSub2;
        meeting === null || meeting === void 0 ? void 0 : (_meeting$pubSub2 = meeting.pubSub) === null || _meeting$pubSub2 === void 0 ? void 0 : _meeting$pubSub2.unsubscribe(topic, _handlePubSub);
      };
    }
  }, [meeting, isMeetingJoined]);
  return {
    publish: publish,
    messages: messages
  };
};

var useFile = function useFile() {
  var mMeeting = useMeeting();
  var uploadBase64File = function uploadBase64File(_ref) {
    var base64Data = _ref.base64Data,
      token = _ref.token,
      fileName = _ref.fileName;
    try {
      return Promise.resolve(mMeeting.meeting.uploadBase64File({
        base64Data: base64Data,
        token: token,
        fileName: fileName
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var fetchBase64File = function fetchBase64File(_ref2) {
    var url = _ref2.url,
      token = _ref2.token;
    try {
      return Promise.resolve(mMeeting.meeting.fetchBase64File({
        url: url,
        token: token
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  return {
    uploadBase64File: uploadBase64File,
    fetchBase64File: fetchBase64File
  };
};

var useMediaDevice = function useMediaDevice(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
    _ref$onDeviceChanged = _ref.onDeviceChanged,
    onDeviceChanged = _ref$onDeviceChanged === void 0 ? function () {} : _ref$onDeviceChanged;
  var getDevices = function getDevices() {
    try {
      return Promise.resolve(VideoSDK.getDevices());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getCameras = function getCameras() {
    try {
      return Promise.resolve(VideoSDK.getCameras());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getMicrophones = function getMicrophones() {
    try {
      return Promise.resolve(VideoSDK.getMicrophones());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getPlaybackDevices = function getPlaybackDevices() {
    try {
      return Promise.resolve(VideoSDK.getPlaybackDevices());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var checkPermissions = function checkPermissions(permissions) {
    if (permissions === void 0) {
      permissions = undefined;
    }
    try {
      return Promise.resolve(VideoSDK.checkPermissions(permissions));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var requestPermission = function requestPermission(permissions) {
    if (permissions === void 0) {
      permissions = undefined;
    }
    try {
      return Promise.resolve(VideoSDK.requestPermission(permissions));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  useEffect(function () {
    VideoSDK.on('device-changed', onDeviceChanged);
    return function () {
      VideoSDK.off('device-changed', onDeviceChanged);
    };
  }, []);
  return {
    getDevices: getDevices,
    getCameras: getCameras,
    getMicrophones: getMicrophones,
    getPlaybackDevices: getPlaybackDevices,
    requestPermission: requestPermission,
    checkPermissions: checkPermissions
  };
};

var useTranscription = function useTranscription(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
    _ref$onTranscriptionS = _ref.onTranscriptionStateChanged,
    onTranscriptionStateChanged = _ref$onTranscriptionS === void 0 ? function () {} : _ref$onTranscriptionS,
    _ref$onTranscriptionT = _ref.onTranscriptionText,
    onTranscriptionText = _ref$onTranscriptionT === void 0 ? function () {} : _ref$onTranscriptionT;
  var mMeeting = useMeeting();
  useEffect(function () {
    eventEmitter.on(events['transcription-state-changed'], onTranscriptionStateChanged);
    eventEmitter.on(events['transcription-text'], onTranscriptionText);
    return function () {
      eventEmitter.off(events['transcription-state-changed'], onTranscriptionStateChanged);
      eventEmitter.off(events['transcription-text'], onTranscriptionText);
    };
  }, []);
  var startTranscription = function startTranscription(config) {
    try {
      return Promise.resolve(mMeeting.meeting.startTranscription(config));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var stopTranscription = function stopTranscription() {
    try {
      return Promise.resolve(mMeeting.meeting.stopTranscription());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  return {
    startTranscription: startTranscription,
    stopTranscription: stopTranscription
  };
};

var useCharacter = function useCharacter(_ref, _temp) {
  var interactionId = _ref.interactionId,
    id = _ref.id,
    characterMode = _ref.characterMode,
    displayName = _ref.displayName,
    characterRole = _ref.characterRole,
    knowledgeBases = _ref.knowledgeBases;
  var _ref2 = _temp === void 0 ? {} : _temp,
    _ref2$onCharacterStat = _ref2.onCharacterStateChanged,
    onCharacterStateChanged = _ref2$onCharacterStat === void 0 ? function () {} : _ref2$onCharacterStat,
    _ref2$onCharacterMess = _ref2.onCharacterMessage,
    onCharacterMessage = _ref2$onCharacterMess === void 0 ? function () {} : _ref2$onCharacterMess,
    _ref2$onCharacterJoin = _ref2.onCharacterJoined,
    onCharacterJoined = _ref2$onCharacterJoin === void 0 ? function () {} : _ref2$onCharacterJoin,
    _ref2$onCharacterLeft = _ref2.onCharacterLeft,
    onCharacterLeft = _ref2$onCharacterLeft === void 0 ? function () {} : _ref2$onCharacterLeft,
    _ref2$onStreamEnabled = _ref2.onStreamEnabled,
    onStreamEnabled = _ref2$onStreamEnabled === void 0 ? function () {} : _ref2$onStreamEnabled,
    _ref2$onStreamDisable = _ref2.onStreamDisabled,
    onStreamDisabled = _ref2$onStreamDisable === void 0 ? function () {} : _ref2$onStreamDisable,
    _ref2$onMediaStatusCh = _ref2.onMediaStatusChanged,
    onMediaStatusChanged = _ref2$onMediaStatusCh === void 0 ? function () {} : _ref2$onMediaStatusCh,
    _ref2$onVideoQualityC = _ref2.onVideoQualityChanged,
    onVideoQualityChanged = _ref2$onVideoQualityC === void 0 ? function () {} : _ref2$onVideoQualityC;
  var _useState = useState(null),
    webcamStream = _useState[0],
    setwebcamStream = _useState[1];
  var _useState2 = useState(null),
    micStream = _useState2[0],
    setMicStream = _useState2[1];
  var mMeeting = useMeeting();
  var _useMemo = useMemo(function () {
      var chars = Array.from(mMeeting.characters.values());
      var activeSpeakerId = mMeeting === null || mMeeting === void 0 ? void 0 : mMeeting.activeSpeakerId;
      return {
        character: chars.find(function (chars) {
          return chars.interactionId == interactionId;
        }) || mMeeting.characters.get(id) || mMeeting.meeting.createCharacter({
          interactionId: interactionId,
          displayName: displayName,
          id: id,
          characterRole: characterRole,
          characterMode: characterMode,
          knowledgeBases: knowledgeBases
        }),
        activeSpeakerId: activeSpeakerId
      };
    }, [mMeeting.characters]),
    character = _useMemo.character,
    activeSpeakerId = _useMemo.activeSpeakerId;
  var _useState3 = useState(character === null || character === void 0 ? void 0 : character.webcamOn),
    webcamOn = _useState3[0],
    setWebcamOn = _useState3[1];
  var _useState4 = useState(character === null || character === void 0 ? void 0 : character.micOn),
    micOn = _useState4[0],
    setMicOn = _useState4[1];
  var _useState5 = useState(null),
    characterState = _useState5[0],
    setCharacterState = _useState5[1];
  var setTrack = function setTrack(stream) {
    if (stream.track.readyState === 'live') {
      switch (stream.kind) {
        case 'video':
          if (webcamStream != null) {
            setwebcamStream(null);
          }
          setwebcamStream(stream);
          break;
        case 'audio':
          if (micStream != null) {
            setMicStream(null);
          }
          setMicStream(stream);
          break;
      }
    }
  };
  var unSetTrack = function unSetTrack(stream) {
    switch (stream.kind) {
      case 'video':
        setwebcamStream(null);
        break;
      case 'audio':
        setMicStream(null);
        break;
    }
  };
  var _handleCharacterStateChanged = function _handleCharacterStateChanged(d) {
    var status = d.status;
    setCharacterState(status);
    onCharacterStateChanged(d);
  };
  var _handleCharacterMessage = function _handleCharacterMessage(d) {
    onCharacterMessage(d);
  };
  var _handleCharacterJoined = function _handleCharacterJoined() {
    onCharacterJoined();
  };
  var _handleCharacterLeft = function _handleCharacterLeft() {
    onCharacterLeft();
  };
  var _handleStreamEnabled = function _handleStreamEnabled(stream) {
    setTrack(stream);
    onStreamEnabled(stream);
  };
  var _handleStreamDisabled = function _handleStreamDisabled(stream) {
    unSetTrack(stream);
    onStreamDisabled(stream);
  };
  var _handleVideoQualityChanged = function _handleVideoQualityChanged(data) {
    var peerId = data.peerId,
      prevQuality = data.prevQuality,
      currentQuality = data.currentQuality;
    onVideoQualityChanged({
      peerId: peerId,
      prevQuality: prevQuality,
      currentQuality: currentQuality
    });
  };
  var _handleMediaStatusChanged = function _handleMediaStatusChanged(data) {
    var kind = data.kind,
      peerId = data.peerId,
      newStatus = data.newStatus;
    if (kind == 'audio') {
      setMicOn(newStatus);
    } else if (kind == 'video') {
      setWebcamOn(newStatus);
    }
    onMediaStatusChanged({
      kind: kind,
      peerId: peerId,
      newStatus: newStatus
    });
  };
  var enableMic = function enableMic() {
    character === null || character === void 0 ? void 0 : character.enableMic();
  };
  var disableMic = function disableMic() {
    character === null || character === void 0 ? void 0 : character.disableMic();
  };
  var enableWebcam = function enableWebcam() {
    character === null || character === void 0 ? void 0 : character.enableWebcam();
  };
  var disableWebcam = function disableWebcam() {
    character === null || character === void 0 ? void 0 : character.disableWebcam();
  };
  var join = function join() {
    return Promise.resolve(character === null || character === void 0 ? void 0 : character.join()).then(function () {});
  };
  var sendMessage = function sendMessage(d) {
    return Promise.resolve(character === null || character === void 0 ? void 0 : character.sendMessage(d)).then(function () {});
  };
  var interrupt = function interrupt() {
    return Promise.resolve(character === null || character === void 0 ? void 0 : character.interrupt()).then(function () {});
  };
  var leave = function leave() {
    return Promise.resolve(character === null || character === void 0 ? void 0 : character.leave()).then(function () {});
  };
  useEffect(function () {
    var streams = character === null || character === void 0 ? void 0 : character.streams;
    if (streams) {
      streams.forEach(function (stream) {
        setTrack(stream);
      });
    }
    if (character !== null && character !== void 0 && character.micOn) {
      setMicOn(micOn);
    }
    if (character !== null && character !== void 0 && character.webcamOn) {
      setWebcamOn(webcamOn);
    }
    character === null || character === void 0 ? void 0 : character.on('character-state-changed', _handleCharacterStateChanged);
    character === null || character === void 0 ? void 0 : character.on('character-message', _handleCharacterMessage);
    character === null || character === void 0 ? void 0 : character.on('stream-enabled', _handleStreamEnabled);
    character === null || character === void 0 ? void 0 : character.on('stream-disabled', _handleStreamDisabled);
    character === null || character === void 0 ? void 0 : character.on('media-status-changed', _handleMediaStatusChanged);
    character === null || character === void 0 ? void 0 : character.on('video-quality-changed', _handleVideoQualityChanged);
    character === null || character === void 0 ? void 0 : character.on('character-joined', _handleCharacterJoined);
    character === null || character === void 0 ? void 0 : character.on('character-left', _handleCharacterLeft);
    return function () {
      character === null || character === void 0 ? void 0 : character.off('character-state-changed', _handleCharacterStateChanged);
      character === null || character === void 0 ? void 0 : character.off('character-message', _handleCharacterMessage);
      character === null || character === void 0 ? void 0 : character.off('stream-enabled', _handleStreamEnabled);
      character === null || character === void 0 ? void 0 : character.off('stream-disabled', _handleStreamDisabled);
      character === null || character === void 0 ? void 0 : character.off('media-status-changed', _handleMediaStatusChanged);
      character === null || character === void 0 ? void 0 : character.off('video-quality-changed', _handleVideoQualityChanged);
      character === null || character === void 0 ? void 0 : character.off('character-joined', _handleCharacterJoined);
      character === null || character === void 0 ? void 0 : character.off('character-left', _handleCharacterLeft);
    };
  }, [character]);
  return {
    displayName: character === null || character === void 0 ? void 0 : character.displayName,
    webcamStream: webcamStream,
    micStream: micStream,
    webcamOn: webcamOn || !!webcamStream,
    micOn: micOn || !!micStream,
    isActiveSpeaker: activeSpeakerId === id,
    interactionId: character === null || character === void 0 ? void 0 : character.interactionId,
    id: character === null || character === void 0 ? void 0 : character.id,
    characterMode: character === null || character === void 0 ? void 0 : character.characterMode,
    characterState: characterState || (character === null || character === void 0 ? void 0 : character.characterState),
    knowledgeBases: character === null || character === void 0 ? void 0 : character.knowledgeBases,
    enableMic: enableMic,
    disableMic: disableMic,
    enableWebcam: enableWebcam,
    disableWebcam: disableWebcam,
    join: join,
    leave: leave,
    sendMessage: sendMessage,
    interrupt: interrupt
  };
};

var Constants = VideoSDK.Constants;
var createCameraVideoTrack = function createCameraVideoTrack(_ref) {
  var _ref$cameraId = _ref.cameraId,
    cameraId = _ref$cameraId === void 0 ? undefined : _ref$cameraId,
    _ref$encoderConfig = _ref.encoderConfig,
    encoderConfig = _ref$encoderConfig === void 0 ? undefined : _ref$encoderConfig,
    _ref$facingMode = _ref.facingMode,
    facingMode = _ref$facingMode === void 0 ? undefined : _ref$facingMode,
    _ref$optimizationMode = _ref.optimizationMode,
    optimizationMode = _ref$optimizationMode === void 0 ? undefined : _ref$optimizationMode,
    _ref$multiStream = _ref.multiStream,
    multiStream = _ref$multiStream === void 0 ? true : _ref$multiStream;
  try {
    return Promise.resolve(VideoSDK.createCameraVideoTrack({
      cameraId: cameraId,
      encoderConfig: encoderConfig,
      facingMode: facingMode,
      optimizationMode: optimizationMode,
      multiStream: multiStream
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var createScreenShareVideoTrack = function createScreenShareVideoTrack(_ref2) {
  var _ref2$encoderConfig = _ref2.encoderConfig,
    encoderConfig = _ref2$encoderConfig === void 0 ? undefined : _ref2$encoderConfig,
    _ref2$optimizationMod = _ref2.optimizationMode,
    optimizationMode = _ref2$optimizationMod === void 0 ? undefined : _ref2$optimizationMod,
    _ref2$withAudio = _ref2.withAudio,
    withAudio = _ref2$withAudio === void 0 ? 'enable' : _ref2$withAudio;
  try {
    return Promise.resolve(VideoSDK.createScreenShareVideoTrack({
      encoderConfig: encoderConfig,
      optimizationMode: optimizationMode,
      withAudio: withAudio
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var createMicrophoneAudioTrack = function createMicrophoneAudioTrack(_ref3) {
  var _ref3$noiseConfig = _ref3.noiseConfig,
    noiseConfig = _ref3$noiseConfig === void 0 ? undefined : _ref3$noiseConfig,
    _ref3$encoderConfig = _ref3.encoderConfig,
    encoderConfig = _ref3$encoderConfig === void 0 ? undefined : _ref3$encoderConfig,
    _ref3$microphoneId = _ref3.microphoneId,
    microphoneId = _ref3$microphoneId === void 0 ? undefined : _ref3$microphoneId;
  try {
    return Promise.resolve(VideoSDK.createMicrophoneAudioTrack({
      noiseConfig: noiseConfig,
      encoderConfig: encoderConfig,
      microphoneId: microphoneId
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var getNetworkStats = function getNetworkStats(_temp) {
  var _ref4 = _temp === void 0 ? {} : _temp,
    timeoutDuration = _ref4.timeoutDuration;
  try {
    return Promise.resolve(VideoSDK.getNetworkStats({
      timeoutDuration: timeoutDuration
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};

export { Constants, MeetingConsumer, MeetingProvider, createCameraVideoTrack, createMicrophoneAudioTrack, createScreenShareVideoTrack, getNetworkStats, useCharacter, useConnection, useFile, useMediaDevice, useMeeting, useParticipant, usePubSub, useTranscription };
//# sourceMappingURL=index.modern.js.map
